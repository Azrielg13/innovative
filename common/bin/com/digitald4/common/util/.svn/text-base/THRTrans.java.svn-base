/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.TreeSet;

import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.model.Bank;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.User;
import com.sce.esp.object.model.Xfmr;
import com.sce.esp.util.db.PDBConnection;

public class THRTrans extends THRObject implements Comparable{
	public static final String PATH_LOC="./data/THR Transformer Data.dat";
	private static Hashtable<String,THRTrans> transs;
	private String bankCode;
	private String transCode;
	private int phaseType;
	private String mfrName;
	private String serialNum;
	private String noofUnitsCode;
	private String oaDesc;
	private String faFirstStageDesc;
	private String faSecStageDesc;
	public static THRTrans getInstance(String code) throws IOException{
		if(code == null)
			return null;
		if(transs == null)
			refreshTranss();
		return transs.get(code);
	}
	public static boolean isDataRead(){
		return transs != null;
	}
	public static void refreshTranss() throws IOException {
		if(transs == null)
			transs = new Hashtable<String,THRTrans>();
		else
			transs.clear();
		BufferedReader br = new BufferedReader(new FileReader(PATH_LOC));
		br.readLine(); //Ignore Header row
		String line = br.readLine();
		while(line != null){
			while(!line.endsWith("END"))
				line += br.readLine();
			THRTrans thrTrans = new THRTrans(line);
			transs.put(thrTrans.getCode(), thrTrans);
			THRSub thrSub = THRSub.getInstance(thrTrans.getSubCode());
			if(thrSub != null)
				thrSub.addTrans(thrTrans);
			line = br.readLine();
		}
		br.close();
	}
	
	public THRTrans(String data){
		refresh(data);
	}
	
	public void refresh(String data){
		System.out.println(data.replace("\t", "|"));
		data = data.replaceAll("\t\t","\t0\t").replaceAll("\t\t","\t0\t");
		System.out.println(data.replace("\t", "|"));
		StringTokenizer st = new StringTokenizer(data,"\t");
		subCode = st.nextToken();
		bankCode = st.nextToken();
		transCode = st.nextToken();
		phaseType = Integer.parseInt(st.nextToken());
		dwgDesc = st.nextToken();
		scaDesc = st.nextToken();		
		highVoltage = Double.parseDouble(st.nextToken());
		lowVoltage = Double.parseDouble(st.nextToken());
		mvaFactor = Double.parseDouble(st.nextToken());
		percent = Double.parseDouble(st.nextToken());
		mfrName = st.nextToken();
		serialNum = st.nextToken();
		noofUnitsCode = st.nextToken();
		oaDesc = st.nextToken();
		faFirstStageDesc = st.nextToken();
		faSecStageDesc = st.nextToken();
		normalMVA  = Double.parseDouble(st.nextToken());
		normalAmps  = Integer.parseInt(st.nextToken());
		mismatchMVA = Double.parseDouble(st.nextToken());
		mismatchAmps  = Integer.parseInt(st.nextToken());
		pllMVA = Double.parseDouble(st.nextToken());
		pllAmps = Integer.parseInt(st.nextToken());
		pllPct = Double.parseDouble(st.nextToken());
		ltEllMVA = Double.parseDouble(st.nextToken());
		ltEllAMPS = Integer.parseInt(st.nextToken());
		ltEllHrs = Double.parseDouble(st.nextToken());
		ltEllPct = Double.parseDouble(st.nextToken());
		stEllMVA = Double.parseDouble(st.nextToken());
		stEllAMPS = Integer.parseInt(st.nextToken());
		stEllHrs = Double.parseDouble(st.nextToken());
		stEllPct = Double.parseDouble(st.nextToken());
		limitingElemDesc = st.nextToken();
		/*tcaDate = st.nextToken();
		remarks = st.nextToken();
		userId = st.nextToken();
		configCode = st.nextToken();*/
	}
	public String getBankCode(){
		return bankCode;
	}
	public String getTransCode(){
		return transCode;
	}
	public String getCode(){
		return getSubCode()+"-"+getBankCode()+"-"+getTransCode();
	}
	public int compareTo(Object o) {
		return getCode().compareTo(((THRTrans)o).getCode());
	}
	public static void main(String[] args){
		try {
			int planyear=2009;
			int g=0, sf=0, af=0, cf=0;
			String db = ESPProperties.getInstance().getDevDbUrl();
			String u = "mayfiee";
			String p = "edison";
			EntityManagerHelper.init(db,u,p);
			for(Sub sub:Department.getInstance(planyear).getSubs()){
				double tNp=0;
				for(Bank bank:sub.getBanks()){
					if(bank.isLseBank())
						for(Xfmr xfmr:bank.getXfmrs())
							tNp += xfmr.getNP();
				}
				if(tNp == 0){
					THRSub thrSub = THRSub.getInstance(sub.getSubCode());
					if(thrSub != null){
						TreeSet<THRTrans> transs = thrSub.getTHRTranss();
						if(transs.size() > 0){
							System.out.println(sub+" can be fixed by the following THR Transformers:");
							for(THRTrans trans:transs){
								System.out.println(trans);
								Bank bank = null;
								Xfmr xfmr = null;
								for(Bank b:sub.getBanks()){
									if(b.getBankNum().equals(trans.getBankCode())){
										bank = b;
										for(Xfmr x:b.getXfmrs())
											if(x.getXfmrNum().equals(trans.getTransCode()))
												xfmr = x;
									}
								}
								if(xfmr != null){
									sf++;
									System.out.println("Fixes: "+xfmr);
								}
								else{
									af++;
									if(bank == null){
										System.out.println("Must create bank");
										bank = new Bank(sub.getPlanyear());
										bank.setBankNum(trans.getBankCode());
										//sub.addBank(bank);
									}
									System.out.println("Must create transformer");
									xfmr = new Xfmr(sub.getPlanyear());
									xfmr.setXfmrNum(trans.getTransCode());
									//bank.addXfmr(xfmr);
								}
								//xfmr.setNameplate(trans.getNormalMVA());
							}
						}
					}
					else{
						System.out.println(sub+" no MDI bank data nor THR bank data");
						cf++;
					}
				}
				else
					g++;
			}
			System.out.println("Good: "+g+"\tSet Fix: "+sf+"\tAdd Fix: "+af+"\tCan't Fix: "+cf+"\tTotal: "+Department.getInstance(planyear).getSubs().size());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
