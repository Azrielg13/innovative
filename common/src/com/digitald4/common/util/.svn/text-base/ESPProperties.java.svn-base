/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util;

import java.io.IOException;
import java.util.Properties;

import javax.swing.JFrame;

import com.sce.esp.dialog.SkateOrDieDialog;
import com.sce.esp.dialog.UATDialog;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.model.User;
import com.sce.esp.security.UserRole;

public class ESPProperties extends Properties {
	private static final long serialVersionUID = 1L;
	private static ESPProperties _mdip;	
	public final static int LOCAL_DEV=1;
	public final static int WEB_START=2;
	public final static int WEB_APP=3;
	public final static int UAT=4;

	private int runningInstance=0;
	private String appInstance=null;

	public ESPProperties(){
		readFile();
	}
	public static ESPProperties getInstance(){
		if(_mdip == null)
			_mdip = new ESPProperties();
		return _mdip;
	}	
	private void readFile(){
		try {
			load(getClass().getResourceAsStream("/conf/esp.properties"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public String getDriverUrl(){
		return getProperty("db.driver");   	
	}
	public String getDevDbUrl(){
		return getProperty("db.dev");   	
	}
	public String getLocalDbUrl(){
		return getProperty("db.local");
	}
	public String getGusDbUrl(){
		return getProperty("db.gus");
	}
	public String getRogDbUrl(){
		return getProperty("db.roger");
	}
	public String getStagDbUrl(){
		return getProperty("db.stag");   	
	}
	public String getUtDbUrl(){
		return getProperty("db.ut");   	
	}	
	public String get11gDbUrl(){
		return getProperty("db.ut11g");   	
	}
	public String getStDbUrl(){
		return getProperty("db.st");   	
	}
	public String getSt11gDbUrl() {
		return getProperty("db.st11g");
	}
	public String getProdDbUrl(){
		return getProperty("db.prod");   	
	}
	public String getMapDbUrl(){
		return getProperty("db.map");
	}
	public String getBaseUrl(){
		return getProperty("base.url");   	
	}
	public String getBaseTestUrl(){
		return getProperty("test.url");   	
	}
	public String getSTLFileLoc(){
		return getProperty("stl.file.loc");   	
	}
	public String getBuildTime(){
		String buildTime = getProperty("buildtime");
		if(buildTime == null)
			buildTime = "Local Development";
		return buildTime;
	}
	public String getBuildStamp(){
		String buildTime = getProperty("buildstamp");
		if(buildTime == null)
			buildTime = "local dev";
		return buildTime;
	}
	public int getRunningInstance(){
		return runningInstance;
	}
	public void setRunningInstance(int runningInstance){
		this.runningInstance = runningInstance;
	}
	
	public User deployUAT() throws Exception{
		return UATDialog.getUserFromThisCustomDialog(System.getProperty("user.name").toLowerCase());
	}

	/**
	 * 
	 * Makes PDBConnection and returns the user
	 * @return String userName null if error
	 */
	public User deployLocal(){
		
		String usr = System.getProperty("user.name").toLowerCase();
		String pass="edison";

		if(usr.equals("mayfiee") || usr.equals("eddiem") || usr.equals("leebr")){
			usr = "mayfiee";
			pass = "mayfiez";
		}else if(usr.equals("gonzalf1")){
			pass = "oracle";		
		}else if(usr.equals("munizas"))
			pass = "munizaz";
		else if(usr.equals("mcnauga"))
			pass = "synch913";
		else if(usr.equals("garcia18")){
			pass = "Camaro69";
		}else if(usr.equals("suwannn")){
			pass = "edison1";			
		}else if(usr.equals("stonerbj")) {
			usr = "stonerbj";
			pass = "rimshot6";
		}else if(usr.equals("leebr")) {
			usr = "stonerbj";
			pass = "edison";			
		}else if(usr.equals("yinyh")){
			pass = "edison9";			
		}else if(usr.equals("ridgepj")){
			pass = "math90";
		}

		String[] servers = {
				getProdDbUrl(),
				getStDbUrl(),
				getUtDbUrl(),
				getSt11gDbUrl(),
				getDevDbUrl(),
				getLocalDbUrl(),
				getRogDbUrl()
		};
		
		try {
			JFrame frame = new JFrame();
			frame.setIconImage(IconsFactory.getImageIcon("icons/lightning.png").getImage());
			SkateOrDieDialog dialog = new SkateOrDieDialog(frame, true, pass, usr, false);
		
			int n = dialog.getOption();
			if(n==-1)
				return null;
			
			UserRole ur = new UserRole();
		
			if(dialog.getRoleId() == 2)
				ur.setProperty("MDI_R_INQUIRY", "granted");
			else if(dialog.getRoleId() == 1)
				ur.setProperty("MDI_R_USER", "granted");
			else if(dialog.getRoleId() == 3)
				ur.setProperty("MDI_R_MGR", "granted");
			else
				ur.setProperty("MDI_R_ADMIN", "granted");
			EntityManagerHelper.init(servers[n], usr, (n > 3?"edison":pass));
			User.setActiveUser(usr);
			if(!usr.equals("gonzalf1"))
			User.getActiveUser().setSessionOrgId(dialog.getOrgId());
			User.getActiveUser().setSessionUserRole(ur);
		}catch(Exception e){
			e.printStackTrace();
		}
		if(getRunningInstance() == LOCAL_DEV){
			System.out.println("Launching Interface...");
		}
		
		return User.getActiveUser();
	}
	
	public void setAppInstance(String app) {
		appInstance=app;		
	}
	
	public String getAppInstance() {
		return appInstance;		
	}
}