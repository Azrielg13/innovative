package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CprPrimeAcct;
import com.sce.esp.object.model.CprSub;
import com.sce.esp.object.model.CprSubAcct;
import com.sce.esp.object.model.PartType;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CprSubAcctDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,NAME,DESCRIPTION,CPR_PRIME_ACCT_ID};
	public final static int ID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 128;
	public final static int CPRPRIMEACCTID_LIMIT = 9;
	private int id;
	private String name;
	private String description;
	private int cprPrimeAcctId;
	private Collection<CprSub> cprSubs;
	private Collection<PartType> partTypes;
	private CprPrimeAcct cprPrimeAcct;
	public static CprSubAcct getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static CprSubAcct getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		CprSubAcct o = null;
		if(cache != null && cache.contains(CprSubAcct.class, pk))
			o = em.find(CprSubAcct.class, pk);
		if(o==null && getAICache().contains(CprSubAcct.class, pk))
			o = getAICache().find(CprSubAcct.class, pk);
		if(o==null && fetch)
			o = em.find(CprSubAcct.class, pk);
		if(o==null && fetch && CprSubAcct.class.getAnnotation(AutoInsertable.class) != null){
			o = new CprSubAcct(id);
			getAICache().cache(CprSubAcct.class, o);
		}
		return o;
	}
	public static Collection<CprSubAcct> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CprSubAcct> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CprSubAcct> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CprSubAcct o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CprSubAcct> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CprSubAcct> tq = em.createQuery(jpql,CprSubAcct.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CprSubAcct> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CprSubAcct> tq = em.createNamedQuery(name,CprSubAcct.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CprSubAcctDAO(){}
	public CprSubAcctDAO(int id){
		this.id=id;
	}
	public CprSubAcctDAO(CprSubAcctDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CprSubAcctDAO orig){
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.cprPrimeAcctId=orig.getCprPrimeAcctId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDISC6_SEQ",sequenceName="MDISC6_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=false,length=128)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="CPR_PRIME_ACCT_ID",nullable=false,length=9)
	public int getCprPrimeAcctId(){
		return cprPrimeAcctId;
	}
	public void setCprPrimeAcctId(int cprPrimeAcctId) throws java.sql.SQLException{
		if(isSame(cprPrimeAcctId, getCprPrimeAcctId()))return;
		int oldValue = getCprPrimeAcctId();
		this.cprPrimeAcctId=cprPrimeAcctId;
		setProperty("CPR_PRIME_ACCT_ID", cprPrimeAcctId, oldValue);
		cprPrimeAcct=null;
	}
	public CprPrimeAcct getCprPrimeAcct()throws java.sql.SQLException{
		if(cprPrimeAcct==null)
			cprPrimeAcct=CprPrimeAcct.getInstance(getCprPrimeAcctId());
		return cprPrimeAcct;
	}
	public void setCprPrimeAcct(CprPrimeAcct cprPrimeAcct)throws java.sql.SQLException{
		setCprPrimeAcctId(cprPrimeAcct==null?0:cprPrimeAcct.getId());
		this.cprPrimeAcct=cprPrimeAcct;
	}
	public Collection<CprSub> getCprSubs()throws java.sql.SQLException{
		if(isNewInstance() || cprSubs != null){
			if(cprSubs == null)
				cprSubs = new TreeSet<CprSub>();
			return cprSubs;
		}
		return CprSub.getNamedCollection("findByCprSubAcct",getId());
	}
	public void addCprSub(CprSub cprSub)throws java.sql.SQLException{
		cprSub.setCprSubAcct((CprSubAcct)this);
		if(isNewInstance() || cprSubs != null)
			getCprSubs().add(cprSub);
		else
			cprSub.insert();
	}
	public void removeCprSub(CprSub cprSub)throws java.sql.SQLException{
		if(isNewInstance() || cprSubs != null)
			getCprSubs().remove(cprSub);
		else
			cprSub.delete();
	}
	public Collection<PartType> getPartTypes()throws java.sql.SQLException{
		if(isNewInstance() || partTypes != null){
			if(partTypes == null)
				partTypes = new TreeSet<PartType>();
			return partTypes;
		}
		return PartType.getNamedCollection("findByCprSubAcct",getId());
	}
	public void addPartType(PartType partType)throws java.sql.SQLException{
		partType.setCprSubAcct((CprSubAcct)this);
		if(isNewInstance() || partTypes != null)
			getPartTypes().add(partType);
		else
			partType.insert();
	}
	public void removePartType(PartType partType)throws java.sql.SQLException{
		if(isNewInstance() || partTypes != null)
			getPartTypes().remove(partType);
		else
			partType.delete();
	}
	public CprSubAcct copy()throws java.sql.SQLException{
		CprSubAcct cp = new CprSubAcct((CprSubAcct)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CprSubAcctDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(CprSub child:getCprSubs())
			cp.addCprSub(child.copy());
		for(PartType child:getPartTypes())
			cp.addPartType(child.copy());
	}
	public Vector<String> getDifference(CprSubAcctDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getCprPrimeAcctId(),o.getCprPrimeAcctId())) diffs.add("CPR_PRIME_ACCT_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(cprPrimeAcct != null && cprPrimeAcct.isNewInstance())
				cprPrimeAcct.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(cprSubs != null){
			for(CprSub cprSub:getCprSubs())
				cprSub.setCprSubAcct((CprSubAcct)this);
		}
		if(partTypes != null){
			for(PartType partType:getPartTypes())
				partType.setCprSubAcct((CprSubAcct)this);
		}
		if(cprSubs != null){
			for(CprSub cprSub:getCprSubs())
				if(cprSub.isNewInstance())
					cprSub.insert();
			cprSubs = null;
		}
		if(partTypes != null){
			for(PartType partType:getPartTypes())
				if(partType.isNewInstance())
					partType.insert();
			partTypes = null;
		}
	}
}
