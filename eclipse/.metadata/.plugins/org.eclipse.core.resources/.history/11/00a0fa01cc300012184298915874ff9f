package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AgObject;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.Region;
import com.sce.esp.object.model.Zone;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ZoneDAO extends AgObject{
	public static enum KEY_PROPERTY{PLANYEAR,ZONE_ID};
	public static enum PROPERTY{PLANYEAR,ZONE_ID,ZONE_NAME,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int ZONEID_LIMIT = 9;
	public final static int ZONENAME_LIMIT = 20;
	private int planyear;
	private int zoneId;
	private String zoneName;
	private Collection<Region> regions;
	private Department department;
	public static Zone getInstance(int planyear, int zoneId)throws java.sql.SQLException{
		return getInstance(planyear, zoneId, true);
	}
	public static Zone getInstance(int planyear, int zoneId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, zoneId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, zoneId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Zone o = null;
		if(cache != null && cache.contains(Zone.class, pk))
			o = em.find(Zone.class, pk);
		if(o==null && getAICache().contains(Zone.class, pk))
			o = getAICache().find(Zone.class, pk);
		if(o==null && fetch)
			o = em.find(Zone.class, pk);
		if(o==null && fetch && Zone.class.getAnnotation(AutoInsertable.class) != null){
			o = new Zone(planyear, zoneId);
			getAICache().cache(Zone.class, o);
		}
		return o;
	}
	public static Collection<Zone> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Zone> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Zone> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Zone o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Zone> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Zone> tq = em.createQuery(jpql,Zone.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Zone> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Zone> tq = em.createNamedQuery(name,Zone.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ZoneDAO(){}
	public ZoneDAO(int planyear, int zoneId){
		this.planyear=planyear;
		this.zoneId=zoneId;
	}
	public ZoneDAO(ZoneDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(ZoneDAO orig){
		this.zoneName=orig.getZoneName();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, zoneId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI030_SEQ",sequenceName="MDI030_SEQ")
	@Column(name="ZONE_ID",nullable=false,length=9)
	public int getZoneId(){
		return zoneId;
	}
	public void setZoneId(int zoneId) throws java.sql.SQLException{
		if(isSame(zoneId, getZoneId()))return;
		int oldValue = getZoneId();
		this.zoneId=zoneId;
		setProperty("ZONE_ID", zoneId, oldValue);
	}
	@Column(name="ZONE_NAME",nullable=false,length=20)
	public String getZoneName(){
		return zoneName;
	}
	public void setZoneName(String zoneName) throws java.sql.SQLException{
		if(isSame(zoneName, getZoneName()))return;
		String oldValue = getZoneName();
		this.zoneName=zoneName;
		setProperty("ZONE_NAME", zoneName, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public Collection<Region> getRegions()throws java.sql.SQLException{
		if(isNewInstance() || regions != null){
			if(regions == null)
				regions = new TreeSet<Region>();
			return regions;
		}
		return Region.getNamedCollection("findByZone",getPlanyear(), getZoneId());
	}
	public void addRegion(Region region)throws java.sql.SQLException{
		region.setZone((Zone)this);
		if(isNewInstance() || regions != null)
			getRegions().add(region);
		else
			region.insert();
	}
	public void removeRegion(Region region)throws java.sql.SQLException{
		if(isNewInstance() || regions != null)
			getRegions().remove(region);
		else
			region.delete();
	}
	public Zone copy()throws java.sql.SQLException{
		Zone cp = new Zone((Zone)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ZoneDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(Region child:getRegions())
			cp.addRegion(child.copy());
	}
	public Vector<String> getDifference(ZoneDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getZoneId(),o.getZoneId())) diffs.add("ZONE_ID");
		if(!isSame(getZoneName(),o.getZoneName())) diffs.add("ZONE_NAME");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(regions != null){
			for(Region region:getRegions()){
				if(region.isNewInstance())
					region.setZone((Zone)this);
				region.insert();
			}
			regions = null;
		}
	}
}
