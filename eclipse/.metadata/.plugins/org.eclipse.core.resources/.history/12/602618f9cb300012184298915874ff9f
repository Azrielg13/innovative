/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2002-2007, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable; 
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import com.sce.esp.log.EspLogger;
import com.sce.esp.util.db.ESPHashtable;

/**
 * The Class AgYear.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class DistrictYear extends AgYear implements Serializable{
	
	private static ESPHashtable<String,DistrictYear> hash = new ESPHashtable<String,DistrictYear>("AgDistrictYear");
	private DistrictYear prevInstance;
	int planyear;
	int districtId;
	int simId;
	int year;
	
	public District getDistrict() throws SQLException{
		return District.getInstance(planyear, districtId);
	}
	
	public static DistrictYear getInstance(String key){
		return hash.get(key);
	}
	public static DistrictYear getInstance(int planyear, int simId, int districtId, int year){
		return getInstance(planyear, simId, districtId, year, true);
	}
	public static DistrictYear getInstance(int planyear, int simId, int districtId, int year, boolean fetch){
		if(isNull(new Object[]{planyear, districtId, year}))return null;
		String key = getHashKey(new Object[]{planyear, simId, districtId, year});
		DistrictYear o = hash.get(key);
		if(o == null && fetch){
			o = new DistrictYear(planyear, simId, districtId, year);
			hash.put(key,o);
		}
		return o;
	}
	public DistrictYear getPrevInstance() throws SQLException{
		if(!prevInstanceRead){
			prevInstance = getInstance(getPlanyear()-1, getSimId(), getDistrictId(), getYear());
			prevInstanceRead=true;
		}
		return prevInstance;
	}
	public DistrictYear(int planyear, int simId, int districtId, int year){
		this.planyear=planyear;
		this.simId=simId;
		this.districtId=districtId;
		this.year=year;
	}
	public static ESPHashtable<String,DistrictYear> getHashtable(){
		return hash;
	}
	public String getHashKey(){
		return getHashKey(new Object[]{getPlanyear(), getSimId(), getDistrictId(), getYear()});
	}
	public String getDBTable() {
		return null;
	}

	public String[] getPKSet() {
		return null;
	}

	public void refresh(ResultSet rs) throws SQLException {
		
	}

	public void setPSKeys(PreparedStatement ps, int startIndex)
			throws SQLException {
	}
	
	/**
	 * Returns the planyear
	 * @return The planyear
	 */
	public int getPlanyear(){
		return planyear;
	}
	
	public int getSimId() {
		return simId;
	}
	
	/**
	 * Returns the sysId
	 * @return The sysId
	 */
	public int getDistrictId(){
		return districtId;
	}

	/**
	 * Returns the year
	 * @return The year
	 */
	public int getYear(){
		return year;
	}
	
    
	public AgObject getAgObject() throws SQLException{
		return getDistrict();
	}
    
    /**
     * Gets the norm proj load.
     * 
     * @return the norm proj load
     * 
     * @throws SQLException the SQL exception
     */
    public double getNormProjLoad()throws SQLException{
    	return getProjLoad();
    }
    
    
    /**
     * Gets the norm proj load.
     * @return the norm proj load
     * @throws SQLException the SQL exception
     */
    public double getProjLoad()throws SQLException{
    	double sum=0;
    	for(Bbank bbank:getBbanks(SubFilter.CORE_SUB))
    		sum += bbank.getYear(getSimId(), getYear()).getProjLoad();
    	return sum;
    }
    
    
    /* (non-Javadoc)
     * @see com.sce.mdi.object.CoreObjectYear#getABankProjLoad()
     */
    public double getABankProjLoad()throws SQLException{
    	double sum=0;
    	for(Abank abank:getAbanks())
    		sum += abank.getYear(getSimId(), getYear()).getABankProjLoad();
    	return sum;
    }
    
    /* (non-Javadoc)
     * @see com.sce.mdi.object.CoreObjectYear#getABankCriteriaProjLoad()
     */
    public double getABankCriteriaProjLoad()throws SQLException{
    	double sum=0;
    	for(Abank abank:getAbanks())
    		sum += abank.getYear(getSimId(), getYear()).getABankCriteriaProjLoad();
    	return sum;
    }
    
    /* (non-Javadoc)
     * @see com.sce.mdi.object.CoreObjectYear#getABankGrowth()
     */
    public double getABankGrowth()throws SQLException{
    	double sum=0;
    	for(Abank abank:getAbanks())
    		sum += abank.getYear(getSimId(), getYear()).getABankGrowth();
    	return sum;
    }

    /**
     * Gets the C proj load.
     * 
     * @return the C proj load
     * 
     * @throws SQLException the SQL exception
     */
    public double getCriteriaProjLoad() throws SQLException{
    	double sum=0;
    	for(Bbank bbank:getBbanks(SubFilter.CORE_SUB))
    		sum += bbank.getYear(getSimId(), getYear()).getCriteriaProjLoad();
    	return sum;
    }

    /**
     * Gets the PLL.
     * 
     * @return the PLL
     * 
     * @throws SQLException the SQL exception
     */
    public double getPLLBizLogic() throws SQLException{
        double sum=0;
        for(Bbank bbank:getBbanks(SubFilter.CORE_SUB))
            sum += bbank.getYear(getSimId(),getYear()).getPLLBizLogic();
       return sum;
    }
    
    /**
     * Gets the A bank PLL.
     * 
     * @return the A bank PLL
     * 
     * @throws SQLException the SQL exception
     */
    public double getABankPLL()throws SQLException{
    	double sum=0;
        for(Abank abank:getAbanks())
            sum += abank.getYear(getSimId(),getYear()).getPLLBizLogic();
       return sum;
    }
    

    /**
     * Gets the growth.
     * 
     * @return the growth
     * 
     * @throws SQLException the SQL exception
     */
    public double getGrowth() throws SQLException{
    	double g = 0;
    	for(Bbank bbank:getBbanks())
    		g += bbank.getYear(getSimId(), getYear()).getGrowth();
    	return g;
    }
	
	/**
	 * Calc load.
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void calcBLoad()throws SQLException{
	
	}
	
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCapAdd()
	 */
	public double getCapAdd(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Bbank b: getBbanks())		
    		sum += b.getYear(getSimId(), getYear()).getCapAdd(p);
    	return sum;
		//return getNameplate()-getAgObject().getYear(getSimId(), getYear()-1).getNameplate();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktAdd()
	 */
	public int getCktDelta(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Bbank b: getBbanks())	
    		sum += b.getYear(getSimId(), getYear()).getCktDelta(p);
    	return sum;
	}
	
	public int getCktAdd(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Bbank b: getBbanks())	
    		sum += b.getYear(getSimId(), getYear()).getCktAdd(p);
    	return sum;
	}

	public int getProjCount(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Bbank b: getBbanks()){
			sum += b.getYear(getSimId(), getYear()).getProjCount(p);
		}
    	return sum;
	}

	public double getVarAdd(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Bbank b: getBbanks())	
    		sum += b.getYear(getSimId(), getYear()).getVarAdd(p);
    	return sum;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCircuitCount()
	 */
	public int getCircuitCount() throws SQLException {
		int sum=0;
		for(Bbank b: getBbanks())	
    		sum += b.getYear(getSimId(), getYear()).getCircuitCount();
    	return sum;
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getNameplate()
	 */
	public double getNameplate() throws SQLException {
		double g = 0;
		for(Bbank b: getBbanks())	
    		g += b.getYear(getSimId(), getYear()).getNameplate();
    	return g;
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getNewCktVars()
	 */
	public TreeSet<CktVar> getNewCktVars() throws SQLException {
		TreeSet<CktVar> cktVar = new TreeSet<CktVar>();
		for(Sys sys:getAgObject().getSyss(getSimId()))
			cktVar.addAll(sys.getYear(getSimId(), getYear()).getNewCktVars());
		return cktVar;
	}

	public double getABankNameplate() throws SQLException {
		double g = 0;
		for(Abank a: getAbanks())	
    		g += a.getYear(getSimId(), getYear()).getNameplate();
    	return g;
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktsOver500()
	 */
	public int getCktsOver500() throws SQLException{
		int g = 0;
		for(Bbank b: getBbanks())
			for(Ckt c:b.getCkts(getSimId()))
				if(c.getYear(getSimId(), getYear()).getProjLoad()>SysYear.CKT_OVER_LIMIT1)
					g++;
		return g;
	}
	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktsOver600()
	 */
	public int getCktsOver600() throws SQLException{
		int g = 0;
		for(Bbank b: getBbanks())
			for(Ckt c:b.getCkts(getSimId()))
				if(c.getYear(getSimId(), getYear()).getProjLoad()>SysYear.CKT_OVER_LIMIT2)
					g++;
		return g;
	}
	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktsOverPLL()
	 */
	public int getCktsOverPLL() throws SQLException{
		int g = 0;
		for(Bbank b: getBbanks())
			for(Ckt c:b.getCkts(getSimId()))
				if(c.getYear(getSimId(), getYear()).getProjLoad()>c.getYear(getSimId(), getYear()).getPLLBizLogic())
					g++;
		return g;
			
	}
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getWeatherstations()
	 */
	public TreeSet<Weatherstation> getWeatherStations() throws SQLException {
		return getDistrict().getWeatherStations();
	}
	
	public synchronized TreeSet<Sub> getDownStreamSubs() throws SQLException {		
		return getDistrict().getSubs();
	}

	public double getAllCktFxKvarExist(int simId) {
		return 0;
	}

	public double getAllCktFxKvarProp(int simId) {
		return 0;
	}

	public double getAllCktFxKvarReq(int simdId) {
		return 0;
	}

	public double getAllCktSwtKvarExist(int simId) {
		return 0;
	}

	public double getAllCktSwtKvarProp(int simId) {
		return 0;
	}

	public double getAllCktSwtKvarReq(int simId) {
		return 0;
	}
	public double getCostTotal(Collection<Program> p, SceElem e, CostStage stage)throws SQLException {
		double sum = 0;
		for(Sub sub: getDistrict().getSubs())
			sum += sub.getYear(getSimId(), getYear()).getCostTotal(p,e,stage);
		return sum;
	}
}