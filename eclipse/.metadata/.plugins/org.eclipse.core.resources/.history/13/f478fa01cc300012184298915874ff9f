package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Bank;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.Xfmr;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class XfmrDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,XFMR_ID};
	public static enum PROPERTY{PLANYEAR,XFMR_ID,BANK_ID,XFMR_NUM,BASE_KV,BASE_MVA,PHASE,XFMR_USE,IMPEDANCE,MFR,SERIAL_NUM,NAMEPLATE,NAMEPLATE_MIS,PLL_PERCENT,ELL_PERCENT,SIM_ID,IN_SERVICE_PROJ_ID,OUT_SERVICE_PROJ_ID,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,SAP_NUM};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int XFMRID_LIMIT = 9;
	public final static int BANKID_LIMIT = 9;
	public final static int XFMRNUM_LIMIT = 10;
	public final static int BASEKV_LIMIT = 5;
	public final static int BASEMVA_LIMIT = 24;
	public final static int PHASE_LIMIT = 2;
	public final static int XFMRUSE_LIMIT = 6;
	public final static int IMPEDANCE_LIMIT = 24;
	public final static int MFR_LIMIT = 20;
	public final static int SERIALNUM_LIMIT = 20;
	public final static int NAMEPLATE_LIMIT = 24;
	public final static int NAMEPLATEMIS_LIMIT = 24;
	public final static int PLLPERCENT_LIMIT = 24;
	public final static int ELLPERCENT_LIMIT = 24;
	public final static int SIMID_LIMIT = 9;
	public final static int INSERVICEPROJID_LIMIT = 9;
	public final static int OUTSERVICEPROJID_LIMIT = 9;
	public final static int SAPNUM_LIMIT = 32;
	private Xfmr ptr;
	private int planyear;
	private int xfmrId;
	private int bankId;
	private String xfmrNum;
	private double baseKv;
	private double baseMva;
	private int phase = 3;
	private String xfmrUse = "load";
	private double impedance;
	private String mfr;
	private String serialNum;
	private double nameplate;
	private double nameplateMis;
	private double pllPercent;
	private double ellPercent;
	private int simId = 0;
	private int inServiceProjId;
	private int outServiceProjId;
	private String sapNum;
	private Bank bank;
	private Proj proj;
	private Proj proj2;
	private Simulation simulation;
	public static Xfmr getInstance(int planyear, int simId, int xfmrId)throws java.sql.SQLException{
		return getInstance(planyear, simId, xfmrId, true);
	}
	public static Xfmr getInstance(int planyear, int simId, int xfmrId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, xfmrId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, xfmrId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Xfmr o = null;
		if(cache != null && cache.contains(Xfmr.class, pk))
			o = em.find(Xfmr.class, pk);
		if(o==null && getAICache().contains(Xfmr.class, pk))
			o = getAICache().find(Xfmr.class, pk);
		if(o==null && fetch)
			o = em.find(Xfmr.class, pk);
		if(o==null && fetch && Xfmr.class.getAnnotation(AutoInsertable.class) != null){
			o = new Xfmr(planyear, simId, xfmrId);
			getAICache().cache(Xfmr.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<Xfmr> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Xfmr> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Xfmr> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Xfmr o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Xfmr> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Xfmr> tq = em.createQuery(jpql,Xfmr.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Xfmr> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Xfmr> tq = em.createNamedQuery(name,Xfmr.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public XfmrDAO(){}
	public XfmrDAO(int planyear, int simId, int xfmrId){
		this.planyear=planyear;
		this.simId=simId;
		this.xfmrId=xfmrId;
	}
	public XfmrDAO(XfmrDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		copyFrom(orig);
	}
	public void copyFrom(XfmrDAO orig){
		this.bankId=orig.getBankId();
		this.xfmrNum=orig.getXfmrNum();
		this.baseKv=orig.getBaseKv();
		this.baseMva=orig.getBaseMva();
		this.phase=orig.getPhase();
		this.xfmrUse=orig.getXfmrUse();
		this.impedance=orig.getImpedance();
		this.mfr=orig.getMfr();
		this.serialNum=orig.getSerialNum();
		this.nameplate=orig.getNameplate();
		this.nameplateMis=orig.getNameplateMis();
		this.pllPercent=orig.getPllPercent();
		this.ellPercent=orig.getEllPercent();
		this.inServiceProjId=orig.getInServiceProjId();
		this.outServiceProjId=orig.getOutServiceProjId();
		this.sapNum=orig.getSapNum();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, xfmrId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public Xfmr getPtr(){
		return ptr;
	}
	public void setPtr(Xfmr ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getXfmrId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI430_SEQ",sequenceName="MDI430_SEQ")
	@Column(name="XFMR_ID",nullable=false,length=9)
	public int getXfmrId(){
		return xfmrId;
	}
	public void setXfmrId(int xfmrId) throws java.sql.SQLException{
		if(isSame(xfmrId, getXfmrId()))return;
		int oldValue = getXfmrId();
		this.xfmrId=xfmrId;
		setProperty("XFMR_ID", xfmrId, oldValue);
	}
	@Column(name="BANK_ID",nullable=true,length=9)
	public int getBankId(){
		if(getPtr()!=null)
			return getPtr().getBankId();
		return bankId;
	}
	public void setBankId(int bankId) throws java.sql.SQLException{
		if(isSame(bankId, getBankId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getBankId();
		this.bankId=bankId;
		setProperty("BANK_ID", bankId, oldValue);
		bank=null;
	}
	@Column(name="XFMR_NUM",nullable=false,length=10)
	public String getXfmrNum(){
		if(getPtr()!=null)
			return getPtr().getXfmrNum();
		return xfmrNum;
	}
	public void setXfmrNum(String xfmrNum) throws java.sql.SQLException{
		if(isSame(xfmrNum, getXfmrNum()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getXfmrNum();
		this.xfmrNum=xfmrNum;
		setProperty("XFMR_NUM", xfmrNum, oldValue);
	}
	@Column(name="BASE_KV",nullable=true,length=5)
	public double getBaseKv(){
		if(getPtr()!=null)
			return getPtr().getBaseKv();
		return baseKv;
	}
	public void setBaseKv(double baseKv) throws java.sql.SQLException{
		if(isSame(baseKv, getBaseKv()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getBaseKv();
		this.baseKv=baseKv;
		setProperty("BASE_KV", baseKv, oldValue);
	}
	@Column(name="BASE_MVA",nullable=true,length=24)
	public double getBaseMva(){
		if(getPtr()!=null)
			return getPtr().getBaseMva();
		return baseMva;
	}
	public void setBaseMva(double baseMva) throws java.sql.SQLException{
		if(isSame(baseMva, getBaseMva()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getBaseMva();
		this.baseMva=baseMva;
		setProperty("BASE_MVA", baseMva, oldValue);
	}
	@Column(name="PHASE",nullable=true,length=2)
	public int getPhase(){
		if(getPtr()!=null)
			return getPtr().getPhase();
		return phase;
	}
	public void setPhase(int phase) throws java.sql.SQLException{
		if(isSame(phase, getPhase()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getPhase();
		this.phase=phase;
		setProperty("PHASE", phase, oldValue);
	}
	@Column(name="XFMR_USE",nullable=false,length=6)
	public String getXfmrUse(){
		if(getPtr()!=null)
			return getPtr().getXfmrUse();
		return xfmrUse;
	}
	public void setXfmrUse(String xfmrUse) throws java.sql.SQLException{
		if(isSame(xfmrUse, getXfmrUse()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getXfmrUse();
		this.xfmrUse=xfmrUse;
		setProperty("XFMR_USE", xfmrUse, oldValue);
	}
	@Column(name="IMPEDANCE",nullable=true,length=24)
	public double getImpedance(){
		if(getPtr()!=null)
			return getPtr().getImpedance();
		return impedance;
	}
	public void setImpedance(double impedance) throws java.sql.SQLException{
		if(isSame(impedance, getImpedance()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getImpedance();
		this.impedance=impedance;
		setProperty("IMPEDANCE", impedance, oldValue);
	}
	@Column(name="MFR",nullable=true,length=20)
	public String getMfr(){
		if(getPtr()!=null)
			return getPtr().getMfr();
		return mfr;
	}
	public void setMfr(String mfr) throws java.sql.SQLException{
		if(isSame(mfr, getMfr()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getMfr();
		this.mfr=mfr;
		setProperty("MFR", mfr, oldValue);
	}
	@Column(name="SERIAL_NUM",nullable=true,length=20)
	public String getSerialNum(){
		if(getPtr()!=null)
			return getPtr().getSerialNum();
		return serialNum;
	}
	public void setSerialNum(String serialNum) throws java.sql.SQLException{
		if(isSame(serialNum, getSerialNum()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getSerialNum();
		this.serialNum=serialNum;
		setProperty("SERIAL_NUM", serialNum, oldValue);
	}
	@Column(name="NAMEPLATE",nullable=true,length=24)
	public double getNameplate(){
		if(getPtr()!=null)
			return getPtr().getNameplate();
		return nameplate;
	}
	public void setNameplate(double nameplate) throws java.sql.SQLException{
		if(isSame(nameplate, getNameplate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getNameplate();
		this.nameplate=nameplate;
		setProperty("NAMEPLATE", nameplate, oldValue);
	}
	@Column(name="NAMEPLATE_MIS",nullable=true,length=24)
	public double getNameplateMis(){
		if(getPtr()!=null)
			return getPtr().getNameplateMis();
		return nameplateMis;
	}
	public void setNameplateMis(double nameplateMis) throws java.sql.SQLException{
		if(isSame(nameplateMis, getNameplateMis()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getNameplateMis();
		this.nameplateMis=nameplateMis;
		setProperty("NAMEPLATE_MIS", nameplateMis, oldValue);
	}
	@Column(name="PLL_PERCENT",nullable=true,length=24)
	public double getPllPercent(){
		if(getPtr()!=null)
			return getPtr().getPllPercent();
		return pllPercent;
	}
	public void setPllPercent(double pllPercent) throws java.sql.SQLException{
		if(isSame(pllPercent, getPllPercent()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getPllPercent();
		this.pllPercent=pllPercent;
		setProperty("PLL_PERCENT", pllPercent, oldValue);
	}
	@Column(name="ELL_PERCENT",nullable=true,length=24)
	public double getEllPercent(){
		if(getPtr()!=null)
			return getPtr().getEllPercent();
		return ellPercent;
	}
	public void setEllPercent(double ellPercent) throws java.sql.SQLException{
		if(isSame(ellPercent, getEllPercent()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getEllPercent();
		this.ellPercent=ellPercent;
		setProperty("ELL_PERCENT", ellPercent, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
		simulation=null;
	}
	@Column(name="IN_SERVICE_PROJ_ID",nullable=true,length=9)
	public int getInServiceProjId(){
		if(getPtr()!=null)
			return getPtr().getInServiceProjId();
		return inServiceProjId;
	}
	public void setInServiceProjId(int inServiceProjId) throws java.sql.SQLException{
		if(isSame(inServiceProjId, getInServiceProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getInServiceProjId();
		this.inServiceProjId=inServiceProjId;
		setProperty("IN_SERVICE_PROJ_ID", inServiceProjId, oldValue);
		proj=null;
	}
	@Column(name="OUT_SERVICE_PROJ_ID",nullable=true,length=9)
	public int getOutServiceProjId(){
		if(getPtr()!=null)
			return getPtr().getOutServiceProjId();
		return outServiceProjId;
	}
	public void setOutServiceProjId(int outServiceProjId) throws java.sql.SQLException{
		if(isSame(outServiceProjId, getOutServiceProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getOutServiceProjId();
		this.outServiceProjId=outServiceProjId;
		setProperty("OUT_SERVICE_PROJ_ID", outServiceProjId, oldValue);
		proj2=null;
	}
	@Column(name="SAP_NUM",nullable=true,length=32)
	public String getSapNum(){
		if(getPtr()!=null)
			return getPtr().getSapNum();
		return sapNum;
	}
	public void setSapNum(String sapNum) throws java.sql.SQLException{
		if(isSame(sapNum, getSapNum()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getSapNum();
		this.sapNum=sapNum;
		setProperty("SAP_NUM", sapNum, oldValue);
	}
	public Bank getBank()throws java.sql.SQLException{
		if(bank==null)
			bank=Bank.getInstance(getPlanyear(), getSimId(), getBankId());
		return bank;
	}
	public void setBank(Bank bank)throws java.sql.SQLException{
		setBankId(bank==null?0:bank.getBankId());
		this.bank=bank;
	}
	public Proj getProj()throws java.sql.SQLException{
		if(proj==null)
			proj=Proj.getInstance(getPlanyear(), getSimId(), getInServiceProjId());
		return proj;
	}
	public void setProj(Proj proj)throws java.sql.SQLException{
		setInServiceProjId(proj==null?0:proj.getProjId());
		this.proj=proj;
	}
	public Proj getProj2()throws java.sql.SQLException{
		if(proj2==null)
			proj2=Proj.getInstance(getPlanyear(), getSimId(), getOutServiceProjId());
		return proj2;
	}
	public void setProj2(Proj proj2)throws java.sql.SQLException{
		setOutServiceProjId(proj2==null?0:proj2.getProjId());
		this.proj2=proj2;
	}
	public Simulation getSimulation()throws java.sql.SQLException{
		if(simulation==null)
			simulation=Simulation.getInstance(getPlanyear(), getSimId());
		return simulation;
	}
	public void setSimulation(Simulation simulation)throws java.sql.SQLException{
		setSimId(simulation==null?0:simulation.getSimId());
		this.simulation=simulation;
	}
	public Xfmr copy()throws java.sql.SQLException{
		Xfmr cp = new Xfmr((Xfmr)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(XfmrDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(XfmrDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getXfmrId(),o.getXfmrId())) diffs.add("XFMR_ID");
		if(!isSame(getBankId(),o.getBankId())) diffs.add("BANK_ID");
		if(!isSame(getXfmrNum(),o.getXfmrNum())) diffs.add("XFMR_NUM");
		if(!isSame(getBaseKv(),o.getBaseKv())) diffs.add("BASE_KV");
		if(!isSame(getBaseMva(),o.getBaseMva())) diffs.add("BASE_MVA");
		if(!isSame(getPhase(),o.getPhase())) diffs.add("PHASE");
		if(!isSame(getXfmrUse(),o.getXfmrUse())) diffs.add("XFMR_USE");
		if(!isSame(getImpedance(),o.getImpedance())) diffs.add("IMPEDANCE");
		if(!isSame(getMfr(),o.getMfr())) diffs.add("MFR");
		if(!isSame(getSerialNum(),o.getSerialNum())) diffs.add("SERIAL_NUM");
		if(!isSame(getNameplate(),o.getNameplate())) diffs.add("NAMEPLATE");
		if(!isSame(getNameplateMis(),o.getNameplateMis())) diffs.add("NAMEPLATE_MIS");
		if(!isSame(getPllPercent(),o.getPllPercent())) diffs.add("PLL_PERCENT");
		if(!isSame(getEllPercent(),o.getEllPercent())) diffs.add("ELL_PERCENT");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getInServiceProjId(),o.getInServiceProjId())) diffs.add("IN_SERVICE_PROJ_ID");
		if(!isSame(getOutServiceProjId(),o.getOutServiceProjId())) diffs.add("OUT_SERVICE_PROJ_ID");
		if(!isSame(getSapNum(),o.getSapNum())) diffs.add("SAP_NUM");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
