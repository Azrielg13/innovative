package com.sce.esp.dialog;

import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Random;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import net.miginfocom.swing.MigLayout;

import com.jidesoft.dialog.BannerPanel;
import com.sce.esp.form.ESPForm;
import com.sce.esp.log.EspLogger;
import com.sce.esp.object.model.Org;
import com.sce.esp.util.ESPProperties;
import com.sce.esp.util.IconsFactory;
import com.sce.esp.util.db.PDBConnection;
//
public class SkateOrDieDialog extends JDialog implements ActionListener{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 8139408375423050275L;
	private JButton prod, sysTest, dev, local, gus, rog;
	private int option = -1;
	private String pass, usr;
	private JButton dont;
	private boolean tog;
	private JComboBox debugBox;
	private JComboBox orgCboBox;
	private JComboBox roleCboBox;

	public SkateOrDieDialog(JFrame parent, boolean modal, String pass, String usr, boolean tog){
		super(parent, modal);
		this.pass = pass;
		this.usr = usr;
		this.tog = !tog;
		initComponents();
	}

	private void initComponents() {

		prod = new JButton("Production");
		sysTest = new JButton("System Test");
		dev = new JButton("Development");
		rog = new JButton("SCMT Development");
		gus = new JButton("GUS");
		local = new JButton("Local");
		dont = new JButton(tog?"Don't Press":"Seriously!");		

		prod.addActionListener(this);
		sysTest.addActionListener(this);
		dev.addActionListener(this);
		rog.addActionListener(this);
		local.addActionListener(this);
		gus.addActionListener(this);
		dont.addActionListener(this);

		setLayout(new BorderLayout());
		setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		Container content = getContentPane();
		JPanel panel = new JPanel(new BorderLayout());
		panel.add(addContent(),BorderLayout.NORTH);
		JPanel center = new JPanel(new FlowLayout());
		center.add(prod);
		center.add(sysTest);
//		center.add(dev);
		center.add(rog);
		center.add(local);
		center.add(gus);
		panel.add(center, BorderLayout.CENTER);

		roleCboBox = new JComboBox();
		roleCboBox.addItem("Admin");
		roleCboBox.addItem("User");
		roleCboBox.addItem("Guest");
		roleCboBox.addItem("Mgr");

		debugBox = new JComboBox(EspLogger.LEVEL.values());
		
		debugBox.setSelectedItem(EspLogger.getLevel());
		if(System.getProperty("user.name").equals("gonzalf1"))
			debugBox.setSelectedItem(EspLogger.LEVEL.WARNING);//XXX
		debugBox.addActionListener(this);
		
		orgCboBox = new JComboBox();
		orgCboBox.setMaximumSize(new Dimension(80,20));
		orgCboBox.setEditable(false);
		
		try {			
			String usr = System.getProperty("user.name").toLowerCase();
			Connection conn = PDBConnection.getTemporaryConnection(ESPProperties.getInstance().getDevDbUrl(), usr, "edison");
			
			orgCboBox.addItem(new Org(Org.TIG,"TIG"));
			PreparedStatement ps = conn.prepareStatement("SELECT * FROM MDI.MDI002_Org WHERE DELETED_TS IS NULL ORDER BY NAME");
			ResultSet rs = ps.executeQuery();
			while(rs.next()){
				Org org = new Org();
				org.setOrgId(rs.getInt("ORG_ID"));
				org.setName(rs.getString("NAME"));
				org.setDescription(rs.getString("DESCRIPTION"));
				org.setPcUserId(rs.getInt("PC_USER_ID"));
				orgCboBox.addItem(org);
			}
			rs.close();
			ps.close();
			conn.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("Can not connect to development to get list of organizations. Using Hardcoded list");
			try {
				orgCboBox.addItem(new Org(Org.DE,"DE"));
				orgCboBox.addItem(new Org(Org.TRANS,"TRANS"));
			}
			catch (SQLException e1) {
				e1.printStackTrace();
			}
		}
		
		
		
		

		JPanel bot = new JPanel(new MigLayout());
		bot.add(ESPForm.getStyle("Options: "));
		bot.add(new JLabel(" Role"));
		bot.add(roleCboBox);
		bot.add(new JLabel(" Org"));
		bot.add(orgCboBox);
		bot.add(new JLabel(" Debug Level"));
		bot.add(debugBox);
		panel.add(bot, BorderLayout.SOUTH);

		content.add(panel, BorderLayout.CENTER);
		setTitle("Developer Dialog (v09.09.10)");
		setResizable(true);
		setAlwaysOnTop(true);
		pack();
		centerDialog();
		setVisible(true);
	}

	private JComponent addContent(){
		BannerPanel banner = new BannerPanel("Choose your development environment: ", "  (At your own risk) ", IconsFactory.getImageIcon("icons/Under-construction.png"));
		return banner;
	}

	private void centerDialog() {
		Rectangle screen = new Rectangle(
				Toolkit.getDefaultToolkit().getScreenSize());
		Point center = new Point((int) screen.getCenterX(), (int) screen.getCenterY());
		Point newLocation = new Point(center.x - this.getWidth() / 2, center.y - this.getHeight() / 2);
		if (screen.contains(newLocation.x, newLocation.y, this.getWidth(), this.getHeight()))
			this.setLocation(newLocation);
	}//END centerDialog

	public int getOption(){
		return option;
	}
	public int getOrgId(){
		return ((Org)orgCboBox.getSelectedItem()).getOrgId();
	}

	public int getRoleId(){
		return roleCboBox.getSelectedIndex();
	}

	public void actionPerformed(ActionEvent ae) {

		if(ae.getSource() == dont){
			if(tog){
				while(tog){
					dispose();
					new SkateOrDieDialog(null, true, pass, usr, tog);
				}
			}else{
				Random r = new Random();
				while(true){
					Point center = new Point((int) r.nextInt(1000), (int) r.nextInt(1000));
					setLocation(center);
				}
			}
		}
		if(ae.getSource() == prod){
			option = 0;
			dispose();
		}

		if(ae.getSource() == sysTest){
			option = 1;
			dispose();
		}

		if(ae.getSource() == dev){
			option = 2;
			dispose();
		}

		if(ae.getSource() == local){
			option=3;
			dispose();
		}
		if(ae.getSource() == gus){
			option=4;
			dispose();
		}
		if(ae.getSource() == rog){
			option=5;
			dispose();
		}
		if(ae.getSource() == debugBox){
			EspLogger.setLevel((EspLogger.LEVEL)debugBox.getSelectedItem());
		}
	}
}