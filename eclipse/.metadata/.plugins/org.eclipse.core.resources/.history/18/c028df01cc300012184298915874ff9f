package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostSpread;
import com.sce.esp.object.model.CostType;
import com.sce.esp.object.model.SceElem;
import com.sce.esp.object.model.Schedule;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CostSpreadDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,SCHEDULE_ID,SCE_ELEM_ID,COST_TYPE_ID,OFFSET_YEAR,EFF_DATE,COST_FACTOR};
	public final static int ID_LIMIT = 9;
	public final static int SCHEDULEID_LIMIT = 9;
	public final static int SCEELEMID_LIMIT = 9;
	public final static int COSTTYPEID_LIMIT = 9;
	public final static int OFFSETYEAR_LIMIT = 4;
	public final static int EFFDATE_LIMIT = 7;
	public final static int COSTFACTOR_LIMIT = 24;
	private int id;
	private int scheduleId;
	private int sceElemId;
	private int costTypeId;
	private int offsetYear;
	private Calendar effDate;
	private double costFactor;
	private Schedule schedule;
	private SceElem sceElem;
	private CostType costType;
	public static CostSpread getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static CostSpread getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		CostSpread o = null;
		if(cache != null && cache.contains(CostSpread.class, pk))
			o = em.find(CostSpread.class, pk);
		if(o==null && getAICache().contains(CostSpread.class, pk))
			o = getAICache().find(CostSpread.class, pk);
		if(o==null && fetch)
			o = em.find(CostSpread.class, pk);
		if(o==null && fetch && CostSpread.class.getAnnotation(AutoInsertable.class) != null){
			o = new CostSpread(id);
			getAICache().cache(CostSpread.class, o);
		}
		return o;
	}
	public static Collection<CostSpread> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CostSpread> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CostSpread> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CostSpread o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CostSpread> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostSpread> tq = em.createQuery(jpql,CostSpread.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CostSpread> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostSpread> tq = em.createNamedQuery(name,CostSpread.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CostSpreadDAO(){}
	public CostSpreadDAO(int id){
		this.id=id;
	}
	public CostSpreadDAO(CostSpreadDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CostSpreadDAO orig){
		this.scheduleId=orig.getScheduleId();
		this.sceElemId=orig.getSceElemId();
		this.costTypeId=orig.getCostTypeId();
		this.offsetYear=orig.getOffsetYear();
		this.effDate=orig.getEffDate();
		this.costFactor=orig.getCostFactor();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT18_SEQ",sequenceName="MDIT18_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="SCHEDULE_ID",nullable=false,length=9)
	public int getScheduleId(){
		return scheduleId;
	}
	public void setScheduleId(int scheduleId) throws java.sql.SQLException{
		if(isSame(scheduleId, getScheduleId()))return;
		int oldValue = getScheduleId();
		this.scheduleId=scheduleId;
		setProperty("SCHEDULE_ID", scheduleId, oldValue);
		schedule=null;
	}
	@Column(name="SCE_ELEM_ID",nullable=false,length=9)
	public int getSceElemId(){
		return sceElemId;
	}
	public void setSceElemId(int sceElemId) throws java.sql.SQLException{
		if(isSame(sceElemId, getSceElemId()))return;
		int oldValue = getSceElemId();
		this.sceElemId=sceElemId;
		setProperty("SCE_ELEM_ID", sceElemId, oldValue);
		sceElem=null;
	}
	@Column(name="COST_TYPE_ID",nullable=false,length=9)
	public int getCostTypeId(){
		return costTypeId;
	}
	public void setCostTypeId(int costTypeId) throws java.sql.SQLException{
		if(isSame(costTypeId, getCostTypeId()))return;
		int oldValue = getCostTypeId();
		this.costTypeId=costTypeId;
		setProperty("COST_TYPE_ID", costTypeId, oldValue);
		costType=null;
	}
	@Column(name="OFFSET_YEAR",nullable=false,length=4)
	public int getOffsetYear(){
		return offsetYear;
	}
	public void setOffsetYear(int offsetYear) throws java.sql.SQLException{
		if(isSame(offsetYear, getOffsetYear()))return;
		int oldValue = getOffsetYear();
		this.offsetYear=offsetYear;
		setProperty("OFFSET_YEAR", offsetYear, oldValue);
	}
	@Column(name="EFF_DATE",nullable=false,length=7)
	public Calendar getEffDate(){
		return effDate;
	}
	public void setEffDate(Calendar effDate) throws java.sql.SQLException{
		if(isSame(effDate, getEffDate()))return;
		Calendar oldValue = getEffDate();
		this.effDate=effDate;
		setProperty("EFF_DATE", effDate, oldValue);
	}
	@Column(name="COST_FACTOR",nullable=true,length=24)
	public double getCostFactor(){
		return costFactor;
	}
	public void setCostFactor(double costFactor) throws java.sql.SQLException{
		if(isSame(costFactor, getCostFactor()))return;
		double oldValue = getCostFactor();
		this.costFactor=costFactor;
		setProperty("COST_FACTOR", costFactor, oldValue);
	}
	public Schedule getSchedule()throws java.sql.SQLException{
		if(schedule==null)
			schedule=Schedule.getInstance(getScheduleId());
		return schedule;
	}
	public void setSchedule(Schedule schedule)throws java.sql.SQLException{
		setScheduleId(schedule==null?0:schedule.getScheduleId());
		this.schedule=schedule;
	}
	public SceElem getSceElem()throws java.sql.SQLException{
		if(sceElem==null)
			sceElem=SceElem.getInstance(getSceElemId());
		return sceElem;
	}
	public void setSceElem(SceElem sceElem)throws java.sql.SQLException{
		setSceElemId(sceElem==null?0:sceElem.getSceElemId());
		this.sceElem=sceElem;
	}
	public CostType getCostType()throws java.sql.SQLException{
		if(costType==null)
			costType=CostType.getInstance(getCostTypeId());
		return costType;
	}
	public void setCostType(CostType costType)throws java.sql.SQLException{
		setCostTypeId(costType==null?0:costType.getId());
		this.costType=costType;
	}
	public CostSpread copy()throws java.sql.SQLException{
		CostSpread cp = new CostSpread((CostSpread)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CostSpreadDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CostSpreadDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getScheduleId(),o.getScheduleId())) diffs.add("SCHEDULE_ID");
		if(!isSame(getSceElemId(),o.getSceElemId())) diffs.add("SCE_ELEM_ID");
		if(!isSame(getCostTypeId(),o.getCostTypeId())) diffs.add("COST_TYPE_ID");
		if(!isSame(getOffsetYear(),o.getOffsetYear())) diffs.add("OFFSET_YEAR");
		if(!isSame(getEffDate(),o.getEffDate())) diffs.add("EFF_DATE");
		if(!isSame(getCostFactor(),o.getCostFactor())) diffs.add("COST_FACTOR");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(schedule != null && schedule.isNewInstance())
				schedule.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
