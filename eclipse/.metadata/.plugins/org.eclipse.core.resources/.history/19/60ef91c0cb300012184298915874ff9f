package com.sce.esp.component;

import java.awt.Cursor;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;

import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.DuctBank;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.SubFilter;
/**
 * 
 * @author Distribution Staff Engineering
 *
 */
public class SubTreeNode extends ComparableTreeNode{

	private int simId;
	private Sub sub;	
	private int nodeType;
	private Vector<SubTreeNode> subChildren;
	private Vector<DbTreeNode> dbChildren;
	private Vector<DefaultMutableTreeNode> cktChildren;
	private SubFilter filter;
	
	
	public SubTreeNode(int simId, Sub sub, int nodeType){
		this(simId, sub, nodeType, null);
	}
	
	public SubTreeNode(int simId, Sub sub, int nodeType, SubFilter filter){
		super(sub);
		this.simId = simId;
		this.sub = sub;		
		this.nodeType = nodeType;
		this.filter = filter;
	}
	public boolean isLeaf(){
		return (getChildCount()==0);
	}
	public int getChildCount(){
		int cc=0;
		try {
			if(nodeType==MDITreeModel.SUB_HIER){ //if alpha then children are already in tree
				if(subChildren != null)
					return subChildren.size();			
				cc = sub.getBbanks(simId, filter).size();				
				return cc;
			}
			
			if(nodeType==MDITreeModel.DB_CHILD_NODES){
				if(dbChildren != null)
					return dbChildren.size();
				if(sub instanceof Bbank)
                    cc = ((Bbank)sub).getDuctBanks().size();
				return cc;
			}
			
			if(nodeType==MDITreeModel.CKT_CHILD_NODES){
				if(cktChildren != null)
					return cktChildren.size();
                if(sub instanceof Bbank)
                    cc = ((Bbank)sub).getCkts(simId).size();
				return cc;
			}
		
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
		}		
		return cc;
	}
	public TreeNode getChildAt(int index){

		try{

			if(nodeType==MDITreeModel.SUB_HIER){ 
				if(subChildren == null){
					subChildren = new Vector<SubTreeNode>();						
					for(Bbank bBank:sub.getBbanks(simId, filter))
						add(new SubTreeNode(simId,bBank,nodeType,filter));
				}					
				return subChildren.get(index);
			}

			if(nodeType==MDITreeModel.DB_CHILD_NODES){
				if(dbChildren == null){
					dbChildren = new Vector<DbTreeNode>();
					if(sub instanceof Bbank)
						for(DuctBank dbs:((Bbank)sub).getDuctBanks())						
							add(new DbTreeNode(dbs));	
				}
				return dbChildren.get(index);				
			}

			if(nodeType==MDITreeModel.CKT_CHILD_NODES){
				if(cktChildren==null){
					cktChildren = new Vector<DefaultMutableTreeNode>();
                    if(sub instanceof Bbank)
                    	for(Ckt circuit: ((Bbank)sub).getCkts(simId))
                    		add(new DefaultMutableTreeNode(circuit));
				}
				return cktChildren.get(index);	
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}	
		return null;
	}
	
	
	public void add(SubTreeNode ctn){
		subChildren.add(ctn);
	}
	
	public void add(DbTreeNode ctn){
		dbChildren.add(ctn);
	}
	
	public void add(DefaultMutableTreeNode ctn){
		cktChildren.add(ctn);
	}

}