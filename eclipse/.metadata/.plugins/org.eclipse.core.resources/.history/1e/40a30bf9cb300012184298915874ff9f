/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;


/**
 * This interface imposes guidelines for reperesenting a Temperature object in Engineering.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public interface AbstractTemperature extends Comparable<Object>{
	
	/**
	 * Get the date for the temperature.
	 * 
	 * @return the calendar date
	 */
	public Calendar getRcdDate();
	
	/**
	 * Get the maximum recorded temperature.
	 * 
	 * @return the maximum value
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getMaxTemp()throws SQLException;
	
	/**
	 * Get the minimum recorded temperature.
	 * 
	 * @return the minimum value
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getMinTemp()throws SQLException;
	
	/**
	 * Get the calculated effective temperature.
	 * 
	 * @return the effective temperature
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getEffTemp()throws SQLException;
	
	/**
	 * Gets the Ten Year Average Effective Temperature.
	 * 
	 * @return the Ten Year Average Effective Temperature
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getTenYearAvg()throws SQLException;
	
	public double getAvgTemp()throws SQLException;
	public double getAvgWind()throws SQLException;
	public double getPrecip()throws SQLException;
	public double getRelHumid()throws SQLException;
	
	/**
	 * The Equivalent Temperature calculation
	 * 
	 * @return .6*Tmax+.3Tmax+.1*Tmax
	 * @throws SQLException
	 */
	public double getEquTemp()throws SQLException;
	
	public AbstractTemperature getYesterdayTemp()throws SQLException;
	public AbstractTemperature getTwoDaysAgoTemp()throws SQLException;
	public double getTenYearAvgAvg()throws SQLException;
	
}
