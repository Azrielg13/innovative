/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.AbstractAction;
import javax.swing.ImageIcon;

import com.jidesoft.grid.TableUtils;
import com.jidesoft.grid.TreeTable;
import com.jidesoft.swing.JideButton;
import com.jidesoft.swing.JideSplitButton;
import com.sce.esp.log.EspLogger;
import com.sce.esp.object.model.ScopeItem;
import com.sce.esp.security.UserRole;
import com.sce.esp.util.IconsFactory;
import com.sce.esp.util.StringNoEdit;
import com.sce.esp.util.ui.UserPreference;

/**
 * <p>MDITreeTablePanel:</br>
 * Creates an MDI Tree Table Panel.</p>
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class ESPTreeTablePanel extends ESPTablePanel implements ActionListener{

	private static final long serialVersionUID = -5311589300371628815L;

	/** The cmd expand all. */
	private JideButton cmdExpandAll;
	
	/** The cmd collapse all. */
	private JideButton cmdCollapseAll;
	
	/** The expand. */
	private int expand;
	
	/** The EXPAN d_ NONE. */
	public static int EXPAND_NONE=0;
	
	/** The EXPAN d_ FIRST. */
	public static int EXPAND_FIRST=1;
	
	/** The EXPAN d_ ALL. */
	public static int EXPAND_ALL=2;
	
	/** The EXPAND. */
	private static ImageIcon EXPAND = (IconsFactory.getImageIcon(IconsFactory.Tree.TABLE_EXPAND));
	
	/** The COLLAPSE. */
	private static ImageIcon COLLAPSE = (IconsFactory.getImageIcon(IconsFactory.Tree.TABLE_COLLAPSE));
	
	private boolean autoResize = true;
	
	private String _tablePref;

	int selectedRow, verticle , horizontal, count ;

	/**
	 * 
	 * @param wikiPage the wiki page
	 * @param title the title	 
	 * @param planyear the planyear
	 * @param simId the sim id
	 */
	public ESPTreeTablePanel(String wikiPage,String title) {
		this(wikiPage, title,EXPAND_NONE,false, UserRole.MDI_R_USER);
	}
	
	/**
	 * 
	 * @param wikiPage
	 * @param title
	 * @param planyear
	 * @param simId
	 * @param isHyperlink
	 */
	public ESPTreeTablePanel(String wikiPage, String title,boolean isHyperlink){
		this(wikiPage,title,EXPAND_NONE,isHyperlink, UserRole.MDI_R_USER);
	}


	public ESPTreeTablePanel(String wikiPage, String title, int expand, boolean isHyperlink){	
		this(wikiPage,title,expand,isHyperlink, UserRole.MDI_R_USER);	
	}
	
	public ESPTreeTablePanel(final String wikiPage, final String title, int expand, boolean isHyperlink, int userLevel){		
		super(wikiPage,title,true,isHyperlink, userLevel);
		this.expand = expand;
		cmdExpandAll = new JideButton(EXPAND);
		cmdExpandAll.setName("expandButton");
		cmdExpandAll.setToolTipText("Expand All");
		cmdExpandAll.setFocusPainted(false);
		cmdExpandAll.addActionListener(this);
		cmdCollapseAll = new JideButton(COLLAPSE);
		cmdCollapseAll.setToolTipText("Collapse All");
		cmdCollapseAll.setFocusPainted(false);
		cmdCollapseAll.addActionListener(this);        
        getTopLeftPanel().add(cmdCollapseAll,FlowLayout.LEFT);
        getTopLeftPanel().add(cmdExpandAll,FlowLayout.LEFT);
        
        
//        JideSplitButton button = new JideSplitButton("");
//        button.setIcon(IconsFactory.IWP_INCLUDE);//XXX
//        button.add(new AbstractAction("Save Column Preferences") {
//            public void actionPerformed(ActionEvent e) {
//            	if(getTableScrollPane().getMainTable()!=null)
//            	_tablePref = TableUtils.getTablePreferenceByName(getTableScrollPane().getMainTable());
//            	UserPreference.getInstance().putString(getTableScrollPane().getMainTable().getName(), _tablePref);
//    			UserPreference.getInstance().save();
//            }
//        });
//        getTopLeftPanel().add(button,FlowLayout.LEFT);
	}
	
	
	public void setAutoResize(boolean autoResize) {
		this.autoResize = autoResize;
	}

	/**
	 * Auto resizes the table using <Code>TableUtils</code>.
	 */
	public void autoResize(){
		
		//if(true) {
		if(autoResize) {
	        if(getTableScrollPane().getRowHeaderTable()!=null) {
	        	
	        	TableUtils.autoResizeAllColumns(getTableScrollPane().getRowHeaderTable());
	        	
	        	if(getTableScrollPane().getRowHeaderTable() instanceof TreeTable){
	            if(expand==EXPAND_FIRST)
	                ((TreeTable)getTableScrollPane().getRowHeaderTable()).expandFirstLevel();//java.lang.ClassCastException: com.jidesoft.grid.SortableTable cannot be cast to com.jidesoft.grid.TreeTable
	            else if(expand==EXPAND_ALL)
	                ((TreeTable)getTableScrollPane().getRowHeaderTable()).expandAll();
	            else if(expand==EXPAND_NONE)
	            	((TreeTable)getTableScrollPane().getRowHeaderTable()).collapseAll();//ava.lang.ClassCastException: com.jidesoft.grid.SortableTable cannot be cast to com.jidesoft.grid.TreeTable
	            
	        	}
			}
	        
	        if(getTableScrollPane().getMainTable()!=null) {
				
				for(int i=0; i<tsp.getMainTable().getColumnCount(); i++) {
					if(tsp.getMainTable().getColumnClass(i)==String.class || tsp.getMainTable().getColumnClass(i)==StringNoEdit.class) {
						tsp.getMainTable().getColumn(tsp.getMainTable().getColumnName(i)).setPreferredWidth(200);
					}
					else{
						//TableUtils.autoResizeColumn(tsp.getMainTable(),i);
					}
				}
	        }
				
			if(getTableScrollPane().getRowFooterTable()!=null){
				TableUtils.autoResizeAllColumns(getTableScrollPane().getRowFooterTable());
			}
		}
		
		
		//XXX
		try{
			if(getTableScrollPane().getMainTable()!=null){
				TableUtils.setTablePreferenceByName(getTableScrollPane().getMainTable(), UserPreference.getInstance().getString(getTableScrollPane().getMainTable().getName()));
			}
		}catch(Exception e){}
	}

	public void actionPerformed(ActionEvent ae) {
		super.actionPerformed(ae);
		if(ae.getSource()==cmdExpandAll && getTableScrollPane().getRowHeaderTable()!=null) {
			((TreeTable)getTableScrollPane().getRowHeaderTable()).expandAll();
			
			if(autoResize) {
				TableUtils.autoResizeAllColumns((TreeTable)getTableScrollPane().getRowHeaderTable());
				 
				if(getTableScrollPane().getMainTable() != null){
					for(int i=0; i<tsp.getMainTable().getColumnCount(); i++) {
						if(tsp.getMainTable().getColumnClass(i)==String.class || tsp.getMainTable().getColumnClass(i)==StringNoEdit.class) {
							tsp.getMainTable().getColumn(tsp.getMainTable().getColumnName(i)).setPreferredWidth(200);
						}else{
							TableUtils.autoResizeColumn(tsp.getMainTable(),i);
						}
					}
				}
				if(getTableScrollPane().getRowFooterTable() != null)
					TableUtils.autoResizeAllColumns(getTableScrollPane().getRowFooterTable());
			}
		} else if(ae.getSource()==cmdCollapseAll && getTableScrollPane().getRowHeaderTable()!=null)
			((TreeTable)getTableScrollPane().getRowHeaderTable()).collapseAll();
	}
	
	public void saveState(){
		selectedRow = getSelectedRow();
		verticle = getTableScrollPane().getVerticalScrollBar().getModel().getValue();
		horizontal = getTableScrollPane().getHorizontalScrollBar().getModel().getValue();
	}
	
	public void loadState(){
	count = getTableScrollPane().getMainTable().getRowCount()-1;
	EspLogger.message(this, selectedRow+"");
	if(selectedRow!=-1 && count<selectedRow)
		getTableScrollPane().getMainTable().setRowSelectionInterval(count, count);
	else if(selectedRow!=-1)
	getTableScrollPane().getMainTable().setRowSelectionInterval(selectedRow, selectedRow);
	getTableScrollPane().getViewport().setViewPosition(new java.awt.Point(horizontal, verticle));
	}
}
