/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;
import java.awt.Color;
import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.dao.PifDAO;
import com.sce.esp.util.Calculate;
import com.sce.esp.util.db.PDBConnection;
@Entity
@Table(schema="MDI",name="MDI670_PIF")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Pif o WHERE o.PLANYEAR=?1 AND o.PIF_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Pif o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Pif o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByBbank", query="SELECT o FROM Pif o WHERE o.PLANYEAR=?1 AND o.BBANK_SUB_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByCkt", query="SELECT o FROM Pif o WHERE o.PLANYEAR=?1 AND o.CKT_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI670_PIF o WHERE o.PLANYEAR=? AND o.PIF_ID=?"),//AUTO-GENERATED
})
public class Pif extends PifDAO implements Serializable{
	
	private static final long serialVersionUID = 2138458983326098288L;
	public static final String ESTIMATE_BASIS = "Estimate";
	public static final String WO_BASIS = " WO";
	public static final String BID_BASIS = " Bid";
	public static final String[] EST_SOURCES = {"DE Tech Spec", "Tech Planning","Other"};
	public static final double ADMIN_FACTOR = 0.35;
	public static final double PLANNING_FACTOR = 0.11;

	
	 /**
     * The Constructor.
     * 
     * @param planyear the planyear
     */
	public Pif(){
	}
    public Pif(int planyear){
    	super(planyear, 0);
    }
    
	/**
	 * The Constructor.
	 * 
	 * @param pifId the pif id
	 * @param planyear the planyear
	 */
	public Pif(int planyear, int pifId){
		super(planyear, pifId);
	}
	
	
	
	
	public Pif(Pif pif) {
		super(pif);
	}

	public String getPifLaborTitle()throws SQLException{
		if(getPifLabor()==null)
			return "User Specified";
		return getPifLabor().toString();
	}
    
	/**
	 * To string.
	 * 
	 * @return the string
	 * 
	 * @throws SQLException  */
	public String toString() {		
		return "#"+getPifNum()+" ("+ getOpYear() + "): "+(getDescription()!=null && getDescription().length()>40?getDescription().substring(0,40)+"...":getDescription());
	}
	
	/**
	 * Gets the op year.
	 * 
	 * @return the op year
	 */
	public int getOpYear() {
		if(getOpDate()!=null)
			return getOpDate().get(Calendar.YEAR);
		return 0;
	}
	
	/**
	 * Gets the pif est.
	 * 
	 * @return the pif est
	 * 
	 * @throws SQLException the SQL exception
	 */
	public PifEst getPifEst() throws SQLException {
		return PifEst.getInstance(getPlanyear(), getPifId());
	}
	
    /**
     * <html>
     * Returns <font color=green>Green</font> for Approved,
     * <font color=red>Red</font> for Cancelled,
     * <font color=yellow>Yellow</font> for Deferred,
     * and Black for preliminary.
     * </html>
     * 
     * @return the <code>Color</code> based on the status.
     * 
     * @throws SQLException the SQL exception
     */
    public Color getStatusColor()throws SQLException{    	
    	if(getPifStatus() != null)
    		return getPifStatus().getColor();
    	return Color.BLACK;
    }
    
    /**
     * Gets the sce gross total.
     * 
     * @return the total sce gross cost from the pif's WO's.
     * 
     * @throws SQLException the SQL exception
     */
    public int getSceGrossTotal() throws SQLException{
    	int sgTotal=0;
		if(getPifWos()!=null)
			for(PifWo wo : getPifWos()) 
				sgTotal+=wo.getSceGross();
		return sgTotal;
    }
    
    /**
     * Gets the sce forecast total.
     * 
     * @return the total forecast cost from the pif's WO's.
     * 
     * @throws SQLException the SQL exception
     */
    public int getSceForecastTotal() throws SQLException{ //Not being used, James ????
    	int fTotal=0;
		if(getPifWos()!=null)
			for(PifWo wo : getPifWos()) 
				fTotal+=wo.getPlanningCost();
		return fTotal;
    }
    

    
    /**
     * This function returns the flag id if the
     * Total PIF Estimate is less than or equal to &value.
     * 
     * @return - flagId or 0
     * 
     * @throws SQLException the SQL exception
     */
    public int getPIFEstChangedFlag() throws SQLException{
        Flag flag = Flag.getInstance(getPlanyear(), Flag.PIF_COST_FLAG);
        if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {    
            if(getEstimate() < flag.getValue())
                return flag.getFlagId();
        }
        return 0;
    }
    
    /**
     * This function returns the flag id if the
     * Total PIF estimate changed from the previous plan by greater than |&value%|.
     * 
     * @return - flagId or 0
     * 
     * @throws SQLException the SQL exception
     */
    public int getPIFEstChangedPYFlag() throws SQLException{    	
        Flag flag = Flag.getInstance(getPlanyear(), Flag.PIF_COST_PY_FLAG);
        if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {
        	
        	Pif pp = getPrevInstance();
        	if(pp!=null){
	        	int prev=pp.getEstimate();        	   	
				if(prev==0 && getEstimate()!=0){                    
					return flag.getFlagId();
				}else if(prev!=0){
					if(Math.abs((getEstimate()/prev)-1) > flag.getValue())
						return flag.getFlagId();
				}  
        	}
        }
        return 0;
    }
    
	public Pif getPrevInstance() throws SQLException {
		return getInstance(getPlanyear()-1, getPifId());
	}
	public int getEstMandays() throws SQLException{		
		if(getLaborTypeId()==0){
			return 0;
		}
		return getPifEst().getManDays();
	}
	
	public void setEstMandays(int m) throws SQLException{		
		getPifEst().setManDays(m);
	}
      
	public int getEstLabor() throws SQLException{
		if(getLaborTypeId()==0)
			return 0;	
		return getPifEst().getLabor(getLaborTypeId());
	}

	public int getEstMaterial() throws SQLException{
		if(getLaborTypeId()==0)
			return 0;		
		return getPifEst().getMaterial();
	}
	
	public void setEstMaterial(int m) throws SQLException{		
		getPifEst().setMaterial(m);
	}

	public int getEstAdmin() throws SQLException{
		if(getLaborTypeId()==0)
			return 0;		
		return (int)Math.round(getEstMaterial()*Pif.ADMIN_FACTOR);
	}
	
	public void setEstAdmin(int m) throws SQLException{	
		//none, calculated
	}
	
	
	public int getEstContract() throws SQLException{
		if(getLaborTypeId()==0)
			return 0;		
		return getPifEst().getContract();
	}
	
	public void setEstContract(int m) throws SQLException{		
		getPifEst().setContract(m);
	}
	
	public int getEstPlanning() throws SQLException{
		if(getLaborTypeId()==0)
			return 0;		
		return (int)Math.round((getEstLabor()+getEstContract())*Pif.PLANNING_FACTOR);
	}
	
	public void setEstPlanning(int m) throws SQLException{		
		//none, calculated
	}
	
    public int getEstimate()throws SQLException{
    	if(getLaborTypeId()==0)
    		return getUserEstimate();
    	return getPifEst().getEstimate(getLaborTypeId());
    }
    
    public void setEstimate(int userEstimate) throws SQLException{
    	setUserEstimate(userEstimate);
    }
    
    public int getEstOverheadCost()throws SQLException{    	
    	return (int)Math.round(getEstimate()*getPifOverhead());    	
    }    

	public int getEstRelated() throws SQLException{			
		return getPifEst().getRelated();
	}
	
	public void setEstRelated(int m) throws SQLException{		
		getPifEst().setRelated(m);
	}
    
    public int getEstProjectCost() throws SQLException{		
		return getEstOverheadCost()+getEstRelated();
	}
    
    
    //Current    
  

	
	
	
	public String getBasis(int bids, int wos){		
		if(bids!=0 && wos!=0)
			return bids+BID_BASIS+", "+wos+WO_BASIS;	
		if(bids!=0)
			return bids+BID_BASIS;
		if(wos!=0)
			return wos+WO_BASIS;		
		return ESTIMATE_BASIS;
			
	}
	
	public int getMandays() throws SQLException{		
		if(getDpiMandays()==0){
			return getEstMandays();
		}
		return getDpiMandays();
	}
	
	
	public String getMandaysBasis() throws SQLException{
		if(getDpiMandays()==0){
			return ESTIMATE_BASIS;
		}
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getDpiMandays()!=0)		
				deez ++;
		}
		return getBasis(0,deez);
	}
	
	public int getLabor() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getElecBid()!=0)		
				deez += w.getElecBid();
			else if(w.getDpiLabor()!=0)
				deez += w.getDpiLabor();			
		}		
		if(deez==0){
			deez += getEstLabor();
		}
		return deez;
	}
	

	
	
	public String getLaborBasis() throws SQLException{
		int bids = 0;
		int wos = 0;
		for(PifWo w:getPifWos()){
			if(w.getElecBid()!=0)		
				bids++;
			else if(w.getDpiLabor()!=0)
				wos++;			
		}		
		return getBasis(bids,wos);
	}

	/**
	 * Returns the Material summation
	 * @return The material
	 */
	public int getMaterial() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){			
			if(w.getDpiAMaterial()!=0 || w.getDpiBMaterial()!=0)
				deez += w.getDpiAMaterial()+w.getDpiBMaterial();
		}	
		if(deez==0){
			deez += getEstMaterial();
		}
		return deez;
	}
	
	public String getMaterialBasis() throws SQLException{
		int bids = 0;
		int wos = 0;
		for(PifWo w:getPifWos()){			
			if(w.getDpiAMaterial()!=0 || w.getDpiBMaterial()!=0)
				wos++;			
		}		
		return getBasis(bids,wos);
	}
	
	public int getAdmin() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getDpiAdmin()!=0)
				deez += w.getDpiAdmin();
		}	
		if(deez==0){
			deez += getEstAdmin();
		}
		return deez;
	}
	
	public String getAdminBasis() throws SQLException{
		int bids = 0;
		int wos = 0;
		for(PifWo w:getPifWos()){
			if(w.getDpiAdmin()!=0)
				wos++;			
		}		
		return getBasis(bids,wos);
	}

	/**
	 * Returns the Contract summation
	 * @return The Contract
	 */
	public int getContract() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getCostPlus()!=0)		
				deez += w.getCostPlus();
			else if(w.getDpiContract()!=0)
				deez += w.getDpiContract();
		}	
		if(deez==0){
			deez += getEstContract();
		}
		return deez;
	}
	
	public String getContractBasis() throws SQLException{
		int bids = 0;
		int wos = 0;
		for(PifWo w:getPifWos()){
			if(w.getCostPlus()!=0)
				bids++;
			else if(w.getDpiContract()!=0)
				wos++;			
		}		
		return getBasis(bids,wos);
	}
	
	public int getPlanning() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getPlanningCost()!=0)	
				deez += w.getPlanningCost();
			else if(w.getDpiPlanning()!=0)
				deez += w.getDpiPlanning();
		}	
		if(deez==0){
			deez += getEstPlanning();
		}
		return deez;
	}
	
	public String getPlanningBasis() throws SQLException{
		int bids = 0;
		int wos = 0;
		for(PifWo w:getPifWos()){
			if(w.getPlanningCost()!=0)
				bids++;
			else if(w.getDpiPlanning()!=0)
				wos++;			
		}		
		return getBasis(bids,wos);
	}
	
	
	
	public double getPifOverhead() throws SQLException{
		return Department.getInstance(getPlanyear()).getPifOverhead(); 
	}
	
	/**
	 * Returns the summation of Labor Material and Contract
	 * @return The cost
	 */
	public int getTotalCost() throws SQLException{		
		if(getLabor()+getMaterial()+getContract() == 0 && getLaborTypeId()==0)
			return getEstimate();
		//if(getLaborTypeId()==0)
					
		return getLabor()+getAdmin()+getMaterial()+getContract()+getPlanning();
	}
	
	/**
	 * Returns the summation of Labor Material and Contract times the PIF Overhead
	 * @return The cost
	 */
	public int getOverheadCost() throws SQLException{		
		return (int)Math.round(getTotalCost()*getPifOverhead());
	}
	
	/**
	 * Returns the Contingency summation
	 * @return The Contingency
	 */
	public int getContingency()throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getAddContingency()!=0)		
				deez += w.getAddContingency();
			else if(w.getDpiContingency()!=0)
				deez += w.getDpiContingency();			
		}	
		if(deez==0)
			deez += getEstRelated(); 
		return deez;
	}
	
	public String getContingencyBasis() throws SQLException{
		int bids = 0;
		int wos = 0;
		for(PifWo w:getPifWos()){
			if(w.getAddContingency()!=0)
				bids++;
			else if(w.getDpiContingency()!=0)
				wos++;			
		}		
		return getBasis(bids,wos);
	}

	public int getProjectCost() throws SQLException{
		if(isRgtFunded())
			return getRGTTotalEstCost();
		return getOverheadCost()+getContingency();
	}
	
	
	//BIDs
	
	public int getLaborBid() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getElecBid();		
		}		
		return deez;
	}
	
	public int getContractBid() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getCostPlus();	
		}		
		return deez;
	}
	
	public int getPlanningBid() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getPlanningCost();	
		}		
		return deez;
	}
	
	public int getTotalCostBid() throws SQLException{		
		return getLaborBid()+getContractBid()+getPlanningBid();
	}
	
	public int getOverheadCostBid() throws SQLException{		
		return (int)Math.round(getTotalCostBid()*getPifOverhead());
	}
	
	public int getContingencyBid() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getAddContingency();	
		}		
		return deez;
	}
	
	public int getProjectCostBid() throws SQLException{		
		return getOverheadCostBid()+getContingencyBid();
	}
	
	
	//DPI 
	
	public int getDpiMandays() throws SQLException{		
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getDpiMandays();	
		}		
		return deez;
	}
	
	public int getDpiLabor() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getDpiLabor();			
		}		
		return deez;
	}
	
	public int getDpiMaterial() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getDpiAMaterial()+w.getDpiBMaterial();			
		}		
		return deez;
	}
	
	
	public int getDpiAdmin() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getDpiAdmin();			
		}		
		return deez;
	}
	
	public int getDpiPlanning() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getDpiPlanning();			
		}		
		return deez;
	}
	
	
	public int getDpiContract() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getDpiContract();			
		}		
		return deez;
	}
	
	public int getDpiTotalCost() throws SQLException{		
		return getDpiLabor()+getDpiMaterial()+getDpiAdmin()+getDpiContract()+getDpiPlanning();
	}
	
	public int getDpiOverheadCost() throws SQLException{		
		return (int)Math.round(getDpiTotalCost()*getPifOverhead());
	}
	
	public int getDpiContingency() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			deez += w.getDpiContingency();			
		}		
		return deez;
	}
	
	public int getDpiProjectCost() throws SQLException{		
		return getDpiOverheadCost()+getDpiContingency();
	}
	
	
	
	
	public int getLaborBidCount() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getElecBid()!=0)		
				deez++;
		}		
		return deez;
	}
	
	
	public int getContractBidCount() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getCostPlus()!=0)		
				deez++;
		}		
		return deez;
	}
	
	public int getContingencyBidCount() throws SQLException{
		int deez = 0;
		for(PifWo w:getPifWos()){
			if(w.getAddContingency()!=0)		
				deez++;
		}		
		return deez;
	}
	
	public String getWoCount() throws SQLException{		
		return getBasis(0, getPifWos().size());
	}
	
	public String getBidCount() throws SQLException{
		return getBasis(getPifWos().size(), 0);
	}

	public int getApprovedCost() throws SQLException {
		if(getPifStatus()!=null && getPifStatus().getStatusId()==1){
			return getProjectCost();
		}
		return 0;
	}	
	
	public String getEstimateSourceBasis(){
		if(getEstimateSource()==null)
			return EST_SOURCES[2];
		if(getEstimateSource().equals(EST_SOURCES[0]))
			return EST_SOURCES[0];
		if(getEstimateSource().equals(EST_SOURCES[1]))
			return EST_SOURCES[1];		
		return EST_SOURCES[2];
	}
	
	public void setEstimateSourceBasis(String s) throws SQLException{		
		if(s.equals(EST_SOURCES[2]))
			setEstimateSource("");
		else
			setEstimateSource(s);
	}
	
	public void setBbank(Bbank bbank)throws SQLException{
		super.setBbank(bbank);
		setCkt(null);
		setProj(null);	
	}
	
	//BME same issue as PIF getApprovedCost, is there a better way to do this
	public boolean isBudgetImpactCarryOver() throws SQLException{
		//Status = Approved && Category = Carryover OR Status = Approved for Planning
		return getPifStatus()!=null  && getStatusId()==1 && getCategoryId()==3;
	}
	
	public boolean isBudgetImpactAppForPlan() throws SQLException{
		//Status = Approved && Category = Carryover OR Status = Approved for Planning
		return getPifStatus()!=null  && getStatusId()==6;
	}
	
	public boolean isBudgetImpact() throws SQLException{
		//Status = Approved && Category = Carryover OR Status = Approved for Planning
		return isBudgetImpactCarryOver() || isBudgetImpactAppForPlan();
	}
	
	public int getBudgetImpact() throws SQLException{
		if(isBudgetImpact())
			return (int)Math.round(getAltDouble1());
		return getApprovedCost();
	}
	
	public String getBudgetImpactText() throws SQLException{
		if(isBudgetImpactCarryOver())
			return "(Carryover Cost)";
		else if(isBudgetImpactAppForPlan())
			return "(Planning Cost)";
		return "";
	}
	
	public void setBudgetImpact(int budgetImpact) throws SQLException{
		if(isBudgetImpact())
			setAltDouble1(budgetImpact);		
	}

	public Calendar getScopeToTp() throws SQLException {
		Calendar cal = null;
		for(PifWo w: getPifWos())
			if(w.getScopeToTp()!=null && (cal == null || w.getScopeToTp().compareTo(cal) < 0))
				cal=w.getScopeToTp();
		return cal;
	}
	
	public Calendar getScopePreparedDate() throws SQLException {
		Calendar cal = null;
		for(PifWo w: getPifWos())
			if(w.getScopePrep()!=null && (cal == null || w.getScopePrep().compareTo(cal) < 0))
				cal=w.getScopePrep();
		return cal;
	}
	
	public int getRGTTotalEstCost()throws SQLException{
		int total = 0;
		for(PifWo wo: getPifWos()){
		total += wo.getTotalEstCost();
		}
		return total;
	}
	public int getTotalOMCost()throws SQLException{
		int total = 0;
		for(PifWo wo: getPifWos()){
		total += wo.getOAndM();
		}
		return total;
	}
	public double getTotalOMPercent()throws SQLException{
		return ((getTotalOMCost()*1.0)/(getRGTTotalEstCost()*1.0))*100.0;
		
	}
	public boolean isNotificationRequired() throws SQLException{
		if(getTotalOMPercent()>10  || getRGTTotalEstCost() >= 250000.0)
			return true;
		return false;
	}
	
//=======
//	
//	/**
//	 
//	 * retrieves all pifs for a specified planyear.  This method differs form getPifs in the Department object
//	 * by retrieving pifs regardless if deleted_ts is null or not.
//	 * 
//	 * @param planyear
//	 * @return pifs
//	 * @throws SQLException
//	 */
//	public static TreeSet<Pif> getAllPifs(int planyear) throws SQLException {
//		TreeSet<Pif> pifs = new TreeSet<Pif>();
//		
//		PreparedStatement ps = PDBConnection.getInstance().getConnection().prepareStatement("SELECT * FROM MDI.MDI670_PIF WHERE PLANYEAR=?");
//		ps.setInt(1,planyear);
//		ResultSet rs = ps.executeQuery();
//		while(rs.next())
//			pifs.add(Pif.getInstance(rs));
//		rs.close();
//		ps.close();
//		return pifs;
//	}
//	
	public static String getNextPifNum(int planyear, int year, District d) throws SQLException{
		EspLogger.message("Calc result: ", (year%10)+d.getDistrictNum());
		String num = null;
		PreparedStatement ps = PDBConnection.getInstance().getConnection().prepareStatement("SELECT MAX(PIF_NUM) FROM MDI.MDI670_PIF WHERE PLANYEAR=? AND PIF_NUM LIKE '"+(year%10)+d.getDistrictNum()+"%'");
		ps.setInt(1,planyear);
		ResultSet rs = ps.executeQuery();
		if(rs.next())
			num = ""+(rs.getInt(1)+1);
		rs.close();
		ps.close();
		if(num.equals("1"))
			num=(year%10)+""+d.getDistrictNum()+"001";
		else if(year%10==0)
			return "0"+num;
		return num;
	}
	
	public int getTotalImpactScore() throws SQLException{
		int total = 0;
		for(PifImpact pwi : getPifImpacts())
			total+=pwi.getPifImpactValue().getValue();
		return total;
	}
	
	public String getGwOther(){
		return getAltVarchar4();
	}
	
	public void setGwOther(String text){
		try {
			setAltVarchar4(text);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public double getPercentComplete() throws SQLException{
//		return getAltDouble2();
		double percent =0;
		for(PifWo wo : this.getPifWos())
			percent+=wo.getPercentComplete();
			if(getPifWos().size()>0)
				percent=percent/this.getPifWos().size();
		return percent;
	}
	
	public void setPercentComplete(double num) throws SQLException{
		setAltDouble2(num);
	}
	

	
}
