package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CprSubAcct;
import com.sce.esp.object.model.SceElem;
import com.sce.esp.object.model.ScopeType;
import com.sce.esp.object.model.ScopeTypeElem;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ScopeTypeElemDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,SCOPE_TYPE_ID,SCE_ELEM_ID,CPR_SUB_ACCT_ID};
	public final static int ID_LIMIT = 9;
	public final static int SCOPETYPEID_LIMIT = 9;
	public final static int SCEELEMID_LIMIT = 9;
	public final static int CPRSUBACCTID_LIMIT = 9;
	private int id;
	private int scopeTypeId;
	private int sceElemId;
	private int cprSubAcctId;
	private ScopeType scopeType;
	private SceElem sceElem;
	private CprSubAcct cprSubAcct;
	public static ScopeTypeElem getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static ScopeTypeElem getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		ScopeTypeElem o = null;
		if(cache != null && cache.contains(ScopeTypeElem.class, pk))
			o = em.find(ScopeTypeElem.class, pk);
		if(o==null && getAICache().contains(ScopeTypeElem.class, pk))
			o = getAICache().find(ScopeTypeElem.class, pk);
		if(o==null && fetch)
			o = em.find(ScopeTypeElem.class, pk);
		if(o==null && fetch && ScopeTypeElem.class.getAnnotation(AutoInsertable.class) != null){
			o = new ScopeTypeElem(id);
			getAICache().cache(ScopeTypeElem.class, o);
		}
		return o;
	}
	public static Collection<ScopeTypeElem> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ScopeTypeElem> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ScopeTypeElem> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ScopeTypeElem o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ScopeTypeElem> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeTypeElem> tq = em.createQuery(jpql,ScopeTypeElem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ScopeTypeElem> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeTypeElem> tq = em.createNamedQuery(name,ScopeTypeElem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ScopeTypeElemDAO(){}
	public ScopeTypeElemDAO(int id){
		this.id=id;
	}
	public ScopeTypeElemDAO(ScopeTypeElemDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ScopeTypeElemDAO orig){
		this.scopeTypeId=orig.getScopeTypeId();
		this.sceElemId=orig.getSceElemId();
		this.cprSubAcctId=orig.getCprSubAcctId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDISX6_SEQ",sequenceName="MDISX6_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="SCOPE_TYPE_ID",nullable=false,length=9)
	public int getScopeTypeId(){
		return scopeTypeId;
	}
	public void setScopeTypeId(int scopeTypeId) throws java.sql.SQLException{
		if(isSame(scopeTypeId, getScopeTypeId()))return;
		int oldValue = getScopeTypeId();
		this.scopeTypeId=scopeTypeId;
		setProperty("SCOPE_TYPE_ID", scopeTypeId, oldValue);
		scopeType=null;
	}
	@Column(name="SCE_ELEM_ID",nullable=false,length=9)
	public int getSceElemId(){
		return sceElemId;
	}
	public void setSceElemId(int sceElemId) throws java.sql.SQLException{
		if(isSame(sceElemId, getSceElemId()))return;
		int oldValue = getSceElemId();
		this.sceElemId=sceElemId;
		setProperty("SCE_ELEM_ID", sceElemId, oldValue);
		sceElem=null;
	}
	@Column(name="CPR_SUB_ACCT_ID",nullable=true,length=9)
	public int getCprSubAcctId(){
		return cprSubAcctId;
	}
	public void setCprSubAcctId(int cprSubAcctId) throws java.sql.SQLException{
		if(isSame(cprSubAcctId, getCprSubAcctId()))return;
		int oldValue = getCprSubAcctId();
		this.cprSubAcctId=cprSubAcctId;
		setProperty("CPR_SUB_ACCT_ID", cprSubAcctId, oldValue);
		cprSubAcct=null;
	}
	public ScopeType getScopeType()throws java.sql.SQLException{
		if(scopeType==null)
			scopeType=ScopeType.getInstance(getScopeTypeId());
		return scopeType;
	}
	public void setScopeType(ScopeType scopeType)throws java.sql.SQLException{
		setScopeTypeId(scopeType==null?0:scopeType.getScopeTypeId());
		this.scopeType=scopeType;
	}
	public SceElem getSceElem()throws java.sql.SQLException{
		if(sceElem==null)
			sceElem=SceElem.getInstance(getSceElemId());
		return sceElem;
	}
	public void setSceElem(SceElem sceElem)throws java.sql.SQLException{
		setSceElemId(sceElem==null?0:sceElem.getSceElemId());
		this.sceElem=sceElem;
	}
	public CprSubAcct getCprSubAcct()throws java.sql.SQLException{
		if(cprSubAcct==null)
			cprSubAcct=CprSubAcct.getInstance(getCprSubAcctId());
		return cprSubAcct;
	}
	public void setCprSubAcct(CprSubAcct cprSubAcct)throws java.sql.SQLException{
		setCprSubAcctId(cprSubAcct==null?0:cprSubAcct.getId());
		this.cprSubAcct=cprSubAcct;
	}
	public ScopeTypeElem copy()throws java.sql.SQLException{
		ScopeTypeElem cp = new ScopeTypeElem((ScopeTypeElem)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ScopeTypeElemDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ScopeTypeElemDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getScopeTypeId(),o.getScopeTypeId())) diffs.add("SCOPE_TYPE_ID");
		if(!isSame(getSceElemId(),o.getSceElemId())) diffs.add("SCE_ELEM_ID");
		if(!isSame(getCprSubAcctId(),o.getCprSubAcctId())) diffs.add("CPR_SUB_ACCT_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(scopeType != null && scopeType.isNewInstance())
				scopeType.insert();
		if(sceElem != null && sceElem.isNewInstance())
				sceElem.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
