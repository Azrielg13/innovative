package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Vector;

import com.sce.esp.object.dao.DataAccessObject;
import com.sce.esp.util.AgObserver;

public class AgSubGrowth extends AgObserver {

	private static Hashtable<String,AgSubGrowth> hash = new Hashtable<String,AgSubGrowth>();
	private Hashtable<String, Boolean> observerMap = new Hashtable<String, Boolean>();
	private double _growthBC=0, _growthHC=0, _growthLC=0;
	private double growthBC=0, growthHC=0, growthLC=0;
	private double totalGrowthBC=0, totalGrowthHC=0, totalGrowthLC=0;
	private SubYear sy;
	private boolean forceUpdate=true;
	private Vector<CktGrowth> temps = new Vector<CktGrowth>();

	public static AgSubGrowth getInstance(int planyear, int simId, int subId, int year) throws SQLException{
		return getInstance(planyear,simId,subId,year,true);
	}
	public static AgSubGrowth getInstance(int planyear, int simId, int subId, int year, boolean fetch) throws SQLException{
		if(Sub.getInstance(planyear, subId).getYear(simId, year) == null)
			return new AgSubGrowth(Sub.getInstance(planyear, subId).getYear(simId, year));
		String key = MDIObject.getHashKey(new Object[]{planyear, simId, subId, year });
		AgSubGrowth o = hash.get(key);
		if(o == null && fetch){
			o = new AgSubGrowth(Sub.getInstance(planyear, subId).getYear(simId, year));
			hash.put(key,o);
		}
		return o;
	}

	private AgSubGrowth(SubYear sy){
		this.sy=sy;
		makeDirty();
		try {
			attachObservers();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void update(DataAccessObject dao) {
		super.update(dao);
		makeDirty();
		try {
			attachObservers();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void attachObservers() throws SQLException{
		if(sy != null){
			sy.getSub().addObserver(this);
			sy.addObserver(this);
			sy.getSub().getSimSub(getSimId()).addObserver(this);

			if(sy instanceof BbankYear){			
				((BbankYear)sy).addObserver(this);	
				for(CktGrowth cg:((BbankYear)sy).getCktGrowths()){
					cg.addObserver(this);
					cg.getGrowthType().addObserver(this);
				}
			}
			else{
				if(sy.getSub() instanceof Abank)
					((Abank)sy.getSub()).addObserver(this);	
				for(Bbank bb: sy.getBbanks()){
					if(bb.getSubType().isLoadServer())
						for(CktGrowth cg:bb.getYear(getSimId(), sy.getYear()).getCktGrowths()){
							cg.addObserver(this);
							cg.getGrowthType().addObserver(this);
						}
				}
			}
		}
	}
	
	public void makeDirty(){
		observerMap.put("GrowthNoPRNBC", isDirty);
		observerMap.put("GrowthNoPRNHC", isDirty);
		observerMap.put("GrowthNoPRNLC", isDirty);

		observerMap.put("GrowthBC", isDirty);
		observerMap.put("GrowthHC", isDirty);
		observerMap.put("GrowthLC", isDirty);

		observerMap.put("TotalGrowthBC", isDirty);
		observerMap.put("TotalGrowthHC", isDirty);
		observerMap.put("TotalGrowthLC", isDirty);
	}

	public SubYear getBbankYear(){
		return sy;
	}

	public int getPlanyear() {
		return sy.getPlanyear();
	}

	public int getSimId() {
		return sy.getSimId();
	}

	public int getYear(){
		return sy.getYear();
	}

	//======================================================	

	/**
	 * Summation of Circuit Growth * PRN 
	 */
	public double getGrowth()throws SQLException{
		if(forceUpdate || observerMap.get("GrowthBC")){		
			double growth=getGrowthNoPRN();
			growth*=sy.getPRN();
			growthBC=growth;
			observerMap.put("GrowthBC", !isDirty);
		}
		return growthBC;
	}

	public double getGrowthHC() throws SQLException {
		if(forceUpdate || observerMap.get("GrowthHC")){
			double growth=getGrowthNoPRNHC();//get reg g no prn
			growth*=(sy).getPRN();
			growthHC=growth;
			observerMap.put("GrowthHC", !isDirty);
		}
		return growthHC;
	}

	public double getGrowthLC() throws SQLException {
		if(forceUpdate || observerMap.get("GrowthLC")){
			double growth=getGrowthNoPRNLC();
			growth*=(sy).getPRN();
			growthLC=growth;
			observerMap.put("GrowthLC", !isDirty);
		}
		return growthLC;
	}

	//======================================================

	public double getGrowthNoPRN() throws SQLException{
		if(forceUpdate || observerMap.get("GrowthNoPRNBC")){			
			_growthBC=0;
			for(CktGrowth cg:getCktGrowths()){
				//EspLogger.debug(this, cg.getGrowthBC()+"");
				_growthBC += cg.getGrowthBC();
			}
			observerMap.put("GrowthNoPRNBC", !isDirty);
		}
		return _growthBC;
	}

	public double getGrowthNoPRNHC() throws SQLException{
		if(forceUpdate || observerMap.get("GrowthNoPRNHC")){
			_growthHC=0;
			for(CktGrowth cg:getCktGrowths())
				_growthHC += cg.getGrowthHC();
			observerMap.put("GrowthNoPRNHC", !isDirty);
		}
		return _growthHC;
	}

	public double getGrowthNoPRNLC() throws SQLException{
		if(forceUpdate || observerMap.get("GrowthNoPRNLC")){
			_growthLC=0;
			for(CktGrowth cg:getCktGrowths()){
				_growthLC += cg.getGrowthLC();
			}
			observerMap.put("GrowthNoPRNLC", !isDirty);
		}
		return _growthLC;
	}

	//======================================================

	public Vector<CktGrowth> getCktGrowths()throws SQLException{
		temps.clear();
		if(sy != null){

			if(sy instanceof BbankYear){			
				for(CktGrowth cg:((BbankYear)sy).getCktGrowths()){
					temps.add(cg);
				}
			}
			else{
				for(Bbank bb: sy.getBbanks()){
					if(bb.getSubType().isLoadServer())
						for(CktGrowth cg:bb.getYear(getSimId(), sy.getYear()).getCktGrowths()){
							temps.add(cg);
						}
				}
			}
		}
		return temps;
	}

	public double getGrowthTotal() throws SQLException {
		if(forceUpdate || observerMap.get("TotalGrowthBC")){		
			double total = 0;
			for(int y=getYear(); y>getPlanyear()-1; y--)
				total += getGrowth();
			totalGrowthBC=total;
			observerMap.put("TotalGrowthBC", !isDirty);
		}
		return totalGrowthBC;
	}

	public double getGrowthTotalHC() throws SQLException {
		if(forceUpdate || observerMap.get("TotalGrowthHC")){		
			double total = 0;
			for(int y=getYear(); y>getPlanyear()-1; y--)
				total += getGrowthHC();
			totalGrowthHC=total;
			observerMap.put("TotalGrowthHC", !isDirty);
		}
		return totalGrowthHC;
	}

	public double getGrowthTotalLC() throws SQLException {
		if(forceUpdate || observerMap.get("TotalGrowthLC")){		
			double total = 0;
			for(int y=getYear(); y>getPlanyear()-1; y--)
				total += getGrowthLC();
			totalGrowthLC=total;
			observerMap.put("TotalGrowthLC", !isDirty);
		}
		return totalGrowthLC;
	}

}
