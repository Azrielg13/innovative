/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;
import java.io.Serializable;
import java.sql.SQLException;
import java.util.TreeSet;
import java.util.Vector;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.ProjElemDAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI550_PROJ_ELEM")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ProjElem o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.PROJ_ID=?3 AND o.ELEM_ID=?4"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ProjElem o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ProjElem o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByProj", query="SELECT o FROM ProjElem o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.PROJ_ID=?3 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI550_PROJ_ELEM o WHERE o.PLANYEAR=? AND o.SIM_ID=? AND o.PROJ_ID=? AND o.ELEM_ID=?"),//AUTO-GENERATED
})
public class ProjElem extends ProjElemDAO implements Serializable{
	
	private static final long serialVersionUID = -5111689354952690230L;

	public final static int APPROVED = 0;
	
	/** The Constant PLAN_EST. */
	public final static int PLAN_EST = 1;
	
	/** The Constant PWEE_COST. */
	public final static int PWEE_COST = 2;
	
	/** The Constant WO_COST. */
	public final static int WO_COST = 3;
	
	/** The Constant NONE. */
	public final static int NONE = 4;
	
	public final static String[] STAGE_NAME = {"Approve", "Planning Estimate", "PWEE", "WO", "NONE"};
	
	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 */
	public ProjElem(){
	}
	public ProjElem(int planyear) {
		super(planyear,0,0,0);
	}
	
	/**
	 * The Constructor.
	 * 
	 * @param projId the proj id
	 * @param elemId the elem id
	 * @param simId the sim id
	 * @param planyear the planyear
	 */
	public ProjElem(int planyear, int simId, int projId, int elemId){
		super(planyear,simId,projId,elemId);
	}
	
	public ProjElem(ProjElem projElem) {
		super(projElem);
	}

//	public TreeSet<ProjElemCost> getProjElemCosts()throws SQLException{
//		TreeSet<ProjElemCost> pesc = new TreeSet<ProjElemCost>(super.getProjElemCosts());
//		if(getSimId() > 0){
//			int bs=0;
//    		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
//    		if(sim != null)
//    			bs = sim.getBaseSimId();
//    		ProjElem pe = ProjElem.getInstance(getPlanyear(),bs,getProjId(),getElemId());
//    		if(pe != null)
//    			for(ProjElemCost pec : pe.getProjElemCosts())
//    				pesc.add(ProjElemCost.getInstance(getPlanyear(), getSimId(), pec.getCostId()));
//		}
//		return pesc;
//	}
//	
//	public int getPriorCost()throws SQLException{
//		int prior=0;
//		for(ProjElemCost pec : getProjElemCosts())
//			if(pec.getStage()==getActiveStage())
//				prior+=pec.getPriorCost();
//		return prior;
//	}
//	
//	public int getApprovedPriorCost()throws SQLException{
//		int prior=0;
//		for(ProjElemCost pec : getProjElemCosts())
//			if(pec.getStage()==ProjElem.APPROVED)
//				prior+=pec.getPriorCost();
//		return prior;
//	}
//	
//	/**
//	 * 
//	 * @see getActualTotalCost();
//	 * 
//	 * @return the total cost
//	 * 
//	 * @throws SQLException the SQL exception
//	 */
//	public int getTotalCost() throws SQLException {
//		try{			
//			if(getProj()!=null && (getProj().getStatus()==Proj.CANCELLED || getProj().getStatus()==Proj.ABORTED))
//				return 0;	
//			return getActualTotalCost();
//		}catch(Exception e){
//			e.printStackTrace();
//		}
//		return 0;
//	}
//	
//	/**
//	 * Gets the total cost for the specified year.
//	 * 
//	 * @param year the year
//	 * 
//	 * @return the total cost
//	 * 
//	 * @throws SQLException the SQL exception
//	 */
//	public int getTotalCost(int year) throws SQLException {
//		if(getProj()!=null && (getProj().getStatus()==Proj.CANCELLED || getProj().getStatus()==Proj.ABORTED))
//			return 0;	
//		return getActualTotalCost(year);
//	}
//	
//	/**
//	 * Gets the sum of all costs for the element for all years.
//	 * 
//	 * @return the total cost
//	 * 
//	 * @throws SQLException the SQL exception
//	 */
//	public int getActualTotalCost() throws SQLException {
//		int totalCost=0;
//		for(int year=getPlanyear(); year<getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
//			totalCost+=getActualTotalCost(year);		
//		return totalCost+getPriorCost(); 
//	}
//	
//	/**
//	 * Gets the total cost.
//	 * 
//	 * @param year the year
//	 * 
//	 * @return the total cost
//	 * 
//	 * @throws SQLException the SQL exception
//	 */
//	public int getActualTotalCost(int year) throws SQLException {
//		int totalCost=0;
//		for(ProjElemCost pec:getProjElemCosts())
//			if(pec.getStage()==getActiveStage())
//				totalCost+=pec.getCost(year);
//		return totalCost;
//	}
//	
//	public int getPlanEstCost(int year) throws SQLException {
//		int totalCost=0;
//		for(ProjElemCost pec:getProjElemCosts())
//			if(pec.getStage()==ProjElem.PLAN_EST)
//				totalCost+=pec.getCost(year);
//		return totalCost;
//	}
//	
//	public int getPWEECost(int year) throws SQLException {
//		int totalCost=0;
//		for(ProjElemCost pec:getProjElemCosts())
//			if(pec.getStage()==ProjElem.PWEE_COST)
//				totalCost+=pec.getCost(year);
//		return totalCost;
//	}
//	
//	public int getWOCost(int year) throws SQLException {
//		int totalCost=0;
//		for(ProjElemCost pec:getProjElemCosts())
//			if(pec.getStage()==ProjElem.WO_COST)
//				totalCost+=pec.getCost(year);
//		return totalCost;
//	}
//	
//	/**
//	 * Gets the total cost.
//	 * 
//	 * @return the total cost
//	 * 
//	 * @throws SQLException the SQL exception
//	 */
//	public int getApprovedTotalCost() throws SQLException {
//		int totalCost=0;
//		for(int year=getPlanyear(); year<getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
//			totalCost+=getApprovedTotalCost(year);	
//		return totalCost+getApprovedPriorCost();
//	}
//	
//	/**
//	 * Gets the total cost.
//	 * 
//	 * @param year the year
//	 * 
//	 * @return the total cost
//	 * 
//	 * @throws SQLException the SQL exception
//	 */
//	public int getApprovedTotalCost(int year) throws SQLException {
//		int totalCost=0;
//		for(ProjElemCost pec:getProjElemCosts())
//			if(pec.getStage()==ProjElem.APPROVED)
//				totalCost+=pec.getCost(year);
//		return totalCost;
//	}
//	
//	/**
//	 * To string.
//	 * 
//	 * @return the string
//	 */
//	public String toString(){
//		try {
//			if(getElem() != null)
//				return ""+getElem();
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//		return null;
//	}
//	
//    public Vector<ProjElemCost> getCurrentCostElems() throws SQLException{    	
//    	Vector<ProjElemCost> cur = new Vector<ProjElemCost>();
//    	for(ProjElemCost ce : getProjElemCosts())
//			if(ce.getStage()==getActiveStage())
//				cur.add(ce);
//		return cur;
//    }  
//    
//    public Vector<ProjElemCost> getApprovedCostElems() throws SQLException{
//    	Vector<ProjElemCost> app = new Vector<ProjElemCost>();
//    	for(ProjElemCost ce : getProjElemCosts())
//			if(ce.getStage()==APPROVED)
//				app.add(ce);
//		return app;
//    } 
//    
//    public String getCurrentCostElemScope() throws SQLException{    	
//    	String scope = "";
//    	for(ProjElemCost ce : getCurrentCostElems())
//			scope += ce.getScope()+"\n\n";
//		return scope;
//    } 
//    
//    public String getCurrentScopeWithStage() throws SQLException{    	
//    	String scope = "";
//    	for(ProjElemCost ce : getCurrentCostElems())
//			scope += ce.getScopeWithStage()+"\n\n";
//		return scope;
//    } 
//    
//    public String getApprovedCostElemScope() throws SQLException{    	
//    	String scope = "";
//    	for(ProjElemCost ce : getApprovedCostElems())
//			scope += ce.getScope()+"\n\n";
//		return scope;
//    }
//    public int getActiveStage(){
//    	if(super.getActiveStage() == 0)
//    		return -1;
//    	return super.getActiveStage();
//	}
}
