package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Program;
import com.sce.esp.object.model.ProgramSapWbs;
import com.sce.esp.object.model.SapWbs;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ProgramSapWbsDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PROGRAM_ID,SAP_WBS_ID};
	public static enum PROPERTY{PROGRAM_ID,SAP_WBS_ID,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1};
	public final static int PROGRAMID_LIMIT = 9;
	public final static int SAPWBSID_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int programId;
	private int sapWbsId;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Program program;
	private SapWbs sapWbs;
	public static ProgramSapWbs getInstance(int programId, int sapWbsId)throws java.sql.SQLException{
		return getInstance(programId, sapWbsId, true);
	}
	public static ProgramSapWbs getInstance(int programId, int sapWbsId, boolean fetch)throws java.sql.SQLException{
		if(isNull(programId, sapWbsId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(programId, sapWbsId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProgramSapWbs o = null;
		if(cache != null && cache.contains(ProgramSapWbs.class, pk))
			o = em.find(ProgramSapWbs.class, pk);
		if(o==null && getAICache().contains(ProgramSapWbs.class, pk))
			o = getAICache().find(ProgramSapWbs.class, pk);
		if(o==null && fetch)
			o = em.find(ProgramSapWbs.class, pk);
		if(o==null && fetch && ProgramSapWbs.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProgramSapWbs(programId, sapWbsId);
			getAICache().cache(ProgramSapWbs.class, o);
		}
		return o;
	}
	public static Collection<ProgramSapWbs> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProgramSapWbs> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProgramSapWbs> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProgramSapWbs o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProgramSapWbs> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProgramSapWbs> tq = em.createQuery(jpql,ProgramSapWbs.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProgramSapWbs> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProgramSapWbs> tq = em.createNamedQuery(name,ProgramSapWbs.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProgramSapWbsDAO(){}
	public ProgramSapWbsDAO(int programId, int sapWbsId){
		this.programId=programId;
		this.sapWbsId=sapWbsId;
	}
	public ProgramSapWbsDAO(ProgramSapWbsDAO orig){
		super(orig);
		this.programId=orig.getProgramId();
		this.sapWbsId=orig.getSapWbsId();
		copyFrom(orig);
	}
	public void copyFrom(ProgramSapWbsDAO orig){
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{programId, sapWbsId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PROGRAM_ID",nullable=false,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
		program=null;
	}
	@Id
	@Column(name="SAP_WBS_ID",nullable=false,length=9)
	public int getSapWbsId(){
		return sapWbsId;
	}
	public void setSapWbsId(int sapWbsId) throws java.sql.SQLException{
		if(isSame(sapWbsId, getSapWbsId()))return;
		int oldValue = getSapWbsId();
		this.sapWbsId=sapWbsId;
		setProperty("SAP_WBS_ID", sapWbsId, oldValue);
		sapWbs=null;
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getProgramId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setProgramId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public SapWbs getSapWbs()throws java.sql.SQLException{
		if(sapWbs==null)
			sapWbs=SapWbs.getInstance(getSapWbsId());
		return sapWbs;
	}
	public void setSapWbs(SapWbs sapWbs)throws java.sql.SQLException{
		setSapWbsId(sapWbs==null?0:sapWbs.getSapWbsId());
		this.sapWbs=sapWbs;
	}
	public ProgramSapWbs copy()throws java.sql.SQLException{
		ProgramSapWbs cp = new ProgramSapWbs((ProgramSapWbs)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProgramSapWbsDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ProgramSapWbsDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		if(!isSame(getSapWbsId(),o.getSapWbsId())) diffs.add("SAP_WBS_ID");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
