package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Issue;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.Resolver;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class IssueDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ISSUE_ID};
	public static enum PROPERTY{ISSUE_ID,APPLICATION_ID,STATUS_ID,ISSUE_LOC,PRIORITY_ID,SEVERITY_ID,ISSUE_SUMMARY,DETAILS,ISSUER_ID,RESPONSE_DATE,RESPONDER_ID,RESOLVED_DATE,ASSIGNED_DATE,QA_DATE,FIX_DATE,DEV_COMMENTS,TYPE_ID,PARENT_ID,DUPLICATE_DATE,NAB_DATE,CLOSED_DATE};
	public final static int ISSUEID_LIMIT = 9;
	public final static int APPLICATIONID_LIMIT = 9;
	public final static int STATUSID_LIMIT = 9;
	public final static int ISSUELOC_LIMIT = 64;
	public final static int PRIORITYID_LIMIT = 9;
	public final static int SEVERITYID_LIMIT = 9;
	public final static int ISSUESUMMARY_LIMIT = 256;
	public final static int DETAILS_LIMIT = 1024;
	public final static int ISSUERID_LIMIT = 9;
	public final static int RESPONSEDATE_LIMIT = 7;
	public final static int RESPONDERID_LIMIT = 9;
	public final static int RESOLVEDDATE_LIMIT = 7;
	public final static int ASSIGNEDDATE_LIMIT = 7;
	public final static int QADATE_LIMIT = 7;
	public final static int FIXDATE_LIMIT = 7;
	public final static int DEVCOMMENTS_LIMIT = 512;
	public final static int TYPEID_LIMIT = 9;
	public final static int PARENTID_LIMIT = 9;
	public final static int DUPLICATEDATE_LIMIT = 7;
	public final static int NABDATE_LIMIT = 7;
	public final static int CLOSEDDATE_LIMIT = 7;
	private int issueId;
	private int applicationId;
	private int statusId;
	private String issueLoc;
	private int priorityId;
	private int severityId;
	private String issueSummary;
	private String details;
	private int issuerId;
	private Calendar responseDate;
	private int responderId;
	private Calendar resolvedDate;
	private Calendar assignedDate;
	private Calendar qaDate;
	private Calendar fixDate;
	private String devComments;
	private int typeId;
	private int parentId;
	private Calendar duplicateDate;
	private Calendar nabDate;
	private Calendar closedDate;
	private Collection<Resolver> resolvers;
	private LookUp application;
	private LookUp status;
	private User issuer;
	private User responder;
	private LookUp type;
	private LookUp priority;
	private LookUp severity;
	public static Issue getInstance(int issueId)throws java.sql.SQLException{
		return getInstance(issueId, true);
	}
	public static Issue getInstance(int issueId, boolean fetch)throws java.sql.SQLException{
		if(isNull(issueId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(issueId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Issue o = null;
		if(cache != null && cache.contains(Issue.class, pk))
			o = em.find(Issue.class, pk);
		if(o==null && getAICache().contains(Issue.class, pk))
			o = getAICache().find(Issue.class, pk);
		if(o==null && fetch)
			o = em.find(Issue.class, pk);
		if(o==null && fetch && Issue.class.getAnnotation(AutoInsertable.class) != null){
			o = new Issue(issueId);
			getAICache().cache(Issue.class, o);
		}
		return o;
	}
	public static Collection<Issue> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Issue> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Issue> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Issue o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Issue> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Issue> tq = em.createQuery(jpql,Issue.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Issue> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Issue> tq = em.createNamedQuery(name,Issue.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public IssueDAO(){}
	public IssueDAO(int issueId){
		this.issueId=issueId;
	}
	public IssueDAO(IssueDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(IssueDAO orig){
		this.applicationId=orig.getApplicationId();
		this.statusId=orig.getStatusId();
		this.issueLoc=orig.getIssueLoc();
		this.priorityId=orig.getPriorityId();
		this.severityId=orig.getSeverityId();
		this.issueSummary=orig.getIssueSummary();
		this.details=orig.getDetails();
		this.issuerId=orig.getIssuerId();
		this.responseDate=orig.getResponseDate();
		this.responderId=orig.getResponderId();
		this.resolvedDate=orig.getResolvedDate();
		this.assignedDate=orig.getAssignedDate();
		this.qaDate=orig.getQaDate();
		this.fixDate=orig.getFixDate();
		this.devComments=orig.getDevComments();
		this.typeId=orig.getTypeId();
		this.parentId=orig.getParentId();
		this.duplicateDate=orig.getDuplicateDate();
		this.nabDate=orig.getNabDate();
		this.closedDate=orig.getClosedDate();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{issueId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDI008_SEQ",sequenceName="MDI008_SEQ")
	@Column(name="ISSUE_ID",nullable=false,length=9)
	public int getIssueId(){
		return issueId;
	}
	public void setIssueId(int issueId) throws java.sql.SQLException{
		if(isSame(issueId, getIssueId()))return;
		int oldValue = getIssueId();
		this.issueId=issueId;
		setProperty("ISSUE_ID", issueId, oldValue);
	}
	@Column(name="APPLICATION_ID",nullable=false,length=9)
	public int getApplicationId(){
		return applicationId;
	}
	public void setApplicationId(int applicationId) throws java.sql.SQLException{
		if(isSame(applicationId, getApplicationId()))return;
		int oldValue = getApplicationId();
		this.applicationId=applicationId;
		setProperty("APPLICATION_ID", applicationId, oldValue);
		application=null;
	}
	@Column(name="STATUS_ID",nullable=true,length=9)
	public int getStatusId(){
		return statusId;
	}
	public void setStatusId(int statusId) throws java.sql.SQLException{
		if(isSame(statusId, getStatusId()))return;
		int oldValue = getStatusId();
		this.statusId=statusId;
		setProperty("STATUS_ID", statusId, oldValue);
		status=null;
	}
	@Column(name="ISSUE_LOC",nullable=true,length=64)
	public String getIssueLoc(){
		return issueLoc;
	}
	public void setIssueLoc(String issueLoc) throws java.sql.SQLException{
		if(isSame(issueLoc, getIssueLoc()))return;
		String oldValue = getIssueLoc();
		this.issueLoc=issueLoc;
		setProperty("ISSUE_LOC", issueLoc, oldValue);
	}
	@Column(name="PRIORITY_ID",nullable=true,length=9)
	public int getPriorityId(){
		return priorityId;
	}
	public void setPriorityId(int priorityId) throws java.sql.SQLException{
		if(isSame(priorityId, getPriorityId()))return;
		int oldValue = getPriorityId();
		this.priorityId=priorityId;
		setProperty("PRIORITY_ID", priorityId, oldValue);
		priority=null;
	}
	@Column(name="SEVERITY_ID",nullable=true,length=9)
	public int getSeverityId(){
		return severityId;
	}
	public void setSeverityId(int severityId) throws java.sql.SQLException{
		if(isSame(severityId, getSeverityId()))return;
		int oldValue = getSeverityId();
		this.severityId=severityId;
		setProperty("SEVERITY_ID", severityId, oldValue);
		severity=null;
	}
	@Column(name="ISSUE_SUMMARY",nullable=true,length=256)
	public String getIssueSummary(){
		return issueSummary;
	}
	public void setIssueSummary(String issueSummary) throws java.sql.SQLException{
		if(isSame(issueSummary, getIssueSummary()))return;
		String oldValue = getIssueSummary();
		this.issueSummary=issueSummary;
		setProperty("ISSUE_SUMMARY", issueSummary, oldValue);
	}
	@Column(name="DETAILS",nullable=true,length=1024)
	public String getDetails(){
		return details;
	}
	public void setDetails(String details) throws java.sql.SQLException{
		if(isSame(details, getDetails()))return;
		String oldValue = getDetails();
		this.details=details;
		setProperty("DETAILS", details, oldValue);
	}
	@Column(name="ISSUER_ID",nullable=false,length=9)
	public int getIssuerId(){
		return issuerId;
	}
	public void setIssuerId(int issuerId) throws java.sql.SQLException{
		if(isSame(issuerId, getIssuerId()))return;
		int oldValue = getIssuerId();
		this.issuerId=issuerId;
		setProperty("ISSUER_ID", issuerId, oldValue);
		issuer=null;
	}
	@Column(name="RESPONSE_DATE",nullable=true,length=7)
	public Calendar getResponseDate(){
		return responseDate;
	}
	public void setResponseDate(Calendar responseDate) throws java.sql.SQLException{
		if(isSame(responseDate, getResponseDate()))return;
		Calendar oldValue = getResponseDate();
		this.responseDate=responseDate;
		setProperty("RESPONSE_DATE", responseDate, oldValue);
	}
	@Column(name="RESPONDER_ID",nullable=true,length=9)
	public int getResponderId(){
		return responderId;
	}
	public void setResponderId(int responderId) throws java.sql.SQLException{
		if(isSame(responderId, getResponderId()))return;
		int oldValue = getResponderId();
		this.responderId=responderId;
		setProperty("RESPONDER_ID", responderId, oldValue);
		responder=null;
	}
	@Column(name="RESOLVED_DATE",nullable=true,length=7)
	public Calendar getResolvedDate(){
		return resolvedDate;
	}
	public void setResolvedDate(Calendar resolvedDate) throws java.sql.SQLException{
		if(isSame(resolvedDate, getResolvedDate()))return;
		Calendar oldValue = getResolvedDate();
		this.resolvedDate=resolvedDate;
		setProperty("RESOLVED_DATE", resolvedDate, oldValue);
	}
	@Column(name="ASSIGNED_DATE",nullable=true,length=7)
	public Calendar getAssignedDate(){
		return assignedDate;
	}
	public void setAssignedDate(Calendar assignedDate) throws java.sql.SQLException{
		if(isSame(assignedDate, getAssignedDate()))return;
		Calendar oldValue = getAssignedDate();
		this.assignedDate=assignedDate;
		setProperty("ASSIGNED_DATE", assignedDate, oldValue);
	}
	@Column(name="QA_DATE",nullable=true,length=7)
	public Calendar getQaDate(){
		return qaDate;
	}
	public void setQaDate(Calendar qaDate) throws java.sql.SQLException{
		if(isSame(qaDate, getQaDate()))return;
		Calendar oldValue = getQaDate();
		this.qaDate=qaDate;
		setProperty("QA_DATE", qaDate, oldValue);
	}
	@Column(name="FIX_DATE",nullable=true,length=7)
	public Calendar getFixDate(){
		return fixDate;
	}
	public void setFixDate(Calendar fixDate) throws java.sql.SQLException{
		if(isSame(fixDate, getFixDate()))return;
		Calendar oldValue = getFixDate();
		this.fixDate=fixDate;
		setProperty("FIX_DATE", fixDate, oldValue);
	}
	@Column(name="DEV_COMMENTS",nullable=true,length=512)
	public String getDevComments(){
		return devComments;
	}
	public void setDevComments(String devComments) throws java.sql.SQLException{
		if(isSame(devComments, getDevComments()))return;
		String oldValue = getDevComments();
		this.devComments=devComments;
		setProperty("DEV_COMMENTS", devComments, oldValue);
	}
	@Column(name="TYPE_ID",nullable=true,length=9)
	public int getTypeId(){
		return typeId;
	}
	public void setTypeId(int typeId) throws java.sql.SQLException{
		if(isSame(typeId, getTypeId()))return;
		int oldValue = getTypeId();
		this.typeId=typeId;
		setProperty("TYPE_ID", typeId, oldValue);
		type=null;
	}
	@Column(name="PARENT_ID",nullable=true,length=9)
	public int getParentId(){
		return parentId;
	}
	public void setParentId(int parentId) throws java.sql.SQLException{
		if(isSame(parentId, getParentId()))return;
		int oldValue = getParentId();
		this.parentId=parentId;
		setProperty("PARENT_ID", parentId, oldValue);
	}
	@Column(name="DUPLICATE_DATE",nullable=true,length=7)
	public Calendar getDuplicateDate(){
		return duplicateDate;
	}
	public void setDuplicateDate(Calendar duplicateDate) throws java.sql.SQLException{
		if(isSame(duplicateDate, getDuplicateDate()))return;
		Calendar oldValue = getDuplicateDate();
		this.duplicateDate=duplicateDate;
		setProperty("DUPLICATE_DATE", duplicateDate, oldValue);
	}
	@Column(name="NAB_DATE",nullable=true,length=7)
	public Calendar getNabDate(){
		return nabDate;
	}
	public void setNabDate(Calendar nabDate) throws java.sql.SQLException{
		if(isSame(nabDate, getNabDate()))return;
		Calendar oldValue = getNabDate();
		this.nabDate=nabDate;
		setProperty("NAB_DATE", nabDate, oldValue);
	}
	@Column(name="CLOSED_DATE",nullable=true,length=7)
	public Calendar getClosedDate(){
		return closedDate;
	}
	public void setClosedDate(Calendar closedDate) throws java.sql.SQLException{
		if(isSame(closedDate, getClosedDate()))return;
		Calendar oldValue = getClosedDate();
		this.closedDate=closedDate;
		setProperty("CLOSED_DATE", closedDate, oldValue);
	}
	public LookUp getApplication()throws java.sql.SQLException{
		if(application==null)
			application=LookUp.getInstance(getApplicationId());
		return application;
	}
	public void setApplication(LookUp application)throws java.sql.SQLException{
		setApplicationId(application==null?0:application.getId());
		this.application=application;
	}
	public LookUp getStatus()throws java.sql.SQLException{
		if(status==null)
			status=LookUp.getInstance(getStatusId());
		return status;
	}
	public void setStatus(LookUp status)throws java.sql.SQLException{
		setStatusId(status==null?0:status.getId());
		this.status=status;
	}
	public User getIssuer()throws java.sql.SQLException{
		if(issuer==null)
			issuer=User.getInstance(getIssuerId());
		return issuer;
	}
	public void setIssuer(User issuer)throws java.sql.SQLException{
		setIssuerId(issuer==null?0:issuer.getUsernameId());
		this.issuer=issuer;
	}
	public User getResponder()throws java.sql.SQLException{
		if(responder==null)
			responder=User.getInstance(getResponderId());
		return responder;
	}
	public void setResponder(User responder)throws java.sql.SQLException{
		setResponderId(responder==null?0:responder.getUsernameId());
		this.responder=responder;
	}
	public LookUp getType()throws java.sql.SQLException{
		if(type==null)
			type=LookUp.getInstance(getTypeId());
		return type;
	}
	public void setType(LookUp type)throws java.sql.SQLException{
		setTypeId(type==null?0:type.getId());
		this.type=type;
	}
	public LookUp getPriority()throws java.sql.SQLException{
		if(priority==null)
			priority=LookUp.getInstance(getPriorityId());
		return priority;
	}
	public void setPriority(LookUp priority)throws java.sql.SQLException{
		setPriorityId(priority==null?0:priority.getId());
		this.priority=priority;
	}
	public LookUp getSeverity()throws java.sql.SQLException{
		if(severity==null)
			severity=LookUp.getInstance(getSeverityId());
		return severity;
	}
	public void setSeverity(LookUp severity)throws java.sql.SQLException{
		setSeverityId(severity==null?0:severity.getId());
		this.severity=severity;
	}
	public Collection<Resolver> getResolvers()throws java.sql.SQLException{
		if(isNewInstance() || resolvers != null){
			if(resolvers == null)
				resolvers = new TreeSet<Resolver>();
			return resolvers;
		}
		return Resolver.getNamedCollection("findByTits",getIssueId());
	}
	public void addResolver(Resolver resolver)throws java.sql.SQLException{
		resolver.setTits((Issue)this);
		if(isNewInstance() || resolvers != null)
			getResolvers().add(resolver);
		else
			resolver.insert();
	}
	public void removeResolver(Resolver resolver)throws java.sql.SQLException{
		if(isNewInstance() || resolvers != null)
			getResolvers().remove(resolver);
		else
			resolver.delete();
	}
	public Issue copy()throws java.sql.SQLException{
		Issue cp = new Issue((Issue)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(IssueDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(Resolver child:getResolvers())
			cp.addResolver(child.copy());
	}
	public Vector<String> getDifference(IssueDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getIssueId(),o.getIssueId())) diffs.add("ISSUE_ID");
		if(!isSame(getApplicationId(),o.getApplicationId())) diffs.add("APPLICATION_ID");
		if(!isSame(getStatusId(),o.getStatusId())) diffs.add("STATUS_ID");
		if(!isSame(getIssueLoc(),o.getIssueLoc())) diffs.add("ISSUE_LOC");
		if(!isSame(getPriorityId(),o.getPriorityId())) diffs.add("PRIORITY_ID");
		if(!isSame(getSeverityId(),o.getSeverityId())) diffs.add("SEVERITY_ID");
		if(!isSame(getIssueSummary(),o.getIssueSummary())) diffs.add("ISSUE_SUMMARY");
		if(!isSame(getDetails(),o.getDetails())) diffs.add("DETAILS");
		if(!isSame(getIssuerId(),o.getIssuerId())) diffs.add("ISSUER_ID");
		if(!isSame(getResponseDate(),o.getResponseDate())) diffs.add("RESPONSE_DATE");
		if(!isSame(getResponderId(),o.getResponderId())) diffs.add("RESPONDER_ID");
		if(!isSame(getResolvedDate(),o.getResolvedDate())) diffs.add("RESOLVED_DATE");
		if(!isSame(getAssignedDate(),o.getAssignedDate())) diffs.add("ASSIGNED_DATE");
		if(!isSame(getQaDate(),o.getQaDate())) diffs.add("QA_DATE");
		if(!isSame(getFixDate(),o.getFixDate())) diffs.add("FIX_DATE");
		if(!isSame(getDevComments(),o.getDevComments())) diffs.add("DEV_COMMENTS");
		if(!isSame(getTypeId(),o.getTypeId())) diffs.add("TYPE_ID");
		if(!isSame(getParentId(),o.getParentId())) diffs.add("PARENT_ID");
		if(!isSame(getDuplicateDate(),o.getDuplicateDate())) diffs.add("DUPLICATE_DATE");
		if(!isSame(getNabDate(),o.getNabDate())) diffs.add("NAB_DATE");
		if(!isSame(getClosedDate(),o.getClosedDate())) diffs.add("CLOSED_DATE");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
	}
	public void insertChildren()throws java.sql.SQLException{
		if(resolvers != null){
			for(Resolver resolver:getResolvers())
				resolver.setTits((Issue)this);
		}
		if(resolvers != null){
			for(Resolver resolver:getResolvers())
				if(resolver.isNewInstance())
					resolver.insert();
			resolvers = null;
		}
	}
}
