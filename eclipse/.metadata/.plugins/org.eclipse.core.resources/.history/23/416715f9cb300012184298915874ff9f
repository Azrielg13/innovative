/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2002-2007, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;


//IT Laptop Request Number: 04757483IN 


/**
 * The Class AgYear.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public abstract class AgYear extends MDIObject implements CoreObjectYear{

	public AgYear(){
	}
	
	public AgYear(AgYear orig) {
		super(orig);
	}

	public abstract AgObject getAgObject() throws SQLException;

	/**
	 * Gets the norm proj load.
	 * 
	 * @return the norm proj load
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getNormProjLoad()throws SQLException{
		return getProjLoad();
	}

	/**
	 * Gets the norm proj load.
	 * 
	 * @return the norm proj load
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getProjLoad()throws SQLException{
		
		double sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId())){
			sum += sys.getYear(getSimId(), getYear()).getProjLoad();
		}
		return sum;
	}
	

	public double getProjLoadHC()throws SQLException{
		double sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId())){
			sum += sys.getYear(getSimId(), getYear()).getProjLoadHC();
		}
		return sum;
	}
	

	public double getProjLoadLC()throws SQLException{
		double sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId())){
			sum += sys.getYear(getSimId(), getYear()).getProjLoadLC();
		}
		return sum;
	}


	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getABankProjLoad()
	 */
	public double getABankProjLoad()throws SQLException{
		double sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getABankProjLoad();
		return sum;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getABankCriteriaProjLoad()
	 */
	public double getABankCriteriaProjLoad()throws SQLException{
		double sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getABankCriteriaProjLoad();
		return sum;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getABankGrowth()
	 */
	public double getABankGrowth()throws SQLException{
		double sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getABankGrowth();
		return sum;
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getGrowthTotal()
	 */
	public double getABankGrowthTotal()throws SQLException{
		return AgYearObserver.getInstance(this).getABankGrowthTotal();
//		double total = 0;
//		for(int y=getYear(); y>getPlanyear()-1; y--)
//			total += getAgObject().getYear(getSimId(), y).getABankGrowth();
//		return total;
	}

	/**
	 * Gets the C proj load.
	 * 
	 * @return the C proj load
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getCriteriaProjLoad() throws SQLException{
		double sum=0;
		for(Sys sys:getAgObject().getSyss(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getCriteriaProjLoad();
		return sum;
	}

	/**
	 * Gets the PLL.
	 * 
	 * @return the PLL
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getPLLBizLogic() throws SQLException{
		double sum=0;
		for(Sys sys:getAgObject().getSyssSCE(0))
			sum += sys.getYear(getSimId(),getYear()).getPLLBizLogic();
		return sum;
	}

	/**
	 * Gets the B banks.
	 * 
	 * @return the B banks
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<Bbank> getBbanks(SubFilter filter) throws SQLException{
		if(getAgObject() instanceof District)
			return ((District)getAgObject()).getBbanks(getSimId(),filter);
		TreeSet<Bbank> bbanks = new TreeSet<Bbank>();
		for(Sys sys:getAgObject().getSyss(getSimId()))
			bbanks.addAll(sys.getYear(getSimId(),getYear()).getBbanks(filter));
		return bbanks;
	}

	public Collection<Bbank> getBbanks() throws SQLException{        
		return getBbanks(null);    	
	}

	/**
	 * BME Cache this?
	 * 
	 * Gets the A bank PLL.
	 * 
	 * @return the A bank PLL
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getABankPLL()throws SQLException{
		double sum=0;
		for(Abank abank:getAbanks())
			sum += abank.getYear(getSimId(),getYear()).getPLLBizLogic();
		return sum;
	}

	/**
	 * Gets the A banks.
	 * 
	 * @return the A banks
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<Abank> getAbanks() throws SQLException{
		if(getAgObject() instanceof District)
			return getAgObject().getAbanks(getSimId());
		TreeSet<Abank> abanks = new TreeSet<Abank>();
		for(Sys sys:getAgObject().getSyss(getSimId()))
			abanks.addAll(sys.getYear(getSimId(),getYear()).getAbanks());
		return abanks;
	}

	/**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getGrowth() throws SQLException{
		double g = 0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			g += sys.getYear(getSimId(), getYear()).getGrowth();
		return g;
	}
	
	/**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getGrowthHC() throws SQLException{
		double g = 0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			g += sys.getYear(getSimId(), getYear()).getGrowthHC();
		return g;
	}
	
	/**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getGrowthLC() throws SQLException{
		double g = 0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			g += sys.getYear(getSimId(), getYear()).getGrowthLC();
		return g;
	}

	/**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getGrowth(GrowthType gt) throws SQLException{
		double g = 0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			g += sys.getYear(getSimId(), getYear()).getGrowth(gt);
		return g;
	}

	public double getTotalTransfers() throws SQLException{
		return AgYearObserver.getInstance(this).getTotalTransfers();
//		double lastProjLoad=0;
//		if(getYear() < getPlanyear())
//			if(getAgObject().getPrevInstance()!=null)
//				lastProjLoad = getAgObject().getPrevInstance().getYear(getSimId(), getYear()-1).getProjLoad(); 
//		else
//			lastProjLoad = getAgObject().getYear(getSimId(), getYear()-1).getProjLoad();
//		return getProjLoad()-getGrowth()-lastProjLoad;
	}

	/**
	 * Gets the sens.
	 * 
	 * @return the sens
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getSens() throws SQLException{
		
		return 0;
	}

	/**
	 * Gets the reserve.
	 * 
	 * @return the reserve
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getCriteriaReserve() throws SQLException{
		return getPLLBizLogic()-getCriteriaProjLoad();        
	}

	
	public TreeSet<SceProjRev> getProjectsWithPCosts(Collection<Program> progs, int statuses)throws SQLException{
		TreeSet<SceProjRev> projs = new TreeSet<SceProjRev>();
		for(SceProjRev proj:getAgObject().getSceProjRevs(getSimId(),progs,statuses))
			if(proj.getTotalCost(CostStage.Type.Proposed,getYear())!=0 || proj.getProjectStatus() == Proj.CANCELLED || proj.getProjectStatus() == Proj.ABORTED)
				projs.add(proj);
		return projs;
	}
	
	public int getTotalProjPriorCostByCostYear(Collection<Program> progs, int statuses)throws SQLException{
		int sum=0;
		for(SceProjRev p:getProjectsWithPCosts(progs, statuses))
			sum += p.getPriorCost(CostStage.Type.Proposed);
		return sum;
	}
	public int getTotalProjCostByCostYear(Collection<Program> progs, int statuses)throws SQLException{
		int sum=0;
		for(SceProjRev proj:getProjectsWithPCosts(progs,statuses))
			sum += proj.getTotalCost(CostStage.Type.Proposed);
		return sum;
	}
	public int getTotalProjCostByCostYear(int year, Collection<Program> progs, int statuses)throws SQLException{
		int sum=0;
		for(SceProjRev proj:getProjectsWithPCosts(progs,statuses))
				sum += proj.getTotalCost(CostStage.Type.Proposed,year);
		return sum;
	}

	/**
	 * Calc load.
	 * 
	 * @throws SQLException the SQL exception
	 * @throws Exception 
	 */
	public void calcBLoad()throws Exception{
		for(Sys sys:getAgObject().getSyss(getSimId()))
			sys.getYear(getSimId(), getYear()).calcBLoad();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getChildren()
	 */
	public Collection<? extends CoreObject> getChildren() throws SQLException{
		return getAgObject().getChildren(getSimId());
	}

	public Collection<? extends CoreObject> getChildren(SubFilter sf) throws SQLException {		
		return getChildren();
	}

	/**
	 * BME Cache this?
	 * @see com.sce.esp.object.model.mdi.object.CoreObjectYear#getTotalVarReq()
	 */
	public double getTotalVarReq() throws SQLException {
		return AgYearObserver.getInstance(this).getTotalVarReq();
//		double total = 0;
//		for(Abank abank : getAgObject().getAbanks(getSimId(), SubFilter.ADS_SUB))
//			total+=abank.getYear(getSimId(), getYear()).getTotalVarReq();
//		return total;
	}

	/**
	 * BME Cache this?
	 * @see com.sce.esp.object.model.mdi.object.CoreObjectYear#getTotalVarReserve()
	 */
	public double getTotalVarReserve() throws SQLException {
		return AgYearObserver.getInstance(this).getTotalVarReserve();
//		double total = 0;
//		for(Abank abank : getAgObject().getAbanks(getSimId(), SubFilter.ADS_SUB))
//			total+=abank.getYear(getSimId(), getYear()).getTotalVarReserve();
//		return total;
	}

	/**
	 * BME Cache this?
	 * @see com.sce.esp.object.model.mdi.object.CoreObjectYear#getTotalVarAdd()
	 */
	public double getTotalVarAdd() throws SQLException {
		return AgYearObserver.getInstance(this).getTotalVarAdd();
//		double total = 0;
//		for(Abank abank : getAgObject().getAbanks(getSimId(), SubFilter.ADS_SUB))
//			total+=abank.getYear(getSimId(), getYear()).getVarAdd();
//		return total;
	}

	/**
	 * BME Cache this?
	 * @see com.sce.esp.object.model.mdi.object.CoreObjectYear#getTotalVarSupply()
	 */
	public double getTotalVarSupply() throws SQLException {
		return AgYearObserver.getInstance(this).getTotalVarSupply();
//		double total = 0;
//		for(Abank abank : getAgObject().getAbanks(getSimId(), SubFilter.ADS_SUB))
//			total+=abank.getYear(getSimId(), getYear()).getTotalVarSupply();
//		return total;
	}

	/**
	 * BME Cache this?
	 * @see com.sce.esp.object.model.mdi.object.CoreObjectYear#getTotalDeltaBypassGen()
	 */
	public double getTotalDeltaBypassGen() throws SQLException {
		return AgYearObserver.getInstance(this).getTotalDeltaBypassGen();
//		double total = 0;
//		for(Abank abank : getAgObject().getAbanks(getSimId(), SubFilter.ADS_SUB))
//			total+=abank.getYear(getSimId(), getYear()).getDeltaBypassGen();
//		return total;
	}

	/**
	 * BME Cache this?
	 * @see com.sce.esp.object.model.mdi.object.CoreObjectYear#getTotalDeltaDepGen()
	 */
	public double getTotalDeltaDepGen() throws SQLException {
		return AgYearObserver.getInstance(this).getTotalDeltaDepGen();
//		double total = 0;
//		for(Abank abank : getAgObject().getAbanks(getSimId(), SubFilter.ADS_SUB))
//			total+=abank.getYear(getSimId(), getYear()).getDeltaDepGen();
//		return total;
	}

	
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCapAdd()
	 */
	public double getCapAdd(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getCapAdd(p);
		return sum;
		//return getNameplate()-getAgObject().getYear(getSimId(), getYear()-1).getNameplate();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktAdd()
	 */
	public int getCktDelta(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getCktDelta(p);
		return sum;
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktAdd()
	 */
	public int getCktAdd(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getCktAdd(p);
		return sum;
	}

	public int getProjCount(Collection<Program> p) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getProjCount(p);
		return sum;
	}

	public double getPropCostTotal(Collection<Program> p, Elem e) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getPropCostTotal(p, e);
		return sum;
	}

	public double getAppCostTotal(Collection<Program> p, Elem e) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getAppCostTotal(p, e);
		return sum;
	}

	//FIXME
	public double getNetCostChange(Collection<Program> p, Elem e) throws SQLException {		
		return getPropCostTotal(p, e)- getAppCostTotal(p, e);
	}
	
	//cache add
	public double getNetCostChange(Collection<Program> p, SceElem e) throws SQLException {	
		Double g = (Double)getCachedValue("getNetCostChange", p, e);
		if(g == null){
			g = 0.0;
			g = getPropCostTotal(p, e)- getAppCostTotal(p, e);

			setCachedValue(g, "getNetCostChange", p, e);
		}
		return g;	
	}

	public double getPlanEstCost(Collection<Program> p, Elem e) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getPlanEstCost(p, e);
		return sum;
	}

	public double getPWEECost(Collection<Program> p, Elem e) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getPWEECost(p, e);
		return sum;
	}

	public double getWOCost(Collection<Program> p, Elem e) throws SQLException {
		int sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getWOCost(p, e);
		return sum;
	}

	public double getVarAdd(Collection<Program> p) throws SQLException {
		double sum=0;
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getVarAdd(p);
		return sum;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCircuitCount()
	 */
	public int getCircuitCount() throws SQLException {
		int sum=0;
		for(Sys sys:getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getCktCount();
		return sum;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getACL()
	 */
	public double getACL() throws SQLException {
		int cc = getCircuitCount();
		if(cc == 0) 
			return 0;
		return (getProjLoad()/cc);
	}


	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getPercUtil()
	 */
	public double getCktUtil() throws SQLException {	
		double pll = getPLLBizLogic();
		if(pll == 0) return 0;
		return getCriteriaProjLoad()/pll*100.0;					
	}


	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getSubUtil()
	 */
	public double getSubUtil() throws SQLException {
		return getUtilization();
	}

	public Collection<Sys> getSyss(int simId) throws SQLException{
		return getAgObject().getSyss(simId);
	}
	
	public Collection<Sys> getSyssSCE(int simId) throws SQLException{
		return getAgObject().getSyssSCE(simId);
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getNameplate()
	 */
	public double getNameplate() throws SQLException {
		double g = 0;
		for(Sys sys:getSyssSCE(getSimId()))
			g += sys.getYear(getSimId(), getYear()).getNameplate();
		return g;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#isDownStreamOf(com.sce.mdi.object.CoreObject)
	 */
	public boolean isDownStreamOf(CoreObject co) throws SQLException{
		return getAgObject().isDownStreamOf(co);
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getGrowthTotal()
	 */
	public double getGrowthTotal()throws SQLException{
		double total = 0;
		for(int y=getYear(); y>getPlanyear()-1; y--)
			total += getAgObject().getYear(getSimId(), y).getGrowth();
		return total;
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getGrowthTotal()
	 */
	public double getGrowthTotalHC()throws SQLException{
		double total = 0;
		for(int y=getYear(); y>getPlanyear()-1; y--)
			total += getAgObject().getYear(getSimId(), y).getGrowthHC();
		return total;
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getGrowthTotal()
	 */
	public double getGrowthTotalLC()throws SQLException{
		double total = 0;
		for(int y=getYear(); y>getPlanyear()-1; y--)
			total += getAgObject().getYear(getSimId(), y).getGrowthLC();
		return total;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getDownStreamSubs()
	 */
	public TreeSet<Sub> getDownStreamSubs() throws SQLException {
		TreeSet<Sub> subs = new TreeSet<Sub>();
		for(Sys sys:getAgObject().getSyss(getSimId()))
			subs.addAll(sys.getYear(getSimId(), getYear()).getDownStreamSubs());
		return subs;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getNewCktVars()
	 */
	public TreeSet<CktVar> getNewCktVars() throws SQLException {
		TreeSet<CktVar> cktVar = new TreeSet<CktVar>();
		for(Sys sys:getAgObject().getSyssSCE(getSimId()))
			cktVar.addAll(sys.getYear(getSimId(), getYear()).getNewCktVars());
		return cktVar;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getDiffFromPrevInstance()
	 */
	public double getProjLoadDiffFromPrev() throws SQLException {    
		
		double denom = 0;
		if(getAgObject().getPrevInstance()!=null)
			denom = getAgObject().getPrevInstance().getYear(getSimId(), getYear()).getProjLoad();
		if(denom == 0 )
			return 0;
		else
			return (getProjLoad()-denom)/denom*100.0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getGrowthDiffFromPrev()
	 */
	public double getGrowthDiffFromPrev() throws SQLException {    
		double denom = 0;
		if(getAgObject().getPrevInstance()!=null)
			denom = getAgObject().getPrevInstance().getYear(getSimId(), getYear()).getGrowth();
		if(denom == 0 )
			return 0;
		else
			return (getGrowth()-denom)/denom*100.0;
	}
	
	public double getCapAddDiffFromPrev(Collection<Program> p) throws SQLException {
		double currSum = getCapAdd(p);
		
		int prevSum = 0;
		for(Sys sys:getAgObject().getPrevInstance().getSyssSCE(getSimId()))
			prevSum += sys.getYear(getSimId(), getYear()).getCapAdd(p);
		
		return currSum - prevSum;
	}
	
	public int getCktAddDiffFromPrev(Collection<Program> p) throws SQLException {
		int currSum = getCktAdd(p);
		
		int prevSum=0;
		for(Sys sys:getAgObject().getPrevInstance().getSyssSCE(getSimId()))
			prevSum += sys.getYear(getSimId(), getYear()).getCktAdd(p);
		
		return currSum - prevSum;
	}
	
	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getParent()
	 */
	public CoreObject getParent() throws SQLException {		
		return getAgObject().getParent();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCircuits()
	 */
	public Collection<Ckt> getCkts() throws SQLException {
		TreeSet<Ckt> t = new TreeSet<Ckt>();
		for(Bbank b: getBbanks())
			for(Ckt c: b.getYear(getSimId(),getYear()).getCkts())
				t.add(c);
		return t;
	}

	/**
	 * Returns the total nameplate from a collection of <code>Sys</code>.
	 * @return the nameplate in MVA
	 * @throws SQLException
	 */
	public double getABankNameplate() throws SQLException {
		double g = 0;
		for(Sys sys:getSyssSCE(getSimId())){
			g += sys.getYear(getSimId(), getYear()).getABankNameplate();
		}
		return g;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getAbankCapAdd()
	 */
	public double getAbankCapAdd() throws SQLException {
		return getABankNameplate()-getAgObject().getYear(getSimId(), getYear()-1).getABankNameplate();
	}
	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktsOver500()
	 */
	public int getCktsOver500() throws SQLException{
		int g = 0;
		for(Sys sys:getSyssSCE(getSimId()))
			g += sys.getYear(getSimId(), getYear()).getCktOverLimit1();
		return g;

	}
	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktsOver600()
	 */
	public int getCktsOver600() throws SQLException{
		int g = 0;
		for(Sys sys:getSyssSCE(getSimId()))
			g += sys.getYear(getSimId(), getYear()).getCktOverLimit2();
		return g;

	}
	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getCktsOverPLL()
	 */
	public int getCktsOverPLL() throws SQLException{
		int g = 0;
		for(Sys sys:getSyssSCE(getSimId()))
			g += sys.getYear(getSimId(), getYear()).getCktOverLimit3();
		return g;

	}

	/**
	 * 
	 * @param sf
	 * @return
	 * @throws SQLException
	 */
	public double getGrowth(SubFilter sf) throws SQLException{
		double growth=0;
		for(Bbank bbank:getBbanks(sf))
			growth += bbank.getYear(getSimId(), getYear()).getGrowth();
		return growth;
	}
	
//	public double getGrowthOldSchool(SubFilter sf) throws SQLException{
//		double growth=0;
//		for(Bbank bbank:getBbanks(sf))
//			growth += bbank.getYear(getSimId(), getYear()).getGrowthOldSchool();
//		return growth;
//	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getUtilization()
	 */
	public double getUtilization()throws SQLException{
		double pll = getPLLBizLogic();
		if(pll == 0) return 0;
		return getCriteriaProjLoad()/getPLLBizLogic()*100;		
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getShedReq()
	 */
	public double getShedReq() throws SQLException{
		double shedReq= 0;
		for(Sys sys: getSyssSCE(getSimId()))
			shedReq += sys.getYear(getSimId(), getYear()).getShedReq();
		return shedReq;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getRollReq()
	 */
	public double getRollReq() throws SQLException{
		double rollReq= 0;
		for(Sys sys: getSyssSCE(this.getSimId()))
			rollReq += sys.getYear(getSimId(), getYear()).getRollReq();
		return rollReq;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getShedReserve()
	 */
	public double getShedReserve() throws SQLException{
		double shedReserve= 0;
		for(Sys sys: getSyssSCE(this.getSimId()))
			shedReserve += sys.getYear(getSimId(), getYear()).getShedReserve();
		return shedReserve;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObjectYear#getRollReserve()
	 */
	public double getRollReserve() throws SQLException{
		double rollReserve= 0;
		for(Sys sys: getSyssSCE(this.getSimId()))
			rollReserve += sys.getYear(getSimId(), getYear()).getRollReserve();
		return rollReserve;
	}
	
	/**
	 * Gets the weather stations.
	 *
	 * @return a <code>Weatherstation</code> collection
	 *
	 * @throws SQLException
	 *             the SQL exception
	 */
    public TreeSet<Weatherstation> getWeatherStations()throws SQLException{
        TreeSet<Weatherstation> weatherstations = new TreeSet<Weatherstation>();
        for(Bbank bBank:getBbanks(SubFilter.IN_SERVICE_SUB))
        	weatherstations.addAll(bBank.getWeatherStations());
        return weatherstations;
    }
    
    //Cache add
    public double getAppCostTotal(Collection<Program> p, SceElem e)throws SQLException {
    	Double g = (Double)getCachedValue("getAppCostTotal", p, e);
    	if(g == null){
    		double sum = 0;
    		for(Sys sys: getSyssSCE(getSimId()))
    			sum += sys.getYear(getSimId(), getYear()).getAppCostTotal(p,e);

    		g = sum;
    		setCachedValue(g, "getAppCostTotal", p, e);
    	}
	return g;	
	}
    
	public double getCapAdd(Collection<Program> p, SceProjRev.YearType yearType) throws SQLException {
		double sum = 0;
		for(Sys sys: getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getCapAdd(p, yearType);
		return sum;
	}
	public int getCktAdd(Collection<Program> p, SceProjRev.YearType yearType) throws SQLException {
		int sum = 0;
		for(Sys sys: getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getCktAdd(p, yearType);
		return sum;
	}

	public double getCostTotal(Collection<Program> p, SceElem e, CostStage stage)throws SQLException {
		double sum = 0;
		for(Sys sys: getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getCostTotal(p,e,stage);
		return sum;
	}

	//Cache Add
	public double getPropCostTotal(Collection<Program> p, SceElem e) throws SQLException {
		Double g = (Double)getCachedValue("getPropCostTotal", p, e);
		if(g == null){
			double sum = 0;
			for(Sys sys:getAgObject().getSyssSCE(getSimId()))
				sum += sys.getYear(getSimId(), getYear()).getPropCostTotal(p, e);
			
			g = sum;
			setCachedValue(g, "getPropCostTotal", p, e);
		}
		return g;	
	}
	
	public double getVarAdd(Collection<Program> p, SceProjRev.YearType yearType) throws SQLException {
		double sum = 0;
		for(Sys sys: getSyssSCE(getSimId()))
			sum += sys.getYear(getSimId(), getYear()).getVarAdd(p, yearType);
		return sum;
	}
	public double getAppCostTotal(Collection<Program> progs, SceElem e,int projStatuses) throws SQLException {
		double sum=0;
		for(SceProjElemCost spec:getAgObject().getSceProjElemCosts())
			if(spec.getCostStage().getCostType()==CostStage.Type.Approved.ordinal() && spec.isActiveBl(getPlanyear(), getSimId()) && spec.isActiveBl(getPlanyear(), getSimId()) && (spec.getSceProjRev().getProjectStatus() & projStatuses) > 0 && (progs == null || progs.contains(spec.getSceProjRev().getProgram())))
				if(e==null || spec.getSceElem()==e)
					sum+=spec.getCost(getYear());
		return sum;
	}
	public double getPropCostTotal(Collection<Program> p, SceElem e,int projStatuses) throws SQLException {
		double sum=0;
		for(SceProjElemCost spec:getAgObject().getSceProjElemCosts())
			if(spec.getCostStage().getCostType()==CostStage.Type.Proposed.ordinal() && spec.isActiveBl(getPlanyear(), getSimId()) && spec.isActiveBl(getPlanyear(), getSimId()) && (spec.getSceProjRev().getProjectStatus() & projStatuses) > 0 && (p == null || p.contains(spec.getSceProjRev().getProgram())))
				if(e==null || spec.getSceElem()==e)
					sum+=spec.getCost(getYear());
		return sum;
	}
	public Collection<SceProjElemCost> getSceProjElemCosts(Collection<Program> p, int projStatuses) throws SQLException {
		TreeSet<SceProjElemCost> costs = new TreeSet<SceProjElemCost>();
		for(Sub sub : getDownStreamSubs()){
//			EspLogger.debug(this, " s: "+sub);
			for(SceProjElemCost spec : sub.getSceProjElemCosts()){
//				EspLogger.debug(this, " >spec: "+spec.getSceProjRev());
				if(spec.getCostStage().getCostType()==CostStage.Type.Proposed.ordinal()
						&& (spec.getPeakYear(getPlanyear()) == getYear())
						//TODO GUS HELP  
						//&& (spec.getPeakYear(getPlanyear()) == getYear() || spec.getCost(getYear()) > 0)
						&& spec.isActiveBl(getPlanyear(), getSimId()) 
						&& (spec.getSceProjRev().getProjectStatus() & projStatuses) > 0 
						&& (p == null || p.contains(spec.getSceProjRev().getProgram()))){
					
					costs.add(spec);	
				}
			}
				
		}
		return costs;
	}
	public Collection<SceProjRev> getSceProjRevs(Collection<Program> progs,int projStatuses) throws SQLException {
		TreeSet<SceProjRev> revs = new TreeSet<SceProjRev>();
		for(SceProjElemCost spec:getSceProjElemCosts(progs,projStatuses))
			revs.add(spec.getSceProjRev());
		return revs;
	}
	
	public double getGrowthHC(GrowthType gt) throws SQLException {
		return 0;
	}
	
	public double getGrowthLC(GrowthType gt) throws SQLException {
		return 0;
	}
	
	//cache add
	public void invalidateAllCache(){
		super.invalidateAllCache();
		
		try {
			AgObject parent = getAgObject().getParent();
			if(parent != null)
				parent.getYear(getSimId(), getYear()).invalidateAllCache();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
}