package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.BbankYear;
import com.sce.esp.object.model.Criteria;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.SubYear;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class BbankYearDAO extends SubYear{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,BBANK_SUB_ID,YEAR};
	public static enum PROPERTY{PLANYEAR,SIM_ID,BBANK_SUB_ID,YEAR,PARENT_SUB_ID,INPUT_GROWTH,KVAR_LOAD,OPER_DRF,USE_OPER_DRF,TEMP_SENS,CRITERIA_ID,BYPASS_GEN,DEP_GEN,DSM_FACTOR,VAR_SUPPLY_FACTOR,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,EV_GROWTH};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int BBANKSUBID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int PARENTSUBID_LIMIT = 9;
	public final static int INPUTGROWTH_LIMIT = 24;
	public final static int KVARLOAD_LIMIT = 6;
	public final static int OPERDRF_LIMIT = 24;
	public final static int USEOPERDRF_LIMIT = 1;
	public final static int TEMPSENS_LIMIT = 24;
	public final static int CRITERIAID_LIMIT = 9;
	public final static int BYPASSGEN_LIMIT = 24;
	public final static int DEPGEN_LIMIT = 24;
	public final static int DSMFACTOR_LIMIT = 24;
	public final static int VARSUPPLYFACTOR_LIMIT = 24;
	public final static int EVGROWTH_LIMIT = 24;
	private BbankYear ptr;
	private int planyear;
	private int simId;
	private int bbankSubId;
	private int year;
	private int parentSubId;
	private double inputGrowth;
	private int kvarLoad;
	private double operDrf;
	private boolean useOperDrf = true;
	private double tempSens;
	private int criteriaId = 1;
	private double bypassGen;
	private double depGen;
	private double dsmFactor = 1.0;
	private double varSupplyFactor = 1.0;
	private double evGrowth;
	private Bbank bbank;
	private Criteria criteria;
	private Sub sub;
	public static BbankYear getInstance(int planyear, int simId, int bbankSubId, int year)throws java.sql.SQLException{
		return getInstance(planyear, simId, bbankSubId, year, true);
	}
	public static BbankYear getInstance(int planyear, int simId, int bbankSubId, int year, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, bbankSubId, year))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, bbankSubId, year);
		Cache cache = em.getEntityManagerFactory().getCache();
		BbankYear o = null;
		if(cache != null && cache.contains(BbankYear.class, pk))
			o = em.find(BbankYear.class, pk);
		if(o==null && getAICache().contains(BbankYear.class, pk))
			o = getAICache().find(BbankYear.class, pk);
		if(o==null && fetch)
			o = em.find(BbankYear.class, pk);
		if(o==null && fetch && BbankYear.class.getAnnotation(AutoInsertable.class) != null){
			o = new BbankYear(planyear, simId, bbankSubId, year);
			getAICache().cache(BbankYear.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<BbankYear> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<BbankYear> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<BbankYear> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM BbankYear o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<BbankYear> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<BbankYear> tq = em.createQuery(jpql,BbankYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<BbankYear> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<BbankYear> tq = em.createNamedQuery(name,BbankYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public BbankYearDAO(){}
	public BbankYearDAO(int planyear, int simId, int bbankSubId, int year){
		this.planyear=planyear;
		this.simId=simId;
		this.bbankSubId=bbankSubId;
		this.year=year;
	}
	public BbankYearDAO(BbankYearDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		this.bbankSubId=orig.getBbankSubId();
		this.year=orig.getYear();
		copyFrom(orig);
	}
	public void copyFrom(BbankYearDAO orig){
		this.parentSubId=orig.getParentSubId();
		this.inputGrowth=orig.getInputGrowth();
		this.kvarLoad=orig.getKvarLoad();
		this.operDrf=orig.getOperDrf();
		this.useOperDrf=orig.isUseOperDrf();
		this.tempSens=orig.getTempSens();
		this.criteriaId=orig.getCriteriaId();
		this.bypassGen=orig.getBypassGen();
		this.depGen=orig.getDepGen();
		this.dsmFactor=orig.getDsmFactor();
		this.varSupplyFactor=orig.getVarSupplyFactor();
		this.evGrowth=orig.getEvGrowth();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, bbankSubId, year};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public BbankYear getPtr(){
		return ptr;
	}
	public void setPtr(BbankYear ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getBbankSubId(), getYear()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Id
	@Column(name="BBANK_SUB_ID",nullable=false,length=9)
	public int getBbankSubId(){
		return bbankSubId;
	}
	public void setBbankSubId(int bbankSubId) throws java.sql.SQLException{
		if(isSame(bbankSubId, getBbankSubId()))return;
		int oldValue = getBbankSubId();
		this.bbankSubId=bbankSubId;
		setProperty("BBANK_SUB_ID", bbankSubId, oldValue);
		bbank=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="PARENT_SUB_ID",nullable=false,length=9)
	public int getParentSubId(){
		if(getPtr()!=null)
			return getPtr().getParentSubId();
		return parentSubId;
	}
	public void setParentSubId(int parentSubId) throws java.sql.SQLException{
		if(isSame(parentSubId, getParentSubId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getParentSubId();
		this.parentSubId=parentSubId;
		setProperty("PARENT_SUB_ID", parentSubId, oldValue);
		sub=null;
	}
	@Column(name="INPUT_GROWTH",nullable=true,length=24)
	public double getInputGrowth(){
		if(getPtr()!=null)
			return getPtr().getInputGrowth();
		return inputGrowth;
	}
	public void setInputGrowth(double inputGrowth) throws java.sql.SQLException{
		if(isSame(inputGrowth, getInputGrowth()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getInputGrowth();
		this.inputGrowth=inputGrowth;
		setProperty("INPUT_GROWTH", inputGrowth, oldValue);
	}
	@Column(name="KVAR_LOAD",nullable=true,length=6)
	public int getKvarLoad(){
		if(getPtr()!=null)
			return getPtr().getKvarLoad();
		return kvarLoad;
	}
	public void setKvarLoad(int kvarLoad) throws java.sql.SQLException{
		if(isSame(kvarLoad, getKvarLoad()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getKvarLoad();
		this.kvarLoad=kvarLoad;
		setProperty("KVAR_LOAD", kvarLoad, oldValue);
	}
	@Column(name="OPER_DRF",nullable=true,length=24)
	public double getOperDrf(){
		if(getPtr()!=null)
			return getPtr().getOperDrf();
		return operDrf;
	}
	public void setOperDrf(double operDrf) throws java.sql.SQLException{
		if(isSame(operDrf, getOperDrf()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getOperDrf();
		this.operDrf=operDrf;
		setProperty("OPER_DRF", operDrf, oldValue);
	}
	@Column(name="USE_OPER_DRF",nullable=true,length=1)
	public boolean isUseOperDrf(){
		if(getPtr()!=null)
			return getPtr().isUseOperDrf();
		return useOperDrf;
	}
	public void setUseOperDrf(boolean useOperDrf) throws java.sql.SQLException{
		if(isSame(useOperDrf, isUseOperDrf()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUseOperDrf();
		this.useOperDrf=useOperDrf;
		setProperty("USE_OPER_DRF", useOperDrf, oldValue);
	}
	@Column(name="TEMP_SENS",nullable=true,length=24)
	public double getTempSens(){
		if(getPtr()!=null)
			return getPtr().getTempSens();
		return tempSens;
	}
	public void setTempSens(double tempSens) throws java.sql.SQLException{
		if(isSame(tempSens, getTempSens()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getTempSens();
		this.tempSens=tempSens;
		setProperty("TEMP_SENS", tempSens, oldValue);
	}
	@Column(name="CRITERIA_ID",nullable=true,length=9)
	public int getCriteriaId(){
		if(getPtr()!=null)
			return getPtr().getCriteriaId();
		return criteriaId;
	}
	public void setCriteriaId(int criteriaId) throws java.sql.SQLException{
		if(isSame(criteriaId, getCriteriaId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getCriteriaId();
		this.criteriaId=criteriaId;
		setProperty("CRITERIA_ID", criteriaId, oldValue);
		criteria=null;
	}
	@Column(name="BYPASS_GEN",nullable=true,length=24)
	public double getBypassGen(){
		if(getPtr()!=null)
			return getPtr().getBypassGen();
		return bypassGen;
	}
	public void setBypassGen(double bypassGen) throws java.sql.SQLException{
		if(isSame(bypassGen, getBypassGen()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getBypassGen();
		this.bypassGen=bypassGen;
		setProperty("BYPASS_GEN", bypassGen, oldValue);
	}
	@Column(name="DEP_GEN",nullable=true,length=24)
	public double getDepGen(){
		if(getPtr()!=null)
			return getPtr().getDepGen();
		return depGen;
	}
	public void setDepGen(double depGen) throws java.sql.SQLException{
		if(isSame(depGen, getDepGen()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getDepGen();
		this.depGen=depGen;
		setProperty("DEP_GEN", depGen, oldValue);
	}
	@Column(name="DSM_FACTOR",nullable=true,length=24)
	public double getDsmFactor(){
		if(getPtr()!=null)
			return getPtr().getDsmFactor();
		return dsmFactor;
	}
	public void setDsmFactor(double dsmFactor) throws java.sql.SQLException{
		if(isSame(dsmFactor, getDsmFactor()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getDsmFactor();
		this.dsmFactor=dsmFactor;
		setProperty("DSM_FACTOR", dsmFactor, oldValue);
	}
	@Column(name="VAR_SUPPLY_FACTOR",nullable=true,length=24)
	public double getVarSupplyFactor(){
		if(getPtr()!=null)
			return getPtr().getVarSupplyFactor();
		return varSupplyFactor;
	}
	public void setVarSupplyFactor(double varSupplyFactor) throws java.sql.SQLException{
		if(isSame(varSupplyFactor, getVarSupplyFactor()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getVarSupplyFactor();
		this.varSupplyFactor=varSupplyFactor;
		setProperty("VAR_SUPPLY_FACTOR", varSupplyFactor, oldValue);
	}
	@Column(name="EV_GROWTH",nullable=true,length=24)
	public double getEvGrowth(){
		if(getPtr()!=null)
			return getPtr().getEvGrowth();
		return evGrowth;
	}
	public void setEvGrowth(double evGrowth) throws java.sql.SQLException{
		if(isSame(evGrowth, getEvGrowth()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getEvGrowth();
		this.evGrowth=evGrowth;
		setProperty("EV_GROWTH", evGrowth, oldValue);
	}
	public Bbank getBbank()throws java.sql.SQLException{
		if(bbank==null)
			bbank=Bbank.getInstance(getPlanyear(), getBbankSubId());
		return bbank;
	}
	public void setBbank(Bbank bbank)throws java.sql.SQLException{
		setBbankSubId(bbank==null?0:bbank.getBbankSubId());
		this.bbank=bbank;
	}
	public Criteria getCriteria()throws java.sql.SQLException{
		if(criteria==null)
			criteria=Criteria.getInstance(getPlanyear(), getCriteriaId());
		return criteria;
	}
	public void setCriteria(Criteria criteria)throws java.sql.SQLException{
		setCriteriaId(criteria==null?0:criteria.getCriteriaId());
		this.criteria=criteria;
	}
	public Sub getSub()throws java.sql.SQLException{
		if(sub==null)
			sub=Sub.getInstance(getPlanyear(), getParentSubId());
		return sub;
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		setParentSubId(sub==null?0:sub.getSubId());
		this.sub=sub;
	}
	public BbankYear copy()throws java.sql.SQLException{
		BbankYear cp = new BbankYear((BbankYear)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(BbankYearDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(BbankYearDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getBbankSubId(),o.getBbankSubId())) diffs.add("BBANK_SUB_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getParentSubId(),o.getParentSubId())) diffs.add("PARENT_SUB_ID");
		if(!isSame(getInputGrowth(),o.getInputGrowth())) diffs.add("INPUT_GROWTH");
		if(!isSame(getKvarLoad(),o.getKvarLoad())) diffs.add("KVAR_LOAD");
		if(!isSame(getOperDrf(),o.getOperDrf())) diffs.add("OPER_DRF");
		if(!isSame(isUseOperDrf(),o.isUseOperDrf())) diffs.add("USE_OPER_DRF");
		if(!isSame(getTempSens(),o.getTempSens())) diffs.add("TEMP_SENS");
		if(!isSame(getCriteriaId(),o.getCriteriaId())) diffs.add("CRITERIA_ID");
		if(!isSame(getBypassGen(),o.getBypassGen())) diffs.add("BYPASS_GEN");
		if(!isSame(getDepGen(),o.getDepGen())) diffs.add("DEP_GEN");
		if(!isSame(getDsmFactor(),o.getDsmFactor())) diffs.add("DSM_FACTOR");
		if(!isSame(getVarSupplyFactor(),o.getVarSupplyFactor())) diffs.add("VAR_SUPPLY_FACTOR");
		if(!isSame(getEvGrowth(),o.getEvGrowth())) diffs.add("EV_GROWTH");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
