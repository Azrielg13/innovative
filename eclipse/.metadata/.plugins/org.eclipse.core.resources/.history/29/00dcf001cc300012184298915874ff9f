package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AaModel;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.Sys;
import java.util.Calendar;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Map;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class AaModelDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SUB_ID,SYS_ID,ID};
	public static enum PROPERTY{PLANYEAR,ID,SYS_ID,SUB_ID,TIE_TYPE,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int ID_LIMIT = 9;
	public final static int SYSID_LIMIT = 9;
	public final static int SUBID_LIMIT = 9;
	public final static int TIETYPE_LIMIT = 2;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int planyear;
	private int id;
	private int sysId;
	private int subId;
	private int tieType;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	public static AaModel getInstance(int planyear, int subId, int sysId, int id)throws java.sql.SQLException{
		return getInstance(planyear, subId, sysId, id, true);
	}
	public static AaModel getInstance(int planyear, int subId, int sysId, int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, subId, sysId, id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, subId, sysId, id);
		Cache cache = em.getEntityManagerFactory().getCache();
		AaModel o = null;
		if(cache != null && cache.contains(AaModel.class, pk))
			o = em.find(AaModel.class, pk);
		if(o==null && getAICache().contains(AaModel.class, pk))
			o = getAICache().find(AaModel.class, pk);
		if(o==null && fetch)
			o = em.find(AaModel.class, pk);
		if(o==null && fetch && AaModel.class.getAnnotation(AutoInsertable.class) != null){
			o = new AaModel(planyear, subId, sysId, id);
			getAICache().cache(AaModel.class, o);
		}
		return o;
	}
	public static Collection<AaModel> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<AaModel> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<AaModel> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM AaModel o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public static Collection<AaModel> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<AaModel> tq = em.createQuery(jpql,AaModel.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public static Collection<AaModel> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<AaModel> tq = em.createNamedQuery(name,AaModel.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public AaModelDAO(){}
	public AaModelDAO(int planyear, int subId, int sysId, int id){
		this.planyear=planyear;
		this.subId=subId;
		this.sysId=sysId;
		this.id=id;
	}
	public AaModelDAO(AaModelDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.id=orig.getId();
		this.sysId=orig.getSysId();
		this.subId=orig.getSubId();
		this.tieType=orig.getTieType();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, subId, sysId, id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI106_SEQ",sequenceName="MDI106_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Id
	@Column(name="SYS_ID",nullable=false,length=9)
	public int getSysId(){
		return sysId;
	}
	public void setSysId(int sysId) throws java.sql.SQLException{
		if(isSame(sysId, getSysId()))return;
		int oldValue = getSysId();
		this.sysId=sysId;
		setProperty("SYS_ID", sysId, oldValue);
	}
	@Id
	@Column(name="SUB_ID",nullable=false,length=9)
	public int getSubId(){
		return subId;
	}
	public void setSubId(int subId) throws java.sql.SQLException{
		if(isSame(subId, getSubId()))return;
		int oldValue = getSubId();
		this.subId=subId;
		setProperty("SUB_ID", subId, oldValue);
	}
	@Column(name="TIE_TYPE",nullable=false,length=2)
	public int getTieType(){
		return tieType;
	}
	public void setTieType(int tieType) throws java.sql.SQLException{
		if(isSame(tieType, getTieType()))return;
		int oldValue = getTieType();
		this.tieType=tieType;
		setProperty("TIE_TYPE", tieType, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		return Department.getInstance(getPlanyear());
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		if(department==null)
			setPlanyear(0);
		else
			setPlanyear(department.getPlanyear());
	}
	public Sub getSub()throws java.sql.SQLException{
		return Sub.getInstance(getPlanyear(), getSubId());
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		if(sub==null)
			setSubId(0);
		else
			setSubId(sub.getSubId());
	}
	public Sys getSys()throws java.sql.SQLException{
		return Sys.getInstance(getPlanyear(), getSysId());
	}
	public void setSys(Sys sys)throws java.sql.SQLException{
		if(sys==null)
			setSysId(0);
		else
			setSysId(sys.getSysId());
	}
	public Object getPropertyValue(String property){
		return getPropertyValue(PROPERTY.valueOf(property));
	}
	public Object getPropertyValue(PROPERTY property){
		switch(property){
			case PLANYEAR: return getPlanyear();
			case ID: return getId();
			case SYS_ID: return getSysId();
			case SUB_ID: return getSubId();
			case TIE_TYPE: return getTieType();
			case ALT_DOUBLE1: return getAltDouble1();
			case ALT_VARCHAR1: return getAltVarchar1();
			case ALT_DATE1: return getAltDate1();
			case INSERT_TS: return getInsertTs();
			case INSERT_USER_ID: return getInsertUserId();
			case MODIFIED_TS: return getModifiedTs();
			case MODIFIED_USER_ID: return getModifiedUserId();
			case DELETED_TS: return getDeletedTs();
			case DELETED_USER_ID: return getDeletedUserId();
		}
		return null;
	}
	public void setPropertyValue(String property, Object value)throws java.sql.SQLException{
		if(property==null)return;
		setPropertyValue(PROPERTY.valueOf(property),value);
	}
	public void setPropertyValue(PROPERTY property, Object value)throws java.sql.SQLException{
		switch(property){
			case PLANYEAR:setPlanyear((Integer)value); break;
			case ID:setId((Integer)value); break;
			case SYS_ID:setSysId((Integer)value); break;
			case SUB_ID:setSubId((Integer)value); break;
			case TIE_TYPE:setTieType((Integer)value); break;
			case ALT_DOUBLE1:setAltDouble1((Double)value); break;
			case ALT_VARCHAR1:setAltVarchar1((String)value); break;
			case ALT_DATE1:setAltDate1((Calendar)value); break;
			case INSERT_TS:setInsertTs((Calendar)value); break;
			case INSERT_USER_ID:setInsertUserId((Integer)value); break;
			case MODIFIED_TS:setModifiedTs((Calendar)value); break;
			case MODIFIED_USER_ID:setModifiedUserId((Integer)value); break;
			case DELETED_TS:setDeletedTs((Calendar)value); break;
			case DELETED_USER_ID:setDeletedUserId((Integer)value); break;
		}
	}
	public AaModel copy()throws java.sql.SQLException{
		AaModel cp = new AaModel((AaModel)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(AaModelDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(AaModelDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getSysId(),o.getSysId())) diffs.add("SYS_ID");
		if(!isSame(getSubId(),o.getSubId())) diffs.add("SUB_ID");
		if(!isSame(getTieType(),o.getTieType())) diffs.add("TIE_TYPE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public Map<String,Object> getPropertyValues(){
		Hashtable<String,Object> values = new Hashtable<String,Object>();
		for(PROPERTY prop:PROPERTY.values()){
			Object value = getPropertyValue(prop);
			if(value!=null)
				values.put(""+prop,value);
		}
		return values;
	}
	public void setPropertyValues(Map<String,Object> data) throws java.sql.SQLException{
		for(String key:data.keySet())
			setPropertyValue(key,data.get(key));
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
