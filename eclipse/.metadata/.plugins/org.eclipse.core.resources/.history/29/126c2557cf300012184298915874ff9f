package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.ESPTestCase;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.util.Calculate;
import com.sce.esp.util.FormatText;
import com.sce.esp.util.db.PDBConnection;


public class ABankTest extends ESPTestCase{
	public final static int PLANYEAR=2011;
	public final static int SUB_ID=142;
	public void testGetAasB() throws SQLException{
		Bbank bbank = Bbank.getInstance(PLANYEAR, SUB_ID);
		assertNull(bbank);
	}
	public void testGetSub() throws SQLException{
		Sub sub = Sub.getInstance(PLANYEAR, SUB_ID);
		assertTrue(sub instanceof Abank);
	}
	public void testGetById() throws SQLException{
		Abank ab = Abank.getInstance(PLANYEAR, SUB_ID);
		assertNotNull(ab);
		assertTrue(ab instanceof Abank);
		EspLogger.message(this, ab);
	}
	public void testGetById2() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		assertNotNull(bb);
		assertTrue(bb instanceof Abank);
		EspLogger.message(this, bb);
	}
	public void testGetById3() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, 330); //Chino 66/12
		assertNotNull(bb);
		EspLogger.message(this, bb);
	}
	public void testGetByName() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		Sub alder = Sub.getInstanceBySubName(PLANYEAR, bb.getSubName(), bb.getSecondaryKv());
		assertTrue(bb==alder);
		EspLogger.message(this, alder+" ("+alder.getSubId()+")");
	}
	public void testChangeName() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		String name = bb.getSubName();
		bb.setSubName(name+"2");
		assertEquals(name+"2",bb.getSubName());
		EspLogger.message(this, bb);
		bb.setSubName(name);
		assertEquals(name,bb.getSubName());
		EspLogger.message(this, bb);
	}
//	public void testChangeError() throws SQLException{
//		Bbank bb = Bbank.getInstance(PLANYEAR, 800);
//		bb.setSubName("Alder_Eddie_Mack_Mayfield_Jr._SCE_Scientist3");
//		assertEquals("Alder",bb.getSubName());
//		EspLogger.message(this, bb);
//		bb.setSubName("Alder");
//		assertEquals("Alder",bb.getSubName());
//		EspLogger.message(this, bb);
//	}
	public void testGetPeakDate() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		Calendar peakDate = bb.getPeakDate(0);
		assertNotNull(peakDate);	
		EspLogger.message(this, bb+" Peak Date: "+FormatText.formatDate(peakDate));
	}
	public void testGetPeakEff() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		double peakEff = Calculate.round(bb.getPeakEff(2010),1);
		assertEquals(115.3,peakEff);
		EspLogger.message(this, bb+" Peak Eff: "+peakEff+"F");
	}
	public void testGetTenYearAvg() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		double peakEff = Calculate.round(bb.getTenYearAvg(),1);
		assertEquals(111.3,peakEff);
		EspLogger.message(this, bb+" Ten Year Avg: "+peakEff+"F");
	}
	public void testGetRecdPeak() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int recdPeak = (int)Math.round(bb.getRecordedPeak(0)*bb.getMVAFactor());
		assertEquals(4896,recdPeak);
		EspLogger.message(this, bb+" Recorded Peak "+recdPeak);
	}
	public void testGetMostRecent() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		Calendar asOf = Calendar.getInstance();
		asOf.set(2020, Calendar.SEPTEMBER, 15);
		SceProjElemCost last = bb.getMostRecentSceProjElemCost(asOf,0);
		assertNotNull(last);
	}
	public void testGetMostRecent2() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		Calendar asOf = Calendar.getInstance();
		asOf.set(2020, Calendar.SEPTEMBER, 15);
		SceProjElemCost last = bb.getMostRecentSceProjElemCost(asOf,0);
		assertNotNull(last);
	}
	public void testGetSub3() throws SQLException{
		Sub sub = Sub.getInstance(PLANYEAR, SUB_ID);
		assertTrue(sub instanceof Abank);
	}
	public void testGetGrowthNoPRNBC() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int growth = (int)Math.round(bb.getYear(0, bb.getPlanyear()-1).getGrowthNoPRNBC()*bb.getMVAFactor());
		assertEquals(137,growth);
		EspLogger.message(this, bb+" 2010 Growth: "+growth);
	}
	public void testGetGrowthNoPRNBC2() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int growth = (int)Math.round(bb.getYear(0, bb.getPlanyear()-1).getGrowthNoPRNBC()*bb.getMVAFactor());
		assertEquals(137,growth);
		EspLogger.message(this, bb+" 2010 Growth: "+growth);
	}
	public void testGetSub2() throws SQLException{
		Sub sub = Sub.getInstance(PLANYEAR, SUB_ID);
		assertTrue(sub instanceof Abank);
	}
	public void testGetNormStartingPoint() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int prevSP = (int)Math.round(bb.getNormStartingPoint(0)*bb.getMVAFactor());
		assertEquals(5099,prevSP);
		EspLogger.message(this, bb+" PY:2010 Starting Point: "+prevSP);
	}
	public void testGetPrevPRN() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		double prn = Calculate.round(bb.getPrevPRN(0),3);
		assertEquals(.948,prn);
		EspLogger.message(this, bb+" 2011 Prev PRN: "+prn);
	}
	public void testGetGrowth() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int growth = (int)Math.round(bb.getYear(0, bb.getPlanyear()-1).getGrowth()*bb.getMVAFactor());
		assertEquals(130,growth);
		EspLogger.message(this, bb+" 2010 Growth: "+growth);
	}
	public void testGetGrowth2() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int growth = (int)Math.round(bb.getYear(0, bb.getPlanyear()-1).getGrowth()*bb.getMVAFactor());
		assertEquals(130,growth);
		EspLogger.message(this, bb+" 2010 Growth: "+growth);
	}
	public void testGetPrevAdjPeak() throws SQLException{
		PDBConnection.getInstance().enable();
		Abank bb = Abank.getInstance(PLANYEAR-1, SUB_ID);
		int adjPeak = (int)Math.round(bb.getAdjustedPeak(0)*bb.getMVAFactor());
		assertEquals(4830,adjPeak);
		EspLogger.message(this, bb+" Adjusted Peak: "+adjPeak);
	}
	public void testGetAdjPeak() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int adjPeak = (int)Math.round(bb.getAdjustedPeak(0)*bb.getMVAFactor());
		assertEquals(5099,adjPeak);
		EspLogger.message(this, bb+" Adjusted Peak: "+adjPeak);
	}
	public void testGetTotalGrowth() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int growTot = (int)Math.round(bb.getYear(0, 2020).getGrowthTotal()*bb.getMVAFactor());
		assertEquals(929,growTot);
		EspLogger.message(this, bb+" 2020 Total Growth: "+growTot);
	}
	public void testGetTotalGrowth2() throws SQLException{
		PDBConnection.getInstance().disable();
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int growTot = (int)Math.round(bb.getYear(0, 2020).getGrowthTotal()*bb.getMVAFactor());
		assertEquals(929,growTot);
		EspLogger.message(this, bb+" 2020 Total Growth: "+growTot);
		PDBConnection.getInstance().enable();
	}
	public void testGetProjLoad() throws SQLException{
		PDBConnection.getInstance().enable();
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int projLoad = (int)Math.round(bb.getYear(0, 2020).getProjLoad()*bb.getMVAFactor());
		assertEquals(5929,projLoad);
		EspLogger.message(this, bb+" 2020 Projected Load: "+projLoad);
	}
	public void testGetProjLoad2() throws SQLException{
		PDBConnection.getInstance().disable();
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int adjPeak = (int)Math.round(bb.getYear(0, 2020).getProjLoad()*bb.getMVAFactor());
		assertEquals(5929,adjPeak);
		EspLogger.message(this, bb+" 2020 Projected Load: "+adjPeak);
		PDBConnection.getInstance().enable();
	}
	public void testGetCritProjLoad() throws SQLException{
		PDBConnection.getInstance().enable();
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int adjPeak = (int)Math.round(bb.getYear(0, 2020).getCriteriaProjLoad()*bb.getMVAFactor());
		assertEquals(6308,adjPeak);
		EspLogger.message(this, bb+" 2020 Crit Proj Load: "+adjPeak);
	}
	public void testGetBanks() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int bc = bb.getBanks(Calendar.getInstance(), 0).size();
		assertEquals(3,bc);
		EspLogger.message(this, bb+" Today's Bank Count: "+bc);
	}
	public void testNameplate() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getNameplate(),1);
		assertEquals(840.0,np);
		EspLogger.message(this, bb+" 2020 Nameplate: "+np);
	}
	public void testGetReserve() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		int reserve = (int)Math.round(bb.getYear(0, 2020).getCriteriaReserve()*bb.getMVAFactor());
		assertEquals(519,reserve);
		EspLogger.message(this, bb+" 2020 Crit Reserve: "+reserve);
	}
	public void testGetSceProjElemCosts() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		Collection<SceProjElemCost> specs = bb.getSceProjElemCosts();
		assertNotSame(0,specs.size());
		EspLogger.message(this, bb+" SceProjElemCosts: "+specs.size());
		Bbank bb2 = Bbank.getInstance(PLANYEAR, 743);
		Collection<SceProjElemCost> specs2 = bb2.getSceProjElemCosts();
		assertNotSame(specs.size(),specs2.size());
		EspLogger.message(this, bb2+" SceProjElemCosts: "+specs2.size());
	}
	public void testGetMostRecentSceProjElemCost() throws SQLException{
		Abank bb = Abank.getInstance(PLANYEAR, SUB_ID);
		SceProjElemCost spec = bb.getMostRecentSceProjElemCost(Calculate.getCal(2020,Calendar.SEPTEMBER,15), 0);
		assertNotNull(spec);
		EspLogger.message(this, spec.getSceProjRevId());
	}
}