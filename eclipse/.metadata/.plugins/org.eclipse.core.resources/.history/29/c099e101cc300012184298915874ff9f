package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.DescriptiveType;
import com.sce.esp.object.model.PartType;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class DescriptiveTypeDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,PART_TYPE_ID,NAME,VAR_NAME,DESCRIPTION,USER_EDITABLE,INPUT_TYPE,OPTIONS,DEFAULT_VALUE,UNITS,INPUT_INSTRUCTIONS,NOTE};
	public final static int ID_LIMIT = 9;
	public final static int PARTTYPEID_LIMIT = 9;
	public final static int NAME_LIMIT = 32;
	public final static int VARNAME_LIMIT = 32;
	public final static int DESCRIPTION_LIMIT = 128;
	public final static int USEREDITABLE_LIMIT = 1;
	public final static int INPUTTYPE_LIMIT = 2;
	public final static int OPTIONS_LIMIT = 1024;
	public final static int DEFAULTVALUE_LIMIT = 64;
	public final static int UNITS_LIMIT = 32;
	public final static int INPUTINSTRUCTIONS_LIMIT = 256;
	public final static int NOTE_LIMIT = 512;
	private int id;
	private int partTypeId;
	private String name;
	private String varName;
	private String description;
	private boolean userEditable;
	private int inputType;
	private String options;
	private String defaultValue;
	private String units;
	private String inputInstructions;
	private String note;
	private PartType partType;
	public static DescriptiveType getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static DescriptiveType getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		DescriptiveType o = null;
		if(cache != null && cache.contains(DescriptiveType.class, pk))
			o = em.find(DescriptiveType.class, pk);
		if(o==null && getAICache().contains(DescriptiveType.class, pk))
			o = getAICache().find(DescriptiveType.class, pk);
		if(o==null && fetch)
			o = em.find(DescriptiveType.class, pk);
		if(o==null && fetch && DescriptiveType.class.getAnnotation(AutoInsertable.class) != null){
			o = new DescriptiveType(id);
			getAICache().cache(DescriptiveType.class, o);
		}
		return o;
	}
	public static Collection<DescriptiveType> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<DescriptiveType> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<DescriptiveType> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM DescriptiveType o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<DescriptiveType> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<DescriptiveType> tq = em.createQuery(jpql,DescriptiveType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<DescriptiveType> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<DescriptiveType> tq = em.createNamedQuery(name,DescriptiveType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public DescriptiveTypeDAO(){}
	public DescriptiveTypeDAO(int id){
		this.id=id;
	}
	public DescriptiveTypeDAO(DescriptiveTypeDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(DescriptiveTypeDAO orig){
		this.partTypeId=orig.getPartTypeId();
		this.name=orig.getName();
		this.varName=orig.getVarName();
		this.description=orig.getDescription();
		this.userEditable=orig.isUserEditable();
		this.inputType=orig.getInputType();
		this.options=orig.getOptions();
		this.defaultValue=orig.getDefaultValue();
		this.units=orig.getUnits();
		this.inputInstructions=orig.getInputInstructions();
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIU55_SEQ",sequenceName="MDIU55_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="PART_TYPE_ID",nullable=false,length=9)
	public int getPartTypeId(){
		return partTypeId;
	}
	public void setPartTypeId(int partTypeId) throws java.sql.SQLException{
		if(isSame(partTypeId, getPartTypeId()))return;
		int oldValue = getPartTypeId();
		this.partTypeId=partTypeId;
		setProperty("PART_TYPE_ID", partTypeId, oldValue);
		partType=null;
	}
	@Column(name="NAME",nullable=false,length=32)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="VAR_NAME",nullable=false,length=32)
	public String getVarName(){
		return varName;
	}
	public void setVarName(String varName) throws java.sql.SQLException{
		if(isSame(varName, getVarName()))return;
		String oldValue = getVarName();
		this.varName=varName;
		setProperty("VAR_NAME", varName, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=128)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="USER_EDITABLE",nullable=true,length=1)
	public boolean isUserEditable(){
		return userEditable;
	}
	public void setUserEditable(boolean userEditable) throws java.sql.SQLException{
		if(isSame(userEditable, isUserEditable()))return;
		boolean oldValue = isUserEditable();
		this.userEditable=userEditable;
		setProperty("USER_EDITABLE", userEditable, oldValue);
	}
	@Column(name="INPUT_TYPE",nullable=false,length=2)
	public int getInputType(){
		return inputType;
	}
	public void setInputType(int inputType) throws java.sql.SQLException{
		if(isSame(inputType, getInputType()))return;
		int oldValue = getInputType();
		this.inputType=inputType;
		setProperty("INPUT_TYPE", inputType, oldValue);
	}
	@Column(name="OPTIONS",nullable=true,length=1024)
	public String getOptions(){
		return options;
	}
	public void setOptions(String options) throws java.sql.SQLException{
		if(isSame(options, getOptions()))return;
		String oldValue = getOptions();
		this.options=options;
		setProperty("OPTIONS", options, oldValue);
	}
	@Column(name="DEFAULT_VALUE",nullable=true,length=64)
	public String getDefaultValue(){
		return defaultValue;
	}
	public void setDefaultValue(String defaultValue) throws java.sql.SQLException{
		if(isSame(defaultValue, getDefaultValue()))return;
		String oldValue = getDefaultValue();
		this.defaultValue=defaultValue;
		setProperty("DEFAULT_VALUE", defaultValue, oldValue);
	}
	@Column(name="UNITS",nullable=true,length=32)
	public String getUnits(){
		return units;
	}
	public void setUnits(String units) throws java.sql.SQLException{
		if(isSame(units, getUnits()))return;
		String oldValue = getUnits();
		this.units=units;
		setProperty("UNITS", units, oldValue);
	}
	@Column(name="INPUT_INSTRUCTIONS",nullable=true,length=256)
	public String getInputInstructions(){
		return inputInstructions;
	}
	public void setInputInstructions(String inputInstructions) throws java.sql.SQLException{
		if(isSame(inputInstructions, getInputInstructions()))return;
		String oldValue = getInputInstructions();
		this.inputInstructions=inputInstructions;
		setProperty("INPUT_INSTRUCTIONS", inputInstructions, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public PartType getPartType()throws java.sql.SQLException{
		if(partType==null)
			partType=PartType.getInstance(getPartTypeId());
		return partType;
	}
	public void setPartType(PartType partType)throws java.sql.SQLException{
		setPartTypeId(partType==null?0:partType.getId());
		this.partType=partType;
	}
	public DescriptiveType copy()throws java.sql.SQLException{
		DescriptiveType cp = new DescriptiveType((DescriptiveType)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(DescriptiveTypeDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(DescriptiveTypeDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getPartTypeId(),o.getPartTypeId())) diffs.add("PART_TYPE_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getVarName(),o.getVarName())) diffs.add("VAR_NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(isUserEditable(),o.isUserEditable())) diffs.add("USER_EDITABLE");
		if(!isSame(getInputType(),o.getInputType())) diffs.add("INPUT_TYPE");
		if(!isSame(getOptions(),o.getOptions())) diffs.add("OPTIONS");
		if(!isSame(getDefaultValue(),o.getDefaultValue())) diffs.add("DEFAULT_VALUE");
		if(!isSame(getUnits(),o.getUnits())) diffs.add("UNITS");
		if(!isSame(getInputInstructions(),o.getInputInstructions())) diffs.add("INPUT_INSTRUCTIONS");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(partType != null && partType.isNewInstance())
				partType.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
