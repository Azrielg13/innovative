package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.BidItem;
import com.sce.esp.object.model.BidPackage;
import com.sce.esp.object.model.CostType;
import com.sce.esp.object.model.ScopeItem;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class BidItemDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{BID_PACKAGE_ID,SCOPE_ITEM_ID,COST_TYPE_ID};
	public static enum PROPERTY{BID_PACKAGE_ID,SCOPE_ITEM_ID,COST_TYPE_ID};
	public final static int BIDPACKAGEID_LIMIT = 9;
	public final static int SCOPEITEMID_LIMIT = 9;
	public final static int COSTTYPEID_LIMIT = 9;
	private int bidPackageId;
	private int scopeItemId;
	private int costTypeId;
	private BidPackage bidPackage;
	private ScopeItem scopeItem;
	private CostType costType;
	public static BidItem getInstance(int bidPackageId, int scopeItemId, int costTypeId)throws java.sql.SQLException{
		return getInstance(bidPackageId, scopeItemId, costTypeId, true);
	}
	public static BidItem getInstance(int bidPackageId, int scopeItemId, int costTypeId, boolean fetch)throws java.sql.SQLException{
		if(isNull(bidPackageId, scopeItemId, costTypeId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(bidPackageId, scopeItemId, costTypeId);
		Cache cache = em.getEntityManagerFactory().getCache();
		BidItem o = null;
		if(cache != null && cache.contains(BidItem.class, pk))
			o = em.find(BidItem.class, pk);
		if(o==null && getAICache().contains(BidItem.class, pk))
			o = getAICache().find(BidItem.class, pk);
		if(o==null && fetch)
			o = em.find(BidItem.class, pk);
		if(o==null && fetch && BidItem.class.getAnnotation(AutoInsertable.class) != null){
			o = new BidItem(bidPackageId, scopeItemId, costTypeId);
			getAICache().cache(BidItem.class, o);
		}
		return o;
	}
	public static Collection<BidItem> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<BidItem> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<BidItem> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM BidItem o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<BidItem> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<BidItem> tq = em.createQuery(jpql,BidItem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<BidItem> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<BidItem> tq = em.createNamedQuery(name,BidItem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public BidItemDAO(){}
	public BidItemDAO(int bidPackageId, int scopeItemId, int costTypeId){
		this.bidPackageId=bidPackageId;
		this.scopeItemId=scopeItemId;
		this.costTypeId=costTypeId;
	}
	public BidItemDAO(BidItemDAO orig){
		super(orig);
		this.bidPackageId=orig.getBidPackageId();
		this.scopeItemId=orig.getScopeItemId();
		this.costTypeId=orig.getCostTypeId();
		copyFrom(orig);
	}
	public void copyFrom(BidItemDAO orig){
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{bidPackageId, scopeItemId, costTypeId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="BID_PACKAGE_ID",nullable=false,length=9)
	public int getBidPackageId(){
		return bidPackageId;
	}
	public void setBidPackageId(int bidPackageId) throws java.sql.SQLException{
		if(isSame(bidPackageId, getBidPackageId()))return;
		int oldValue = getBidPackageId();
		this.bidPackageId=bidPackageId;
		setProperty("BID_PACKAGE_ID", bidPackageId, oldValue);
		bidPackage=null;
	}
	@Id
	@Column(name="SCOPE_ITEM_ID",nullable=false,length=9)
	public int getScopeItemId(){
		return scopeItemId;
	}
	public void setScopeItemId(int scopeItemId) throws java.sql.SQLException{
		if(isSame(scopeItemId, getScopeItemId()))return;
		int oldValue = getScopeItemId();
		this.scopeItemId=scopeItemId;
		setProperty("SCOPE_ITEM_ID", scopeItemId, oldValue);
		scopeItem=null;
	}
	@Id
	@Column(name="COST_TYPE_ID",nullable=false,length=9)
	public int getCostTypeId(){
		return costTypeId;
	}
	public void setCostTypeId(int costTypeId) throws java.sql.SQLException{
		if(isSame(costTypeId, getCostTypeId()))return;
		int oldValue = getCostTypeId();
		this.costTypeId=costTypeId;
		setProperty("COST_TYPE_ID", costTypeId, oldValue);
		costType=null;
	}
	public BidPackage getBidPackage()throws java.sql.SQLException{
		if(bidPackage==null)
			bidPackage=BidPackage.getInstance(getBidPackageId());
		return bidPackage;
	}
	public void setBidPackage(BidPackage bidPackage)throws java.sql.SQLException{
		setBidPackageId(bidPackage==null?0:bidPackage.getId());
		this.bidPackage=bidPackage;
	}
	public ScopeItem getScopeItem()throws java.sql.SQLException{
		if(scopeItem==null)
			scopeItem=ScopeItem.getInstance(getScopeItemId());
		return scopeItem;
	}
	public void setScopeItem(ScopeItem scopeItem)throws java.sql.SQLException{
		setScopeItemId(scopeItem==null?0:scopeItem.getScopeItemId());
		this.scopeItem=scopeItem;
	}
	public CostType getCostType()throws java.sql.SQLException{
		if(costType==null)
			costType=CostType.getInstance(getCostTypeId());
		return costType;
	}
	public void setCostType(CostType costType)throws java.sql.SQLException{
		setCostTypeId(costType==null?0:costType.getId());
		this.costType=costType;
	}
	public BidItem copy()throws java.sql.SQLException{
		BidItem cp = new BidItem((BidItem)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(BidItemDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(BidItemDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getBidPackageId(),o.getBidPackageId())) diffs.add("BID_PACKAGE_ID");
		if(!isSame(getScopeItemId(),o.getScopeItemId())) diffs.add("SCOPE_ITEM_ID");
		if(!isSame(getCostTypeId(),o.getCostTypeId())) diffs.add("COST_TYPE_ID");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
