package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CprSubAcct;
import com.sce.esp.object.model.DescriptiveType;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.PartType;
import com.sce.esp.object.model.PartTypeCpr;
import com.sce.esp.object.model.ScopeType;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PartTypeDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,NAME,ACTIVE,DESCRIPTION,CPR_SUB_ACCT_ID,FORECAST_CAT_ID};
	public final static int ID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int ACTIVE_LIMIT = 1;
	public final static int DESCRIPTION_LIMIT = 128;
	public final static int CPRSUBACCTID_LIMIT = 9;
	public final static int FORECASTCATID_LIMIT = 9;
	private int id;
	private String name;
	private boolean active;
	private String description;
	private int cprSubAcctId;
	private int forecastCatId;
	private Collection<ScopeType> scopeTypes;
	private Collection<PartTypeCpr> partTypeCprs;
	private Collection<DescriptiveType> descriptiveTypes;
	private CprSubAcct cprSubAcct;
	private LookUp forecastCat;
	public static PartType getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static PartType getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		PartType o = null;
		if(cache != null && cache.contains(PartType.class, pk))
			o = em.find(PartType.class, pk);
		if(o==null && getAICache().contains(PartType.class, pk))
			o = getAICache().find(PartType.class, pk);
		if(o==null && fetch)
			o = em.find(PartType.class, pk);
		if(o==null && fetch && PartType.class.getAnnotation(AutoInsertable.class) != null){
			o = new PartType(id);
			getAICache().cache(PartType.class, o);
		}
		return o;
	}
	public static Collection<PartType> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PartType> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PartType> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PartType o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PartType> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PartType> tq = em.createQuery(jpql,PartType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PartType> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PartType> tq = em.createNamedQuery(name,PartType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PartTypeDAO(){}
	public PartTypeDAO(int id){
		this.id=id;
	}
	public PartTypeDAO(PartTypeDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(PartTypeDAO orig){
		this.name=orig.getName();
		this.active=orig.isActive();
		this.description=orig.getDescription();
		this.cprSubAcctId=orig.getCprSubAcctId();
		this.forecastCatId=orig.getForecastCatId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDISP2_SEQ",sequenceName="MDISP2_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="ACTIVE",nullable=true,length=1)
	public boolean isActive(){
		return active;
	}
	public void setActive(boolean active) throws java.sql.SQLException{
		if(isSame(active, isActive()))return;
		boolean oldValue = isActive();
		this.active=active;
		setProperty("ACTIVE", active, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=128)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="CPR_SUB_ACCT_ID",nullable=true,length=9)
	public int getCprSubAcctId(){
		return cprSubAcctId;
	}
	public void setCprSubAcctId(int cprSubAcctId) throws java.sql.SQLException{
		if(isSame(cprSubAcctId, getCprSubAcctId()))return;
		int oldValue = getCprSubAcctId();
		this.cprSubAcctId=cprSubAcctId;
		setProperty("CPR_SUB_ACCT_ID", cprSubAcctId, oldValue);
		cprSubAcct=null;
	}
	@Column(name="FORECAST_CAT_ID",nullable=true,length=9)
	public int getForecastCatId(){
		return forecastCatId;
	}
	public void setForecastCatId(int forecastCatId) throws java.sql.SQLException{
		if(isSame(forecastCatId, getForecastCatId()))return;
		int oldValue = getForecastCatId();
		this.forecastCatId=forecastCatId;
		setProperty("FORECAST_CAT_ID", forecastCatId, oldValue);
		forecastCat=null;
	}
	public CprSubAcct getCprSubAcct()throws java.sql.SQLException{
		if(cprSubAcct==null)
			cprSubAcct=CprSubAcct.getInstance(getCprSubAcctId());
		return cprSubAcct;
	}
	public void setCprSubAcct(CprSubAcct cprSubAcct)throws java.sql.SQLException{
		setCprSubAcctId(cprSubAcct==null?0:cprSubAcct.getId());
		this.cprSubAcct=cprSubAcct;
	}
	public LookUp getForecastCat()throws java.sql.SQLException{
		if(forecastCat==null)
			forecastCat=LookUp.getInstance(getForecastCatId());
		return forecastCat;
	}
	public void setForecastCat(LookUp forecastCat)throws java.sql.SQLException{
		setForecastCatId(forecastCat==null?0:forecastCat.getId());
		this.forecastCat=forecastCat;
	}
	public Collection<ScopeType> getScopeTypes()throws java.sql.SQLException{
		if(isNewInstance() || scopeTypes != null){
			if(scopeTypes == null)
				scopeTypes = new TreeSet<ScopeType>();
			return scopeTypes;
		}
		return ScopeType.getNamedCollection("findByPartType",getId());
	}
	public void addScopeType(ScopeType scopeType)throws java.sql.SQLException{
		scopeType.setPartType((PartType)this);
		if(isNewInstance() || scopeTypes != null)
			getScopeTypes().add(scopeType);
		else
			scopeType.insert();
	}
	public void removeScopeType(ScopeType scopeType)throws java.sql.SQLException{
		if(isNewInstance() || scopeTypes != null)
			getScopeTypes().remove(scopeType);
		else
			scopeType.delete();
	}
	public Collection<PartTypeCpr> getPartTypeCprs()throws java.sql.SQLException{
		if(isNewInstance() || partTypeCprs != null){
			if(partTypeCprs == null)
				partTypeCprs = new TreeSet<PartTypeCpr>();
			return partTypeCprs;
		}
		return PartTypeCpr.getNamedCollection("findByPartType",getId());
	}
	public void addPartTypeCpr(PartTypeCpr partTypeCpr)throws java.sql.SQLException{
		partTypeCpr.setPartType((PartType)this);
		if(isNewInstance() || partTypeCprs != null)
			getPartTypeCprs().add(partTypeCpr);
		else
			partTypeCpr.insert();
	}
	public void removePartTypeCpr(PartTypeCpr partTypeCpr)throws java.sql.SQLException{
		if(isNewInstance() || partTypeCprs != null)
			getPartTypeCprs().remove(partTypeCpr);
		else
			partTypeCpr.delete();
	}
	public Collection<DescriptiveType> getDescriptiveTypes()throws java.sql.SQLException{
		if(isNewInstance() || descriptiveTypes != null){
			if(descriptiveTypes == null)
				descriptiveTypes = new TreeSet<DescriptiveType>();
			return descriptiveTypes;
		}
		return DescriptiveType.getNamedCollection("findByPartType",getId());
	}
	public void addDescriptiveType(DescriptiveType descriptiveType)throws java.sql.SQLException{
		descriptiveType.setPartType((PartType)this);
		if(isNewInstance() || descriptiveTypes != null)
			getDescriptiveTypes().add(descriptiveType);
		else
			descriptiveType.insert();
	}
	public void removeDescriptiveType(DescriptiveType descriptiveType)throws java.sql.SQLException{
		if(isNewInstance() || descriptiveTypes != null)
			getDescriptiveTypes().remove(descriptiveType);
		else
			descriptiveType.delete();
	}
	public PartType copy()throws java.sql.SQLException{
		PartType cp = new PartType((PartType)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PartTypeDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(ScopeType child:getScopeTypes())
			cp.addScopeType(child.copy());
		for(PartTypeCpr child:getPartTypeCprs())
			cp.addPartTypeCpr(child.copy());
		for(DescriptiveType child:getDescriptiveTypes())
			cp.addDescriptiveType(child.copy());
	}
	public Vector<String> getDifference(PartTypeDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(isActive(),o.isActive())) diffs.add("ACTIVE");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getCprSubAcctId(),o.getCprSubAcctId())) diffs.add("CPR_SUB_ACCT_ID");
		if(!isSame(getForecastCatId(),o.getForecastCatId())) diffs.add("FORECAST_CAT_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(cprSubAcct != null && cprSubAcct.isNewInstance())
				cprSubAcct.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(scopeTypes != null){
			for(ScopeType scopeType:getScopeTypes())
				scopeType.setPartType((PartType)this);
		}
		if(partTypeCprs != null){
			for(PartTypeCpr partTypeCpr:getPartTypeCprs())
				partTypeCpr.setPartType((PartType)this);
		}
		if(descriptiveTypes != null){
			for(DescriptiveType descriptiveType:getDescriptiveTypes())
				descriptiveType.setPartType((PartType)this);
		}
		if(scopeTypes != null){
			for(ScopeType scopeType:getScopeTypes())
				if(scopeType.isNewInstance())
					scopeType.insert();
			scopeTypes = null;
		}
		if(partTypeCprs != null){
			for(PartTypeCpr partTypeCpr:getPartTypeCprs())
				if(partTypeCpr.isNewInstance())
					partTypeCpr.insert();
			partTypeCprs = null;
		}
		if(descriptiveTypes != null){
			for(DescriptiveType descriptiveType:getDescriptiveTypes())
				if(descriptiveType.isNewInstance())
					descriptiveType.insert();
			descriptiveTypes = null;
		}
	}
}
