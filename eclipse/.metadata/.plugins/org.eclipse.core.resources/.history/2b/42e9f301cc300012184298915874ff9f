package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.LgProj;
import com.sce.esp.object.model.LgProjGis;
import com.sce.esp.object.model.MDIObject;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class LgProjGisDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,GIS_ID};
	public static enum PROPERTY{PLANYEAR,GIS_ID,LG_PROJ_ID,LATITUDE,LONGITUDE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int GISID_LIMIT = 9;
	public final static int LGPROJID_LIMIT = 9;
	public final static int LATITUDE_LIMIT = 24;
	public final static int LONGITUDE_LIMIT = 24;
	private int planyear;
	private int gisId;
	private int lgProjId;
	private double latitude;
	private double longitude;
	private LgProj lgProj;
	public static LgProjGis getInstance(int planyear, int gisId)throws java.sql.SQLException{
		return getInstance(planyear, gisId, true);
	}
	public static LgProjGis getInstance(int planyear, int gisId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, gisId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, gisId);
		Cache cache = em.getEntityManagerFactory().getCache();
		LgProjGis o = null;
		if(cache != null && cache.contains(LgProjGis.class, pk))
			o = em.find(LgProjGis.class, pk);
		if(o==null && getAICache().contains(LgProjGis.class, pk))
			o = getAICache().find(LgProjGis.class, pk);
		if(o==null && fetch)
			o = em.find(LgProjGis.class, pk);
		if(o==null && fetch && LgProjGis.class.getAnnotation(AutoInsertable.class) != null){
			o = new LgProjGis(planyear, gisId);
			getAICache().cache(LgProjGis.class, o);
		}
		return o;
	}
	public static Collection<LgProjGis> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<LgProjGis> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<LgProjGis> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM LgProjGis o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<LgProjGis> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<LgProjGis> tq = em.createQuery(jpql,LgProjGis.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<LgProjGis> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<LgProjGis> tq = em.createNamedQuery(name,LgProjGis.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public LgProjGisDAO(){}
	public LgProjGisDAO(int planyear, int gisId){
		this.planyear=planyear;
		this.gisId=gisId;
	}
	public LgProjGisDAO(LgProjGisDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(LgProjGisDAO orig){
		this.lgProjId=orig.getLgProjId();
		this.latitude=orig.getLatitude();
		this.longitude=orig.getLongitude();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, gisId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI905_SEQ",sequenceName="MDI905_SEQ")
	@Column(name="GIS_ID",nullable=false,length=9)
	public int getGisId(){
		return gisId;
	}
	public void setGisId(int gisId) throws java.sql.SQLException{
		if(isSame(gisId, getGisId()))return;
		int oldValue = getGisId();
		this.gisId=gisId;
		setProperty("GIS_ID", gisId, oldValue);
	}
	@Column(name="LG_PROJ_ID",nullable=false,length=9)
	public int getLgProjId(){
		return lgProjId;
	}
	public void setLgProjId(int lgProjId) throws java.sql.SQLException{
		if(isSame(lgProjId, getLgProjId()))return;
		int oldValue = getLgProjId();
		this.lgProjId=lgProjId;
		setProperty("LG_PROJ_ID", lgProjId, oldValue);
		lgProj=null;
	}
	@Column(name="LATITUDE",nullable=true,length=24)
	public double getLatitude(){
		return latitude;
	}
	public void setLatitude(double latitude) throws java.sql.SQLException{
		if(isSame(latitude, getLatitude()))return;
		double oldValue = getLatitude();
		this.latitude=latitude;
		setProperty("LATITUDE", latitude, oldValue);
	}
	@Column(name="LONGITUDE",nullable=true,length=24)
	public double getLongitude(){
		return longitude;
	}
	public void setLongitude(double longitude) throws java.sql.SQLException{
		if(isSame(longitude, getLongitude()))return;
		double oldValue = getLongitude();
		this.longitude=longitude;
		setProperty("LONGITUDE", longitude, oldValue);
	}
	public LgProj getLgProj()throws java.sql.SQLException{
		if(lgProj==null)
			lgProj=LgProj.getInstance(getPlanyear(), getLgProjId());
		return lgProj;
	}
	public void setLgProj(LgProj lgProj)throws java.sql.SQLException{
		setLgProjId(lgProj==null?0:lgProj.getLgProjId());
		this.lgProj=lgProj;
	}
	public LgProjGis copy()throws java.sql.SQLException{
		LgProjGis cp = new LgProjGis((LgProjGis)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(LgProjGisDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(LgProjGisDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getGisId(),o.getGisId())) diffs.add("GIS_ID");
		if(!isSame(getLgProjId(),o.getLgProjId())) diffs.add("LG_PROJ_ID");
		if(!isSame(getLatitude(),o.getLatitude())) diffs.add("LATITUDE");
		if(!isSame(getLongitude(),o.getLongitude())) diffs.add("LONGITUDE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
