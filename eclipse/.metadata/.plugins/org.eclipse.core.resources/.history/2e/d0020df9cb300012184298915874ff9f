/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2002-2007, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;
import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.swing.Icon;

import com.sce.esp.object.dao.DistrictDAO;
import com.sce.esp.util.Calculate;
import com.sce.esp.util.IconsFactory;
@Entity
@Table(schema="MDI",name="MDI050_DISTRICT")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM District o WHERE o.PLANYEAR=?1 AND o.DISTRICT_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM District o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM District o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByRegion", query="SELECT o FROM District o WHERE o.PLANYEAR=?1 AND o.REGION_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByDistrict", query="SELECT o FROM PqTroubleLog o WHERE o.DISTRICT_ID=?1 AND o.DELETED_TS IS NULL"),
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI050_DISTRICT o WHERE o.PLANYEAR=? AND o.DISTRICT_ID=?"),//AUTO-GENERATED
})
public class District extends DistrictDAO implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 5355314184605022350L;
	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 */
	public District(){
	}
	public District(int planyear) {
		super(planyear,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param districtId the district id
	 * @param planyear the planyear
	 */
	public District(int planyear, int districtId){
		super(planyear,districtId);
	}

	public District(District district) {
		super(district);
	}

	public int getId(){
		return getDistrictId();
	}

	public int getCoTypeId(){
		return CoType.DISTRICT;
	}

	public TreeSet<Sub> getSubs(int simId, SubFilter filter)throws SQLException{
		TreeSet<Sub> subs = new TreeSet<Sub>();
		for(Sub sub:getSubs())
			if(filter == null || filter.meetsCriteria(sub, simId))
				subs.add(sub);
		return subs;
	}

	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		return "District "+getDistrictNum()+"-"+getDistrictName();
	}
	public String toShortString() {
		return getDistrictNum()+"-"+getDistrictName();
	}


	/**
	 * Gets the year.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the year
	 * 
	 * @throws SQLException the SQL exception
	 */
	public DistrictYear getYear(int simId, int year)throws SQLException{
		return DistrictYear.getInstance(getPlanyear(),simId,getDistrictId(),year);
	}

	/**
	 * Gets the syss.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the syss
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<Sys> getSyss(int simId) throws SQLException {
		TreeSet<Sys> syss = new TreeSet<Sys>();
		for(Sub sub:getSubs())
			syss.addAll(sub.getSyss(simId));
		return syss;
	}

	public Collection<Sys> getSyssSCE(int simId) throws SQLException {
		TreeSet<Sys> syss = new TreeSet<Sys>();
		for(Sub sub:getSubs())
			syss.addAll(sub.getSyssSCE(simId));
		return syss;
	}


	/**
	 * Gets the A banks.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the A banks
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<Abank> getAbanks(int simId) throws SQLException {
		return getAbanks();
	}

	/**
	 * Gets the B banks.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the B banks
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<Bbank> getBbanks(int simId) throws SQLException {
		return getBbanks();
	}

	/**
	 * Gets the down stream subs.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the down stream subs
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Sub> getDownStreamSubs(int simId) throws SQLException {
		return getSubs();
	}

	/**
	 * <p>Title: getPeakEff</p>
	 * <p>Peak Effective Temperature for a given year</p>.
	 * 
	 * @param year the year
	 * 
	 * @return the peak eff
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getPeakEff(int year)throws SQLException{
		double sum=0;
		double avg=0;
		Vector<Weatherstation> wss = getWeatherStationsByInstance();
		for(Weatherstation ws:wss)
			sum+=ws.getPeakEff(year);
		if(wss.size()>0)
			avg=sum/wss.size();
		return avg;
	}

	/**
	 * Gets the ten year avg flag.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the ten year avg flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getTenYearAvgFlag(int simId) throws SQLException{
		int flagId = Flag.TEN_YR_AVG_FLAG;
		Flag flag = Flag.getInstance(getPlanyear(), flagId);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {		
			for(int year=getPlanyear()-11; year<getPlanyear()-1; year++) {
				if(getTenYearAvgPeakEffFlag(year) > 0)
					return flagId;
			}
		}
		return 0;
	}

	/**
	 * Gets the ten year avg peak eff flag.
	 * 
	 * @param year the year
	 * 
	 * @return the ten year avg peak eff flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getTenYearAvgPeakEffFlag(int year)throws SQLException{
		int flagId = Flag.TEN_YR_AVG_FLAG;
		Flag flag = Flag.getInstance(getPlanyear(), flagId);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {    		
			if(Math.abs(getPeakEff(year)/getTenYearAvg()-1) > flag.getValue())
				return flagId;			
		}
		return 0;
	}

	/**
	 * Gets the weatherstations.
	 * 
	 * @return the weatherstations
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Weatherstation> getWeatherStations() throws SQLException {
		TreeSet<Weatherstation> wss = new TreeSet<Weatherstation>();
		for(Sub sub:getSubs())
			wss.addAll(sub.getWeatherStations());
		return wss;
	}

	/**
	 * Gets the weatherstations by instance.
	 * 
	 * @return the weatherstations by instance
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Vector<Weatherstation> getWeatherStationsByInstance() throws SQLException {
		Vector<Weatherstation> wss = new Vector<Weatherstation>();
		for(Sub sub:getSubs())
			wss.addAll(sub.getWeatherStations());
		return wss;
	}

	/**
	 * Gets the latitude avg.
	 * 
	 * @return the latitude avg
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getLatitude() throws SQLException {
		double totLat=0;
		int count=0;
		for(Sub sub:getSubs()){
			if(sub.getLatitude() != 0 && sub.getLongitude() != 0){
				totLat+=sub.getLatitude();
				count++;
			}
		}
		return totLat/count;
	}

	/**
	 * Gets the longitude avg.
	 * 
	 * @return the longitude avg
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getLongitude() throws SQLException {
		double totLon=0;
		int count=0;
		for(Sub sub:getSubs()){
			if(sub.getLatitude() != 0 && sub.getLongitude() != 0){
				totLon+=sub.getLongitude();
				count++;
			}
		}
		return totLon/count;
	}

	/**
	 * Gets the daily peak.
	 * 
	 * @param date the date
	 * 
	 * @return the daily peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public AgDailyPeak getDailyPeak(Calendar date)throws SQLException{
		return new AgDailyPeak(this,date);
	}



	/**
	 * Gimme percent instance.
	 * 
	 * @param ws the ws
	 * 
	 * @return the double
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getPercentInstance(com.sce.esp.object.model.Weatherstation)
	 */
	public double getPercentInstance(Weatherstation ws) throws SQLException {			
		double pi = 0;
		for(Weatherstation ws2: getWeatherStationsByInstance())
			if(ws == ws2)
				pi++;   		
		return Calculate.round(pi/getWeatherStationsByInstance().size()*100,1);
	}

	/**
	 * Gets the flags.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the flags
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Referee> getFlags(int simId)throws Exception{
		TreeSet<Referee> flags = new TreeSet<Referee>();
		for(Sub sub:getSubs(simId, User.getActiveUser().getSubFilter()))
			flags.addAll(sub.getFlags(simId));
		return flags;
	}

	/**
	 * Gets the icon.
	 * 
	 * @return the icon
	 */
	public Icon getIcon(){
		return IconsFactory.ICON_DISTRICT;
	}

	/**
	 * Gets the districts.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the districts
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<District> getDistricts(int simId) throws SQLException {
		Collection<District> c = new Vector<District>();
		c.add(this);
		return c;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getChildren(int)
	 */
	public Collection<Sub> getChildren(int simId) throws SQLException{
		return getChildren(simId, SubFilter.CORE_SUB);
	}

	public Collection<Sub> getChildren(int simId, SubFilter sf) throws SQLException{		
		return getSubs(simId, sf);
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getPYInstance(int)
	 */
	public District getPlanYearInstance(int planyear)throws SQLException{
		return getInstance(planyear,getDistrictId());
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getParent()
	 */
	public Region getParent()throws SQLException {
		return getRegion();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getDistricts()
	 */
	public TreeSet<District> getDistricts(){
		TreeSet<District> ds = new TreeSet<District>();
		ds.add(this);
		return ds;
	}

	public String getName() {
		return getDistrictName();
	}

	public TreeSet<Sub> getSubs()throws SQLException{
		TreeSet<Sub> subs = new TreeSet<Sub>(getBbanks());
		subs.addAll(getAbanks());
		return subs;
	}

	public Collection<Abank> getAbanks() throws SQLException{
		return Abank.getCollection(new String[]{"PLANYEAR","DISTRICT_ID"},getPlanyear(), getDistrictId());
	}

	public Collection<Bbank> getBbanks() throws SQLException{
		if(getDistrictNum()== -4){
			Collection<Bbank> bbanks = new TreeSet<Bbank>(Bbank.getCollection(new String[]{"PLANYEAR","SECONDARY_KV"},getPlanyear(), 4.16));
			bbanks.addAll(Bbank.getCollection(new String[]{"PLANYEAR","SECONDARY_KV"},getPlanyear(), 4.8));
			return bbanks;
		}
		return Bbank.getCollection(new String[]{"PLANYEAR","DISTRICT_ID"},getPlanyear(), getDistrictId());
	}
	public TreeSet<Zone> getZones() throws SQLException{
		return getRegion().getZones();
	}
	public TreeSet<Region> getRegions() throws SQLException{
		TreeSet<Region> regions = new TreeSet<Region>();
		regions.add(getRegion());
		return regions;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getDownStreamSubs(int, com.sce.mdi.object.SubFilter)
	 */
	public TreeSet<Sub> getDownStreamSubs(int simId, SubFilter subFilter)throws SQLException{
		return getSubs(simId,subFilter);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getBBanks(int, com.sce.mdi.object.SubFilter)
	 */
	public TreeSet<Bbank> getBbanks(int simId, SubFilter sf) throws SQLException{
		TreeSet<Bbank> bbanks = new TreeSet<Bbank>();
		for(Bbank bbank:getBbanks())
			if(sf == null || sf.meetsCriteria(bbank, simId))
				bbanks.add(bbank);
		return bbanks;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getABanks(int, com.sce.mdi.object.SubFilter)
	 */
	public TreeSet<Abank> getAbanks(int simId, SubFilter sf) throws SQLException{
		TreeSet<Abank> abanks = new TreeSet<Abank>();
		for(Abank abank:getAbanks())
			if(sf == null || sf.meetsCriteria(abank, simId))
				abanks.add(abank);
		return abanks;
	}

	public TreeSet<SceProj> getSceProjs(int simId)throws SQLException{
		TreeSet<SceProj> projs = new TreeSet<SceProj>();
		for(Sub sub:getSubs())
			projs.addAll(sub.getSceProjs(simId));
		return projs;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLgProjs(int)
	 */
	public TreeSet<LgProj> getLgProjs(int simId) throws SQLException {
		TreeSet<LgProj> lgProjs = new TreeSet<LgProj>();
		for(Bbank sub:getBbanks())
			lgProjs.addAll(sub.getLgProjs(simId));
		return lgProjs;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getTenYearAvg()
	 */
	public double getTenYearAvg()throws SQLException{
		double sum=0;		
		double avg=0;
		Vector<Weatherstation> wss = getWeatherStationsByInstance();
		int wsCount = wss.size();
		for(Weatherstation ws:wss){
			sum += ws.getTenYearAvg();
		}
		if(wsCount>0)
			avg=sum/wsCount;
		return avg;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getActualPeak(int)
	 */
	public double getActualPeak(int simId) throws SQLException {
		double sum = 0;
		for(Sub sub:getSubs())
			sum += sub.getActualPeak(simId);
		return sum;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getAdjustedPeak(int)
	 */
	public double getAdjustedPeak(int simId) throws SQLException {
		double sum = 0;
		for(Sub sub:getSubs())
			sum += sub.getAdjustedPeak(simId);
		return sum;
	}

	/**
	 * 
	 * @param simId
	 * @throws SQLException
	 */
	public void calcWsData(int simId)throws SQLException{

	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLastCalcWsData(int)
	 */
	public Calendar getLastCalcWsData(int simId) throws SQLException{
		return Calendar.getInstance();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLastCalcBLoad(int, int)
	 */
	public Calendar getLastCalcBLoad(int simId, int planFor) throws SQLException{
		return Calendar.getInstance();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLastCalcBLoad(int)
	 */
	public Calendar getLastCalcBPeak(int simId) throws SQLException{
		return Calendar.getInstance();
	}

	public Calendar getLastCalcAVar(int simId, int planFor) throws SQLException{
		return Calendar.getInstance();
	}

	public Calendar getLastCalcBVar(int simId, int planFor) throws SQLException{
		return Calendar.getInstance();
	}

	public Calendar getLastCalcCktLimit(int simId, int planFor) throws SQLException{
		return Calendar.getInstance();
	}

	public Calendar getLastCalcCkt(int simId, int planFor) throws SQLException{
		return Calendar.getInstance();
	}

	public Calendar getLastCalcProj(int simId, int planFor) throws SQLException{
		return Calendar.getInstance();
	}

	public Calendar getLastCalcProjCost(int simId, int planFor) throws SQLException{
		return Calendar.getInstance();
	}

	public Calendar getLastCalcMonthly(int simId, int planFor)throws SQLException{
		return Calendar.getInstance();
	}

	public int getSubCount(int simId) throws SQLException{		
		return getSubs().size();
	}
	public int getCktCount(int simId) throws SQLException{
		int count=0;
		for(Bbank b:getBbanks())
			count += b.getCktCount(simId);
		return count;
	}

	public int getSsFin(int simId) throws SQLException{
		int c=0;
		for(Sub sub:getSubs())
			c += sub.getSsFin(simId);
		return c;
	}
	public int getSsApp(int simId) throws SQLException{
		int c=0;
		for(Sub sub:getSubs())
			c += sub.getSsApp(simId);
		return c;
	}
	public int getContFin(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getContFin(simId);
		return total;
	}
	public int getContApp(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getContApp(simId);
		return total;
	}
	public int getContTotal(int simId) throws SQLException {
		return getSubCount(simId)+getCktCount(simId);
	}
	public int getCsFin(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getCsFin(simId);
		return total;
	}
	public int getCsApp(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getCsApp(simId);
		return total;
	}
	public int getCsTotal(int simId) throws SQLException {
		return getCktCount(simId);
	}
	public int getExFin(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getExFin(simId);
		return total;
	}
	public int getExApp(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getExApp(simId);
		return total;
	}
	public int getExTotal(int simId) throws SQLException {
		return getSubCount(simId);
	}
	public int getLgFin(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getLgFin(simId);
		return total;
	}
	public int getLgApp(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getLgApp(simId);
		return total;
	}
	public int getLgTotal(int simId) throws SQLException {
		return getSubCount(simId);//+getCktCount(simId);
	}
	public int getN1Fin(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getN1Fin(simId);
		return total;
	}
	public int getN1App(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getN1App(simId);
		return total;
	}
	public int getN1Total(int simId) throws SQLException {
		return getSubCount(simId);
	}
	public int getPaFin(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getPaFin(simId);
		return total;
	}
	public int getPaApp(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getPaApp(simId);
		return total;
	}
	public int getPaTotal(int simId) throws SQLException {
		return getSubCount(simId);//+getCktCount(simId);
	}
	public int getProjFin(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getProjFin(simId);
		return total;
	}
	public int getProjApp(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getProjApp(simId);
		return total;
	}
	public int getVarFin(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getVarFin(simId);
		return total;
	}
	public int getVarApp(int simId) throws SQLException {
		int total=0;
		for(Sub sub:getSubs())
			total += sub.getVarApp(simId);
		return total;
	}
	public int getVarTotal(int simId) throws SQLException {
		return getSubCount(simId);
	}

	public Calendar getLastCalcFinApp(int simId) throws SQLException{
		return Calendar.getInstance();
	}



	public double getVarARequired(int simId, int year) throws SQLException {
		double required = 0;
		for(Abank abank : getAbanks()){
			required += abank.getYear(simId, year).getTotalVarReq();
		}
		return required;
	}

	public double getVarASupply(int simId, int year) throws SQLException {
		double sup = 0.0;
		for(Abank abank : getAbanks()){
			sup += abank.getYear(simId, year).getTotalVarSupply();
		}
		return sup;
	}

	public double getVarBRequired(int simId, int year) throws SQLException {
		double req = 0.0;
		for(Sub sub : getSubs())
			req += sub.getYear(simId, year).getTotalVarReq();
		return req;
	}

	public double getVarBSupply(int simId, int year) throws SQLException {
		double sup = 0.0;
		for(Sub sub : getSubs())
			sup += sub.getYear(simId, year).getTotalVarSupply();
		return sup;
	}

	public CoType getCoType() throws SQLException{
		return CoType.getInstance(CoType.DISTRICT);
	}

	public double getPrimaryKv() throws SQLException {
		return getPrimaryKv();
	}
	@Override
	public District getPrevInstance() throws SQLException {
		return getInstance(getPlanyear()-1,getDistrictId());
	}
	public Collection<PqTroubleLog> getPqTroubleLogs()throws java.sql.SQLException{
		if(isNewInstance())
			return super.getPqTroubleLogs();
		return PqTroubleLog.getNamedCollection("findByDistrict", getDistrictId());
	}
	public Collection<Pif> getPifs() throws SQLException {
		TreeSet<Pif> v = new TreeSet<Pif>();
		for(Bbank bb : getBbanks())
			for(Pif p : bb.getPifs())
				v.add(p);
		return v;
	}
}
