package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PqEquInv;
import com.sce.esp.object.model.PqEquipment;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PqEquipmentDAO extends MDIObject{
	public static enum KEY_PROPERTY{EQUIP_ID};
	public static enum PROPERTY{EQUIP_ID,EQUIPMENT,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,EQU_TYPE};
	public final static int EQUIPID_LIMIT = 9;
	public final static int EQUIPMENT_LIMIT = 32;
	public final static int EQUTYPE_LIMIT = 2;
	private int equipId;
	private String equipment;
	private int equType;
	private Collection<PqEquInv> pqEquInvs;
	public static PqEquipment getInstance(int equipId)throws java.sql.SQLException{
		return getInstance(equipId, true);
	}
	public static PqEquipment getInstance(int equipId, boolean fetch)throws java.sql.SQLException{
		if(isNull(equipId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(equipId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PqEquipment o = null;
		if(cache != null && cache.contains(PqEquipment.class, pk))
			o = em.find(PqEquipment.class, pk);
		if(o==null && getAICache().contains(PqEquipment.class, pk))
			o = getAICache().find(PqEquipment.class, pk);
		if(o==null && fetch)
			o = em.find(PqEquipment.class, pk);
		if(o==null && fetch && PqEquipment.class.getAnnotation(AutoInsertable.class) != null){
			o = new PqEquipment(equipId);
			getAICache().cache(PqEquipment.class, o);
		}
		return o;
	}
	public static Collection<PqEquipment> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PqEquipment> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PqEquipment> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PqEquipment o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PqEquipment> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqEquipment> tq = em.createQuery(jpql,PqEquipment.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PqEquipment> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqEquipment> tq = em.createNamedQuery(name,PqEquipment.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PqEquipmentDAO(){}
	public PqEquipmentDAO(int equipId){
		this.equipId=equipId;
	}
	public PqEquipmentDAO(PqEquipmentDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(PqEquipmentDAO orig){
		this.equipment=orig.getEquipment();
		this.equType=orig.getEquType();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{equipId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDI950_SEQ",sequenceName="MDI950_SEQ")
	@Column(name="EQUIP_ID",nullable=false,length=9)
	public int getEquipId(){
		return equipId;
	}
	public void setEquipId(int equipId) throws java.sql.SQLException{
		if(isSame(equipId, getEquipId()))return;
		int oldValue = getEquipId();
		this.equipId=equipId;
		setProperty("EQUIP_ID", equipId, oldValue);
	}
	@Column(name="EQUIPMENT",nullable=false,length=32)
	public String getEquipment(){
		return equipment;
	}
	public void setEquipment(String equipment) throws java.sql.SQLException{
		if(isSame(equipment, getEquipment()))return;
		String oldValue = getEquipment();
		this.equipment=equipment;
		setProperty("EQUIPMENT", equipment, oldValue);
	}
	@Column(name="EQU_TYPE",nullable=true,length=2)
	public int getEquType(){
		return equType;
	}
	public void setEquType(int equType) throws java.sql.SQLException{
		if(isSame(equType, getEquType()))return;
		int oldValue = getEquType();
		this.equType=equType;
		setProperty("EQU_TYPE", equType, oldValue);
	}
	public Collection<PqEquInv> getPqEquInvs()throws java.sql.SQLException{
		if(isNewInstance() || pqEquInvs != null){
			if(pqEquInvs == null)
				pqEquInvs = new TreeSet<PqEquInv>();
			return pqEquInvs;
		}
		return PqEquInv.getNamedCollection("findByPqEquipment",getEquipId());
	}
	public void addPqEquInv(PqEquInv pqEquInv)throws java.sql.SQLException{
		pqEquInv.setPqEquipment((PqEquipment)this);
		if(isNewInstance() || pqEquInvs != null)
			getPqEquInvs().add(pqEquInv);
		else
			pqEquInv.insert();
	}
	public void removePqEquInv(PqEquInv pqEquInv)throws java.sql.SQLException{
		if(isNewInstance() || pqEquInvs != null)
			getPqEquInvs().remove(pqEquInv);
		else
			pqEquInv.delete();
	}
	public PqEquipment copy()throws java.sql.SQLException{
		PqEquipment cp = new PqEquipment((PqEquipment)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PqEquipmentDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(PqEquInv child:getPqEquInvs())
			cp.addPqEquInv(child.copy());
	}
	public Vector<String> getDifference(PqEquipmentDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getEquipId(),o.getEquipId())) diffs.add("EQUIP_ID");
		if(!isSame(getEquipment(),o.getEquipment())) diffs.add("EQUIPMENT");
		if(!isSame(getEquType(),o.getEquType())) diffs.add("EQU_TYPE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(pqEquInvs != null){
			for(PqEquInv pqEquInv:getPqEquInvs()){
				if(pqEquInv.isNewInstance())
					pqEquInv.setPqEquipment((PqEquipment)this);
				pqEquInv.insert();
			}
			pqEquInvs = null;
		}
	}
}
