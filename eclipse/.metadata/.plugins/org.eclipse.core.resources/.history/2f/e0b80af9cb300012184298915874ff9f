/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;


import java.io.Serializable;
import java.sql.SQLException;
import java.util.Collection;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.CableDAO;
@Entity
@Table(schema="MDI",name="MDI710_CABLE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Cable o WHERE o.PLANYEAR=?1 AND o.CABLE_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Cable o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Cable o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByDepartment", query="SELECT o FROM Cable o WHERE o.PLANYEAR=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI710_CABLE o WHERE o.PLANYEAR=? AND o.CABLE_ID=?"),//AUTO-GENERATED
})
public class Cable extends CableDAO implements Serializable{

	private static final long serialVersionUID = -2279302531036479257L;

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 */
	public Cable(){
	}
	public Cable(int planyear) {
		super(planyear,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param cableId the cable id
	 * @param planyear the planyear
	 */
	public Cable(int planyear, int cableId){
		super(planyear,cableId);
	}

	public Cable(Cable cable) {
		super(cable);
	}

	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		if(getCableSize() != null && getCableSize().equals("COMM"))
			return getCableSize();
		return getCableSize()+"-"+getMaterial();
	}

	/**
	 * 
	 * Gets the cable parameters.
	 * 
	 * @return the parameters in a double array
	 */
	public double[] getParameters(){
		double[] params = new double[32];
		params[0] = getCondDiamDc();				//Dc - diameter of conductor
		params[1] = getCondDcresRdc();			//Rdc25 - dc resistance (ohms per 1000ft) of conductor @ 25 C
		params[2] = getThickShldTcs();			//Tcs - Thickness of conductor shield
		params[3] = getThickInsulTin();			//Tin - Thickness of insulation
		params[4] = getThickInsulShldTcs();		//Tcs - Thickness of insulation shield
		params[5] = getThickJacketTj();			//Tj - thickness of jacket
		params[6] = getShldDiamD();				//d - Diameter of concentric wires
		params[7] = getShldWiresN();				//n - Number of concentric wires
		params[8] = getLayFactorLf();			//LF - Lay factor of concentric neutral
		params[9] = getSkinEffectKs();			//ks - Skin effect factor of conductor
		params[10] = getProxEffectKp();			//kp - Proximity effect factor of conductor
		params[11] = 25;						//Ta - Ambient temperature
		params[12] = getCableCountN();			//Nprime - # of cables in a stated diameter
		params[13] = 						//Volts - voltage phase to phase (kV)
			Double.parseDouble(getRating().substring(0, 2));					
		
		params[14] = getThermResInsulPi();		//pi - thermal resistivity of insulation
		params[15] = getThermResJacketPj();		//pj - thermal resistivity of jacket
		
		params[23] = getInsulSicEr();			//er - SIC of insulation
		params[24] = getDissipFactorCos();		//cos0 - dissipation factor
		params[25] = getShieldTempTs();			//Ts - Shield temperature
		
		params[29] = getQsConstantA();			//a- Constant for qs
		params[30] = getCondSpaceS();			//S - spacing between conductors
		
		return params;
	}
	
	/**
	 * Gets the all.
	 * 
	 * @param planyear the planyear
	 * 
	 * @return the all
	 * 
	 * @throws SQLException the SQL exception
	 */
	public static Collection<Cable> getAll(int planyear) throws SQLException {
		return Department.getInstance(planyear, true).getCables();
	}
}
