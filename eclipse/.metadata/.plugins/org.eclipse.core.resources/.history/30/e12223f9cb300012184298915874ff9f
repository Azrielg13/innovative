/**
 *           | Master Data Interface Version 2.0 |
 *
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team.
 * 	                   All rights reserved.
 *
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Vector;

import javax.persistence.Cache;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.CktDailyDAO;
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.util.FormatText;
import com.sce.esp.util.db.PDBConnection;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI240_CKT_DAILY")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM CktDaily o WHERE o.PLANYEAR=?1 AND o.CKT_ID=?2 AND o.PEAK_DATE=?3"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM CktDaily o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM CktDaily o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
<<<<<<< .working
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI240_CKT_DAILY o WHERE o.PLANYEAR=? AND o.CKT_ID=? AND o.PEAK_DATE=?"),//AUTO-GENERATED
	@NamedNativeQuery(name = "findByID_FETCH", query="SELECT * FROM (SELECT ? AS PLANYEAR, o.PLANYEAR AS REAL_P_Y, CKT_ID, PEAK_DATE, PEAK_TIME, PEAK_VAL, PEAK_ADJ, GEN_ADJ, NEUT_TIME, NEUT_VAL, VAR_VAL, NOTE, NEUT_NOTE, COIN_FACTOR, PEAK_A, PEAK_B, PEAK_C, DOC_NOTE, ABNORMAL, RETRIEVED, INSERT_TS, INSERT_USER_ID, MODIFIED_TS, MODIFIED_USER_ID, DELETED_TS, DELETED_USER_ID FROM MDI240_CKT_DAILY o WHERE PLANYEAR<=? AND CKT_ID=? AND PEAK_DATE=? ORDER BY REAL_P_Y DESC) WHERE ROWNUM=1"),
=======
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI240_CKT_DAILY o WHERE o.PLANYEAR=? AND o.CKT_ID=? AND o.PEAK_DATE=?"),//AUTO-GENERATED
	@NamedNativeQuery(name = "findByID_FETCH", query="SELECT * FROM (SELECT ? AS PLANYEAR, o.PLANYEAR AS REAL_P_Y, CKT_ID, PEAK_DATE, PEAK_TIME, PEAK_VAL, PEAK_ADJ, GEN_ADJ, NEUT_TIME, NEUT_VAL, VAR_VAL, NOTE, NEUT_NOTE, COIN_FACTOR, PEAK_A, PEAK_B, PEAK_C, DOC_NOTE, ABNORMAL, RETRIEVED, INSERT_TS, INSERT_USER_ID, MODIFIED_TS, MODIFIED_USER_ID, DELETED_TS, DELETED_USER_ID FROM MDI240_CKT_DAILY o WHERE PLANYEAR<=? AND CKT_ID=? AND TO_CHAR(PEAK_DATE,'YYYY-MM-DD')=? ORDER BY REAL_P_Y DESC) WHERE ROWNUM=1"),
>>>>>>> .merge-right.r17354
})
public class CktDaily extends CktDailyDAO implements Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 4160790317798799776L;
	private boolean relNeutNoteRead = false;
	private String relativeNeutNote;
	
	public static CktDaily getInstance(int planyear, int cktId, Calendar peakDate)throws java.sql.SQLException{
		return getInstance(planyear, cktId, peakDate, true);
	}
	public static CktDaily getInstance(int planyear, int cktId, Calendar peakDate, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, cktId, peakDate))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, planyear, cktId, peakDate);
		Cache cache = em.getEntityManagerFactory().getCache();
		CktDaily o = null;
		if(cache != null && cache.contains(CktDaily.class, pk))
			o = em.find(CktDaily.class, pk);
		if(o==null && getAICache().contains(CktDaily.class, pk))
			o = getAICache().find(CktDaily.class, pk);
		if(o==null && fetch)
			o = em.find(CktDaily.class, pk);
		if(o==null && fetch && CktDaily.class.getAnnotation(AutoInsertable.class) != null){
			o = new CktDaily(planyear, cktId, peakDate);
			getAICache().cache(CktDaily.class, o);
		}
		return o;
	}
	
	/**
	 * The Constructor.
	 *
	 * @param peakDate the peak date
	 * @param cktId the ckt id
	 * @param planyear the planyear
	 *
	 * @throws SQLException 	 */
	public CktDaily(){
	}
	public CktDaily(int planyear, int cktId, java.util.Calendar peakDate){
		super(planyear,cktId,peakDate);
	}

	public CktDaily(CktDaily cktDaily) {
		super(cktDaily);
	}
	
	public Object[] getKeyValues(){
		return new Object[]{getPlanyear(), getPlanyear(), getCktId(), getPeakDate()};
	}
	/**
	 * Gets the LSE.
	 *
	 * @param planYear the plan year
	 *
	 * @return the LSE
	 *
	 * @throws SQLException the SQL exception
	 */
	public LoadServingEntity getLSE() throws SQLException {
		return getCkt();
	}

	public String getIDCol() {
		return "CKT_ID";
	}

	public int getId() {
		return getCktId();
	}

	/**
	 *
	 * @return the value in MVA
	 * @throws SQLException
	 */
	public double getNuetralPeak() throws SQLException {
		return getNeutVal()/getLSE().getMVAFactor();
	}

	/**
	 *
	 * @return
	 * @throws SQLException
	 */
	public double getGndTrip() throws SQLException {
		return getCkt().getGndTrip();
	}

	/**
	 *
	 * @return
	 * @throws SQLException
	 */
	public double getGndTripUtilization() throws SQLException{
		return getGndTrip()!=0?getNuetralPeak()/getGndTrip()*100:getNuetralPeak()>0?999:0;
	}

	/**
	 *
	 * @return
	 * @throws SQLException
	 */
	public Bbank getBbank() throws SQLException {
		return getCkt().getBbank(0);
	}

	/**
	 * @return Returns any note plus or minus thirty days
	 * @throws SQLException
	 */
	public String getRelativeNeutNote() throws SQLException{
		if(!relNeutNoteRead )
			refreshRelativeNeutNote();
		return relativeNeutNote;
	}
	public Vector<String> getInsertStatus(){
		return new Vector<String>();
	}

	public void refreshRelativeNeutNote() throws SQLException{
		PreparedStatement ps = PDBConnection.getInstance().getConnection().prepareStatement("SELECT NEUT_NOTE, PEAK_DATE FROM (SELECT NEUT_NOTE, PEAK_DATE FROM "+getClass().getAnnotation(Table.class).name()+" WHERE PLANYEAR < ? AND "+getIDCol()+" = ? AND PEAK_DATE > ? AND PEAK_DATE < ? AND NEUT_NOTE IS NOT NULL ORDER BY ABS(PEAK_DATE-?), PLANYEAR DESC) WHERE ROWNUM = 1");

		int si=1;
		ps.setInt(si++,getPlanyear()+1);
		ps.setInt(si++,getId());

		Calendar s = (Calendar)getDate().clone(), e = (Calendar)getDate().clone();

		s.add(Calendar.DATE, -DailyPeak.REL_NOTE_RANGE);
		e.add(Calendar.DATE, DailyPeak.REL_NOTE_RANGE);


		ps.setDate(si++,new java.sql.Date(s.getTimeInMillis()));
		ps.setDate(si++,new java.sql.Date(e.getTimeInMillis()));

		ps.setDate(si++,new java.sql.Date(getDate().getTimeInMillis()));

		ResultSet rs = ps.executeQuery();
		if(rs.next()){
			Calendar d = (Calendar)getDate().clone();
			d.setTime(rs.getDate(2));			
			relativeNeutNote = rs.getString(1)+" ("+FormatText.USER_DATE_SHORT.format(d.getTime())+")";
		}else
			relativeNeutNote = null;
		rs.close();
		ps.close();
		relNeutNoteRead = true;
	}
	@Override
	public AutomatedEquipment getAE() throws SQLException {
		return getCkt();
	}
}
