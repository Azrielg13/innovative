package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.BlobFile;
import com.sce.esp.object.model.LgProj;
import com.sce.esp.object.model.LgProjFile;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class LgProjFileDAO extends BlobFile{
	public static enum KEY_PROPERTY{PLANYEAR,FILE_ID};
	public static enum PROPERTY{PLANYEAR,FILE_ID,LG_PROJ_ID,FILE_NAME,FILE_SIZE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int FILEID_LIMIT = 9;
	public final static int LGPROJID_LIMIT = 9;
	public final static int FILENAME_LIMIT = 64;
	public final static int FILESIZE_LIMIT = 9;
	private int planyear;
	private int fileId;
	private int lgProjId;
	private String fileName;
	private int fileSize;
	private LgProj lgProj;
	public static LgProjFile getInstance(int planyear, int fileId)throws java.sql.SQLException{
		return getInstance(planyear, fileId, true);
	}
	public static LgProjFile getInstance(int planyear, int fileId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, fileId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, fileId);
		Cache cache = em.getEntityManagerFactory().getCache();
		LgProjFile o = null;
		if(cache != null && cache.contains(LgProjFile.class, pk))
			o = em.find(LgProjFile.class, pk);
		if(o==null && getAICache().contains(LgProjFile.class, pk))
			o = getAICache().find(LgProjFile.class, pk);
		if(o==null && fetch)
			o = em.find(LgProjFile.class, pk);
		if(o==null && fetch && LgProjFile.class.getAnnotation(AutoInsertable.class) != null){
			o = new LgProjFile(planyear, fileId);
			getAICache().cache(LgProjFile.class, o);
		}
		return o;
	}
	public static Collection<LgProjFile> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<LgProjFile> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<LgProjFile> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM LgProjFile o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<LgProjFile> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<LgProjFile> tq = em.createQuery(jpql,LgProjFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<LgProjFile> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<LgProjFile> tq = em.createNamedQuery(name,LgProjFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public LgProjFileDAO(){}
	public LgProjFileDAO(int planyear, int fileId){
		this.planyear=planyear;
		this.fileId=fileId;
	}
	public LgProjFileDAO(LgProjFileDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(LgProjFileDAO orig){
		this.lgProjId=orig.getLgProjId();
		this.fileName=orig.getFileName();
		this.fileSize=orig.getFileSize();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, fileId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI907_SEQ",sequenceName="MDI907_SEQ")
	@Column(name="FILE_ID",nullable=false,length=9)
	public int getFileId(){
		return fileId;
	}
	public void setFileId(int fileId) throws java.sql.SQLException{
		if(isSame(fileId, getFileId()))return;
		int oldValue = getFileId();
		this.fileId=fileId;
		setProperty("FILE_ID", fileId, oldValue);
	}
	@Column(name="LG_PROJ_ID",nullable=false,length=9)
	public int getLgProjId(){
		return lgProjId;
	}
	public void setLgProjId(int lgProjId) throws java.sql.SQLException{
		if(isSame(lgProjId, getLgProjId()))return;
		int oldValue = getLgProjId();
		this.lgProjId=lgProjId;
		setProperty("LG_PROJ_ID", lgProjId, oldValue);
		lgProj=null;
	}
	@Column(name="FILE_NAME",nullable=false,length=64)
	public String getFileName(){
		return fileName;
	}
	public void setFileName(String fileName) throws java.sql.SQLException{
		if(isSame(fileName, getFileName()))return;
		String oldValue = getFileName();
		this.fileName=fileName;
		setProperty("FILE_NAME", fileName, oldValue);
	}
	@Column(name="FILE_SIZE",nullable=false,length=9)
	public int getFileSize(){
		return fileSize;
	}
	public void setFileSize(int fileSize) throws java.sql.SQLException{
		if(isSame(fileSize, getFileSize()))return;
		int oldValue = getFileSize();
		this.fileSize=fileSize;
		setProperty("FILE_SIZE", fileSize, oldValue);
	}
	public LgProj getLgProj()throws java.sql.SQLException{
		if(lgProj==null)
			lgProj=LgProj.getInstance(getPlanyear(), getLgProjId());
		return lgProj;
	}
	public void setLgProj(LgProj lgProj)throws java.sql.SQLException{
		setLgProjId(lgProj==null?0:lgProj.getLgProjId());
		this.lgProj=lgProj;
	}
	public LgProjFile copy()throws java.sql.SQLException{
		LgProjFile cp = new LgProjFile((LgProjFile)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(LgProjFileDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(LgProjFileDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getFileId(),o.getFileId())) diffs.add("FILE_ID");
		if(!isSame(getLgProjId(),o.getLgProjId())) diffs.add("LG_PROJ_ID");
		if(!isSame(getFileName(),o.getFileName())) diffs.add("FILE_NAME");
		if(!isSame(getFileSize(),o.getFileSize())) diffs.add("FILE_SIZE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
