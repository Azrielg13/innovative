package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PifBi;
import com.sce.esp.object.model.PifBudget;
import com.sce.esp.object.model.PifCategory;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class PifBudgetDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,YEAR,CATEGORY_ID,BI_ID};
	public static enum PROPERTY{PLANYEAR,YEAR,CATEGORY_ID,BI_ID,BUDGET_TARGET,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int YEAR_LIMIT = 4;
	public final static int CATEGORYID_LIMIT = 9;
	public final static int BIID_LIMIT = 9;
	public final static int BUDGETTARGET_LIMIT = 6;
	private int planyear;
	private int year;
	private int categoryId;
	private int biId;
	private int budgetTarget;
	private PifBi pifBi;
	private PifCategory pifCategory;
	public static PifBudget getInstance(int planyear, int year, int categoryId, int biId)throws java.sql.SQLException{
		return getInstance(planyear, year, categoryId, biId, true);
	}
	public static PifBudget getInstance(int planyear, int year, int categoryId, int biId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, year, categoryId, biId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, year, categoryId, biId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifBudget o = null;
		if(cache != null && cache.contains(PifBudget.class, pk))
			o = em.find(PifBudget.class, pk);
		if(o==null && getAICache().contains(PifBudget.class, pk))
			o = getAICache().find(PifBudget.class, pk);
		if(o==null && fetch)
			o = em.find(PifBudget.class, pk);
		if(o==null && fetch && PifBudget.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifBudget(planyear, year, categoryId, biId);
			getAICache().cache(PifBudget.class, o);
		}
		return o;
	}
	public static Collection<PifBudget> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifBudget> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifBudget> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifBudget o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifBudget> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifBudget> tq = em.createQuery(jpql,PifBudget.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifBudget> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifBudget> tq = em.createNamedQuery(name,PifBudget.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifBudgetDAO(){}
	public PifBudgetDAO(int planyear, int year, int categoryId, int biId){
		this.planyear=planyear;
		this.year=year;
		this.categoryId=categoryId;
		this.biId=biId;
	}
	public PifBudgetDAO(PifBudgetDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.year=orig.getYear();
		this.categoryId=orig.getCategoryId();
		this.biId=orig.getBiId();
		copyFrom(orig);
	}
	public void copyFrom(PifBudgetDAO orig){
		this.budgetTarget=orig.getBudgetTarget();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, year, categoryId, biId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Id
	@Column(name="CATEGORY_ID",nullable=false,length=9)
	public int getCategoryId(){
		return categoryId;
	}
	public void setCategoryId(int categoryId) throws java.sql.SQLException{
		if(isSame(categoryId, getCategoryId()))return;
		int oldValue = getCategoryId();
		this.categoryId=categoryId;
		setProperty("CATEGORY_ID", categoryId, oldValue);
		pifCategory=null;
	}
	@Id
	@Column(name="BI_ID",nullable=false,length=9)
	public int getBiId(){
		return biId;
	}
	public void setBiId(int biId) throws java.sql.SQLException{
		if(isSame(biId, getBiId()))return;
		int oldValue = getBiId();
		this.biId=biId;
		setProperty("BI_ID", biId, oldValue);
		pifBi=null;
	}
	@Column(name="BUDGET_TARGET",nullable=true,length=6)
	public int getBudgetTarget(){
		return budgetTarget;
	}
	public void setBudgetTarget(int budgetTarget) throws java.sql.SQLException{
		if(isSame(budgetTarget, getBudgetTarget()))return;
		int oldValue = getBudgetTarget();
		this.budgetTarget=budgetTarget;
		setProperty("BUDGET_TARGET", budgetTarget, oldValue);
	}
	public PifBi getPifBi()throws java.sql.SQLException{
		if(pifBi==null)
			pifBi=PifBi.getInstance(getPlanyear(), getBiId());
		return pifBi;
	}
	public void setPifBi(PifBi pifBi)throws java.sql.SQLException{
		setBiId(pifBi==null?0:pifBi.getBiId());
		this.pifBi=pifBi;
	}
	public PifCategory getPifCategory()throws java.sql.SQLException{
		if(pifCategory==null)
			pifCategory=PifCategory.getInstance(getPlanyear(), getCategoryId());
		return pifCategory;
	}
	public void setPifCategory(PifCategory pifCategory)throws java.sql.SQLException{
		setCategoryId(pifCategory==null?0:pifCategory.getCategoryId());
		this.pifCategory=pifCategory;
	}
	public PifBudget copy()throws java.sql.SQLException{
		PifBudget cp = new PifBudget((PifBudget)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifBudgetDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PifBudgetDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getCategoryId(),o.getCategoryId())) diffs.add("CATEGORY_ID");
		if(!isSame(getBiId(),o.getBiId())) diffs.add("BI_ID");
		if(!isSame(getBudgetTarget(),o.getBudgetTarget())) diffs.add("BUDGET_TARGET");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
