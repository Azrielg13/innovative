package com.sce.esp.component;

import java.sql.SQLException;

import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.Cable;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.District;
import com.sce.esp.object.model.DuctBank;
import com.sce.esp.object.model.Region;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.SubFilter;
import com.sce.esp.object.model.Sys;
import com.sce.esp.object.model.User;
import com.sce.esp.object.model.Zone;

/**
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class MDITreeModel {

	public static final int SUB_HIER = 0; // ?
	public static final int CKT_CHILD_NODES = 1; //A, B, C
	public static final int DB_CHILD_NODES = 2; //A, B, DB
	public static final int SUB_ALPHA = 3; // ?
	public static final int ABANK_ONLY = 4; //A
	public static final int SIM_NODES = 5; //SIM, Projects
	public static final int BBANK_ONLY = 6; //B
	public static final int REGION_VIEW = 1;
	
	public static String topNode = "All Systems";


	public MDITreeModel(){}

	/**
	 * Create a district level tree model.
	 * 
	 * @return treeModel - the district level tree model
	 * @throws SQLException 
	 */
	public static DefaultTreeModel createDistrictTreeModel(int planyear) throws SQLException {
		
		/*Create the tree model down to the system level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(topNode);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);

		/*Create the tree nodes*/
		DefaultMutableTreeNode zoneNode;
		DefaultMutableTreeNode regionNode;
		DefaultMutableTreeNode districtNode;
		DefaultMutableTreeNode subNode;

		/*Derive the tree model for the current planning year*/
		Department department = Department.getInstance(planyear);
		for(Zone zone:department.getZones()){
			zoneNode = new DefaultMutableTreeNode(zone);
			root.add(zoneNode);
			for(Region region:zone.getRegions()){
				regionNode = new DefaultMutableTreeNode(region);
				zoneNode.add(regionNode);
				for(District district:region.getDistricts()){
					districtNode=new DefaultMutableTreeNode(district);
					regionNode.add(districtNode);
					for(Sub sub : district.getSubs()) {
						subNode = new DefaultMutableTreeNode(sub);
						districtNode.add(subNode);
					}
				}
			}
		}     
		return treeModel;
	}

	public static DefaultTreeModel createDistrictTreeModel(int planyear,int num) throws SQLException {
		
		/*Create the tree model down to the system level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(topNode);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);

		/*Create the tree nodes*/
		DefaultMutableTreeNode zoneNode;
		DefaultMutableTreeNode regionNode;
		DefaultMutableTreeNode districtNode;
		DefaultMutableTreeNode subNode;

		/*Derive the tree model for the current planning year*/
		Department department = Department.getInstance(planyear);

			for(Region region:department.getRegions()){
				regionNode = new DefaultMutableTreeNode(region);
				root.add(regionNode);
				for(District district:region.getDistricts()){
					districtNode=new DefaultMutableTreeNode(district);
					regionNode.add(districtNode);
					for(Sub sub : district.getSubs()) {
						subNode = new DefaultMutableTreeNode(sub);
						districtNode.add(subNode);
					}
				}
			}
		   
		return treeModel;
	}
	
	
	/**
	 * Create a system level tree models. I'm using this
	 * for heat storm tracking, so leave it alone.
	 * 
	 * No!!! You are not. Liar!!! EA
	 * 
	 * @return treeModel - the system level tree model
	 * @throws SQLException 
	 */
	public static DefaultTreeModel createSystemTreeModel(int planyear) throws SQLException {

		/*Create the tree model down to the system level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(topNode);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);

		/*Create the tree nodes*/
		DefaultMutableTreeNode zoneNode;
		DefaultMutableTreeNode regionNode;
		DefaultMutableTreeNode sysNode;

		/*Derive the tree model for the current planning year*/
		Department department = Department.getInstance(planyear);
		for(Zone zone:department.getZones()){
			zoneNode = new DefaultMutableTreeNode(zone);
			root.add(zoneNode);
			for(Region region:zone.getRegions()){
				regionNode = new DefaultMutableTreeNode(region);
				zoneNode.add(regionNode);
				for(Sys system:region.getSyss()){
					sysNode=new DefaultMutableTreeNode(system);
					regionNode.add(sysNode);
				}
			}
		}     
		return treeModel;
	}

	/**
	 * 
	 * @param planyear
	 * @param simId
	 * @param sysRoot
	 * @param nodeType
	 * @param filters
	 * @return
	 * @throws SQLException
	 */
	public static DefaultTreeModel createFilteredTreeModel(int planyear, int simId, boolean sysRoot, int nodeType, SubFilter filters) throws SQLException{
		/*Create the tree model down to the system level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(topNode);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);

		/*Create the tree nodes*/
		DefaultMutableTreeNode zoneNode;
		DefaultMutableTreeNode regionNode;
		SysTreeNode sysNode;

		/*Derive the tree model for the current planning year*/
		Department department = Department.getInstance(planyear);
		if(sysRoot) {
			for(Sys s : department.getUserFilteredSyss(simId))
				root.add(new SysTreeNode(simId,s,nodeType,filters));
		} else {
			for(Zone zone:department.getZones()){
				zoneNode = new DefaultMutableTreeNode(zone);
				root.add(zoneNode);
				for(Region region:zone.getRegions()){
					regionNode = new DefaultMutableTreeNode(region);
					zoneNode.add(regionNode);
					for(Sys s : region.getSyss()){
						sysNode=new SysTreeNode(simId,s,nodeType,filters);
						regionNode.add(sysNode);
					}
				}
			}     
		}
		return treeModel;
	}

	/**
	 * 
	 * @param planyear
	 * @param simId
	 * @return
	 * @throws SQLException
	 */
	public static DefaultTreeModel createSubTreeModel(int planyear, int simId) throws SQLException {
		return createSubTreeModel(planyear,simId,false,SUB_HIER);
	}

	/**
	 * Bank Wizard uses this
	 * @param planyear
	 * @param simId
	 * @param sysRoot
	 * @return
	 * @throws SQLException
	 */
	public static DefaultTreeModel createSubTreeModel(int planyear, int simId, boolean sysRoot) throws SQLException {
		return createSubTreeModel(planyear,simId,sysRoot,SUB_HIER);
	}

	/**
	 * Sub Select Dialog uses this
	 * @param planyear
	 * @param simId
	 * @param sysRoot
	 * @param nodeType
	 * @return
	 * @throws SQLException
	 */
	public static DefaultTreeModel createSubTreeModel(int planyear, int simId, boolean sysRoot, int nodeType) throws SQLException {
		/*Create the tree model down to the system level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(topNode);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);

		/*Create the tree nodes*/
		DefaultMutableTreeNode zoneNode;
		DefaultMutableTreeNode regionNode;
		SysTreeNode sysNode;

		/*Derive the tree model for the current planning year*/
		Department department = Department.getInstance(planyear);
		if(sysRoot) {
			for(Sys s : department.getSyssSCE(simId))
				root.add(new SysTreeNode(simId,s,nodeType));
		} else {
			for(Zone zone:department.getZones()){
				zoneNode = new DefaultMutableTreeNode(zone);
				root.add(zoneNode);
				for(Region region:zone.getRegions()){
					regionNode = new DefaultMutableTreeNode(region);
					zoneNode.add(regionNode);
					for(Sys s : region.getSyss()){
						sysNode=new SysTreeNode(simId,s,nodeType);
						regionNode.add(sysNode);
					}
				}
			}     
		}
		return treeModel;
	}	

	/**
	 * Used by Heat Storm Tracker
	 * @param planyear
	 * @param simId
	 * @return a <code>DefaultTreeModel</code>
	 * @throws SQLException
	 */
	
	public static DefaultTreeModel createHstTreeModel(int planyear, int simId) throws SQLException {
		
		topNode = Department.getInstance(planyear).toString();
		
		/*Create the tree model down to the system level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(topNode);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);

		/*Create the tree nodes*/
		DefaultMutableTreeNode zoneNode;
		DefaultMutableTreeNode regionNode;
		SysTreeNode sysNode;

		/*Derive the tree model for the current planning year*/
		Department department = Department.getInstance(planyear);
		for(Zone zone:department.getZones()){
			zoneNode = new DefaultMutableTreeNode(zone);
			//root.add(zoneNode);
			for(Region region:zone.getRegions()){
				regionNode = new DefaultMutableTreeNode(region);
				//zoneNode.add(regionNode);
				for(Sys system:region.getSyss()){
					sysNode=new SysTreeNode(simId, system, MDITreeModel.CKT_CHILD_NODES);
					if(User.getActiveUser().getUserSelect().getMultSys().size() == 0 || User.getActiveUser().getUserSelect().getMultSys().contains(system.getSysId())){
						//regionNode.add(new SysTreeNode(simId,system,order==0?MDITreeModel.SUB_HIER:MDITreeModel.SUB_ALPHA));
						regionNode.add(sysNode);
						sysNode.setAllowsChildren(false);
					}
				}
				if(regionNode.getChildCount() > 0)
					zoneNode.add(regionNode);
			}
			if(zoneNode.getChildCount() > 0)
				root.add(zoneNode);
		}     
		return treeModel;
	}

	/**
	 * Create a duct bank level tree model.
	 * 
	 * @return treeModel - the duct bank level tree model
	 * @throws SQLException 
	 */
	public static DefaultTreeModel createDuctBankTreeModel(int planyear, int simId) throws SQLException {

		/*Create the tree model down to the db level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(topNode);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);

		/*Create the tree nodes*/
		DefaultMutableTreeNode zoneNode;
		DefaultMutableTreeNode regionNode;
		DefaultMutableTreeNode sysNode;
		DefaultMutableTreeNode subNode;
		DbTreeNode dbNode;

		/*Derive the tree model for the current planning year*/
		Department department = Department.getInstance(planyear);
		for(Zone zone:department.getZones()){
			zoneNode = new DefaultMutableTreeNode(zone);	       	
			root.add(zoneNode);
			for(Region region:zone.getRegions()){
				regionNode = new DefaultMutableTreeNode(region);
				zoneNode.add(regionNode);
				/*
	        	for(Sys system:region.getSyss()){
	        		sysNode=new SysTreeNode(system,false,true);
	        		regionNode.add(sysNode);
	        	}*/
				for(Sys system:region.getSyss()){
					sysNode=new DefaultMutableTreeNode(system);
					regionNode.add(sysNode);
					for(Bbank subs: system.getBbanks(simId)){
						subNode=new DefaultMutableTreeNode(subs);
						sysNode.add(subNode);
						for(DuctBank dbs:subs.getDuctBanks()){
							dbNode = new DbTreeNode(dbs);
							subNode.add(dbNode);
						}
					}
				}
			}
		}     
		return treeModel;
	}

	/**
	 * This TreeModel is utilized in the circuit analysis form.
	 * @param - a BBank object
	 * @return - a tree model containing the BBanks's ductbanks
	 * @throws SQLException
	 */
	public static DefaultTreeModel createDBTreeModel(Bbank b) throws SQLException {
		/*Create the tree model down to the db level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(b);
		DefaultTreeModel treeModel = new DefaultTreeModel(root);
		DbTreeNode dbNode;
		for(DuctBank dbs:b.getDuctBanks()){
			dbNode = new DbTreeNode(dbs);
			root.add(dbNode);
		}        
		return treeModel;
	}	

	/**
	 * This TreeModel is utilized in the circuit analysis form.
	 * @return - a tree model containing cables
	 * @throws SQLException
	 */
	public static DefaultTreeModel createCableTreeModel(int planyear) throws SQLException {
		/*Create the tree model down to the db level*/
		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Cables");
		DefaultTreeModel treeModel = new DefaultTreeModel(root);
		CableTreeNode cableNode;
		for(Cable c: Department.getInstance(planyear).getCables()){
			cableNode = new CableTreeNode(c);
			root.add(cableNode);
		}        
		return treeModel;
	}
}