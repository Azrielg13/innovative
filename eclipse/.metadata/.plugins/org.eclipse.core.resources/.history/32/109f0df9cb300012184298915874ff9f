package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.PartTypeDAO;
@Entity
@Table(schema="MDI",name="MDISP2_PART_TYPE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM PartType o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM PartType o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM PartType o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByCprSubAcct", query="SELECT o FROM PartType o WHERE o.CPR_SUB_ACCT_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDISP2_PART_TYPE o WHERE o.ID=?"),//AUTO-GENERATED
})
public class PartType extends PartTypeDAO implements Descriptivable{
	public static final int TEMPLATE = 21;
	
	public PartType(){
	}
	public PartType(int id){
		super(id);
	}
	public PartType(PartType orig){
		super(orig);
	}
	public CprPrimeAcct getCprPrimeAcct() throws SQLException {
		if(getCprSubAcct()!=null)
			return getCprSubAcct().getCprPrimeAcct();
		return null;
	}
	public String toString(){
		return getName();
	}
	
	
	@Override
	public String getDescriptiveValue(DescriptiveType dt) throws SQLException {
		return dt.getDefaultValue();
	}
	
	@Override
	public boolean isDescriptiveValue(DescriptiveType dt) throws SQLException {
		Object value = getDescriptiveValue(dt);
		return value!=null && value.toString().length() > 0 && !value.equals("0") && !value.toString().equalsIgnoreCase("false");
	}
	
	@Override
	public void setDescriptiveValue(DescriptiveType dt, Object value)throws SQLException {
		dt.setDefaultValue(""+value);
	}
	
	@Override
	public PartType getPartType() throws SQLException {
		return this;
	}
	@Override
	public String getDescriptiveNote(DescriptiveType dt) throws SQLException {
		return dt.getNote();
	}
	@Override
	public void setDescriptiveNote(DescriptiveType dt, String value)throws SQLException {
		dt.setNote(value);
	}
	@Override
	public void restoreDescriptiveDefault(DescriptiveType dt)throws SQLException {
		dt.setDefaultValue(null);
	}
	@Override
	public boolean isDescriptiveEditable(DescriptiveType dt)throws SQLException {
		return dt.isUserEditable();
	}
	@Override
	public void setDescriptiveEditable(DescriptiveType dt, boolean editable)throws SQLException {
		dt.setUserEditable(editable);
	}
	public Collection<ScopeType> getScopeTypes(SceElem sceElem) throws SQLException {
		TreeSet<ScopeType> sts = new TreeSet<ScopeType>();
		for(ScopeType st:ScopeType.getCollection(sceElem))
			if(st.getPartType()==this)
				sts.add(st);
		return sts;
	}
	public Collection<ScopeType> getScopeTypes(Collection<SceElem> sceElems) throws SQLException {
		TreeSet<ScopeType> sts = new TreeSet<ScopeType>();
		for(ScopeType st:ScopeType.getCollection(sceElems))
			if(st.getPartType()==this)
				sts.add(st);
		return sts;
	}
}
