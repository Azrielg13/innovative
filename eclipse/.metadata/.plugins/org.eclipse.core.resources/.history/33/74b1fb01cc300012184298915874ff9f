package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.CktDaily;
import com.sce.esp.object.model.DailyPeak;
import java.sql.Time;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class CktDailyDAO extends DailyPeak{
	public static enum KEY_PROPERTY{PLANYEAR,CKT_ID,PEAK_DATE};
	public static enum PROPERTY{PLANYEAR,CKT_ID,PEAK_DATE,PEAK_TIME,PEAK_VAL,PEAK_ADJ,GEN_ADJ,NEUT_TIME,NEUT_VAL,VAR_VAL,NOTE,NEUT_NOTE,COIN_FACTOR,PEAK_A,PEAK_B,PEAK_C,DOC_NOTE,ABNORMAL,RETRIEVED,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int CKTID_LIMIT = 9;
	public final static int PEAKDATE_LIMIT = 7;
	public final static int PEAKTIME_LIMIT = 7;
	public final static int PEAKVAL_LIMIT = 5;
	public final static int PEAKADJ_LIMIT = 5;
	public final static int GENADJ_LIMIT = 5;
	public final static int NEUTTIME_LIMIT = 7;
	public final static int NEUTVAL_LIMIT = 5;
	public final static int VARVAL_LIMIT = 24;
	public final static int NOTE_LIMIT = 256;
	public final static int NEUTNOTE_LIMIT = 256;
	public final static int COINFACTOR_LIMIT = 24;
	public final static int PEAKA_LIMIT = 5;
	public final static int PEAKB_LIMIT = 5;
	public final static int PEAKC_LIMIT = 5;
	public final static int DOCNOTE_LIMIT = 256;
	public final static int ABNORMAL_LIMIT = 2;
	public final static int RETRIEVED_LIMIT = 1;
	private int planyear;
	private int cktId;
	private Calendar peakDate;
	private Time peakTime;
	private int peakVal = 0;
	private int peakAdj = 0;
	private int genAdj = 0;
	private Time neutTime;
	private int neutVal;
	private double varVal;
	private String note;
	private String neutNote;
	private double coinFactor = 1.0;
	private int peakA;
	private int peakB;
	private int peakC;
	private String docNote;
	private int abnormal;
	private boolean retrieved;
	private Ckt ckt;
	public static CktDaily getInstance(int planyear, int cktId, Calendar peakDate)throws java.sql.SQLException{
		return getInstance(planyear, cktId, peakDate, true);
	}
	public static CktDaily getInstance(int planyear, int cktId, Calendar peakDate, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, cktId, peakDate))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, cktId, peakDate);
		Cache cache = em.getEntityManagerFactory().getCache();
		CktDaily o = null;
		if(cache != null && cache.contains(CktDaily.class, pk))
			o = em.find(CktDaily.class, pk);
		if(o==null && getAICache().contains(CktDaily.class, pk))
			o = getAICache().find(CktDaily.class, pk);
		if(o==null && fetch)
			o = em.find(CktDaily.class, pk);
		if(o==null && fetch && CktDaily.class.getAnnotation(AutoInsertable.class) != null){
			o = new CktDaily(planyear, cktId, peakDate);
			getAICache().cache(CktDaily.class, o);
		}
		return o;
	}
	public static Collection<CktDaily> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CktDaily> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CktDaily> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CktDaily o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CktDaily> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktDaily> tq = em.createQuery(jpql,CktDaily.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CktDaily> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktDaily> tq = em.createNamedQuery(name,CktDaily.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CktDailyDAO(){}
	public CktDailyDAO(int planyear, int cktId, Calendar peakDate){
		this.planyear=planyear;
		this.cktId=cktId;
		this.peakDate=peakDate;
	}
	public CktDailyDAO(CktDailyDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.cktId=orig.getCktId();
		this.peakDate=orig.getPeakDate();
		copyFrom(orig);
	}
	public void copyFrom(CktDailyDAO orig){
		this.peakTime=orig.getPeakTime();
		this.peakVal=orig.getPeakVal();
		this.peakAdj=orig.getPeakAdj();
		this.genAdj=orig.getGenAdj();
		this.neutTime=orig.getNeutTime();
		this.neutVal=orig.getNeutVal();
		this.varVal=orig.getVarVal();
		this.note=orig.getNote();
		this.neutNote=orig.getNeutNote();
		this.coinFactor=orig.getCoinFactor();
		this.peakA=orig.getPeakA();
		this.peakB=orig.getPeakB();
		this.peakC=orig.getPeakC();
		this.docNote=orig.getDocNote();
		this.abnormal=orig.getAbnormal();
		this.retrieved=orig.isRetrieved();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, cktId, peakDate};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="CKT_ID",nullable=false,length=9)
	public int getCktId(){
		return cktId;
	}
	public void setCktId(int cktId) throws java.sql.SQLException{
		if(isSame(cktId, getCktId()))return;
		int oldValue = getCktId();
		this.cktId=cktId;
		setProperty("CKT_ID", cktId, oldValue);
		ckt=null;
	}
	@Id
	@Column(name="PEAK_DATE",nullable=false,length=7)
	public Calendar getPeakDate(){
		return peakDate;
	}
	public void setPeakDate(Calendar peakDate) throws java.sql.SQLException{
		if(isSame(peakDate, getPeakDate()))return;
		Calendar oldValue = getPeakDate();
		this.peakDate=peakDate;
		setProperty("PEAK_DATE", peakDate, oldValue);
	}
	@Column(name="PEAK_TIME",nullable=true,length=7)
	public Time getPeakTime(){
		return peakTime;
	}
	public void setPeakTime(Time peakTime) throws java.sql.SQLException{
		if(isSame(peakTime, getPeakTime()))return;
		Time oldValue = getPeakTime();
		this.peakTime=peakTime;
		setProperty("PEAK_TIME", peakTime, oldValue);
	}
	@Column(name="PEAK_VAL",nullable=false,length=5)
	public int getPeakVal(){
		return peakVal;
	}
	public void setPeakVal(int peakVal) throws java.sql.SQLException{
		if(isSame(peakVal, getPeakVal()))return;
		int oldValue = getPeakVal();
		this.peakVal=peakVal;
		setProperty("PEAK_VAL", peakVal, oldValue);
	}
	@Column(name="PEAK_ADJ",nullable=false,length=5)
	public int getPeakAdj(){
		return peakAdj;
	}
	public void setPeakAdj(int peakAdj) throws java.sql.SQLException{
		if(isSame(peakAdj, getPeakAdj()))return;
		int oldValue = getPeakAdj();
		this.peakAdj=peakAdj;
		setProperty("PEAK_ADJ", peakAdj, oldValue);
	}
	@Column(name="GEN_ADJ",nullable=false,length=5)
	public int getGenAdj(){
		return genAdj;
	}
	public void setGenAdj(int genAdj) throws java.sql.SQLException{
		if(isSame(genAdj, getGenAdj()))return;
		int oldValue = getGenAdj();
		this.genAdj=genAdj;
		setProperty("GEN_ADJ", genAdj, oldValue);
	}
	@Column(name="NEUT_TIME",nullable=true,length=7)
	public Time getNeutTime(){
		return neutTime;
	}
	public void setNeutTime(Time neutTime) throws java.sql.SQLException{
		if(isSame(neutTime, getNeutTime()))return;
		Time oldValue = getNeutTime();
		this.neutTime=neutTime;
		setProperty("NEUT_TIME", neutTime, oldValue);
	}
	@Column(name="NEUT_VAL",nullable=true,length=5)
	public int getNeutVal(){
		return neutVal;
	}
	public void setNeutVal(int neutVal) throws java.sql.SQLException{
		if(isSame(neutVal, getNeutVal()))return;
		int oldValue = getNeutVal();
		this.neutVal=neutVal;
		setProperty("NEUT_VAL", neutVal, oldValue);
	}
	@Column(name="VAR_VAL",nullable=true,length=24)
	public double getVarVal(){
		return varVal;
	}
	public void setVarVal(double varVal) throws java.sql.SQLException{
		if(isSame(varVal, getVarVal()))return;
		double oldValue = getVarVal();
		this.varVal=varVal;
		setProperty("VAR_VAL", varVal, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="NEUT_NOTE",nullable=true,length=256)
	public String getNeutNote(){
		return neutNote;
	}
	public void setNeutNote(String neutNote) throws java.sql.SQLException{
		if(isSame(neutNote, getNeutNote()))return;
		String oldValue = getNeutNote();
		this.neutNote=neutNote;
		setProperty("NEUT_NOTE", neutNote, oldValue);
	}
	@Column(name="COIN_FACTOR",nullable=true,length=24)
	public double getCoinFactor(){
		return coinFactor;
	}
	public void setCoinFactor(double coinFactor) throws java.sql.SQLException{
		if(isSame(coinFactor, getCoinFactor()))return;
		double oldValue = getCoinFactor();
		this.coinFactor=coinFactor;
		setProperty("COIN_FACTOR", coinFactor, oldValue);
	}
	@Column(name="PEAK_A",nullable=true,length=5)
	public int getPeakA(){
		return peakA;
	}
	public void setPeakA(int peakA) throws java.sql.SQLException{
		if(isSame(peakA, getPeakA()))return;
		int oldValue = getPeakA();
		this.peakA=peakA;
		setProperty("PEAK_A", peakA, oldValue);
	}
	@Column(name="PEAK_B",nullable=true,length=5)
	public int getPeakB(){
		return peakB;
	}
	public void setPeakB(int peakB) throws java.sql.SQLException{
		if(isSame(peakB, getPeakB()))return;
		int oldValue = getPeakB();
		this.peakB=peakB;
		setProperty("PEAK_B", peakB, oldValue);
	}
	@Column(name="PEAK_C",nullable=true,length=5)
	public int getPeakC(){
		return peakC;
	}
	public void setPeakC(int peakC) throws java.sql.SQLException{
		if(isSame(peakC, getPeakC()))return;
		int oldValue = getPeakC();
		this.peakC=peakC;
		setProperty("PEAK_C", peakC, oldValue);
	}
	@Column(name="DOC_NOTE",nullable=true,length=256)
	public String getDocNote(){
		return docNote;
	}
	public void setDocNote(String docNote) throws java.sql.SQLException{
		if(isSame(docNote, getDocNote()))return;
		String oldValue = getDocNote();
		this.docNote=docNote;
		setProperty("DOC_NOTE", docNote, oldValue);
	}
	@Column(name="ABNORMAL",nullable=true,length=2)
	public int getAbnormal(){
		return abnormal;
	}
	public void setAbnormal(int abnormal) throws java.sql.SQLException{
		if(isSame(abnormal, getAbnormal()))return;
		int oldValue = getAbnormal();
		this.abnormal=abnormal;
		setProperty("ABNORMAL", abnormal, oldValue);
	}
	@Column(name="RETRIEVED",nullable=true,length=1)
	public boolean isRetrieved(){
		return retrieved;
	}
	public void setRetrieved(boolean retrieved) throws java.sql.SQLException{
		if(isSame(retrieved, isRetrieved()))return;
		boolean oldValue = isRetrieved();
		this.retrieved=retrieved;
		setProperty("RETRIEVED", retrieved, oldValue);
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public CktDaily copy()throws java.sql.SQLException{
		CktDaily cp = new CktDaily((CktDaily)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CktDailyDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CktDailyDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getCktId(),o.getCktId())) diffs.add("CKT_ID");
		if(!isSame(getPeakDate(),o.getPeakDate())) diffs.add("PEAK_DATE");
		if(!isSame(getPeakTime(),o.getPeakTime())) diffs.add("PEAK_TIME");
		if(!isSame(getPeakVal(),o.getPeakVal())) diffs.add("PEAK_VAL");
		if(!isSame(getPeakAdj(),o.getPeakAdj())) diffs.add("PEAK_ADJ");
		if(!isSame(getGenAdj(),o.getGenAdj())) diffs.add("GEN_ADJ");
		if(!isSame(getNeutTime(),o.getNeutTime())) diffs.add("NEUT_TIME");
		if(!isSame(getNeutVal(),o.getNeutVal())) diffs.add("NEUT_VAL");
		if(!isSame(getVarVal(),o.getVarVal())) diffs.add("VAR_VAL");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getNeutNote(),o.getNeutNote())) diffs.add("NEUT_NOTE");
		if(!isSame(getCoinFactor(),o.getCoinFactor())) diffs.add("COIN_FACTOR");
		if(!isSame(getPeakA(),o.getPeakA())) diffs.add("PEAK_A");
		if(!isSame(getPeakB(),o.getPeakB())) diffs.add("PEAK_B");
		if(!isSame(getPeakC(),o.getPeakC())) diffs.add("PEAK_C");
		if(!isSame(getDocNote(),o.getDocNote())) diffs.add("DOC_NOTE");
		if(!isSame(getAbnormal(),o.getAbnormal())) diffs.add("ABNORMAL");
		if(!isSame(isRetrieved(),o.isRetrieved())) diffs.add("RETRIEVED");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
