package com.sce.esp.object.model;

import java.sql.SQLException;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.ESPTestCase;


public class DepartmentTest extends ESPTestCase{
	public void testGetInstance()throws SQLException{
		assertNotNull(Department.getInstance(2011));
		assertNotNull(Department.getInstance(2011));
	}
	public void testGetZones() throws SQLException{
		assertNotSame(0,Department.getInstance(2011).getZones().size());
		EspLogger.message(this, "Zone count: "+Department.getInstance(2011).getZones().size());
	}
	public void testGetDistricts() throws SQLException{
		assertNotSame(0,Department.getInstance(2011).getDistricts().size());
	}
	public void testGetDistricts2() throws SQLException{
		assertNotSame(0,Department.getInstance(2011).getDistricts().size());
	}
	public void testGetSyss() throws SQLException{
		for(Zone zone:Department.getInstance(2011).getZones()){
			EspLogger.message(this, "\t"+zone+" "+zone.getId());
			for(Region reg:zone.getRegions()){
				EspLogger.message(this, "\t\t"+reg);
				for(Sys sys:reg.getSyss())
					EspLogger.message(this, "\t\t\t"+sys);
			}
		}
	}
	
	public void testGetCkts() throws SQLException{
		EspLogger.message(this, Department.getInstance(2011).getCkts().size());
		assertNotSame(0,Department.getInstance(2011).getCkts().size());
	}
	public void testGetCkt2() throws SQLException{
		assertNotSame(0,Department.getInstance(2011).getCkts().size());
	}
	public void testSysFromSub() throws SQLException{
		Department.getInstance(2010).getSubs();
		Department.getInstance(2011).getSubs();
		for(Sub sub:Department.getInstance(2012).getSubs())
			EspLogger.message(this, sub+" "+sub.getYear(0, sub.getPlanyear()).getSys());
	}
//	public void testCacheRefresh()throws Exception{
//		PreparedStatement ps = PDBConnection.getInstance().getConnection().prepareStatement("SELECT * FROM MDI220_CKT WHERE PLANYEAR=? AND DELETED_TS IS NULL");
//		ps.setInt(1, 2011);
//		ESPCache cache = new ESPCache(null);
//		ResultSet rs = ps.executeQuery();
//		while(rs.next()){
//			Ckt c = new Ckt();
//			cache.refresh(c, rs);
//		}
//		rs.close();
//		ps.close();
//	}
}
