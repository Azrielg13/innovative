package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.OverheadKey;
import com.sce.esp.object.model.Program;
import com.sce.esp.object.model.Schedule;
import com.sce.esp.object.model.ScopeType;
import com.sce.esp.object.model.Template;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class TemplateDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,NAME,DESCRIPTION,PROGRAM_ID,SCHEDULE_ID,SCOPE_TYPE_ID,OVERHEAD_KEY_ID};
	public final static int ID_LIMIT = 9;
	public final static int NAME_LIMIT = 32;
	public final static int DESCRIPTION_LIMIT = 128;
	public final static int PROGRAMID_LIMIT = 9;
	public final static int SCHEDULEID_LIMIT = 9;
	public final static int SCOPETYPEID_LIMIT = 9;
	public final static int OVERHEADKEYID_LIMIT = 9;
	private int id;
	private String name;
	private String description;
	private int programId;
	private int scheduleId;
	private int scopeTypeId;
	private int overheadKeyId;
	private Program program;
	private Schedule schedule;
	private ScopeType scopeType;
	private OverheadKey overheadKey;
	public static Template getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static Template getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		Template o = null;
		if(cache != null && cache.contains(Template.class, pk))
			o = em.find(Template.class, pk);
		if(o==null && getAICache().contains(Template.class, pk))
			o = getAICache().find(Template.class, pk);
		if(o==null && fetch)
			o = em.find(Template.class, pk);
		if(o==null && fetch && Template.class.getAnnotation(AutoInsertable.class) != null){
			o = new Template(id);
			getAICache().cache(Template.class, o);
		}
		return o;
	}
	public static Collection<Template> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Template> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Template> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Template o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Template> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Template> tq = em.createQuery(jpql,Template.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Template> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Template> tq = em.createNamedQuery(name,Template.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TemplateDAO(){}
	public TemplateDAO(int id){
		this.id=id;
	}
	public TemplateDAO(TemplateDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(TemplateDAO orig){
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.programId=orig.getProgramId();
		this.scheduleId=orig.getScheduleId();
		this.scopeTypeId=orig.getScopeTypeId();
		this.overheadKeyId=orig.getOverheadKeyId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS37_SEQ",sequenceName="MDIS37_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="NAME",nullable=false,length=32)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=128)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="PROGRAM_ID",nullable=false,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
		program=null;
	}
	@Column(name="SCHEDULE_ID",nullable=false,length=9)
	public int getScheduleId(){
		return scheduleId;
	}
	public void setScheduleId(int scheduleId) throws java.sql.SQLException{
		if(isSame(scheduleId, getScheduleId()))return;
		int oldValue = getScheduleId();
		this.scheduleId=scheduleId;
		setProperty("SCHEDULE_ID", scheduleId, oldValue);
		schedule=null;
	}
	@Column(name="SCOPE_TYPE_ID",nullable=false,length=9)
	public int getScopeTypeId(){
		return scopeTypeId;
	}
	public void setScopeTypeId(int scopeTypeId) throws java.sql.SQLException{
		if(isSame(scopeTypeId, getScopeTypeId()))return;
		int oldValue = getScopeTypeId();
		this.scopeTypeId=scopeTypeId;
		setProperty("SCOPE_TYPE_ID", scopeTypeId, oldValue);
		scopeType=null;
	}
	@Column(name="OVERHEAD_KEY_ID",nullable=false,length=9)
	public int getOverheadKeyId(){
		return overheadKeyId;
	}
	public void setOverheadKeyId(int overheadKeyId) throws java.sql.SQLException{
		if(isSame(overheadKeyId, getOverheadKeyId()))return;
		int oldValue = getOverheadKeyId();
		this.overheadKeyId=overheadKeyId;
		setProperty("OVERHEAD_KEY_ID", overheadKeyId, oldValue);
		overheadKey=null;
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getProgramId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setProgramId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public Schedule getSchedule()throws java.sql.SQLException{
		if(schedule==null)
			schedule=Schedule.getInstance(getScheduleId());
		return schedule;
	}
	public void setSchedule(Schedule schedule)throws java.sql.SQLException{
		setScheduleId(schedule==null?0:schedule.getScheduleId());
		this.schedule=schedule;
	}
	public ScopeType getScopeType()throws java.sql.SQLException{
		if(scopeType==null)
			scopeType=ScopeType.getInstance(getScopeTypeId());
		return scopeType;
	}
	public void setScopeType(ScopeType scopeType)throws java.sql.SQLException{
		setScopeTypeId(scopeType==null?0:scopeType.getScopeTypeId());
		this.scopeType=scopeType;
	}
	public OverheadKey getOverheadKey()throws java.sql.SQLException{
		if(overheadKey==null)
			overheadKey=OverheadKey.getInstance(getOverheadKeyId());
		return overheadKey;
	}
	public void setOverheadKey(OverheadKey overheadKey)throws java.sql.SQLException{
		setOverheadKeyId(overheadKey==null?0:overheadKey.getId());
		this.overheadKey=overheadKey;
	}
	public Template copy()throws java.sql.SQLException{
		Template cp = new Template((Template)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TemplateDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(TemplateDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		if(!isSame(getScheduleId(),o.getScheduleId())) diffs.add("SCHEDULE_ID");
		if(!isSame(getScopeTypeId(),o.getScopeTypeId())) diffs.add("SCOPE_TYPE_ID");
		if(!isSame(getOverheadKeyId(),o.getOverheadKeyId())) diffs.add("OVERHEAD_KEY_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
