package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.TestQuestion;
import com.sce.esp.object.model.TestResponse;
import com.sce.esp.object.model.TestUser;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class TestResponseDAO extends MDIObject{
	public static enum KEY_PROPERTY{SCRIPT_ID,QUESTION_ID,USERNAME_ID};
	public static enum PROPERTY{SCRIPT_ID,QUESTION_ID,USERNAME_ID,RESPONSE,RESPONSE2,ACTION,SEVERITY,STATUS,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SCRIPTID_LIMIT = 9;
	public final static int QUESTIONID_LIMIT = 4;
	public final static int USERNAMEID_LIMIT = 9;
	public final static int RESPONSE_LIMIT = 2048;
	public final static int RESPONSE2_LIMIT = 2048;
	public final static int ACTION_LIMIT = 2048;
	public final static int SEVERITY_LIMIT = 2;
	public final static int STATUS_LIMIT = 2;
	private int scriptId;
	private int questionId;
	private int usernameId;
	private String response;
	private String response2;
	private String action;
	private int severity;
	private int status;
	private TestQuestion testQuestion;
	private TestUser testUser;
	public static TestResponse getInstance(int scriptId, int questionId, int usernameId)throws java.sql.SQLException{
		return getInstance(scriptId, questionId, usernameId, true);
	}
	public static TestResponse getInstance(int scriptId, int questionId, int usernameId, boolean fetch)throws java.sql.SQLException{
		if(isNull(scriptId, questionId, usernameId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scriptId, questionId, usernameId);
		Cache cache = em.getEntityManagerFactory().getCache();
		TestResponse o = null;
		if(cache != null && cache.contains(TestResponse.class, pk))
			o = em.find(TestResponse.class, pk);
		if(o==null && getAICache().contains(TestResponse.class, pk))
			o = getAICache().find(TestResponse.class, pk);
		if(o==null && fetch)
			o = em.find(TestResponse.class, pk);
		if(o==null && fetch && TestResponse.class.getAnnotation(AutoInsertable.class) != null){
			o = new TestResponse(scriptId, questionId, usernameId);
			getAICache().cache(TestResponse.class, o);
		}
		return o;
	}
	public static Collection<TestResponse> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<TestResponse> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<TestResponse> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM TestResponse o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<TestResponse> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TestResponse> tq = em.createQuery(jpql,TestResponse.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<TestResponse> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TestResponse> tq = em.createNamedQuery(name,TestResponse.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TestResponseDAO(){}
	public TestResponseDAO(int scriptId, int questionId, int usernameId){
		this.scriptId=scriptId;
		this.questionId=questionId;
		this.usernameId=usernameId;
	}
	public TestResponseDAO(TestResponseDAO orig){
		super(orig);
		this.scriptId=orig.getScriptId();
		this.questionId=orig.getQuestionId();
		this.usernameId=orig.getUsernameId();
		copyFrom(orig);
	}
	public void copyFrom(TestResponseDAO orig){
		this.response=orig.getResponse();
		this.response2=orig.getResponse2();
		this.action=orig.getAction();
		this.severity=orig.getSeverity();
		this.status=orig.getStatus();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scriptId, questionId, usernameId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="SCRIPT_ID",nullable=false,length=9)
	public int getScriptId(){
		return scriptId;
	}
	public void setScriptId(int scriptId) throws java.sql.SQLException{
		if(isSame(scriptId, getScriptId()))return;
		int oldValue = getScriptId();
		this.scriptId=scriptId;
		setProperty("SCRIPT_ID", scriptId, oldValue);
	}
	@Id
	@Column(name="QUESTION_ID",nullable=false,length=4)
	public int getQuestionId(){
		return questionId;
	}
	public void setQuestionId(int questionId) throws java.sql.SQLException{
		if(isSame(questionId, getQuestionId()))return;
		int oldValue = getQuestionId();
		this.questionId=questionId;
		setProperty("QUESTION_ID", questionId, oldValue);
		testQuestion=null;
	}
	@Id
	@Column(name="USERNAME_ID",nullable=false,length=9)
	public int getUsernameId(){
		return usernameId;
	}
	public void setUsernameId(int usernameId) throws java.sql.SQLException{
		if(isSame(usernameId, getUsernameId()))return;
		int oldValue = getUsernameId();
		this.usernameId=usernameId;
		setProperty("USERNAME_ID", usernameId, oldValue);
		testUser=null;
	}
	@Column(name="RESPONSE",nullable=true,length=2048)
	public String getResponse(){
		return response;
	}
	public void setResponse(String response) throws java.sql.SQLException{
		if(isSame(response, getResponse()))return;
		String oldValue = getResponse();
		this.response=response;
		setProperty("RESPONSE", response, oldValue);
	}
	@Column(name="RESPONSE2",nullable=true,length=2048)
	public String getResponse2(){
		return response2;
	}
	public void setResponse2(String response2) throws java.sql.SQLException{
		if(isSame(response2, getResponse2()))return;
		String oldValue = getResponse2();
		this.response2=response2;
		setProperty("RESPONSE2", response2, oldValue);
	}
	@Column(name="ACTION",nullable=true,length=2048)
	public String getAction(){
		return action;
	}
	public void setAction(String action) throws java.sql.SQLException{
		if(isSame(action, getAction()))return;
		String oldValue = getAction();
		this.action=action;
		setProperty("ACTION", action, oldValue);
	}
	@Column(name="SEVERITY",nullable=true,length=2)
	public int getSeverity(){
		return severity;
	}
	public void setSeverity(int severity) throws java.sql.SQLException{
		if(isSame(severity, getSeverity()))return;
		int oldValue = getSeverity();
		this.severity=severity;
		setProperty("SEVERITY", severity, oldValue);
	}
	@Column(name="STATUS",nullable=true,length=2)
	public int getStatus(){
		return status;
	}
	public void setStatus(int status) throws java.sql.SQLException{
		if(isSame(status, getStatus()))return;
		int oldValue = getStatus();
		this.status=status;
		setProperty("STATUS", status, oldValue);
	}
	public TestQuestion getTestQuestion()throws java.sql.SQLException{
		if(testQuestion==null)
			testQuestion=TestQuestion.getInstance(getScriptId(), getQuestionId());
		return testQuestion;
	}
	public void setTestQuestion(TestQuestion testQuestion)throws java.sql.SQLException{
		setQuestionId(testQuestion==null?0:testQuestion.getQuestionId());
		this.testQuestion=testQuestion;
	}
	public TestUser getTestUser()throws java.sql.SQLException{
		if(testUser==null)
			testUser=TestUser.getInstance(getScriptId(), getUsernameId());
		return testUser;
	}
	public void setTestUser(TestUser testUser)throws java.sql.SQLException{
		setUsernameId(testUser==null?0:testUser.getUsernameId());
		this.testUser=testUser;
	}
	public TestResponse copy()throws java.sql.SQLException{
		TestResponse cp = new TestResponse((TestResponse)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TestResponseDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(TestResponseDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScriptId(),o.getScriptId())) diffs.add("SCRIPT_ID");
		if(!isSame(getQuestionId(),o.getQuestionId())) diffs.add("QUESTION_ID");
		if(!isSame(getUsernameId(),o.getUsernameId())) diffs.add("USERNAME_ID");
		if(!isSame(getResponse(),o.getResponse())) diffs.add("RESPONSE");
		if(!isSame(getResponse2(),o.getResponse2())) diffs.add("RESPONSE2");
		if(!isSame(getAction(),o.getAction())) diffs.add("ACTION");
		if(!isSame(getSeverity(),o.getSeverity())) diffs.add("SEVERITY");
		if(!isSame(getStatus(),o.getStatus())) diffs.add("STATUS");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
