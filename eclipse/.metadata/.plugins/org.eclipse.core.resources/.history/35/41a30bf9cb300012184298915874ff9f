/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.BbankTransDAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI180_BBANK_TRANS")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM BbankTrans o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.TIE_ID=?3 AND o.YEAR=?4"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM BbankTrans o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM BbankTrans o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI180_BBANK_TRANS o WHERE o.PLANYEAR=? AND o.SIM_ID=? AND o.TIE_ID=? AND o.YEAR=?"),//AUTO-GENERATED
})
public class BbankTrans extends BbankTransDAO implements SubTransfer, Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -4985908676492518689L;

	/** The Constant TRANSFER_CONFIRMED. */
	public final static int TRANSFER_CONFIRMED = 0;
	
	/** The Constant FROM_NOT_CONFIRMED. */
	public final static int FROM_NOT_CONFIRMED = 1;
	
	/** The Constant TO_NOT_CONFIRMED. */
	public final static int TO_NOT_CONFIRMED = 2;
	
	/** The Constant BOTH_NOT_CONFIRMED. */
	public final static int BOTH_NOT_CONFIRMED = 3;
	
	
	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 * @param simId the sim id
	 * @param year the year
	 * @param tieId the tie id
	 */
	public BbankTrans(){
	}
	public BbankTrans(int planyear, int simId, int tieId, int year){
		super(planyear,simId,tieId,year);
	}

	public BbankTrans(BbankTrans bbankTrans) {
		super(bbankTrans);
	}

	/**
	 * Sets the transfer.
	 * 
	 * @param The new transfer
	 * @param transfer the transfer
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setTransfer(double transfer)throws SQLException{
		if(isSame(transfer,getTransfer())) return;
		super.setTransfer(transfer);				
		/** Determine if To sub and From sub of the transfer are in the users system **/
		int confirm = BbankTrans.TRANSFER_CONFIRMED;
		if(!User.getActiveUser().isUsersSystem(getTie().getFromSub().getYear(getSimId(),getYear()).getSys()))
			confirm = BbankTrans.FROM_NOT_CONFIRMED;
		if(!User.getActiveUser().isUsersSystem(getTie().getToSub().getYear(getSimId(),getYear()).getSys()))
			confirm += BbankTrans.TO_NOT_CONFIRMED;
		setConfirm(confirm);				
	}
	
	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString() {
		try {
			int dir = 1;
			Sub fromSub = getTie().getFromSub();
			Sub toSub = getTie().getToSub(); 
			if(getTransfer()<0) {
				fromSub = getTie().getToSub();
				toSub = getTie().getFromSub();
				dir=-1;
			}
			double transfer = getTransfer()*fromSub.getMVAFactor()*dir;
			return getYear()+" - "+fromSub.getName()+" to "+toSub.getName()+" ("+Math.round(transfer)+" A)";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
    
    /**
     * To sub not confirmed.
     * 
     * @return true, if to sub not confirmed
     */
    public boolean toSubNotConfirmed(){
    	return ((getConfirm() & TO_NOT_CONFIRMED) > 0); 
    }
    
    /**
     * From sub not confirmed.
     * 
     * @return true, if from sub not confirmed
     */
    public boolean fromSubNotConfirmed(){
    	return ((getConfirm() & FROM_NOT_CONFIRMED) > 0);
    }
    
    /**
     * This function returns the flag id if the
     * substation has a Transfer > |&value| without a new project.
     * 
     * @return - flagId or 0
     * 
     * @throws SQLException the SQL exception
     */
    public int getLargeXferFlag() throws SQLException{
        Flag flag = Flag.getInstance(getPlanyear(), Flag.LARGE_XFR_FLAG);
        if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {
            if(Math.abs(getTransfer())>flag.getValue() 
            	&& (getTie().getToSub() instanceof Bbank) 
            	&& !(((Bbank)getTie().getToSub()).getYear(getSimId(),getYear()).getPIFProjects().size()>0) 
            	&& !(((Bbank)getTie().getToSub()).getYear(getSimId(),getYear()).getCktDelta(null)>0) 
                && (getTie().getFromSub() instanceof Bbank) 
                && !(((Bbank)getTie().getFromSub()).getYear(getSimId(),getYear()).getPIFProjects().size()>0)  
                && !(((Bbank)getTie().getFromSub()).getYear(getSimId(),getYear()).getCktDelta(null)>0) 
                ){
            	return flag.getFlagId();
            }
                
        }
        return 0;
    }
    
    /**
     * This function returns the flag id if
     * A transfer exists where the offloading substation has > |&value%| reserve without it.
     * 
     * @return - flagId or 0
     * 
     * @throws SQLException the SQL exception
     */
    public int getBadXferFlag() throws SQLException{
        Flag flag = Flag.getInstance(getPlanyear(), Flag.BAD_XFR_FLAG);
        if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) { 
            if(getTransfer()>0 && getTie().getFromSub() instanceof Bbank &&
                    (  ( (Bbank)getTie().getFromSub()).getYear(getSimId(),getYear()).getCriteriaReserve() -
                            (getTransfer() * (1 + ((Bbank)getTie().getFromSub()).getYear(getSimId(),getYear()).getDRF()) )  )
                    >((Bbank)getTie().getFromSub()).getYear(getSimId(),getYear()).getPLLBizLogic() * flag.getValue()
                    ){
                
                return flag.getFlagId();
            }else if(getTransfer()<0 && getTie().getToSub() instanceof Bbank &&
                    (  ( (Bbank)getTie().getToSub()).getYear(getSimId(),getYear()).getCriteriaReserve() + 
                        (getTransfer() * (1 + ((Bbank)getTie().getToSub()).getYear(getSimId(),getYear()).getDRF()) )  )                             
                    > ((Bbank)getTie().getToSub()).getYear(getSimId(),getYear()).getPLLBizLogic() * flag.getValue()
                    ){ 
               
                return flag.getFlagId();
            }    
        }
        return 0;
    }
    
    /**
     * This function returns the flag id if there
     * is a transfer that is not confirmed.
     * 
     * @return - flagId or 0
     * 
     * @throws SQLException the SQL exception
     */
    public int getXferConfirmFlag() throws SQLException{
        Flag flag = Flag.getInstance(getPlanyear(), Flag.XFR_CONFIRM_FLAG);
        if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {
            if(getConfirm()>0){
                return flag.getFlagId();
            }
        }
        return 0;
    }
    
    /**
     * This function returns the flag id if the
     * A transfer exists where Circuit Transfer > |&value%| different than Substation Transfer.
     * 
     * @return - flagId or 0
     * 
     * @throws SQLException the SQL exception
     */
    public int getCktXferFlag() throws SQLException{        
        Flag flag = Flag.getInstance(getPlanyear(), Flag.CKT_XFR_FLAG);
        if(flag!=null && !flag.isDisabled() && flag.isShowFlag() && getTransfer()!=0 && getYear()<getPlanyear()+Flag.CKT_YEARS) {          
           double cktTotal = 0;
           if(getTie()!=null && getTie().getFromSub() instanceof Bbank){
               for(Ckt ckt:((Bbank)getTie().getFromSub()).getCkts(getSimId())){
                   for(CktTrans ct: ckt.getFromCktTrans()){
                       if(ct.getSwtProc().getOpDate()!=null && getEffYear(getPlanyear(), ct.getSwtProc().getOpDate()) == getYear()  && ct.getToCkt().getBbank(getSimId())==getTie().getToSub())
                           cktTotal += ct.getTransfer();
                   }
                   for(CktTrans ct: ckt.getToCktTrans()){
                	   if(ct.getSwtProc().getOpDate()!=null && getEffYear(getPlanyear(), ct.getSwtProc().getOpDate()) == getYear() && ct.getFromCkt().getBbank(getSimId())==getTie().getToSub())
                           cktTotal -= ct.getTransfer();
                   }
               }
           }
           /**if(getTie()!=null && getTie().getToSub() instanceof Bbank){
	           for(Ckt ckt:((Bbank)getTie().getToSub()).getCkts(getSimId())){
	               for(CktTrans ct: ckt.getFromCktTrans()){
	                   if(ct.getToCkt().getBbank(getSimId())==getTie().getFromSub())
	                       cktTotal += ct.getTransfer();
	               }
	               for(CktTrans ct: ckt.getToCktTrans()){
	                   if(ct.getFromCkt().getBbank(getSimId())==getTie().getFromSub())
	                       cktTotal -= ct.getTransfer();
	               }
	           }
           }*/
           
           if(Math.abs((getTransfer() - cktTotal)/getTransfer()) > flag.getValue()){
               return flag.getFlagId();
            } 
        }
        return 0;
    }
    
    /**
     * Pre sim copy.
     * 
     * @return true, if pre sim copy
     * 
     * @throws SQLException the SQL exception
     */
    public boolean preSimCopy()throws SQLException{
    	BbankTie tie = getBbankTie();
    	if(!tie.isRealRecord())
    		tie.insert(); //tie.simCopy(null, null);
        return true;
    }

	public SubTie getTie() throws SQLException {
		return getBbankTie();
	}
}
