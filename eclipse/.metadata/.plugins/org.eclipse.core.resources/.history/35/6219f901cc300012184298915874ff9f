package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.GrowthType;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.Sys;
import com.sce.esp.object.model.SysGrowth;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class SysGrowthDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,SYS_ID,YEAR,GROWTH_TYPE_ID};
	public static enum PROPERTY{PLANYEAR,SIM_ID,SYS_ID,YEAR,GROWTH_TYPE_ID,GROWTH_LC,GROWTH,GROWTH_HC,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_VARCHAR1,ALT_VARCHAR2,ALT_VARCHAR3,ALT_DATE1,ALT_DATE2,ALT_DATE3,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int SYSID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int GROWTHTYPEID_LIMIT = 9;
	public final static int GROWTHLC_LIMIT = 24;
	public final static int GROWTH_LIMIT = 24;
	public final static int GROWTHHC_LIMIT = 24;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTDATE2_LIMIT = 7;
	public final static int ALTDATE3_LIMIT = 7;
	private SysGrowth ptr;
	private int planyear;
	private int simId;
	private int sysId;
	private int year;
	private int growthTypeId;
	private double growthLc;
	private double growth;
	private double growthHc;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private String altVarchar1;
	private String altVarchar2;
	private String altVarchar3;
	private Calendar altDate1;
	private Calendar altDate2;
	private Calendar altDate3;
	private GrowthType growthType;
	private Simulation simulation;
	private Sys sys;
	public static SysGrowth getInstance(int planyear, int simId, int sysId, int year, int growthTypeId)throws java.sql.SQLException{
		return getInstance(planyear, simId, sysId, year, growthTypeId, true);
	}
	public static SysGrowth getInstance(int planyear, int simId, int sysId, int year, int growthTypeId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, sysId, year, growthTypeId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, sysId, year, growthTypeId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SysGrowth o = null;
		if(cache != null && cache.contains(SysGrowth.class, pk))
			o = em.find(SysGrowth.class, pk);
		if(o==null && getAICache().contains(SysGrowth.class, pk))
			o = getAICache().find(SysGrowth.class, pk);
		if(o==null && fetch)
			o = em.find(SysGrowth.class, pk);
		if(o==null && fetch && SysGrowth.class.getAnnotation(AutoInsertable.class) != null){
			o = new SysGrowth(planyear, simId, sysId, year, growthTypeId);
			getAICache().cache(SysGrowth.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<SysGrowth> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SysGrowth> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SysGrowth> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SysGrowth o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SysGrowth> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SysGrowth> tq = em.createQuery(jpql,SysGrowth.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SysGrowth> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SysGrowth> tq = em.createNamedQuery(name,SysGrowth.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SysGrowthDAO(){}
	public SysGrowthDAO(int planyear, int simId, int sysId, int year, int growthTypeId){
		this.planyear=planyear;
		this.simId=simId;
		this.sysId=sysId;
		this.year=year;
		this.growthTypeId=growthTypeId;
	}
	public SysGrowthDAO(SysGrowthDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		this.sysId=orig.getSysId();
		this.year=orig.getYear();
		this.growthTypeId=orig.getGrowthTypeId();
		copyFrom(orig);
	}
	public void copyFrom(SysGrowthDAO orig){
		this.growthLc=orig.getGrowthLc();
		this.growth=orig.getGrowth();
		this.growthHc=orig.getGrowthHc();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altVarchar1=orig.getAltVarchar1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altDate1=orig.getAltDate1();
		this.altDate2=orig.getAltDate2();
		this.altDate3=orig.getAltDate3();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, sysId, year, growthTypeId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public SysGrowth getPtr(){
		return ptr;
	}
	public void setPtr(SysGrowth ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getSysId(), getYear(), getGrowthTypeId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
		simulation=null;
	}
	@Id
	@Column(name="SYS_ID",nullable=false,length=9)
	public int getSysId(){
		return sysId;
	}
	public void setSysId(int sysId) throws java.sql.SQLException{
		if(isSame(sysId, getSysId()))return;
		int oldValue = getSysId();
		this.sysId=sysId;
		setProperty("SYS_ID", sysId, oldValue);
		sys=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Id
	@Column(name="GROWTH_TYPE_ID",nullable=false,length=9)
	public int getGrowthTypeId(){
		return growthTypeId;
	}
	public void setGrowthTypeId(int growthTypeId) throws java.sql.SQLException{
		if(isSame(growthTypeId, getGrowthTypeId()))return;
		int oldValue = getGrowthTypeId();
		this.growthTypeId=growthTypeId;
		setProperty("GROWTH_TYPE_ID", growthTypeId, oldValue);
		growthType=null;
	}
	@Column(name="GROWTH_LC",nullable=true,length=24)
	public double getGrowthLc(){
		if(getPtr()!=null)
			return getPtr().getGrowthLc();
		return growthLc;
	}
	public void setGrowthLc(double growthLc) throws java.sql.SQLException{
		if(isSame(growthLc, getGrowthLc()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getGrowthLc();
		this.growthLc=growthLc;
		setProperty("GROWTH_LC", growthLc, oldValue);
	}
	@Column(name="GROWTH",nullable=true,length=24)
	public double getGrowth(){
		if(getPtr()!=null)
			return getPtr().getGrowth();
		return growth;
	}
	public void setGrowth(double growth) throws java.sql.SQLException{
		if(isSame(growth, getGrowth()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getGrowth();
		this.growth=growth;
		setProperty("GROWTH", growth, oldValue);
	}
	@Column(name="GROWTH_HC",nullable=true,length=24)
	public double getGrowthHc(){
		if(getPtr()!=null)
			return getPtr().getGrowthHc();
		return growthHc;
	}
	public void setGrowthHc(double growthHc) throws java.sql.SQLException{
		if(isSame(growthHc, getGrowthHc()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getGrowthHc();
		this.growthHc=growthHc;
		setProperty("GROWTH_HC", growthHc, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		if(getPtr()!=null)
			return getPtr().getAltDouble1();
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		if(getPtr()!=null)
			return getPtr().getAltDouble2();
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		if(getPtr()!=null)
			return getPtr().getAltDouble3();
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		if(getPtr()!=null)
			return getPtr().getAltVarchar1();
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		if(getPtr()!=null)
			return getPtr().getAltVarchar2();
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		if(getPtr()!=null)
			return getPtr().getAltVarchar3();
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		if(getPtr()!=null)
			return getPtr().getAltDate1();
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_DATE2",nullable=true,length=7)
	public Calendar getAltDate2(){
		if(getPtr()!=null)
			return getPtr().getAltDate2();
		return altDate2;
	}
	public void setAltDate2(Calendar altDate2) throws java.sql.SQLException{
		if(isSame(altDate2, getAltDate2()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getAltDate2();
		this.altDate2=altDate2;
		setProperty("ALT_DATE2", altDate2, oldValue);
	}
	@Column(name="ALT_DATE3",nullable=true,length=7)
	public Calendar getAltDate3(){
		if(getPtr()!=null)
			return getPtr().getAltDate3();
		return altDate3;
	}
	public void setAltDate3(Calendar altDate3) throws java.sql.SQLException{
		if(isSame(altDate3, getAltDate3()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getAltDate3();
		this.altDate3=altDate3;
		setProperty("ALT_DATE3", altDate3, oldValue);
	}
	public GrowthType getGrowthType()throws java.sql.SQLException{
		if(growthType==null)
			growthType=GrowthType.getInstance(getPlanyear(), getGrowthTypeId());
		return growthType;
	}
	public void setGrowthType(GrowthType growthType)throws java.sql.SQLException{
		setGrowthTypeId(growthType==null?0:growthType.getGrowthTypeId());
		this.growthType=growthType;
	}
	public Simulation getSimulation()throws java.sql.SQLException{
		if(simulation==null)
			simulation=Simulation.getInstance(getPlanyear(), getSimId());
		return simulation;
	}
	public void setSimulation(Simulation simulation)throws java.sql.SQLException{
		setSimId(simulation==null?0:simulation.getSimId());
		this.simulation=simulation;
	}
	public Sys getSys()throws java.sql.SQLException{
		if(sys==null)
			sys=Sys.getInstance(getPlanyear(), getSysId());
		return sys;
	}
	public void setSys(Sys sys)throws java.sql.SQLException{
		setSysId(sys==null?0:sys.getSysId());
		this.sys=sys;
	}
	public SysGrowth copy()throws java.sql.SQLException{
		SysGrowth cp = new SysGrowth((SysGrowth)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SysGrowthDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SysGrowthDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getSysId(),o.getSysId())) diffs.add("SYS_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getGrowthTypeId(),o.getGrowthTypeId())) diffs.add("GROWTH_TYPE_ID");
		if(!isSame(getGrowthLc(),o.getGrowthLc())) diffs.add("GROWTH_LC");
		if(!isSame(getGrowth(),o.getGrowth())) diffs.add("GROWTH");
		if(!isSame(getGrowthHc(),o.getGrowthHc())) diffs.add("GROWTH_HC");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltDate2(),o.getAltDate2())) diffs.add("ALT_DATE2");
		if(!isSame(getAltDate3(),o.getAltDate3())) diffs.add("ALT_DATE3");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
