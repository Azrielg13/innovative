package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.BbankTie;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.SwtProc;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class BbankTieDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,TIE_ID};
	public static enum PROPERTY{PLANYEAR,SIM_ID,TIE_ID,FROM_SUB_ID,TO_SUB_ID,STRONG,CKT_TIES,DISABLED,TIE_NOTE,TRANS_NOTE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int TIEID_LIMIT = 9;
	public final static int FROMSUBID_LIMIT = 9;
	public final static int TOSUBID_LIMIT = 9;
	public final static int STRONG_LIMIT = 1;
	public final static int CKTTIES_LIMIT = 2;
	public final static int DISABLED_LIMIT = 1;
	public final static int TIENOTE_LIMIT = 768;
	public final static int TRANSNOTE_LIMIT = 768;
	private BbankTie ptr;
	private int planyear;
	private int simId;
	private int tieId;
	private int fromSubId;
	private int toSubId;
	private boolean strong;
	private int cktTies;
	private boolean disabled;
	private String tieNote;
	private String transNote;
	private Collection<SwtProc> swtProcs;
	private Bbank bbank;
	private Bbank bbank2;
	private Simulation simulation;
	public static BbankTie getInstance(int planyear, int simId, int tieId)throws java.sql.SQLException{
		return getInstance(planyear, simId, tieId, true);
	}
	public static BbankTie getInstance(int planyear, int simId, int tieId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, tieId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, tieId);
		Cache cache = em.getEntityManagerFactory().getCache();
		BbankTie o = null;
		if(cache != null && cache.contains(BbankTie.class, pk))
			o = em.find(BbankTie.class, pk);
		if(o==null && getAICache().contains(BbankTie.class, pk))
			o = getAICache().find(BbankTie.class, pk);
		if(o==null && fetch)
			o = em.find(BbankTie.class, pk);
		if(o==null && fetch && BbankTie.class.getAnnotation(AutoInsertable.class) != null){
			o = new BbankTie(planyear, simId, tieId);
			getAICache().cache(BbankTie.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<BbankTie> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<BbankTie> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<BbankTie> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM BbankTie o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<BbankTie> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<BbankTie> tq = em.createQuery(jpql,BbankTie.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<BbankTie> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<BbankTie> tq = em.createNamedQuery(name,BbankTie.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public BbankTieDAO(){}
	public BbankTieDAO(int planyear, int simId, int tieId){
		this.planyear=planyear;
		this.simId=simId;
		this.tieId=tieId;
	}
	public BbankTieDAO(BbankTieDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		copyFrom(orig);
	}
	public void copyFrom(BbankTieDAO orig){
		this.fromSubId=orig.getFromSubId();
		this.toSubId=orig.getToSubId();
		this.strong=orig.isStrong();
		this.cktTies=orig.getCktTies();
		this.disabled=orig.isDisabled();
		this.tieNote=orig.getTieNote();
		this.transNote=orig.getTransNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, tieId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public BbankTie getPtr(){
		return ptr;
	}
	public void setPtr(BbankTie ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getTieId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
		simulation=null;
	}
	@Id
	@SequenceGenerator(name="MDI170_SEQ",sequenceName="MDI170_SEQ")
	@Column(name="TIE_ID",nullable=false,length=9)
	public int getTieId(){
		return tieId;
	}
	public void setTieId(int tieId) throws java.sql.SQLException{
		if(isSame(tieId, getTieId()))return;
		int oldValue = getTieId();
		this.tieId=tieId;
		setProperty("TIE_ID", tieId, oldValue);
	}
	@Column(name="FROM_SUB_ID",nullable=false,length=9)
	public int getFromSubId(){
		if(getPtr()!=null)
			return getPtr().getFromSubId();
		return fromSubId;
	}
	public void setFromSubId(int fromSubId) throws java.sql.SQLException{
		if(isSame(fromSubId, getFromSubId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getFromSubId();
		this.fromSubId=fromSubId;
		setProperty("FROM_SUB_ID", fromSubId, oldValue);
		bbank=null;
	}
	@Column(name="TO_SUB_ID",nullable=false,length=9)
	public int getToSubId(){
		if(getPtr()!=null)
			return getPtr().getToSubId();
		return toSubId;
	}
	public void setToSubId(int toSubId) throws java.sql.SQLException{
		if(isSame(toSubId, getToSubId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getToSubId();
		this.toSubId=toSubId;
		setProperty("TO_SUB_ID", toSubId, oldValue);
		bbank2=null;
	}
	@Column(name="STRONG",nullable=true,length=1)
	public boolean isStrong(){
		if(getPtr()!=null)
			return getPtr().isStrong();
		return strong;
	}
	public void setStrong(boolean strong) throws java.sql.SQLException{
		if(isSame(strong, isStrong()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isStrong();
		this.strong=strong;
		setProperty("STRONG", strong, oldValue);
	}
	@Column(name="CKT_TIES",nullable=true,length=2)
	public int getCktTies(){
		if(getPtr()!=null)
			return getPtr().getCktTies();
		return cktTies;
	}
	public void setCktTies(int cktTies) throws java.sql.SQLException{
		if(isSame(cktTies, getCktTies()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getCktTies();
		this.cktTies=cktTies;
		setProperty("CKT_TIES", cktTies, oldValue);
	}
	@Column(name="DISABLED",nullable=true,length=1)
	public boolean isDisabled(){
		if(getPtr()!=null)
			return getPtr().isDisabled();
		return disabled;
	}
	public void setDisabled(boolean disabled) throws java.sql.SQLException{
		if(isSame(disabled, isDisabled()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isDisabled();
		this.disabled=disabled;
		setProperty("DISABLED", disabled, oldValue);
	}
	@Column(name="TIE_NOTE",nullable=true,length=768)
	public String getTieNote(){
		if(getPtr()!=null)
			return getPtr().getTieNote();
		return tieNote;
	}
	public void setTieNote(String tieNote) throws java.sql.SQLException{
		if(isSame(tieNote, getTieNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getTieNote();
		this.tieNote=tieNote;
		setProperty("TIE_NOTE", tieNote, oldValue);
	}
	@Column(name="TRANS_NOTE",nullable=true,length=768)
	public String getTransNote(){
		if(getPtr()!=null)
			return getPtr().getTransNote();
		return transNote;
	}
	public void setTransNote(String transNote) throws java.sql.SQLException{
		if(isSame(transNote, getTransNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getTransNote();
		this.transNote=transNote;
		setProperty("TRANS_NOTE", transNote, oldValue);
	}
	public Bbank getBbank()throws java.sql.SQLException{
		if(bbank==null)
			bbank=Bbank.getInstance(getPlanyear(), getFromSubId());
		return bbank;
	}
	public void setBbank(Bbank bbank)throws java.sql.SQLException{
		setFromSubId(bbank==null?0:bbank.getBbankSubId());
		this.bbank=bbank;
	}
	public Bbank getBbank2()throws java.sql.SQLException{
		if(bbank2==null)
			bbank2=Bbank.getInstance(getPlanyear(), getToSubId());
		return bbank2;
	}
	public void setBbank2(Bbank bbank2)throws java.sql.SQLException{
		setToSubId(bbank2==null?0:bbank2.getBbankSubId());
		this.bbank2=bbank2;
	}
	public Simulation getSimulation()throws java.sql.SQLException{
		if(simulation==null)
			simulation=Simulation.getInstance(getPlanyear(), getSimId());
		return simulation;
	}
	public void setSimulation(Simulation simulation)throws java.sql.SQLException{
		setSimId(simulation==null?0:simulation.getSimId());
		this.simulation=simulation;
	}
	public Collection<SwtProc> getSwtProcs()throws java.sql.SQLException{
		if(isNewInstance() || swtProcs != null){
			if(swtProcs == null)
				swtProcs = new TreeSet<SwtProc>();
			return swtProcs;
		}
		return SwtProc.getNamedCollection("findByBbankTie",getPlanyear(), getSimId(), getTieId());
	}
	public void addSwtProc(SwtProc swtProc)throws java.sql.SQLException{
		swtProc.setBbankTie((BbankTie)this);
		if(isNewInstance() || swtProcs != null)
			getSwtProcs().add(swtProc);
		else
			swtProc.insert();
	}
	public void removeSwtProc(SwtProc swtProc)throws java.sql.SQLException{
		if(isNewInstance() || swtProcs != null)
			getSwtProcs().remove(swtProc);
		else
			swtProc.delete();
	}
	public BbankTie copy()throws java.sql.SQLException{
		BbankTie cp = new BbankTie((BbankTie)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(BbankTieDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(SwtProc child:getSwtProcs())
			cp.addSwtProc(child.copy());
	}
	public Vector<String> getDifference(BbankTieDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getTieId(),o.getTieId())) diffs.add("TIE_ID");
		if(!isSame(getFromSubId(),o.getFromSubId())) diffs.add("FROM_SUB_ID");
		if(!isSame(getToSubId(),o.getToSubId())) diffs.add("TO_SUB_ID");
		if(!isSame(isStrong(),o.isStrong())) diffs.add("STRONG");
		if(!isSame(getCktTies(),o.getCktTies())) diffs.add("CKT_TIES");
		if(!isSame(isDisabled(),o.isDisabled())) diffs.add("DISABLED");
		if(!isSame(getTieNote(),o.getTieNote())) diffs.add("TIE_NOTE");
		if(!isSame(getTransNote(),o.getTransNote())) diffs.add("TRANS_NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(swtProcs != null){
			for(SwtProc swtProc:getSwtProcs()){
				if(swtProc.isNewInstance())
					swtProc.setBbankTie((BbankTie)this);
				swtProc.insert();
			}
			swtProcs = null;
		}
	}
}
