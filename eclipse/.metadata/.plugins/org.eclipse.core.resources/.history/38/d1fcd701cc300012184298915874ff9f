package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Abank;
import com.sce.esp.object.model.AbankN1Tie;
import com.sce.esp.object.model.AbankShed;
import com.sce.esp.object.model.AbankTrans;
import com.sce.esp.object.model.AbankYear;
import com.sce.esp.object.model.AgObject;
import com.sce.esp.object.model.Bank;
import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.BbankTie;
import com.sce.esp.object.model.BbankTrans;
import com.sce.esp.object.model.BbankTransN1;
import com.sce.esp.object.model.BbankYear;
import com.sce.esp.object.model.Cable;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.CktCont;
import com.sce.esp.object.model.CktContShed;
import com.sce.esp.object.model.CktContTrans;
import com.sce.esp.object.model.CktEdnaRead;
import com.sce.esp.object.model.CktGrowth;
import com.sce.esp.object.model.CktSwt;
import com.sce.esp.object.model.CktTrans;
import com.sce.esp.object.model.CktTransN1;
import com.sce.esp.object.model.CktVar;
import com.sce.esp.object.model.CktYear;
import com.sce.esp.object.model.Cont;
import com.sce.esp.object.model.CritExcept;
import com.sce.esp.object.model.Criteria;
import com.sce.esp.object.model.CriteriaWs;
import com.sce.esp.object.model.Cust;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.DepartmentYear;
import com.sce.esp.object.model.DgDerat;
import com.sce.esp.object.model.District;
import com.sce.esp.object.model.Duct;
import com.sce.esp.object.model.DuctBank;
import com.sce.esp.object.model.DuctBankFile;
import com.sce.esp.object.model.Elem;
import com.sce.esp.object.model.Flag;
import com.sce.esp.object.model.GrowthType;
import com.sce.esp.object.model.LgProj;
import com.sce.esp.object.model.LgProjDriver;
import com.sce.esp.object.model.LgProjFile;
import com.sce.esp.object.model.LgProjGis;
import com.sce.esp.object.model.MvaFactor;
import com.sce.esp.object.model.Pif;
import com.sce.esp.object.model.PifBi;
import com.sce.esp.object.model.PifBudget;
import com.sce.esp.object.model.PifBudgetCat;
import com.sce.esp.object.model.PifCategory;
import com.sce.esp.object.model.PifCktJust;
import com.sce.esp.object.model.PifCompRisk;
import com.sce.esp.object.model.PifCrewType;
import com.sce.esp.object.model.PifCustType;
import com.sce.esp.object.model.PifEst;
import com.sce.esp.object.model.PifGwCat;
import com.sce.esp.object.model.PifImpactType;
import com.sce.esp.object.model.PifImpactValue;
import com.sce.esp.object.model.PifLabor;
import com.sce.esp.object.model.PifLineJust;
import com.sce.esp.object.model.PifMajorCustType;
import com.sce.esp.object.model.PifPriority;
import com.sce.esp.object.model.PifProjDriver;
import com.sce.esp.object.model.PifStatus;
import com.sce.esp.object.model.PifSubJust;
import com.sce.esp.object.model.PifVoltJust;
import com.sce.esp.object.model.PifWo;
import com.sce.esp.object.model.PifWoImpact;
import com.sce.esp.object.model.PqEquInv;
import com.sce.esp.object.model.PqTroubleLog;
import com.sce.esp.object.model.Prog;
import com.sce.esp.object.model.ProgElem;
import com.sce.esp.object.model.ProgExcept;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.ProjElem;
import com.sce.esp.object.model.ProjElemCost;
import com.sce.esp.object.model.ProjElemCostYear;
import com.sce.esp.object.model.RedbookScd;
import com.sce.esp.object.model.Region;
import com.sce.esp.object.model.SceSimAlt;
import com.sce.esp.object.model.SimAlt;
import com.sce.esp.object.model.SimCkt;
import com.sce.esp.object.model.SimSub;
import com.sce.esp.object.model.SimSys;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.Stl;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.SubCont;
import com.sce.esp.object.model.SubContShed;
import com.sce.esp.object.model.SubContTrans;
import com.sce.esp.object.model.SubFile;
import com.sce.esp.object.model.SubType;
import com.sce.esp.object.model.SubUnitCost;
import com.sce.esp.object.model.SubVar;
import com.sce.esp.object.model.SubWeather;
import com.sce.esp.object.model.SwtProc;
import com.sce.esp.object.model.Sys;
import com.sce.esp.object.model.SysDaily;
import com.sce.esp.object.model.SysMonthly;
import com.sce.esp.object.model.SysYear;
import com.sce.esp.object.model.SysYearCost;
import com.sce.esp.object.model.SysYearProj;
import com.sce.esp.object.model.SysYearSceCost;
import com.sce.esp.object.model.SysYearSceProj;
import com.sce.esp.object.model.UserSelect;
import com.sce.esp.object.model.UserSys;
import com.sce.esp.object.model.Weatherstation;
import com.sce.esp.object.model.Xfmr;
import com.sce.esp.object.model.Zone;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class DepartmentDAO extends AgObject{
	public static enum KEY_PROPERTY{PLANYEAR};
	public static enum PROPERTY{PLANYEAR,TITLE,ACTIVE,PLAN_FOR,NORMALIZATION_DATE,DEFAULT_OP_DATE,ESCALATION_RATE,PIF_OVERHEAD,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int TITLE_LIMIT = 30;
	public final static int ACTIVE_LIMIT = 1;
	public final static int PLANFOR_LIMIT = 2;
	public final static int NORMALIZATIONDATE_LIMIT = 7;
	public final static int DEFAULTOPDATE_LIMIT = 7;
	public final static int ESCALATIONRATE_LIMIT = 24;
	public final static int PIFOVERHEAD_LIMIT = 24;
	private int planyear;
	private String title;
	private boolean active = true;
	private int planFor = 10;
	private Calendar normalizationDate;
	private Calendar defaultOpDate;
	private double escalationRate = .03;
	private double pifOverhead = 1.25;
	private Collection<Abank> abanks;
	private Collection<AbankN1Tie> abankN1Ties;
	private Collection<AbankShed> abankSheds;
	private Collection<AbankTrans> abankTranss;
	private Collection<AbankYear> abankYears;
	private Collection<Bank> banks;
	private Collection<Bbank> bbanks;
	private Collection<BbankTie> bbankTies;
	private Collection<BbankTrans> bbankTranss;
	private Collection<BbankTransN1> bbankTransN1s;
	private Collection<BbankYear> bbankYears;
	private Collection<Cable> cables;
	private Collection<Ckt> ckts;
	private Collection<CktCont> cktConts;
	private Collection<CktContShed> cktContSheds;
	private Collection<CktContTrans> cktContTranss;
	private Collection<CktEdnaRead> cktEdnaReads;
	private Collection<CktGrowth> cktGrowths;
	private Collection<CktSwt> cktSwts;
	private Collection<CktTrans> cktTranss;
	private Collection<CktTransN1> cktTransN1s;
	private Collection<CktVar> cktVars;
	private Collection<CktYear> cktYears;
	private Collection<Cont> conts;
	private Collection<Criteria> criterias;
	private Collection<CriteriaWs> criteriaWss;
	private Collection<CritExcept> critExcepts;
	private Collection<Cust> custs;
	private Collection<DepartmentYear> departmentYears;
	private Collection<DgDerat> dgDerats;
	private Collection<District> districts;
	private Collection<Duct> ducts;
	private Collection<DuctBank> ductBanks;
	private Collection<DuctBankFile> ductBankFiles;
	private Collection<Elem> elems;
	private Collection<Flag> flags;
	private Collection<GrowthType> growthTypes;
	private Collection<LgProj> lgProjs;
	private Collection<LgProjDriver> lgProjDrivers;
	private Collection<LgProjFile> lgProjFiles;
	private Collection<LgProjGis> lgProjGiss;
	private Collection<MvaFactor> mvaFactors;
	private Collection<Pif> pifs;
	private Collection<PifBi> pifBis;
	private Collection<PifBudget> pifBudgets;
	private Collection<PifBudgetCat> pifBudgetCats;
	private Collection<PifCategory> pifCategorys;
	private Collection<PifCktJust> pifCktJusts;
	private Collection<PifCompRisk> pifCompRisks;
	private Collection<PifCrewType> pifCrewTypes;
	private Collection<PifCustType> pifCustTypes;
	private Collection<PifEst> pifEsts;
	private Collection<PifGwCat> pifGwCats;
	private Collection<PifImpactType> pifImpactTypes;
	private Collection<PifImpactValue> pifImpactValues;
	private Collection<PifLabor> pifLabors;
	private Collection<PifLineJust> pifLineJusts;
	private Collection<PifMajorCustType> pifMajorCustTypes;
	private Collection<PifPriority> pifPrioritys;
	private Collection<PifProjDriver> pifProjDrivers;
	private Collection<PifStatus> pifStatuss;
	private Collection<PifSubJust> pifSubJusts;
	private Collection<PifVoltJust> pifVoltJusts;
	private Collection<PifWo> pifWos;
	private Collection<PifWoImpact> pifWoImpacts;
	private Collection<PqEquInv> pqEquInvs;
	private Collection<PqTroubleLog> pqTroubleLogs;
	private Collection<Prog> progs;
	private Collection<ProgElem> progElems;
	private Collection<ProgExcept> progExcepts;
	private Collection<Proj> projs;
	private Collection<ProjElem> projElems;
	private Collection<ProjElemCost> projElemCosts;
	private Collection<ProjElemCostYear> projElemCostYears;
	private Collection<RedbookScd> redbookScds;
	private Collection<Region> regions;
	private Collection<SceSimAlt> sceSimAlts;
	private Collection<Simulation> simulations;
	private Collection<SimAlt> simAlts;
	private Collection<SimCkt> simCkts;
	private Collection<SimSub> simSubs;
	private Collection<SimSys> simSyss;
	private Collection<Stl> stls;
	private Collection<Sub> subs;
	private Collection<SubCont> subConts;
	private Collection<SubContShed> subContSheds;
	private Collection<SubContTrans> subContTranss;
	private Collection<SubFile> subFiles;
	private Collection<SubType> subTypes;
	private Collection<SubUnitCost> subUnitCosts;
	private Collection<SubVar> subVars;
	private Collection<SubWeather> subWeathers;
	private Collection<SwtProc> swtProcs;
	private Collection<Sys> syss;
	private Collection<SysDaily> sysDailys;
	private Collection<SysMonthly> sysMonthlys;
	private Collection<SysYear> sysYears;
	private Collection<SysYearCost> sysYearCosts;
	private Collection<SysYearProj> sysYearProjs;
	private Collection<SysYearSceCost> sysYearSceCosts;
	private Collection<SysYearSceProj> sysYearSceProjs;
	private Collection<UserSelect> userSelects;
	private Collection<UserSys> userSyss;
	private Collection<Weatherstation> weatherstations;
	private Collection<Xfmr> xfmrs;
	private Collection<Zone> zones;
	public static Department getInstance(int planyear)throws java.sql.SQLException{
		return getInstance(planyear, true);
	}
	public static Department getInstance(int planyear, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear);
		Cache cache = em.getEntityManagerFactory().getCache();
		Department o = null;
		if(cache != null && cache.contains(Department.class, pk))
			o = em.find(Department.class, pk);
		if(o==null && getAICache().contains(Department.class, pk))
			o = getAICache().find(Department.class, pk);
		if(o==null && fetch)
			o = em.find(Department.class, pk);
		if(o==null && fetch && Department.class.getAnnotation(AutoInsertable.class) != null){
			o = new Department(planyear);
			getAICache().cache(Department.class, o);
		}
		return o;
	}
	public static Collection<Department> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Department> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Department> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Department o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Department> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Department> tq = em.createQuery(jpql,Department.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Department> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Department> tq = em.createNamedQuery(name,Department.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public DepartmentDAO(){}
	public DepartmentDAO(int planyear){
		this.planyear=planyear;
	}
	public DepartmentDAO(DepartmentDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(DepartmentDAO orig){
		this.title=orig.getTitle();
		this.active=orig.isActive();
		this.planFor=orig.getPlanFor();
		this.normalizationDate=orig.getNormalizationDate();
		this.defaultOpDate=orig.getDefaultOpDate();
		this.escalationRate=orig.getEscalationRate();
		this.pifOverhead=orig.getPifOverhead();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Column(name="TITLE",nullable=false,length=30)
	public String getTitle(){
		return title;
	}
	public void setTitle(String title) throws java.sql.SQLException{
		if(isSame(title, getTitle()))return;
		String oldValue = getTitle();
		this.title=title;
		setProperty("TITLE", title, oldValue);
	}
	@Column(name="ACTIVE",nullable=true,length=1)
	public boolean isActive(){
		return active;
	}
	public void setActive(boolean active) throws java.sql.SQLException{
		if(isSame(active, isActive()))return;
		boolean oldValue = isActive();
		this.active=active;
		setProperty("ACTIVE", active, oldValue);
	}
	@Column(name="PLAN_FOR",nullable=true,length=2)
	public int getPlanFor(){
		return planFor;
	}
	public void setPlanFor(int planFor) throws java.sql.SQLException{
		if(isSame(planFor, getPlanFor()))return;
		int oldValue = getPlanFor();
		this.planFor=planFor;
		setProperty("PLAN_FOR", planFor, oldValue);
	}
	@Column(name="NORMALIZATION_DATE",nullable=false,length=7)
	public Calendar getNormalizationDate(){
		return normalizationDate;
	}
	public void setNormalizationDate(Calendar normalizationDate) throws java.sql.SQLException{
		if(isSame(normalizationDate, getNormalizationDate()))return;
		Calendar oldValue = getNormalizationDate();
		this.normalizationDate=normalizationDate;
		setProperty("NORMALIZATION_DATE", normalizationDate, oldValue);
	}
	@Column(name="DEFAULT_OP_DATE",nullable=false,length=7)
	public Calendar getDefaultOpDate(){
		return defaultOpDate;
	}
	public void setDefaultOpDate(Calendar defaultOpDate) throws java.sql.SQLException{
		if(isSame(defaultOpDate, getDefaultOpDate()))return;
		Calendar oldValue = getDefaultOpDate();
		this.defaultOpDate=defaultOpDate;
		setProperty("DEFAULT_OP_DATE", defaultOpDate, oldValue);
	}
	@Column(name="ESCALATION_RATE",nullable=true,length=24)
	public double getEscalationRate(){
		return escalationRate;
	}
	public void setEscalationRate(double escalationRate) throws java.sql.SQLException{
		if(isSame(escalationRate, getEscalationRate()))return;
		double oldValue = getEscalationRate();
		this.escalationRate=escalationRate;
		setProperty("ESCALATION_RATE", escalationRate, oldValue);
	}
	@Column(name="PIF_OVERHEAD",nullable=true,length=24)
	public double getPifOverhead(){
		return pifOverhead;
	}
	public void setPifOverhead(double pifOverhead) throws java.sql.SQLException{
		if(isSame(pifOverhead, getPifOverhead()))return;
		double oldValue = getPifOverhead();
		this.pifOverhead=pifOverhead;
		setProperty("PIF_OVERHEAD", pifOverhead, oldValue);
	}
	public Collection<Abank> getAbanks()throws java.sql.SQLException{
		if(isNewInstance() || abanks != null){
			if(abanks == null)
				abanks = new TreeSet<Abank>();
			return abanks;
		}
		return Abank.getCollection(new String[]{"PLANYEAR"},getPlanyear());
		
		//return Abank.getCollection(new String[]{"PLANYEAR", "SUB_TYPE_ID"},getPlanyear(), SubType.S);
	}
	public void addAbank(Abank abank)throws java.sql.SQLException{
		abank.setPlanyear(getPlanyear());
		if(isNewInstance() || abanks != null)
			getAbanks().add(abank);
		else
			abank.insert();
	}
	public void removeAbank(Abank abank)throws java.sql.SQLException{
		if(isNewInstance() || abanks != null)
			getAbanks().remove(abank);
		else
			abank.delete();
	}
	public Collection<AbankN1Tie> getAbankN1Ties()throws java.sql.SQLException{
		if(isNewInstance() || abankN1Ties != null){
			if(abankN1Ties == null)
				abankN1Ties = new TreeSet<AbankN1Tie>();
			return abankN1Ties;
		}
		return AbankN1Tie.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addAbankN1Tie(AbankN1Tie abankN1Tie)throws java.sql.SQLException{
		abankN1Tie.setPlanyear(getPlanyear());
		if(isNewInstance() || abankN1Ties != null)
			getAbankN1Ties().add(abankN1Tie);
		else
			abankN1Tie.insert();
	}
	public void removeAbankN1Tie(AbankN1Tie abankN1Tie)throws java.sql.SQLException{
		if(isNewInstance() || abankN1Ties != null)
			getAbankN1Ties().remove(abankN1Tie);
		else
			abankN1Tie.delete();
	}
	public Collection<AbankShed> getAbankSheds()throws java.sql.SQLException{
		if(isNewInstance() || abankSheds != null){
			if(abankSheds == null)
				abankSheds = new TreeSet<AbankShed>();
			return abankSheds;
		}
		return AbankShed.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addAbankShed(AbankShed abankShed)throws java.sql.SQLException{
		abankShed.setPlanyear(getPlanyear());
		if(isNewInstance() || abankSheds != null)
			getAbankSheds().add(abankShed);
		else
			abankShed.insert();
	}
	public void removeAbankShed(AbankShed abankShed)throws java.sql.SQLException{
		if(isNewInstance() || abankSheds != null)
			getAbankSheds().remove(abankShed);
		else
			abankShed.delete();
	}
	public Collection<AbankTrans> getAbankTranss()throws java.sql.SQLException{
		if(isNewInstance() || abankTranss != null){
			if(abankTranss == null)
				abankTranss = new TreeSet<AbankTrans>();
			return abankTranss;
		}
		return AbankTrans.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addAbankTrans(AbankTrans abankTrans)throws java.sql.SQLException{
		abankTrans.setPlanyear(getPlanyear());
		if(isNewInstance() || abankTranss != null)
			getAbankTranss().add(abankTrans);
		else
			abankTrans.insert();
	}
	public void removeAbankTrans(AbankTrans abankTrans)throws java.sql.SQLException{
		if(isNewInstance() || abankTranss != null)
			getAbankTranss().remove(abankTrans);
		else
			abankTrans.delete();
	}
	public Collection<AbankYear> getAbankYears()throws java.sql.SQLException{
		if(isNewInstance() || abankYears != null){
			if(abankYears == null)
				abankYears = new TreeSet<AbankYear>();
			return abankYears;
		}
		return AbankYear.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addAbankYear(AbankYear abankYear)throws java.sql.SQLException{
		abankYear.setPlanyear(getPlanyear());
		if(isNewInstance() || abankYears != null)
			getAbankYears().add(abankYear);
		else
			abankYear.insert();
	}
	public void removeAbankYear(AbankYear abankYear)throws java.sql.SQLException{
		if(isNewInstance() || abankYears != null)
			getAbankYears().remove(abankYear);
		else
			abankYear.delete();
	}
	public Collection<Bank> getBanks()throws java.sql.SQLException{
		if(isNewInstance() || banks != null){
			if(banks == null)
				banks = new TreeSet<Bank>();
			return banks;
		}
		return Bank.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addBank(Bank bank)throws java.sql.SQLException{
		bank.setPlanyear(getPlanyear());
		if(isNewInstance() || banks != null)
			getBanks().add(bank);
		else
			bank.insert();
	}
	public void removeBank(Bank bank)throws java.sql.SQLException{
		if(isNewInstance() || banks != null)
			getBanks().remove(bank);
		else
			bank.delete();
	}
	public Collection<Bbank> getBbanks()throws java.sql.SQLException{
		if(isNewInstance() || bbanks != null){
			if(bbanks == null)
				bbanks = new TreeSet<Bbank>();
			return bbanks;
		}
		return Bbank.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addBbank(Bbank bbank)throws java.sql.SQLException{
		bbank.setPlanyear(getPlanyear());
		if(isNewInstance() || bbanks != null)
			getBbanks().add(bbank);
		else
			bbank.insert();
	}
	public void removeBbank(Bbank bbank)throws java.sql.SQLException{
		if(isNewInstance() || bbanks != null)
			getBbanks().remove(bbank);
		else
			bbank.delete();
	}
	public Collection<BbankTie> getBbankTies()throws java.sql.SQLException{
		if(isNewInstance() || bbankTies != null){
			if(bbankTies == null)
				bbankTies = new TreeSet<BbankTie>();
			return bbankTies;
		}
		return BbankTie.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addBbankTie(BbankTie bbankTie)throws java.sql.SQLException{
		bbankTie.setPlanyear(getPlanyear());
		if(isNewInstance() || bbankTies != null)
			getBbankTies().add(bbankTie);
		else
			bbankTie.insert();
	}
	public void removeBbankTie(BbankTie bbankTie)throws java.sql.SQLException{
		if(isNewInstance() || bbankTies != null)
			getBbankTies().remove(bbankTie);
		else
			bbankTie.delete();
	}
	public Collection<BbankTrans> getBbankTranss()throws java.sql.SQLException{
		if(isNewInstance() || bbankTranss != null){
			if(bbankTranss == null)
				bbankTranss = new TreeSet<BbankTrans>();
			return bbankTranss;
		}
		return BbankTrans.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addBbankTrans(BbankTrans bbankTrans)throws java.sql.SQLException{
		bbankTrans.setPlanyear(getPlanyear());
		if(isNewInstance() || bbankTranss != null)
			getBbankTranss().add(bbankTrans);
		else
			bbankTrans.insert();
	}
	public void removeBbankTrans(BbankTrans bbankTrans)throws java.sql.SQLException{
		if(isNewInstance() || bbankTranss != null)
			getBbankTranss().remove(bbankTrans);
		else
			bbankTrans.delete();
	}
	public Collection<BbankTransN1> getBbankTransN1s()throws java.sql.SQLException{
		if(isNewInstance() || bbankTransN1s != null){
			if(bbankTransN1s == null)
				bbankTransN1s = new TreeSet<BbankTransN1>();
			return bbankTransN1s;
		}
		return BbankTransN1.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addBbankTransN1(BbankTransN1 bbankTransN1)throws java.sql.SQLException{
		bbankTransN1.setPlanyear(getPlanyear());
		if(isNewInstance() || bbankTransN1s != null)
			getBbankTransN1s().add(bbankTransN1);
		else
			bbankTransN1.insert();
	}
	public void removeBbankTransN1(BbankTransN1 bbankTransN1)throws java.sql.SQLException{
		if(isNewInstance() || bbankTransN1s != null)
			getBbankTransN1s().remove(bbankTransN1);
		else
			bbankTransN1.delete();
	}
	public Collection<BbankYear> getBbankYears()throws java.sql.SQLException{
		if(isNewInstance() || bbankYears != null){
			if(bbankYears == null)
				bbankYears = new TreeSet<BbankYear>();
			return bbankYears;
		}
		return BbankYear.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addBbankYear(BbankYear bbankYear)throws java.sql.SQLException{
		bbankYear.setPlanyear(getPlanyear());
		if(isNewInstance() || bbankYears != null)
			getBbankYears().add(bbankYear);
		else
			bbankYear.insert();
	}
	public void removeBbankYear(BbankYear bbankYear)throws java.sql.SQLException{
		if(isNewInstance() || bbankYears != null)
			getBbankYears().remove(bbankYear);
		else
			bbankYear.delete();
	}
	public Collection<Cable> getCables()throws java.sql.SQLException{
		if(isNewInstance() || cables != null){
			if(cables == null)
				cables = new TreeSet<Cable>();
			return cables;
		}
		return Cable.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCable(Cable cable)throws java.sql.SQLException{
		cable.setPlanyear(getPlanyear());
		if(isNewInstance() || cables != null)
			getCables().add(cable);
		else
			cable.insert();
	}
	public void removeCable(Cable cable)throws java.sql.SQLException{
		if(isNewInstance() || cables != null)
			getCables().remove(cable);
		else
			cable.delete();
	}
	public Collection<Ckt> getCkts()throws java.sql.SQLException{
		if(isNewInstance() || ckts != null){
			if(ckts == null)
				ckts = new TreeSet<Ckt>();
			return ckts;
		}
		return Ckt.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCkt(Ckt ckt)throws java.sql.SQLException{
		ckt.setPlanyear(getPlanyear());
		if(isNewInstance() || ckts != null)
			getCkts().add(ckt);
		else
			ckt.insert();
	}
	public void removeCkt(Ckt ckt)throws java.sql.SQLException{
		if(isNewInstance() || ckts != null)
			getCkts().remove(ckt);
		else
			ckt.delete();
	}
	public Collection<CktCont> getCktConts()throws java.sql.SQLException{
		if(isNewInstance() || cktConts != null){
			if(cktConts == null)
				cktConts = new TreeSet<CktCont>();
			return cktConts;
		}
		return CktCont.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktCont(CktCont cktCont)throws java.sql.SQLException{
		cktCont.setPlanyear(getPlanyear());
		if(isNewInstance() || cktConts != null)
			getCktConts().add(cktCont);
		else
			cktCont.insert();
	}
	public void removeCktCont(CktCont cktCont)throws java.sql.SQLException{
		if(isNewInstance() || cktConts != null)
			getCktConts().remove(cktCont);
		else
			cktCont.delete();
	}
	public Collection<CktContShed> getCktContSheds()throws java.sql.SQLException{
		if(isNewInstance() || cktContSheds != null){
			if(cktContSheds == null)
				cktContSheds = new TreeSet<CktContShed>();
			return cktContSheds;
		}
		return CktContShed.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktContShed(CktContShed cktContShed)throws java.sql.SQLException{
		cktContShed.setPlanyear(getPlanyear());
		if(isNewInstance() || cktContSheds != null)
			getCktContSheds().add(cktContShed);
		else
			cktContShed.insert();
	}
	public void removeCktContShed(CktContShed cktContShed)throws java.sql.SQLException{
		if(isNewInstance() || cktContSheds != null)
			getCktContSheds().remove(cktContShed);
		else
			cktContShed.delete();
	}
	public Collection<CktContTrans> getCktContTranss()throws java.sql.SQLException{
		if(isNewInstance() || cktContTranss != null){
			if(cktContTranss == null)
				cktContTranss = new TreeSet<CktContTrans>();
			return cktContTranss;
		}
		return CktContTrans.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktContTrans(CktContTrans cktContTrans)throws java.sql.SQLException{
		cktContTrans.setPlanyear(getPlanyear());
		if(isNewInstance() || cktContTranss != null)
			getCktContTranss().add(cktContTrans);
		else
			cktContTrans.insert();
	}
	public void removeCktContTrans(CktContTrans cktContTrans)throws java.sql.SQLException{
		if(isNewInstance() || cktContTranss != null)
			getCktContTranss().remove(cktContTrans);
		else
			cktContTrans.delete();
	}
	public Collection<CktEdnaRead> getCktEdnaReads()throws java.sql.SQLException{
		if(isNewInstance() || cktEdnaReads != null){
			if(cktEdnaReads == null)
				cktEdnaReads = new TreeSet<CktEdnaRead>();
			return cktEdnaReads;
		}
		return CktEdnaRead.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktEdnaRead(CktEdnaRead cktEdnaRead)throws java.sql.SQLException{
		cktEdnaRead.setPlanyear(getPlanyear());
		if(isNewInstance() || cktEdnaReads != null)
			getCktEdnaReads().add(cktEdnaRead);
		else
			cktEdnaRead.insert();
	}
	public void removeCktEdnaRead(CktEdnaRead cktEdnaRead)throws java.sql.SQLException{
		if(isNewInstance() || cktEdnaReads != null)
			getCktEdnaReads().remove(cktEdnaRead);
		else
			cktEdnaRead.delete();
	}
	public Collection<CktGrowth> getCktGrowths()throws java.sql.SQLException{
		if(isNewInstance() || cktGrowths != null){
			if(cktGrowths == null)
				cktGrowths = new TreeSet<CktGrowth>();
			return cktGrowths;
		}
		return CktGrowth.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktGrowth(CktGrowth cktGrowth)throws java.sql.SQLException{
		cktGrowth.setPlanyear(getPlanyear());
		if(isNewInstance() || cktGrowths != null)
			getCktGrowths().add(cktGrowth);
		else
			cktGrowth.insert();
	}
	public void removeCktGrowth(CktGrowth cktGrowth)throws java.sql.SQLException{
		if(isNewInstance() || cktGrowths != null)
			getCktGrowths().remove(cktGrowth);
		else
			cktGrowth.delete();
	}
	public Collection<CktSwt> getCktSwts()throws java.sql.SQLException{
		if(isNewInstance() || cktSwts != null){
			if(cktSwts == null)
				cktSwts = new TreeSet<CktSwt>();
			return cktSwts;
		}
		return CktSwt.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktSwt(CktSwt cktSwt)throws java.sql.SQLException{
		cktSwt.setPlanyear(getPlanyear());
		if(isNewInstance() || cktSwts != null)
			getCktSwts().add(cktSwt);
		else
			cktSwt.insert();
	}
	public void removeCktSwt(CktSwt cktSwt)throws java.sql.SQLException{
		if(isNewInstance() || cktSwts != null)
			getCktSwts().remove(cktSwt);
		else
			cktSwt.delete();
	}
	public Collection<CktTrans> getCktTranss()throws java.sql.SQLException{
		if(isNewInstance() || cktTranss != null){
			if(cktTranss == null)
				cktTranss = new TreeSet<CktTrans>();
			return cktTranss;
		}
		return CktTrans.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktTrans(CktTrans cktTrans)throws java.sql.SQLException{
		cktTrans.setPlanyear(getPlanyear());
		if(isNewInstance() || cktTranss != null)
			getCktTranss().add(cktTrans);
		else
			cktTrans.insert();
	}
	public void removeCktTrans(CktTrans cktTrans)throws java.sql.SQLException{
		if(isNewInstance() || cktTranss != null)
			getCktTranss().remove(cktTrans);
		else
			cktTrans.delete();
	}
	public Collection<CktTransN1> getCktTransN1s()throws java.sql.SQLException{
		if(isNewInstance() || cktTransN1s != null){
			if(cktTransN1s == null)
				cktTransN1s = new TreeSet<CktTransN1>();
			return cktTransN1s;
		}
		return CktTransN1.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktTransN1(CktTransN1 cktTransN1)throws java.sql.SQLException{
		cktTransN1.setPlanyear(getPlanyear());
		if(isNewInstance() || cktTransN1s != null)
			getCktTransN1s().add(cktTransN1);
		else
			cktTransN1.insert();
	}
	public void removeCktTransN1(CktTransN1 cktTransN1)throws java.sql.SQLException{
		if(isNewInstance() || cktTransN1s != null)
			getCktTransN1s().remove(cktTransN1);
		else
			cktTransN1.delete();
	}
	public Collection<CktVar> getCktVars()throws java.sql.SQLException{
		if(isNewInstance() || cktVars != null){
			if(cktVars == null)
				cktVars = new TreeSet<CktVar>();
			return cktVars;
		}
		return CktVar.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktVar(CktVar cktVar)throws java.sql.SQLException{
		cktVar.setPlanyear(getPlanyear());
		if(isNewInstance() || cktVars != null)
			getCktVars().add(cktVar);
		else
			cktVar.insert();
	}
	public void removeCktVar(CktVar cktVar)throws java.sql.SQLException{
		if(isNewInstance() || cktVars != null)
			getCktVars().remove(cktVar);
		else
			cktVar.delete();
	}
	public Collection<CktYear> getCktYears()throws java.sql.SQLException{
		if(isNewInstance() || cktYears != null){
			if(cktYears == null)
				cktYears = new TreeSet<CktYear>();
			return cktYears;
		}
		return CktYear.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCktYear(CktYear cktYear)throws java.sql.SQLException{
		cktYear.setPlanyear(getPlanyear());
		if(isNewInstance() || cktYears != null)
			getCktYears().add(cktYear);
		else
			cktYear.insert();
	}
	public void removeCktYear(CktYear cktYear)throws java.sql.SQLException{
		if(isNewInstance() || cktYears != null)
			getCktYears().remove(cktYear);
		else
			cktYear.delete();
	}
	public Collection<Cont> getConts()throws java.sql.SQLException{
		if(isNewInstance() || conts != null){
			if(conts == null)
				conts = new TreeSet<Cont>();
			return conts;
		}
		return Cont.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCont(Cont cont)throws java.sql.SQLException{
		cont.setPlanyear(getPlanyear());
		if(isNewInstance() || conts != null)
			getConts().add(cont);
		else
			cont.insert();
	}
	public void removeCont(Cont cont)throws java.sql.SQLException{
		if(isNewInstance() || conts != null)
			getConts().remove(cont);
		else
			cont.delete();
	}
	public Collection<Criteria> getCriterias()throws java.sql.SQLException{
		if(isNewInstance() || criterias != null){
			if(criterias == null)
				criterias = new TreeSet<Criteria>();
			return criterias;
		}
		return Criteria.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCriteria(Criteria criteria)throws java.sql.SQLException{
		criteria.setPlanyear(getPlanyear());
		if(isNewInstance() || criterias != null)
			getCriterias().add(criteria);
		else
			criteria.insert();
	}
	public void removeCriteria(Criteria criteria)throws java.sql.SQLException{
		if(isNewInstance() || criterias != null)
			getCriterias().remove(criteria);
		else
			criteria.delete();
	}
	public Collection<CriteriaWs> getCriteriaWss()throws java.sql.SQLException{
		if(isNewInstance() || criteriaWss != null){
			if(criteriaWss == null)
				criteriaWss = new TreeSet<CriteriaWs>();
			return criteriaWss;
		}
		return CriteriaWs.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCriteriaWs(CriteriaWs criteriaWs)throws java.sql.SQLException{
		criteriaWs.setPlanyear(getPlanyear());
		if(isNewInstance() || criteriaWss != null)
			getCriteriaWss().add(criteriaWs);
		else
			criteriaWs.insert();
	}
	public void removeCriteriaWs(CriteriaWs criteriaWs)throws java.sql.SQLException{
		if(isNewInstance() || criteriaWss != null)
			getCriteriaWss().remove(criteriaWs);
		else
			criteriaWs.delete();
	}
	public Collection<CritExcept> getCritExcepts()throws java.sql.SQLException{
		if(isNewInstance() || critExcepts != null){
			if(critExcepts == null)
				critExcepts = new TreeSet<CritExcept>();
			return critExcepts;
		}
		return CritExcept.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCritExcept(CritExcept critExcept)throws java.sql.SQLException{
		critExcept.setPlanyear(getPlanyear());
		if(isNewInstance() || critExcepts != null)
			getCritExcepts().add(critExcept);
		else
			critExcept.insert();
	}
	public void removeCritExcept(CritExcept critExcept)throws java.sql.SQLException{
		if(isNewInstance() || critExcepts != null)
			getCritExcepts().remove(critExcept);
		else
			critExcept.delete();
	}
	public Collection<Cust> getCusts()throws java.sql.SQLException{
		if(isNewInstance() || custs != null){
			if(custs == null)
				custs = new TreeSet<Cust>();
			return custs;
		}
		return Cust.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addCust(Cust cust)throws java.sql.SQLException{
		cust.setPlanyear(getPlanyear());
		if(isNewInstance() || custs != null)
			getCusts().add(cust);
		else
			cust.insert();
	}
	public void removeCust(Cust cust)throws java.sql.SQLException{
		if(isNewInstance() || custs != null)
			getCusts().remove(cust);
		else
			cust.delete();
	}
	public Collection<DepartmentYear> getDepartmentYears()throws java.sql.SQLException{
		if(isNewInstance() || departmentYears != null){
			if(departmentYears == null)
				departmentYears = new TreeSet<DepartmentYear>();
			return departmentYears;
		}
		return DepartmentYear.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addDepartmentYear(DepartmentYear departmentYear)throws java.sql.SQLException{
		departmentYear.setPlanyear(getPlanyear());
		if(isNewInstance() || departmentYears != null)
			getDepartmentYears().add(departmentYear);
		else
			departmentYear.insert();
	}
	public void removeDepartmentYear(DepartmentYear departmentYear)throws java.sql.SQLException{
		if(isNewInstance() || departmentYears != null)
			getDepartmentYears().remove(departmentYear);
		else
			departmentYear.delete();
	}
	public Collection<DgDerat> getDgDerats()throws java.sql.SQLException{
		if(isNewInstance() || dgDerats != null){
			if(dgDerats == null)
				dgDerats = new TreeSet<DgDerat>();
			return dgDerats;
		}
		return DgDerat.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addDgDerat(DgDerat dgDerat)throws java.sql.SQLException{
		dgDerat.setPlanyear(getPlanyear());
		if(isNewInstance() || dgDerats != null)
			getDgDerats().add(dgDerat);
		else
			dgDerat.insert();
	}
	public void removeDgDerat(DgDerat dgDerat)throws java.sql.SQLException{
		if(isNewInstance() || dgDerats != null)
			getDgDerats().remove(dgDerat);
		else
			dgDerat.delete();
	}
	public Collection<District> getDistricts()throws java.sql.SQLException{
		if(isNewInstance() || districts != null){
			if(districts == null)
				districts = new TreeSet<District>();
			return districts;
		}
		return District.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addDistrict(District district)throws java.sql.SQLException{
		district.setPlanyear(getPlanyear());
		if(isNewInstance() || districts != null)
			getDistricts().add(district);
		else
			district.insert();
	}
	public void removeDistrict(District district)throws java.sql.SQLException{
		if(isNewInstance() || districts != null)
			getDistricts().remove(district);
		else
			district.delete();
	}
	public Collection<Duct> getDucts()throws java.sql.SQLException{
		if(isNewInstance() || ducts != null){
			if(ducts == null)
				ducts = new TreeSet<Duct>();
			return ducts;
		}
		return Duct.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addDuct(Duct duct)throws java.sql.SQLException{
		duct.setPlanyear(getPlanyear());
		if(isNewInstance() || ducts != null)
			getDucts().add(duct);
		else
			duct.insert();
	}
	public void removeDuct(Duct duct)throws java.sql.SQLException{
		if(isNewInstance() || ducts != null)
			getDucts().remove(duct);
		else
			duct.delete();
	}
	public Collection<DuctBank> getDuctBanks()throws java.sql.SQLException{
		if(isNewInstance() || ductBanks != null){
			if(ductBanks == null)
				ductBanks = new TreeSet<DuctBank>();
			return ductBanks;
		}
		return DuctBank.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addDuctBank(DuctBank ductBank)throws java.sql.SQLException{
		ductBank.setPlanyear(getPlanyear());
		if(isNewInstance() || ductBanks != null)
			getDuctBanks().add(ductBank);
		else
			ductBank.insert();
	}
	public void removeDuctBank(DuctBank ductBank)throws java.sql.SQLException{
		if(isNewInstance() || ductBanks != null)
			getDuctBanks().remove(ductBank);
		else
			ductBank.delete();
	}
	public Collection<DuctBankFile> getDuctBankFiles()throws java.sql.SQLException{
		if(isNewInstance() || ductBankFiles != null){
			if(ductBankFiles == null)
				ductBankFiles = new TreeSet<DuctBankFile>();
			return ductBankFiles;
		}
		return DuctBankFile.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addDuctBankFile(DuctBankFile ductBankFile)throws java.sql.SQLException{
		ductBankFile.setPlanyear(getPlanyear());
		if(isNewInstance() || ductBankFiles != null)
			getDuctBankFiles().add(ductBankFile);
		else
			ductBankFile.insert();
	}
	public void removeDuctBankFile(DuctBankFile ductBankFile)throws java.sql.SQLException{
		if(isNewInstance() || ductBankFiles != null)
			getDuctBankFiles().remove(ductBankFile);
		else
			ductBankFile.delete();
	}
	public Collection<Elem> getElems()throws java.sql.SQLException{
		if(isNewInstance() || elems != null){
			if(elems == null)
				elems = new TreeSet<Elem>();
			return elems;
		}
		return Elem.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addElem(Elem elem)throws java.sql.SQLException{
		elem.setPlanyear(getPlanyear());
		if(isNewInstance() || elems != null)
			getElems().add(elem);
		else
			elem.insert();
	}
	public void removeElem(Elem elem)throws java.sql.SQLException{
		if(isNewInstance() || elems != null)
			getElems().remove(elem);
		else
			elem.delete();
	}
	public Collection<Flag> getFlags()throws java.sql.SQLException{
		if(isNewInstance() || flags != null){
			if(flags == null)
				flags = new TreeSet<Flag>();
			return flags;
		}
		return Flag.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addFlag(Flag flag)throws java.sql.SQLException{
		flag.setPlanyear(getPlanyear());
		if(isNewInstance() || flags != null)
			getFlags().add(flag);
		else
			flag.insert();
	}
	public void removeFlag(Flag flag)throws java.sql.SQLException{
		if(isNewInstance() || flags != null)
			getFlags().remove(flag);
		else
			flag.delete();
	}
	public Collection<GrowthType> getGrowthTypes()throws java.sql.SQLException{
		if(isNewInstance() || growthTypes != null){
			if(growthTypes == null)
				growthTypes = new TreeSet<GrowthType>();
			return growthTypes;
		}
		return GrowthType.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addGrowthType(GrowthType growthType)throws java.sql.SQLException{
		growthType.setPlanyear(getPlanyear());
		if(isNewInstance() || growthTypes != null)
			getGrowthTypes().add(growthType);
		else
			growthType.insert();
	}
	public void removeGrowthType(GrowthType growthType)throws java.sql.SQLException{
		if(isNewInstance() || growthTypes != null)
			getGrowthTypes().remove(growthType);
		else
			growthType.delete();
	}
	public Collection<LgProj> getLgProjs()throws java.sql.SQLException{
		if(isNewInstance() || lgProjs != null){
			if(lgProjs == null)
				lgProjs = new TreeSet<LgProj>();
			return lgProjs;
		}
		return LgProj.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addLgProj(LgProj lgProj)throws java.sql.SQLException{
		lgProj.setPlanyear(getPlanyear());
		if(isNewInstance() || lgProjs != null)
			getLgProjs().add(lgProj);
		else
			lgProj.insert();
	}
	public void removeLgProj(LgProj lgProj)throws java.sql.SQLException{
		if(isNewInstance() || lgProjs != null)
			getLgProjs().remove(lgProj);
		else
			lgProj.delete();
	}
	public Collection<LgProjDriver> getLgProjDrivers()throws java.sql.SQLException{
		if(isNewInstance() || lgProjDrivers != null){
			if(lgProjDrivers == null)
				lgProjDrivers = new TreeSet<LgProjDriver>();
			return lgProjDrivers;
		}
		return LgProjDriver.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addLgProjDriver(LgProjDriver lgProjDriver)throws java.sql.SQLException{
		lgProjDriver.setPlanyear(getPlanyear());
		if(isNewInstance() || lgProjDrivers != null)
			getLgProjDrivers().add(lgProjDriver);
		else
			lgProjDriver.insert();
	}
	public void removeLgProjDriver(LgProjDriver lgProjDriver)throws java.sql.SQLException{
		if(isNewInstance() || lgProjDrivers != null)
			getLgProjDrivers().remove(lgProjDriver);
		else
			lgProjDriver.delete();
	}
	public Collection<LgProjFile> getLgProjFiles()throws java.sql.SQLException{
		if(isNewInstance() || lgProjFiles != null){
			if(lgProjFiles == null)
				lgProjFiles = new TreeSet<LgProjFile>();
			return lgProjFiles;
		}
		return LgProjFile.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addLgProjFile(LgProjFile lgProjFile)throws java.sql.SQLException{
		lgProjFile.setPlanyear(getPlanyear());
		if(isNewInstance() || lgProjFiles != null)
			getLgProjFiles().add(lgProjFile);
		else
			lgProjFile.insert();
	}
	public void removeLgProjFile(LgProjFile lgProjFile)throws java.sql.SQLException{
		if(isNewInstance() || lgProjFiles != null)
			getLgProjFiles().remove(lgProjFile);
		else
			lgProjFile.delete();
	}
	public Collection<LgProjGis> getLgProjGiss()throws java.sql.SQLException{
		if(isNewInstance() || lgProjGiss != null){
			if(lgProjGiss == null)
				lgProjGiss = new TreeSet<LgProjGis>();
			return lgProjGiss;
		}
		return LgProjGis.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addLgProjGis(LgProjGis lgProjGis)throws java.sql.SQLException{
		lgProjGis.setPlanyear(getPlanyear());
		if(isNewInstance() || lgProjGiss != null)
			getLgProjGiss().add(lgProjGis);
		else
			lgProjGis.insert();
	}
	public void removeLgProjGis(LgProjGis lgProjGis)throws java.sql.SQLException{
		if(isNewInstance() || lgProjGiss != null)
			getLgProjGiss().remove(lgProjGis);
		else
			lgProjGis.delete();
	}
	public Collection<MvaFactor> getMvaFactors()throws java.sql.SQLException{
		if(isNewInstance() || mvaFactors != null){
			if(mvaFactors == null)
				mvaFactors = new TreeSet<MvaFactor>();
			return mvaFactors;
		}
		return MvaFactor.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addMvaFactor(MvaFactor mvaFactor)throws java.sql.SQLException{
		mvaFactor.setPlanyear(getPlanyear());
		if(isNewInstance() || mvaFactors != null)
			getMvaFactors().add(mvaFactor);
		else
			mvaFactor.insert();
	}
	public void removeMvaFactor(MvaFactor mvaFactor)throws java.sql.SQLException{
		if(isNewInstance() || mvaFactors != null)
			getMvaFactors().remove(mvaFactor);
		else
			mvaFactor.delete();
	}
	public Collection<Pif> getPifs()throws java.sql.SQLException{
		if(isNewInstance() || pifs != null){
			if(pifs == null)
				pifs = new TreeSet<Pif>();
			return pifs;
		}
		return Pif.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPif(Pif pif)throws java.sql.SQLException{
		pif.setPlanyear(getPlanyear());
		if(isNewInstance() || pifs != null)
			getPifs().add(pif);
		else
			pif.insert();
	}
	public void removePif(Pif pif)throws java.sql.SQLException{
		if(isNewInstance() || pifs != null)
			getPifs().remove(pif);
		else
			pif.delete();
	}
	public Collection<PifBi> getPifBis()throws java.sql.SQLException{
		if(isNewInstance() || pifBis != null){
			if(pifBis == null)
				pifBis = new TreeSet<PifBi>();
			return pifBis;
		}
		return PifBi.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifBi(PifBi pifBi)throws java.sql.SQLException{
		pifBi.setPlanyear(getPlanyear());
		if(isNewInstance() || pifBis != null)
			getPifBis().add(pifBi);
		else
			pifBi.insert();
	}
	public void removePifBi(PifBi pifBi)throws java.sql.SQLException{
		if(isNewInstance() || pifBis != null)
			getPifBis().remove(pifBi);
		else
			pifBi.delete();
	}
	public Collection<PifBudget> getPifBudgets()throws java.sql.SQLException{
		if(isNewInstance() || pifBudgets != null){
			if(pifBudgets == null)
				pifBudgets = new TreeSet<PifBudget>();
			return pifBudgets;
		}
		return PifBudget.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifBudget(PifBudget pifBudget)throws java.sql.SQLException{
		pifBudget.setPlanyear(getPlanyear());
		if(isNewInstance() || pifBudgets != null)
			getPifBudgets().add(pifBudget);
		else
			pifBudget.insert();
	}
	public void removePifBudget(PifBudget pifBudget)throws java.sql.SQLException{
		if(isNewInstance() || pifBudgets != null)
			getPifBudgets().remove(pifBudget);
		else
			pifBudget.delete();
	}
	public Collection<PifBudgetCat> getPifBudgetCats()throws java.sql.SQLException{
		if(isNewInstance() || pifBudgetCats != null){
			if(pifBudgetCats == null)
				pifBudgetCats = new TreeSet<PifBudgetCat>();
			return pifBudgetCats;
		}
		return PifBudgetCat.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifBudgetCat(PifBudgetCat pifBudgetCat)throws java.sql.SQLException{
		pifBudgetCat.setPlanyear(getPlanyear());
		if(isNewInstance() || pifBudgetCats != null)
			getPifBudgetCats().add(pifBudgetCat);
		else
			pifBudgetCat.insert();
	}
	public void removePifBudgetCat(PifBudgetCat pifBudgetCat)throws java.sql.SQLException{
		if(isNewInstance() || pifBudgetCats != null)
			getPifBudgetCats().remove(pifBudgetCat);
		else
			pifBudgetCat.delete();
	}
	public Collection<PifCategory> getPifCategorys()throws java.sql.SQLException{
		if(isNewInstance() || pifCategorys != null){
			if(pifCategorys == null)
				pifCategorys = new TreeSet<PifCategory>();
			return pifCategorys;
		}
		return PifCategory.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifCategory(PifCategory pifCategory)throws java.sql.SQLException{
		pifCategory.setPlanyear(getPlanyear());
		if(isNewInstance() || pifCategorys != null)
			getPifCategorys().add(pifCategory);
		else
			pifCategory.insert();
	}
	public void removePifCategory(PifCategory pifCategory)throws java.sql.SQLException{
		if(isNewInstance() || pifCategorys != null)
			getPifCategorys().remove(pifCategory);
		else
			pifCategory.delete();
	}
	public Collection<PifCktJust> getPifCktJusts()throws java.sql.SQLException{
		if(isNewInstance() || pifCktJusts != null){
			if(pifCktJusts == null)
				pifCktJusts = new TreeSet<PifCktJust>();
			return pifCktJusts;
		}
		return PifCktJust.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifCktJust(PifCktJust pifCktJust)throws java.sql.SQLException{
		pifCktJust.setPlanyear(getPlanyear());
		if(isNewInstance() || pifCktJusts != null)
			getPifCktJusts().add(pifCktJust);
		else
			pifCktJust.insert();
	}
	public void removePifCktJust(PifCktJust pifCktJust)throws java.sql.SQLException{
		if(isNewInstance() || pifCktJusts != null)
			getPifCktJusts().remove(pifCktJust);
		else
			pifCktJust.delete();
	}
	public Collection<PifCompRisk> getPifCompRisks()throws java.sql.SQLException{
		if(isNewInstance() || pifCompRisks != null){
			if(pifCompRisks == null)
				pifCompRisks = new TreeSet<PifCompRisk>();
			return pifCompRisks;
		}
		return PifCompRisk.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifCompRisk(PifCompRisk pifCompRisk)throws java.sql.SQLException{
		pifCompRisk.setPlanyear(getPlanyear());
		if(isNewInstance() || pifCompRisks != null)
			getPifCompRisks().add(pifCompRisk);
		else
			pifCompRisk.insert();
	}
	public void removePifCompRisk(PifCompRisk pifCompRisk)throws java.sql.SQLException{
		if(isNewInstance() || pifCompRisks != null)
			getPifCompRisks().remove(pifCompRisk);
		else
			pifCompRisk.delete();
	}
	public Collection<PifCrewType> getPifCrewTypes()throws java.sql.SQLException{
		if(isNewInstance() || pifCrewTypes != null){
			if(pifCrewTypes == null)
				pifCrewTypes = new TreeSet<PifCrewType>();
			return pifCrewTypes;
		}
		return PifCrewType.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifCrewType(PifCrewType pifCrewType)throws java.sql.SQLException{
		pifCrewType.setPlanyear(getPlanyear());
		if(isNewInstance() || pifCrewTypes != null)
			getPifCrewTypes().add(pifCrewType);
		else
			pifCrewType.insert();
	}
	public void removePifCrewType(PifCrewType pifCrewType)throws java.sql.SQLException{
		if(isNewInstance() || pifCrewTypes != null)
			getPifCrewTypes().remove(pifCrewType);
		else
			pifCrewType.delete();
	}
	public Collection<PifCustType> getPifCustTypes()throws java.sql.SQLException{
		if(isNewInstance() || pifCustTypes != null){
			if(pifCustTypes == null)
				pifCustTypes = new TreeSet<PifCustType>();
			return pifCustTypes;
		}
		return PifCustType.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifCustType(PifCustType pifCustType)throws java.sql.SQLException{
		pifCustType.setPlanyear(getPlanyear());
		if(isNewInstance() || pifCustTypes != null)
			getPifCustTypes().add(pifCustType);
		else
			pifCustType.insert();
	}
	public void removePifCustType(PifCustType pifCustType)throws java.sql.SQLException{
		if(isNewInstance() || pifCustTypes != null)
			getPifCustTypes().remove(pifCustType);
		else
			pifCustType.delete();
	}
	public Collection<PifEst> getPifEsts()throws java.sql.SQLException{
		if(isNewInstance() || pifEsts != null){
			if(pifEsts == null)
				pifEsts = new TreeSet<PifEst>();
			return pifEsts;
		}
		return PifEst.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifEst(PifEst pifEst)throws java.sql.SQLException{
		pifEst.setPlanyear(getPlanyear());
		if(isNewInstance() || pifEsts != null)
			getPifEsts().add(pifEst);
		else
			pifEst.insert();
	}
	public void removePifEst(PifEst pifEst)throws java.sql.SQLException{
		if(isNewInstance() || pifEsts != null)
			getPifEsts().remove(pifEst);
		else
			pifEst.delete();
	}
	public Collection<PifGwCat> getPifGwCats()throws java.sql.SQLException{
		if(isNewInstance() || pifGwCats != null){
			if(pifGwCats == null)
				pifGwCats = new TreeSet<PifGwCat>();
			return pifGwCats;
		}
		return PifGwCat.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifGwCat(PifGwCat pifGwCat)throws java.sql.SQLException{
		pifGwCat.setPlanyear(getPlanyear());
		if(isNewInstance() || pifGwCats != null)
			getPifGwCats().add(pifGwCat);
		else
			pifGwCat.insert();
	}
	public void removePifGwCat(PifGwCat pifGwCat)throws java.sql.SQLException{
		if(isNewInstance() || pifGwCats != null)
			getPifGwCats().remove(pifGwCat);
		else
			pifGwCat.delete();
	}
	public Collection<PifImpactType> getPifImpactTypes()throws java.sql.SQLException{
		if(isNewInstance() || pifImpactTypes != null){
			if(pifImpactTypes == null)
				pifImpactTypes = new TreeSet<PifImpactType>();
			return pifImpactTypes;
		}
		return PifImpactType.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifImpactType(PifImpactType pifImpactType)throws java.sql.SQLException{
		pifImpactType.setPlanyear(getPlanyear());
		if(isNewInstance() || pifImpactTypes != null)
			getPifImpactTypes().add(pifImpactType);
		else
			pifImpactType.insert();
	}
	public void removePifImpactType(PifImpactType pifImpactType)throws java.sql.SQLException{
		if(isNewInstance() || pifImpactTypes != null)
			getPifImpactTypes().remove(pifImpactType);
		else
			pifImpactType.delete();
	}
	public Collection<PifImpactValue> getPifImpactValues()throws java.sql.SQLException{
		if(isNewInstance() || pifImpactValues != null){
			if(pifImpactValues == null)
				pifImpactValues = new TreeSet<PifImpactValue>();
			return pifImpactValues;
		}
		return PifImpactValue.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifImpactValue(PifImpactValue pifImpactValue)throws java.sql.SQLException{
		pifImpactValue.setPlanyear(getPlanyear());
		if(isNewInstance() || pifImpactValues != null)
			getPifImpactValues().add(pifImpactValue);
		else
			pifImpactValue.insert();
	}
	public void removePifImpactValue(PifImpactValue pifImpactValue)throws java.sql.SQLException{
		if(isNewInstance() || pifImpactValues != null)
			getPifImpactValues().remove(pifImpactValue);
		else
			pifImpactValue.delete();
	}
	public Collection<PifLabor> getPifLabors()throws java.sql.SQLException{
		if(isNewInstance() || pifLabors != null){
			if(pifLabors == null)
				pifLabors = new TreeSet<PifLabor>();
			return pifLabors;
		}
		return PifLabor.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifLabor(PifLabor pifLabor)throws java.sql.SQLException{
		pifLabor.setPlanyear(getPlanyear());
		if(isNewInstance() || pifLabors != null)
			getPifLabors().add(pifLabor);
		else
			pifLabor.insert();
	}
	public void removePifLabor(PifLabor pifLabor)throws java.sql.SQLException{
		if(isNewInstance() || pifLabors != null)
			getPifLabors().remove(pifLabor);
		else
			pifLabor.delete();
	}
	public Collection<PifLineJust> getPifLineJusts()throws java.sql.SQLException{
		if(isNewInstance() || pifLineJusts != null){
			if(pifLineJusts == null)
				pifLineJusts = new TreeSet<PifLineJust>();
			return pifLineJusts;
		}
		return PifLineJust.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifLineJust(PifLineJust pifLineJust)throws java.sql.SQLException{
		pifLineJust.setPlanyear(getPlanyear());
		if(isNewInstance() || pifLineJusts != null)
			getPifLineJusts().add(pifLineJust);
		else
			pifLineJust.insert();
	}
	public void removePifLineJust(PifLineJust pifLineJust)throws java.sql.SQLException{
		if(isNewInstance() || pifLineJusts != null)
			getPifLineJusts().remove(pifLineJust);
		else
			pifLineJust.delete();
	}
	public Collection<PifMajorCustType> getPifMajorCustTypes()throws java.sql.SQLException{
		if(isNewInstance() || pifMajorCustTypes != null){
			if(pifMajorCustTypes == null)
				pifMajorCustTypes = new TreeSet<PifMajorCustType>();
			return pifMajorCustTypes;
		}
		return PifMajorCustType.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifMajorCustType(PifMajorCustType pifMajorCustType)throws java.sql.SQLException{
		pifMajorCustType.setPlanyear(getPlanyear());
		if(isNewInstance() || pifMajorCustTypes != null)
			getPifMajorCustTypes().add(pifMajorCustType);
		else
			pifMajorCustType.insert();
	}
	public void removePifMajorCustType(PifMajorCustType pifMajorCustType)throws java.sql.SQLException{
		if(isNewInstance() || pifMajorCustTypes != null)
			getPifMajorCustTypes().remove(pifMajorCustType);
		else
			pifMajorCustType.delete();
	}
	public Collection<PifPriority> getPifPrioritys()throws java.sql.SQLException{
		if(isNewInstance() || pifPrioritys != null){
			if(pifPrioritys == null)
				pifPrioritys = new TreeSet<PifPriority>();
			return pifPrioritys;
		}
		return PifPriority.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifPriority(PifPriority pifPriority)throws java.sql.SQLException{
		pifPriority.setPlanyear(getPlanyear());
		if(isNewInstance() || pifPrioritys != null)
			getPifPrioritys().add(pifPriority);
		else
			pifPriority.insert();
	}
	public void removePifPriority(PifPriority pifPriority)throws java.sql.SQLException{
		if(isNewInstance() || pifPrioritys != null)
			getPifPrioritys().remove(pifPriority);
		else
			pifPriority.delete();
	}
	public Collection<PifProjDriver> getPifProjDrivers()throws java.sql.SQLException{
		if(isNewInstance() || pifProjDrivers != null){
			if(pifProjDrivers == null)
				pifProjDrivers = new TreeSet<PifProjDriver>();
			return pifProjDrivers;
		}
		return PifProjDriver.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifProjDriver(PifProjDriver pifProjDriver)throws java.sql.SQLException{
		pifProjDriver.setPlanyear(getPlanyear());
		if(isNewInstance() || pifProjDrivers != null)
			getPifProjDrivers().add(pifProjDriver);
		else
			pifProjDriver.insert();
	}
	public void removePifProjDriver(PifProjDriver pifProjDriver)throws java.sql.SQLException{
		if(isNewInstance() || pifProjDrivers != null)
			getPifProjDrivers().remove(pifProjDriver);
		else
			pifProjDriver.delete();
	}
	public Collection<PifStatus> getPifStatuss()throws java.sql.SQLException{
		if(isNewInstance() || pifStatuss != null){
			if(pifStatuss == null)
				pifStatuss = new TreeSet<PifStatus>();
			return pifStatuss;
		}
		return PifStatus.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifStatus(PifStatus pifStatus)throws java.sql.SQLException{
		pifStatus.setPlanyear(getPlanyear());
		if(isNewInstance() || pifStatuss != null)
			getPifStatuss().add(pifStatus);
		else
			pifStatus.insert();
	}
	public void removePifStatus(PifStatus pifStatus)throws java.sql.SQLException{
		if(isNewInstance() || pifStatuss != null)
			getPifStatuss().remove(pifStatus);
		else
			pifStatus.delete();
	}
	public Collection<PifSubJust> getPifSubJusts()throws java.sql.SQLException{
		if(isNewInstance() || pifSubJusts != null){
			if(pifSubJusts == null)
				pifSubJusts = new TreeSet<PifSubJust>();
			return pifSubJusts;
		}
		return PifSubJust.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifSubJust(PifSubJust pifSubJust)throws java.sql.SQLException{
		pifSubJust.setPlanyear(getPlanyear());
		if(isNewInstance() || pifSubJusts != null)
			getPifSubJusts().add(pifSubJust);
		else
			pifSubJust.insert();
	}
	public void removePifSubJust(PifSubJust pifSubJust)throws java.sql.SQLException{
		if(isNewInstance() || pifSubJusts != null)
			getPifSubJusts().remove(pifSubJust);
		else
			pifSubJust.delete();
	}
	public Collection<PifVoltJust> getPifVoltJusts()throws java.sql.SQLException{
		if(isNewInstance() || pifVoltJusts != null){
			if(pifVoltJusts == null)
				pifVoltJusts = new TreeSet<PifVoltJust>();
			return pifVoltJusts;
		}
		return PifVoltJust.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifVoltJust(PifVoltJust pifVoltJust)throws java.sql.SQLException{
		pifVoltJust.setPlanyear(getPlanyear());
		if(isNewInstance() || pifVoltJusts != null)
			getPifVoltJusts().add(pifVoltJust);
		else
			pifVoltJust.insert();
	}
	public void removePifVoltJust(PifVoltJust pifVoltJust)throws java.sql.SQLException{
		if(isNewInstance() || pifVoltJusts != null)
			getPifVoltJusts().remove(pifVoltJust);
		else
			pifVoltJust.delete();
	}
	public Collection<PifWo> getPifWos()throws java.sql.SQLException{
		if(isNewInstance() || pifWos != null){
			if(pifWos == null)
				pifWos = new TreeSet<PifWo>();
			return pifWos;
		}
		return PifWo.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifWo(PifWo pifWo)throws java.sql.SQLException{
		pifWo.setPlanyear(getPlanyear());
		if(isNewInstance() || pifWos != null)
			getPifWos().add(pifWo);
		else
			pifWo.insert();
	}
	public void removePifWo(PifWo pifWo)throws java.sql.SQLException{
		if(isNewInstance() || pifWos != null)
			getPifWos().remove(pifWo);
		else
			pifWo.delete();
	}
	public Collection<PifWoImpact> getPifWoImpacts()throws java.sql.SQLException{
		if(isNewInstance() || pifWoImpacts != null){
			if(pifWoImpacts == null)
				pifWoImpacts = new TreeSet<PifWoImpact>();
			return pifWoImpacts;
		}
		return PifWoImpact.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPifWoImpact(PifWoImpact pifWoImpact)throws java.sql.SQLException{
		pifWoImpact.setPlanyear(getPlanyear());
		if(isNewInstance() || pifWoImpacts != null)
			getPifWoImpacts().add(pifWoImpact);
		else
			pifWoImpact.insert();
	}
	public void removePifWoImpact(PifWoImpact pifWoImpact)throws java.sql.SQLException{
		if(isNewInstance() || pifWoImpacts != null)
			getPifWoImpacts().remove(pifWoImpact);
		else
			pifWoImpact.delete();
	}
	public Collection<PqEquInv> getPqEquInvs()throws java.sql.SQLException{
		if(isNewInstance() || pqEquInvs != null){
			if(pqEquInvs == null)
				pqEquInvs = new TreeSet<PqEquInv>();
			return pqEquInvs;
		}
		return PqEquInv.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPqEquInv(PqEquInv pqEquInv)throws java.sql.SQLException{
		pqEquInv.setPlanyear(getPlanyear());
		if(isNewInstance() || pqEquInvs != null)
			getPqEquInvs().add(pqEquInv);
		else
			pqEquInv.insert();
	}
	public void removePqEquInv(PqEquInv pqEquInv)throws java.sql.SQLException{
		if(isNewInstance() || pqEquInvs != null)
			getPqEquInvs().remove(pqEquInv);
		else
			pqEquInv.delete();
	}
	public Collection<PqTroubleLog> getPqTroubleLogs()throws java.sql.SQLException{
		if(isNewInstance() || pqTroubleLogs != null){
			if(pqTroubleLogs == null)
				pqTroubleLogs = new TreeSet<PqTroubleLog>();
			return pqTroubleLogs;
		}
		return PqTroubleLog.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addPqTroubleLog(PqTroubleLog pqTroubleLog)throws java.sql.SQLException{
		pqTroubleLog.setPlanyear(getPlanyear());
		if(isNewInstance() || pqTroubleLogs != null)
			getPqTroubleLogs().add(pqTroubleLog);
		else
			pqTroubleLog.insert();
	}
	public void removePqTroubleLog(PqTroubleLog pqTroubleLog)throws java.sql.SQLException{
		if(isNewInstance() || pqTroubleLogs != null)
			getPqTroubleLogs().remove(pqTroubleLog);
		else
			pqTroubleLog.delete();
	}
	public Collection<Prog> getProgs()throws java.sql.SQLException{
		if(isNewInstance() || progs != null){
			if(progs == null)
				progs = new TreeSet<Prog>();
			return progs;
		}
		return Prog.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addProg(Prog prog)throws java.sql.SQLException{
		prog.setPlanyear(getPlanyear());
		if(isNewInstance() || progs != null)
			getProgs().add(prog);
		else
			prog.insert();
	}
	public void removeProg(Prog prog)throws java.sql.SQLException{
		if(isNewInstance() || progs != null)
			getProgs().remove(prog);
		else
			prog.delete();
	}
	public Collection<ProgElem> getProgElems()throws java.sql.SQLException{
		if(isNewInstance() || progElems != null){
			if(progElems == null)
				progElems = new TreeSet<ProgElem>();
			return progElems;
		}
		return ProgElem.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addProgElem(ProgElem progElem)throws java.sql.SQLException{
		progElem.setPlanyear(getPlanyear());
		if(isNewInstance() || progElems != null)
			getProgElems().add(progElem);
		else
			progElem.insert();
	}
	public void removeProgElem(ProgElem progElem)throws java.sql.SQLException{
		if(isNewInstance() || progElems != null)
			getProgElems().remove(progElem);
		else
			progElem.delete();
	}
	public Collection<ProgExcept> getProgExcepts()throws java.sql.SQLException{
		if(isNewInstance() || progExcepts != null){
			if(progExcepts == null)
				progExcepts = new TreeSet<ProgExcept>();
			return progExcepts;
		}
		return ProgExcept.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addProgExcept(ProgExcept progExcept)throws java.sql.SQLException{
		progExcept.setPlanyear(getPlanyear());
		if(isNewInstance() || progExcepts != null)
			getProgExcepts().add(progExcept);
		else
			progExcept.insert();
	}
	public void removeProgExcept(ProgExcept progExcept)throws java.sql.SQLException{
		if(isNewInstance() || progExcepts != null)
			getProgExcepts().remove(progExcept);
		else
			progExcept.delete();
	}
	public Collection<Proj> getProjs()throws java.sql.SQLException{
		if(isNewInstance() || projs != null){
			if(projs == null)
				projs = new TreeSet<Proj>();
			return projs;
		}
		return Proj.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addProj(Proj proj)throws java.sql.SQLException{
		proj.setPlanyear(getPlanyear());
		if(isNewInstance() || projs != null)
			getProjs().add(proj);
		else
			proj.insert();
	}
	public void removeProj(Proj proj)throws java.sql.SQLException{
		if(isNewInstance() || projs != null)
			getProjs().remove(proj);
		else
			proj.delete();
	}
	public Collection<ProjElem> getProjElems()throws java.sql.SQLException{
		if(isNewInstance() || projElems != null){
			if(projElems == null)
				projElems = new TreeSet<ProjElem>();
			return projElems;
		}
		return ProjElem.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addProjElem(ProjElem projElem)throws java.sql.SQLException{
		projElem.setPlanyear(getPlanyear());
		if(isNewInstance() || projElems != null)
			getProjElems().add(projElem);
		else
			projElem.insert();
	}
	public void removeProjElem(ProjElem projElem)throws java.sql.SQLException{
		if(isNewInstance() || projElems != null)
			getProjElems().remove(projElem);
		else
			projElem.delete();
	}
	public Collection<ProjElemCost> getProjElemCosts()throws java.sql.SQLException{
		if(isNewInstance() || projElemCosts != null){
			if(projElemCosts == null)
				projElemCosts = new TreeSet<ProjElemCost>();
			return projElemCosts;
		}
		return ProjElemCost.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addProjElemCost(ProjElemCost projElemCost)throws java.sql.SQLException{
		projElemCost.setPlanyear(getPlanyear());
		if(isNewInstance() || projElemCosts != null)
			getProjElemCosts().add(projElemCost);
		else
			projElemCost.insert();
	}
	public void removeProjElemCost(ProjElemCost projElemCost)throws java.sql.SQLException{
		if(isNewInstance() || projElemCosts != null)
			getProjElemCosts().remove(projElemCost);
		else
			projElemCost.delete();
	}
	public Collection<ProjElemCostYear> getProjElemCostYears()throws java.sql.SQLException{
		if(isNewInstance() || projElemCostYears != null){
			if(projElemCostYears == null)
				projElemCostYears = new TreeSet<ProjElemCostYear>();
			return projElemCostYears;
		}
		return ProjElemCostYear.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addProjElemCostYear(ProjElemCostYear projElemCostYear)throws java.sql.SQLException{
		projElemCostYear.setPlanyear(getPlanyear());
		if(isNewInstance() || projElemCostYears != null)
			getProjElemCostYears().add(projElemCostYear);
		else
			projElemCostYear.insert();
	}
	public void removeProjElemCostYear(ProjElemCostYear projElemCostYear)throws java.sql.SQLException{
		if(isNewInstance() || projElemCostYears != null)
			getProjElemCostYears().remove(projElemCostYear);
		else
			projElemCostYear.delete();
	}
	public Collection<RedbookScd> getRedbookScds()throws java.sql.SQLException{
		if(isNewInstance() || redbookScds != null){
			if(redbookScds == null)
				redbookScds = new TreeSet<RedbookScd>();
			return redbookScds;
		}
		return RedbookScd.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addRedbookScd(RedbookScd redbookScd)throws java.sql.SQLException{
		redbookScd.setPlanyear(getPlanyear());
		if(isNewInstance() || redbookScds != null)
			getRedbookScds().add(redbookScd);
		else
			redbookScd.insert();
	}
	public void removeRedbookScd(RedbookScd redbookScd)throws java.sql.SQLException{
		if(isNewInstance() || redbookScds != null)
			getRedbookScds().remove(redbookScd);
		else
			redbookScd.delete();
	}
	public Collection<Region> getRegions()throws java.sql.SQLException{
		if(isNewInstance() || regions != null){
			if(regions == null)
				regions = new TreeSet<Region>();
			return regions;
		}
		return Region.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addRegion(Region region)throws java.sql.SQLException{
		region.setPlanyear(getPlanyear());
		if(isNewInstance() || regions != null)
			getRegions().add(region);
		else
			region.insert();
	}
	public void removeRegion(Region region)throws java.sql.SQLException{
		if(isNewInstance() || regions != null)
			getRegions().remove(region);
		else
			region.delete();
	}
	public Collection<SceSimAlt> getSceSimAlts()throws java.sql.SQLException{
		if(isNewInstance() || sceSimAlts != null){
			if(sceSimAlts == null)
				sceSimAlts = new TreeSet<SceSimAlt>();
			return sceSimAlts;
		}
		return SceSimAlt.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSceSimAlt(SceSimAlt sceSimAlt)throws java.sql.SQLException{
		sceSimAlt.setPlanyear(getPlanyear());
		if(isNewInstance() || sceSimAlts != null)
			getSceSimAlts().add(sceSimAlt);
		else
			sceSimAlt.insert();
	}
	public void removeSceSimAlt(SceSimAlt sceSimAlt)throws java.sql.SQLException{
		if(isNewInstance() || sceSimAlts != null)
			getSceSimAlts().remove(sceSimAlt);
		else
			sceSimAlt.delete();
	}
	public Collection<Simulation> getSimulations()throws java.sql.SQLException{
		if(isNewInstance() || simulations != null){
			if(simulations == null)
				simulations = new TreeSet<Simulation>();
			return simulations;
		}
		return Simulation.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSimulation(Simulation simulation)throws java.sql.SQLException{
		simulation.setPlanyear(getPlanyear());
		if(isNewInstance() || simulations != null)
			getSimulations().add(simulation);
		else
			simulation.insert();
	}
	public void removeSimulation(Simulation simulation)throws java.sql.SQLException{
		if(isNewInstance() || simulations != null)
			getSimulations().remove(simulation);
		else
			simulation.delete();
	}
	public Collection<SimAlt> getSimAlts()throws java.sql.SQLException{
		if(isNewInstance() || simAlts != null){
			if(simAlts == null)
				simAlts = new TreeSet<SimAlt>();
			return simAlts;
		}
		return SimAlt.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSimAlt(SimAlt simAlt)throws java.sql.SQLException{
		simAlt.setPlanyear(getPlanyear());
		if(isNewInstance() || simAlts != null)
			getSimAlts().add(simAlt);
		else
			simAlt.insert();
	}
	public void removeSimAlt(SimAlt simAlt)throws java.sql.SQLException{
		if(isNewInstance() || simAlts != null)
			getSimAlts().remove(simAlt);
		else
			simAlt.delete();
	}
	public Collection<SimCkt> getSimCkts()throws java.sql.SQLException{
		if(isNewInstance() || simCkts != null){
			if(simCkts == null)
				simCkts = new TreeSet<SimCkt>();
			return simCkts;
		}
		return SimCkt.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSimCkt(SimCkt simCkt)throws java.sql.SQLException{
		simCkt.setPlanyear(getPlanyear());
		if(isNewInstance() || simCkts != null)
			getSimCkts().add(simCkt);
		else
			simCkt.insert();
	}
	public void removeSimCkt(SimCkt simCkt)throws java.sql.SQLException{
		if(isNewInstance() || simCkts != null)
			getSimCkts().remove(simCkt);
		else
			simCkt.delete();
	}
	public Collection<SimSub> getSimSubs()throws java.sql.SQLException{
		if(isNewInstance() || simSubs != null){
			if(simSubs == null)
				simSubs = new TreeSet<SimSub>();
			return simSubs;
		}
		return SimSub.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSimSub(SimSub simSub)throws java.sql.SQLException{
		simSub.setPlanyear(getPlanyear());
		if(isNewInstance() || simSubs != null)
			getSimSubs().add(simSub);
		else
			simSub.insert();
	}
	public void removeSimSub(SimSub simSub)throws java.sql.SQLException{
		if(isNewInstance() || simSubs != null)
			getSimSubs().remove(simSub);
		else
			simSub.delete();
	}
	public Collection<SimSys> getSimSyss()throws java.sql.SQLException{
		if(isNewInstance() || simSyss != null){
			if(simSyss == null)
				simSyss = new TreeSet<SimSys>();
			return simSyss;
		}
		return SimSys.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSimSys(SimSys simSys)throws java.sql.SQLException{
		simSys.setPlanyear(getPlanyear());
		if(isNewInstance() || simSyss != null)
			getSimSyss().add(simSys);
		else
			simSys.insert();
	}
	public void removeSimSys(SimSys simSys)throws java.sql.SQLException{
		if(isNewInstance() || simSyss != null)
			getSimSyss().remove(simSys);
		else
			simSys.delete();
	}
	public Collection<Stl> getStls()throws java.sql.SQLException{
		if(isNewInstance() || stls != null){
			if(stls == null)
				stls = new TreeSet<Stl>();
			return stls;
		}
		return Stl.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addStl(Stl stl)throws java.sql.SQLException{
		stl.setPlanyear(getPlanyear());
		if(isNewInstance() || stls != null)
			getStls().add(stl);
		else
			stl.insert();
	}
	public void removeStl(Stl stl)throws java.sql.SQLException{
		if(isNewInstance() || stls != null)
			getStls().remove(stl);
		else
			stl.delete();
	}
	public Collection<? extends Sub> getSubs()throws java.sql.SQLException{
		if(isNewInstance() || subs != null){
			if(subs == null)
				subs = new TreeSet<Sub>();
			return subs;
		}
		return Sub.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSub(Sub sub)throws java.sql.SQLException{
		sub.setPlanyear(getPlanyear());
		if(isNewInstance() || subs != null)
			//getSubs().add(sub)
			;
		else
			sub.insert();
	}
	public void removeSub(Sub sub)throws java.sql.SQLException{
		if(isNewInstance() || subs != null)
			getSubs().remove(sub);
		else
			sub.delete();
	}
	public Collection<SubCont> getSubConts()throws java.sql.SQLException{
		if(isNewInstance() || subConts != null){
			if(subConts == null)
				subConts = new TreeSet<SubCont>();
			return subConts;
		}
		return SubCont.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSubCont(SubCont subCont)throws java.sql.SQLException{
		subCont.setPlanyear(getPlanyear());
		if(isNewInstance() || subConts != null)
			getSubConts().add(subCont);
		else
			subCont.insert();
	}
	public void removeSubCont(SubCont subCont)throws java.sql.SQLException{
		if(isNewInstance() || subConts != null)
			getSubConts().remove(subCont);
		else
			subCont.delete();
	}
	public Collection<SubContShed> getSubContSheds()throws java.sql.SQLException{
		if(isNewInstance() || subContSheds != null){
			if(subContSheds == null)
				subContSheds = new TreeSet<SubContShed>();
			return subContSheds;
		}
		return SubContShed.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSubContShed(SubContShed subContShed)throws java.sql.SQLException{
		subContShed.setPlanyear(getPlanyear());
		if(isNewInstance() || subContSheds != null)
			getSubContSheds().add(subContShed);
		else
			subContShed.insert();
	}
	public void removeSubContShed(SubContShed subContShed)throws java.sql.SQLException{
		if(isNewInstance() || subContSheds != null)
			getSubContSheds().remove(subContShed);
		else
			subContShed.delete();
	}
	public Collection<SubContTrans> getSubContTranss()throws java.sql.SQLException{
		if(isNewInstance() || subContTranss != null){
			if(subContTranss == null)
				subContTranss = new TreeSet<SubContTrans>();
			return subContTranss;
		}
		return SubContTrans.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSubContTrans(SubContTrans subContTrans)throws java.sql.SQLException{
		subContTrans.setPlanyear(getPlanyear());
		if(isNewInstance() || subContTranss != null)
			getSubContTranss().add(subContTrans);
		else
			subContTrans.insert();
	}
	public void removeSubContTrans(SubContTrans subContTrans)throws java.sql.SQLException{
		if(isNewInstance() || subContTranss != null)
			getSubContTranss().remove(subContTrans);
		else
			subContTrans.delete();
	}
	public Collection<SubFile> getSubFiles()throws java.sql.SQLException{
		if(isNewInstance() || subFiles != null){
			if(subFiles == null)
				subFiles = new TreeSet<SubFile>();
			return subFiles;
		}
		return SubFile.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSubFile(SubFile subFile)throws java.sql.SQLException{
		subFile.setPlanyear(getPlanyear());
		if(isNewInstance() || subFiles != null)
			getSubFiles().add(subFile);
		else
			subFile.insert();
	}
	public void removeSubFile(SubFile subFile)throws java.sql.SQLException{
		if(isNewInstance() || subFiles != null)
			getSubFiles().remove(subFile);
		else
			subFile.delete();
	}
	public Collection<SubType> getSubTypes()throws java.sql.SQLException{
		if(isNewInstance() || subTypes != null){
			if(subTypes == null)
				subTypes = new TreeSet<SubType>();
			return subTypes;
		}
		return SubType.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSubType(SubType subType)throws java.sql.SQLException{
		subType.setPlanyear(getPlanyear());
		if(isNewInstance() || subTypes != null)
			getSubTypes().add(subType);
		else
			subType.insert();
	}
	public void removeSubType(SubType subType)throws java.sql.SQLException{
		if(isNewInstance() || subTypes != null)
			getSubTypes().remove(subType);
		else
			subType.delete();
	}
	public Collection<SubUnitCost> getSubUnitCosts()throws java.sql.SQLException{
		if(isNewInstance() || subUnitCosts != null){
			if(subUnitCosts == null)
				subUnitCosts = new TreeSet<SubUnitCost>();
			return subUnitCosts;
		}
		return SubUnitCost.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSubUnitCost(SubUnitCost subUnitCost)throws java.sql.SQLException{
		subUnitCost.setPlanyear(getPlanyear());
		if(isNewInstance() || subUnitCosts != null)
			getSubUnitCosts().add(subUnitCost);
		else
			subUnitCost.insert();
	}
	public void removeSubUnitCost(SubUnitCost subUnitCost)throws java.sql.SQLException{
		if(isNewInstance() || subUnitCosts != null)
			getSubUnitCosts().remove(subUnitCost);
		else
			subUnitCost.delete();
	}
	public Collection<SubVar> getSubVars()throws java.sql.SQLException{
		if(isNewInstance() || subVars != null){
			if(subVars == null)
				subVars = new TreeSet<SubVar>();
			return subVars;
		}
		return SubVar.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSubVar(SubVar subVar)throws java.sql.SQLException{
		subVar.setPlanyear(getPlanyear());
		if(isNewInstance() || subVars != null)
			getSubVars().add(subVar);
		else
			subVar.insert();
	}
	public void removeSubVar(SubVar subVar)throws java.sql.SQLException{
		if(isNewInstance() || subVars != null)
			getSubVars().remove(subVar);
		else
			subVar.delete();
	}
	public Collection<SubWeather> getSubWeathers()throws java.sql.SQLException{
		if(isNewInstance() || subWeathers != null){
			if(subWeathers == null)
				subWeathers = new TreeSet<SubWeather>();
			return subWeathers;
		}
		return SubWeather.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSubWeather(SubWeather subWeather)throws java.sql.SQLException{
		subWeather.setPlanyear(getPlanyear());
		if(isNewInstance() || subWeathers != null)
			getSubWeathers().add(subWeather);
		else
			subWeather.insert();
	}
	public void removeSubWeather(SubWeather subWeather)throws java.sql.SQLException{
		if(isNewInstance() || subWeathers != null)
			getSubWeathers().remove(subWeather);
		else
			subWeather.delete();
	}
	public Collection<SwtProc> getSwtProcs()throws java.sql.SQLException{
		if(isNewInstance() || swtProcs != null){
			if(swtProcs == null)
				swtProcs = new TreeSet<SwtProc>();
			return swtProcs;
		}
		return SwtProc.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSwtProc(SwtProc swtProc)throws java.sql.SQLException{
		swtProc.setPlanyear(getPlanyear());
		if(isNewInstance() || swtProcs != null)
			getSwtProcs().add(swtProc);
		else
			swtProc.insert();
	}
	public void removeSwtProc(SwtProc swtProc)throws java.sql.SQLException{
		if(isNewInstance() || swtProcs != null)
			getSwtProcs().remove(swtProc);
		else
			swtProc.delete();
	}
	public Collection<Sys> getSyss()throws java.sql.SQLException{
		if(isNewInstance() || syss != null){
			if(syss == null)
				syss = new TreeSet<Sys>();
			return syss;
		}
		return Sys.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSys(Sys sys)throws java.sql.SQLException{
		sys.setPlanyear(getPlanyear());
		if(isNewInstance() || syss != null)
			getSyss().add(sys);
		else
			sys.insert();
	}
	public void removeSys(Sys sys)throws java.sql.SQLException{
		if(isNewInstance() || syss != null)
			getSyss().remove(sys);
		else
			sys.delete();
	}
	public Collection<SysDaily> getSysDailys()throws java.sql.SQLException{
		if(isNewInstance() || sysDailys != null){
			if(sysDailys == null)
				sysDailys = new TreeSet<SysDaily>();
			return sysDailys;
		}
		return SysDaily.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSysDaily(SysDaily sysDaily)throws java.sql.SQLException{
		sysDaily.setPlanyear(getPlanyear());
		if(isNewInstance() || sysDailys != null)
			getSysDailys().add(sysDaily);
		else
			sysDaily.insert();
	}
	public void removeSysDaily(SysDaily sysDaily)throws java.sql.SQLException{
		if(isNewInstance() || sysDailys != null)
			getSysDailys().remove(sysDaily);
		else
			sysDaily.delete();
	}
	public Collection<SysMonthly> getSysMonthlys()throws java.sql.SQLException{
		if(isNewInstance() || sysMonthlys != null){
			if(sysMonthlys == null)
				sysMonthlys = new TreeSet<SysMonthly>();
			return sysMonthlys;
		}
		return SysMonthly.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSysMonthly(SysMonthly sysMonthly)throws java.sql.SQLException{
		sysMonthly.setPlanyear(getPlanyear());
		if(isNewInstance() || sysMonthlys != null)
			getSysMonthlys().add(sysMonthly);
		else
			sysMonthly.insert();
	}
	public void removeSysMonthly(SysMonthly sysMonthly)throws java.sql.SQLException{
		if(isNewInstance() || sysMonthlys != null)
			getSysMonthlys().remove(sysMonthly);
		else
			sysMonthly.delete();
	}
	public Collection<SysYear> getSysYears()throws java.sql.SQLException{
		if(isNewInstance() || sysYears != null){
			if(sysYears == null)
				sysYears = new TreeSet<SysYear>();
			return sysYears;
		}
		return SysYear.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSysYear(SysYear sysYear)throws java.sql.SQLException{
		sysYear.setPlanyear(getPlanyear());
		if(isNewInstance() || sysYears != null)
			getSysYears().add(sysYear);
		else
			sysYear.insert();
	}
	public void removeSysYear(SysYear sysYear)throws java.sql.SQLException{
		if(isNewInstance() || sysYears != null)
			getSysYears().remove(sysYear);
		else
			sysYear.delete();
	}
	public Collection<SysYearCost> getSysYearCosts()throws java.sql.SQLException{
		if(isNewInstance() || sysYearCosts != null){
			if(sysYearCosts == null)
				sysYearCosts = new TreeSet<SysYearCost>();
			return sysYearCosts;
		}
		return SysYearCost.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSysYearCost(SysYearCost sysYearCost)throws java.sql.SQLException{
		sysYearCost.setPlanyear(getPlanyear());
		if(isNewInstance() || sysYearCosts != null)
			getSysYearCosts().add(sysYearCost);
		else
			sysYearCost.insert();
	}
	public void removeSysYearCost(SysYearCost sysYearCost)throws java.sql.SQLException{
		if(isNewInstance() || sysYearCosts != null)
			getSysYearCosts().remove(sysYearCost);
		else
			sysYearCost.delete();
	}
	public Collection<SysYearProj> getSysYearProjs()throws java.sql.SQLException{
		if(isNewInstance() || sysYearProjs != null){
			if(sysYearProjs == null)
				sysYearProjs = new TreeSet<SysYearProj>();
			return sysYearProjs;
		}
		return SysYearProj.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSysYearProj(SysYearProj sysYearProj)throws java.sql.SQLException{
		sysYearProj.setPlanyear(getPlanyear());
		if(isNewInstance() || sysYearProjs != null)
			getSysYearProjs().add(sysYearProj);
		else
			sysYearProj.insert();
	}
	public void removeSysYearProj(SysYearProj sysYearProj)throws java.sql.SQLException{
		if(isNewInstance() || sysYearProjs != null)
			getSysYearProjs().remove(sysYearProj);
		else
			sysYearProj.delete();
	}
	public Collection<SysYearSceCost> getSysYearSceCosts()throws java.sql.SQLException{
		if(isNewInstance() || sysYearSceCosts != null){
			if(sysYearSceCosts == null)
				sysYearSceCosts = new TreeSet<SysYearSceCost>();
			return sysYearSceCosts;
		}
		return SysYearSceCost.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSysYearSceCost(SysYearSceCost sysYearSceCost)throws java.sql.SQLException{
		sysYearSceCost.setPlanyear(getPlanyear());
		if(isNewInstance() || sysYearSceCosts != null)
			getSysYearSceCosts().add(sysYearSceCost);
		else
			sysYearSceCost.insert();
	}
	public void removeSysYearSceCost(SysYearSceCost sysYearSceCost)throws java.sql.SQLException{
		if(isNewInstance() || sysYearSceCosts != null)
			getSysYearSceCosts().remove(sysYearSceCost);
		else
			sysYearSceCost.delete();
	}
	public Collection<SysYearSceProj> getSysYearSceProjs()throws java.sql.SQLException{
		if(isNewInstance() || sysYearSceProjs != null){
			if(sysYearSceProjs == null)
				sysYearSceProjs = new TreeSet<SysYearSceProj>();
			return sysYearSceProjs;
		}
		return SysYearSceProj.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addSysYearSceProj(SysYearSceProj sysYearSceProj)throws java.sql.SQLException{
		sysYearSceProj.setPlanyear(getPlanyear());
		if(isNewInstance() || sysYearSceProjs != null)
			getSysYearSceProjs().add(sysYearSceProj);
		else
			sysYearSceProj.insert();
	}
	public void removeSysYearSceProj(SysYearSceProj sysYearSceProj)throws java.sql.SQLException{
		if(isNewInstance() || sysYearSceProjs != null)
			getSysYearSceProjs().remove(sysYearSceProj);
		else
			sysYearSceProj.delete();
	}
	public Collection<UserSelect> getUserSelects()throws java.sql.SQLException{
		if(isNewInstance() || userSelects != null){
			if(userSelects == null)
				userSelects = new TreeSet<UserSelect>();
			return userSelects;
		}
		return UserSelect.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addUserSelect(UserSelect userSelect)throws java.sql.SQLException{
		userSelect.setPlanyear(getPlanyear());
		if(isNewInstance() || userSelects != null)
			getUserSelects().add(userSelect);
		else
			userSelect.insert();
	}
	public void removeUserSelect(UserSelect userSelect)throws java.sql.SQLException{
		if(isNewInstance() || userSelects != null)
			getUserSelects().remove(userSelect);
		else
			userSelect.delete();
	}
	public Collection<UserSys> getUserSyss()throws java.sql.SQLException{
		if(isNewInstance() || userSyss != null){
			if(userSyss == null)
				userSyss = new TreeSet<UserSys>();
			return userSyss;
		}
		return UserSys.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addUserSys(UserSys userSys)throws java.sql.SQLException{
		userSys.setPlanyear(getPlanyear());
		if(isNewInstance() || userSyss != null)
			getUserSyss().add(userSys);
		else
			userSys.insert();
	}
	public void removeUserSys(UserSys userSys)throws java.sql.SQLException{
		if(isNewInstance() || userSyss != null)
			getUserSyss().remove(userSys);
		else
			userSys.delete();
	}
	public Collection<Weatherstation> getWeatherstations()throws java.sql.SQLException{
		if(isNewInstance() || weatherstations != null){
			if(weatherstations == null)
				weatherstations = new TreeSet<Weatherstation>();
			return weatherstations;
		}
		return Weatherstation.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addWeatherstation(Weatherstation weatherstation)throws java.sql.SQLException{
		weatherstation.setPlanyear(getPlanyear());
		if(isNewInstance() || weatherstations != null)
			getWeatherstations().add(weatherstation);
		else
			weatherstation.insert();
	}
	public void removeWeatherstation(Weatherstation weatherstation)throws java.sql.SQLException{
		if(isNewInstance() || weatherstations != null)
			getWeatherstations().remove(weatherstation);
		else
			weatherstation.delete();
	}
	public Collection<Xfmr> getXfmrs()throws java.sql.SQLException{
		if(isNewInstance() || xfmrs != null){
			if(xfmrs == null)
				xfmrs = new TreeSet<Xfmr>();
			return xfmrs;
		}
		return Xfmr.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addXfmr(Xfmr xfmr)throws java.sql.SQLException{
		xfmr.setPlanyear(getPlanyear());
		if(isNewInstance() || xfmrs != null)
			getXfmrs().add(xfmr);
		else
			xfmr.insert();
	}
	public void removeXfmr(Xfmr xfmr)throws java.sql.SQLException{
		if(isNewInstance() || xfmrs != null)
			getXfmrs().remove(xfmr);
		else
			xfmr.delete();
	}
	public Collection<Zone> getZones()throws java.sql.SQLException{
		if(isNewInstance() || zones != null){
			if(zones == null)
				zones = new TreeSet<Zone>();
			return zones;
		}
		return Zone.getCollection(new String[]{"PLANYEAR"},getPlanyear());
	}
	public void addZone(Zone zone)throws java.sql.SQLException{
		zone.setPlanyear(getPlanyear());
		if(isNewInstance() || zones != null)
			getZones().add(zone);
		else
			zone.insert();
	}
	public void removeZone(Zone zone)throws java.sql.SQLException{
		if(isNewInstance() || zones != null)
			getZones().remove(zone);
		else
			zone.delete();
	}
	public Department copy()throws java.sql.SQLException{
		Department cp = new Department((Department)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(DepartmentDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(Abank child:getAbanks())
			cp.addAbank(child.copy());
		for(AbankN1Tie child:getAbankN1Ties())
			cp.addAbankN1Tie(child.copy());
		for(AbankShed child:getAbankSheds())
			cp.addAbankShed(child.copy());
		for(AbankTrans child:getAbankTranss())
			cp.addAbankTrans(child.copy());
		for(AbankYear child:getAbankYears())
			cp.addAbankYear(child.copy());
		for(Bank child:getBanks())
			cp.addBank(child.copy());
		for(Bbank child:getBbanks())
			cp.addBbank(child.copy());
		for(BbankTie child:getBbankTies())
			cp.addBbankTie(child.copy());
		for(BbankTrans child:getBbankTranss())
			cp.addBbankTrans(child.copy());
		for(BbankTransN1 child:getBbankTransN1s())
			cp.addBbankTransN1(child.copy());
		for(BbankYear child:getBbankYears())
			cp.addBbankYear(child.copy());
		for(Cable child:getCables())
			cp.addCable(child.copy());
		for(Ckt child:getCkts())
			cp.addCkt(child.copy());
		for(CktCont child:getCktConts())
			cp.addCktCont(child.copy());
		for(CktContShed child:getCktContSheds())
			cp.addCktContShed(child.copy());
		for(CktContTrans child:getCktContTranss())
			cp.addCktContTrans(child.copy());
		for(CktEdnaRead child:getCktEdnaReads())
			cp.addCktEdnaRead(child.copy());
		for(CktGrowth child:getCktGrowths())
			cp.addCktGrowth(child.copy());
		for(CktSwt child:getCktSwts())
			cp.addCktSwt(child.copy());
		for(CktTrans child:getCktTranss())
			cp.addCktTrans(child.copy());
		for(CktTransN1 child:getCktTransN1s())
			cp.addCktTransN1(child.copy());
		for(CktVar child:getCktVars())
			cp.addCktVar(child.copy());
		for(CktYear child:getCktYears())
			cp.addCktYear(child.copy());
		for(Cont child:getConts())
			cp.addCont(child.copy());
		for(Criteria child:getCriterias())
			cp.addCriteria(child.copy());
		for(CriteriaWs child:getCriteriaWss())
			cp.addCriteriaWs(child.copy());
		for(CritExcept child:getCritExcepts())
			cp.addCritExcept(child.copy());
		for(Cust child:getCusts())
			cp.addCust(child.copy());
		for(DepartmentYear child:getDepartmentYears())
			cp.addDepartmentYear(child.copy());
		for(DgDerat child:getDgDerats())
			cp.addDgDerat(child.copy());
		for(District child:getDistricts())
			cp.addDistrict(child.copy());
		for(Duct child:getDucts())
			cp.addDuct(child.copy());
		for(DuctBank child:getDuctBanks())
			cp.addDuctBank(child.copy());
		for(DuctBankFile child:getDuctBankFiles())
			cp.addDuctBankFile(child.copy());
		for(Elem child:getElems())
			cp.addElem(child.copy());
		for(Flag child:getFlags())
			cp.addFlag(child.copy());
		for(GrowthType child:getGrowthTypes())
			cp.addGrowthType(child.copy());
		for(LgProj child:getLgProjs())
			cp.addLgProj(child.copy());
		for(LgProjDriver child:getLgProjDrivers())
			cp.addLgProjDriver(child.copy());
		for(LgProjFile child:getLgProjFiles())
			cp.addLgProjFile(child.copy());
		for(LgProjGis child:getLgProjGiss())
			cp.addLgProjGis(child.copy());
		for(MvaFactor child:getMvaFactors())
			cp.addMvaFactor(child.copy());
		for(Pif child:getPifs())
			cp.addPif(child.copy());
		for(PifBi child:getPifBis())
			cp.addPifBi(child.copy());
		for(PifBudget child:getPifBudgets())
			cp.addPifBudget(child.copy());
		for(PifBudgetCat child:getPifBudgetCats())
			cp.addPifBudgetCat(child.copy());
		for(PifCategory child:getPifCategorys())
			cp.addPifCategory(child.copy());
		for(PifCktJust child:getPifCktJusts())
			cp.addPifCktJust(child.copy());
		for(PifCompRisk child:getPifCompRisks())
			cp.addPifCompRisk(child.copy());
		for(PifCrewType child:getPifCrewTypes())
			cp.addPifCrewType(child.copy());
		for(PifCustType child:getPifCustTypes())
			cp.addPifCustType(child.copy());
		for(PifEst child:getPifEsts())
			cp.addPifEst(child.copy());
		for(PifGwCat child:getPifGwCats())
			cp.addPifGwCat(child.copy());
		for(PifImpactType child:getPifImpactTypes())
			cp.addPifImpactType(child.copy());
		for(PifImpactValue child:getPifImpactValues())
			cp.addPifImpactValue(child.copy());
		for(PifLabor child:getPifLabors())
			cp.addPifLabor(child.copy());
		for(PifLineJust child:getPifLineJusts())
			cp.addPifLineJust(child.copy());
		for(PifMajorCustType child:getPifMajorCustTypes())
			cp.addPifMajorCustType(child.copy());
		for(PifPriority child:getPifPrioritys())
			cp.addPifPriority(child.copy());
		for(PifProjDriver child:getPifProjDrivers())
			cp.addPifProjDriver(child.copy());
		for(PifStatus child:getPifStatuss())
			cp.addPifStatus(child.copy());
		for(PifSubJust child:getPifSubJusts())
			cp.addPifSubJust(child.copy());
		for(PifVoltJust child:getPifVoltJusts())
			cp.addPifVoltJust(child.copy());
		for(PifWo child:getPifWos())
			cp.addPifWo(child.copy());
		for(PifWoImpact child:getPifWoImpacts())
			cp.addPifWoImpact(child.copy());
		for(PqEquInv child:getPqEquInvs())
			cp.addPqEquInv(child.copy());
		for(PqTroubleLog child:getPqTroubleLogs())
			cp.addPqTroubleLog(child.copy());
		for(Prog child:getProgs())
			cp.addProg(child.copy());
		for(ProgElem child:getProgElems())
			cp.addProgElem(child.copy());
		for(ProgExcept child:getProgExcepts())
			cp.addProgExcept(child.copy());
		for(Proj child:getProjs())
			cp.addProj(child.copy());
		for(ProjElem child:getProjElems())
			cp.addProjElem(child.copy());
		for(ProjElemCost child:getProjElemCosts())
			cp.addProjElemCost(child.copy());
		for(ProjElemCostYear child:getProjElemCostYears())
			cp.addProjElemCostYear(child.copy());
		for(RedbookScd child:getRedbookScds())
			cp.addRedbookScd(child.copy());
		for(Region child:getRegions())
			cp.addRegion(child.copy());
		for(SceSimAlt child:getSceSimAlts())
			cp.addSceSimAlt(child.copy());
		for(Simulation child:getSimulations())
			cp.addSimulation(child.copy());
		for(SimAlt child:getSimAlts())
			cp.addSimAlt(child.copy());
		for(SimCkt child:getSimCkts())
			cp.addSimCkt(child.copy());
		for(SimSub child:getSimSubs())
			cp.addSimSub(child.copy());
		for(SimSys child:getSimSyss())
			cp.addSimSys(child.copy());
		for(Stl child:getStls())
			cp.addStl(child.copy());
		for(Sub child:getSubs())
			cp.addSub(child.copy());
		for(SubCont child:getSubConts())
			cp.addSubCont(child.copy());
		for(SubContShed child:getSubContSheds())
			cp.addSubContShed(child.copy());
		for(SubContTrans child:getSubContTranss())
			cp.addSubContTrans(child.copy());
		for(SubFile child:getSubFiles())
			cp.addSubFile(child.copy());
		for(SubType child:getSubTypes())
			cp.addSubType(child.copy());
		for(SubUnitCost child:getSubUnitCosts())
			cp.addSubUnitCost(child.copy());
		for(SubVar child:getSubVars())
			cp.addSubVar(child.copy());
		for(SubWeather child:getSubWeathers())
			cp.addSubWeather(child.copy());
		for(SwtProc child:getSwtProcs())
			cp.addSwtProc(child.copy());
		for(Sys child:getSyss())
			cp.addSys(child.copy());
		for(SysDaily child:getSysDailys())
			cp.addSysDaily(child.copy());
		for(SysMonthly child:getSysMonthlys())
			cp.addSysMonthly(child.copy());
		for(SysYear child:getSysYears())
			cp.addSysYear(child.copy());
		for(SysYearCost child:getSysYearCosts())
			cp.addSysYearCost(child.copy());
		for(SysYearProj child:getSysYearProjs())
			cp.addSysYearProj(child.copy());
		for(SysYearSceCost child:getSysYearSceCosts())
			cp.addSysYearSceCost(child.copy());
		for(SysYearSceProj child:getSysYearSceProjs())
			cp.addSysYearSceProj(child.copy());
		for(UserSelect child:getUserSelects())
			cp.addUserSelect(child.copy());
		for(UserSys child:getUserSyss())
			cp.addUserSys(child.copy());
		for(Weatherstation child:getWeatherstations())
			cp.addWeatherstation(child.copy());
		for(Xfmr child:getXfmrs())
			cp.addXfmr(child.copy());
		for(Zone child:getZones())
			cp.addZone(child.copy());
	}
	public Vector<String> getDifference(DepartmentDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getTitle(),o.getTitle())) diffs.add("TITLE");
		if(!isSame(isActive(),o.isActive())) diffs.add("ACTIVE");
		if(!isSame(getPlanFor(),o.getPlanFor())) diffs.add("PLAN_FOR");
		if(!isSame(getNormalizationDate(),o.getNormalizationDate())) diffs.add("NORMALIZATION_DATE");
		if(!isSame(getDefaultOpDate(),o.getDefaultOpDate())) diffs.add("DEFAULT_OP_DATE");
		if(!isSame(getEscalationRate(),o.getEscalationRate())) diffs.add("ESCALATION_RATE");
		if(!isSame(getPifOverhead(),o.getPifOverhead())) diffs.add("PIF_OVERHEAD");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(abanks != null){
			for(Abank abank:getAbanks()){
				if(abank.isNewInstance())
					abank.setPlanyear(getPlanyear());
				abank.insert();
			}
			abanks = null;
		}
		if(abankN1Ties != null){
			for(AbankN1Tie abankN1Tie:getAbankN1Ties()){
				if(abankN1Tie.isNewInstance())
					abankN1Tie.setPlanyear(getPlanyear());
				abankN1Tie.insert();
			}
			abankN1Ties = null;
		}
		if(abankSheds != null){
			for(AbankShed abankShed:getAbankSheds()){
				if(abankShed.isNewInstance())
					abankShed.setPlanyear(getPlanyear());
				abankShed.insert();
			}
			abankSheds = null;
		}
		if(abankTranss != null){
			for(AbankTrans abankTrans:getAbankTranss()){
				if(abankTrans.isNewInstance())
					abankTrans.setPlanyear(getPlanyear());
				abankTrans.insert();
			}
			abankTranss = null;
		}
		if(abankYears != null){
			for(AbankYear abankYear:getAbankYears()){
				if(abankYear.isNewInstance())
					abankYear.setPlanyear(getPlanyear());
				abankYear.insert();
			}
			abankYears = null;
		}
		if(banks != null){
			for(Bank bank:getBanks()){
				if(bank.isNewInstance())
					bank.setPlanyear(getPlanyear());
				bank.insert();
			}
			banks = null;
		}
		if(bbanks != null){
			for(Bbank bbank:getBbanks()){
				if(bbank.isNewInstance())
					bbank.setPlanyear(getPlanyear());
				bbank.insert();
			}
			bbanks = null;
		}
		if(bbankTies != null){
			for(BbankTie bbankTie:getBbankTies()){
				if(bbankTie.isNewInstance())
					bbankTie.setPlanyear(getPlanyear());
				bbankTie.insert();
			}
			bbankTies = null;
		}
		if(bbankTranss != null){
			for(BbankTrans bbankTrans:getBbankTranss()){
				if(bbankTrans.isNewInstance())
					bbankTrans.setPlanyear(getPlanyear());
				bbankTrans.insert();
			}
			bbankTranss = null;
		}
		if(bbankTransN1s != null){
			for(BbankTransN1 bbankTransN1:getBbankTransN1s()){
				if(bbankTransN1.isNewInstance())
					bbankTransN1.setPlanyear(getPlanyear());
				bbankTransN1.insert();
			}
			bbankTransN1s = null;
		}
		if(bbankYears != null){
			for(BbankYear bbankYear:getBbankYears()){
				if(bbankYear.isNewInstance())
					bbankYear.setPlanyear(getPlanyear());
				bbankYear.insert();
			}
			bbankYears = null;
		}
		if(cables != null){
			for(Cable cable:getCables()){
				if(cable.isNewInstance())
					cable.setPlanyear(getPlanyear());
				cable.insert();
			}
			cables = null;
		}
		if(ckts != null){
			for(Ckt ckt:getCkts()){
				if(ckt.isNewInstance())
					ckt.setPlanyear(getPlanyear());
				ckt.insert();
			}
			ckts = null;
		}
		if(cktConts != null){
			for(CktCont cktCont:getCktConts()){
				if(cktCont.isNewInstance())
					cktCont.setPlanyear(getPlanyear());
				cktCont.insert();
			}
			cktConts = null;
		}
		if(cktContSheds != null){
			for(CktContShed cktContShed:getCktContSheds()){
				if(cktContShed.isNewInstance())
					cktContShed.setPlanyear(getPlanyear());
				cktContShed.insert();
			}
			cktContSheds = null;
		}
		if(cktContTranss != null){
			for(CktContTrans cktContTrans:getCktContTranss()){
				if(cktContTrans.isNewInstance())
					cktContTrans.setPlanyear(getPlanyear());
				cktContTrans.insert();
			}
			cktContTranss = null;
		}
		if(cktEdnaReads != null){
			for(CktEdnaRead cktEdnaRead:getCktEdnaReads()){
				if(cktEdnaRead.isNewInstance())
					cktEdnaRead.setPlanyear(getPlanyear());
				cktEdnaRead.insert();
			}
			cktEdnaReads = null;
		}
		if(cktGrowths != null){
			for(CktGrowth cktGrowth:getCktGrowths()){
				if(cktGrowth.isNewInstance())
					cktGrowth.setPlanyear(getPlanyear());
				cktGrowth.insert();
			}
			cktGrowths = null;
		}
		if(cktSwts != null){
			for(CktSwt cktSwt:getCktSwts()){
				if(cktSwt.isNewInstance())
					cktSwt.setPlanyear(getPlanyear());
				cktSwt.insert();
			}
			cktSwts = null;
		}
		if(cktTranss != null){
			for(CktTrans cktTrans:getCktTranss()){
				if(cktTrans.isNewInstance())
					cktTrans.setPlanyear(getPlanyear());
				cktTrans.insert();
			}
			cktTranss = null;
		}
		if(cktTransN1s != null){
			for(CktTransN1 cktTransN1:getCktTransN1s()){
				if(cktTransN1.isNewInstance())
					cktTransN1.setPlanyear(getPlanyear());
				cktTransN1.insert();
			}
			cktTransN1s = null;
		}
		if(cktVars != null){
			for(CktVar cktVar:getCktVars()){
				if(cktVar.isNewInstance())
					cktVar.setPlanyear(getPlanyear());
				cktVar.insert();
			}
			cktVars = null;
		}
		if(cktYears != null){
			for(CktYear cktYear:getCktYears()){
				if(cktYear.isNewInstance())
					cktYear.setPlanyear(getPlanyear());
				cktYear.insert();
			}
			cktYears = null;
		}
		if(conts != null){
			for(Cont cont:getConts()){
				if(cont.isNewInstance())
					cont.setPlanyear(getPlanyear());
				cont.insert();
			}
			conts = null;
		}
		if(criterias != null){
			for(Criteria criteria:getCriterias()){
				if(criteria.isNewInstance())
					criteria.setPlanyear(getPlanyear());
				criteria.insert();
			}
			criterias = null;
		}
		if(criteriaWss != null){
			for(CriteriaWs criteriaWs:getCriteriaWss()){
				if(criteriaWs.isNewInstance())
					criteriaWs.setPlanyear(getPlanyear());
				criteriaWs.insert();
			}
			criteriaWss = null;
		}
		if(critExcepts != null){
			for(CritExcept critExcept:getCritExcepts()){
				if(critExcept.isNewInstance())
					critExcept.setPlanyear(getPlanyear());
				critExcept.insert();
			}
			critExcepts = null;
		}
		if(custs != null){
			for(Cust cust:getCusts()){
				if(cust.isNewInstance())
					cust.setPlanyear(getPlanyear());
				cust.insert();
			}
			custs = null;
		}
		if(departmentYears != null){
			for(DepartmentYear departmentYear:getDepartmentYears()){
				if(departmentYear.isNewInstance())
					departmentYear.setPlanyear(getPlanyear());
				departmentYear.insert();
			}
			departmentYears = null;
		}
		if(dgDerats != null){
			for(DgDerat dgDerat:getDgDerats()){
				if(dgDerat.isNewInstance())
					dgDerat.setPlanyear(getPlanyear());
				dgDerat.insert();
			}
			dgDerats = null;
		}
		if(districts != null){
			for(District district:getDistricts()){
				if(district.isNewInstance())
					district.setPlanyear(getPlanyear());
				district.insert();
			}
			districts = null;
		}
		if(ducts != null){
			for(Duct duct:getDucts()){
				if(duct.isNewInstance())
					duct.setPlanyear(getPlanyear());
				duct.insert();
			}
			ducts = null;
		}
		if(ductBanks != null){
			for(DuctBank ductBank:getDuctBanks()){
				if(ductBank.isNewInstance())
					ductBank.setPlanyear(getPlanyear());
				ductBank.insert();
			}
			ductBanks = null;
		}
		if(ductBankFiles != null){
			for(DuctBankFile ductBankFile:getDuctBankFiles()){
				if(ductBankFile.isNewInstance())
					ductBankFile.setPlanyear(getPlanyear());
				ductBankFile.insert();
			}
			ductBankFiles = null;
		}
		if(elems != null){
			for(Elem elem:getElems()){
				if(elem.isNewInstance())
					elem.setPlanyear(getPlanyear());
				elem.insert();
			}
			elems = null;
		}
		if(flags != null){
			for(Flag flag:getFlags()){
				if(flag.isNewInstance())
					flag.setPlanyear(getPlanyear());
				flag.insert();
			}
			flags = null;
		}
		if(growthTypes != null){
			for(GrowthType growthType:getGrowthTypes()){
				if(growthType.isNewInstance())
					growthType.setPlanyear(getPlanyear());
				growthType.insert();
			}
			growthTypes = null;
		}
		if(lgProjs != null){
			for(LgProj lgProj:getLgProjs()){
				if(lgProj.isNewInstance())
					lgProj.setPlanyear(getPlanyear());
				lgProj.insert();
			}
			lgProjs = null;
		}
		if(lgProjDrivers != null){
			for(LgProjDriver lgProjDriver:getLgProjDrivers()){
				if(lgProjDriver.isNewInstance())
					lgProjDriver.setPlanyear(getPlanyear());
				lgProjDriver.insert();
			}
			lgProjDrivers = null;
		}
		if(lgProjFiles != null){
			for(LgProjFile lgProjFile:getLgProjFiles()){
				if(lgProjFile.isNewInstance())
					lgProjFile.setPlanyear(getPlanyear());
				lgProjFile.insert();
			}
			lgProjFiles = null;
		}
		if(lgProjGiss != null){
			for(LgProjGis lgProjGis:getLgProjGiss()){
				if(lgProjGis.isNewInstance())
					lgProjGis.setPlanyear(getPlanyear());
				lgProjGis.insert();
			}
			lgProjGiss = null;
		}
		if(mvaFactors != null){
			for(MvaFactor mvaFactor:getMvaFactors()){
				if(mvaFactor.isNewInstance())
					mvaFactor.setPlanyear(getPlanyear());
				mvaFactor.insert();
			}
			mvaFactors = null;
		}
		if(pifs != null){
			for(Pif pif:getPifs()){
				if(pif.isNewInstance())
					pif.setPlanyear(getPlanyear());
				pif.insert();
			}
			pifs = null;
		}
		if(pifBis != null){
			for(PifBi pifBi:getPifBis()){
				if(pifBi.isNewInstance())
					pifBi.setPlanyear(getPlanyear());
				pifBi.insert();
			}
			pifBis = null;
		}
		if(pifBudgets != null){
			for(PifBudget pifBudget:getPifBudgets()){
				if(pifBudget.isNewInstance())
					pifBudget.setPlanyear(getPlanyear());
				pifBudget.insert();
			}
			pifBudgets = null;
		}
		if(pifBudgetCats != null){
			for(PifBudgetCat pifBudgetCat:getPifBudgetCats()){
				if(pifBudgetCat.isNewInstance())
					pifBudgetCat.setPlanyear(getPlanyear());
				pifBudgetCat.insert();
			}
			pifBudgetCats = null;
		}
		if(pifCategorys != null){
			for(PifCategory pifCategory:getPifCategorys()){
				if(pifCategory.isNewInstance())
					pifCategory.setPlanyear(getPlanyear());
				pifCategory.insert();
			}
			pifCategorys = null;
		}
		if(pifCktJusts != null){
			for(PifCktJust pifCktJust:getPifCktJusts()){
				if(pifCktJust.isNewInstance())
					pifCktJust.setPlanyear(getPlanyear());
				pifCktJust.insert();
			}
			pifCktJusts = null;
		}
		if(pifCompRisks != null){
			for(PifCompRisk pifCompRisk:getPifCompRisks()){
				if(pifCompRisk.isNewInstance())
					pifCompRisk.setPlanyear(getPlanyear());
				pifCompRisk.insert();
			}
			pifCompRisks = null;
		}
		if(pifCrewTypes != null){
			for(PifCrewType pifCrewType:getPifCrewTypes()){
				if(pifCrewType.isNewInstance())
					pifCrewType.setPlanyear(getPlanyear());
				pifCrewType.insert();
			}
			pifCrewTypes = null;
		}
		if(pifCustTypes != null){
			for(PifCustType pifCustType:getPifCustTypes()){
				if(pifCustType.isNewInstance())
					pifCustType.setPlanyear(getPlanyear());
				pifCustType.insert();
			}
			pifCustTypes = null;
		}
		if(pifEsts != null){
			for(PifEst pifEst:getPifEsts()){
				if(pifEst.isNewInstance())
					pifEst.setPlanyear(getPlanyear());
				pifEst.insert();
			}
			pifEsts = null;
		}
		if(pifGwCats != null){
			for(PifGwCat pifGwCat:getPifGwCats()){
				if(pifGwCat.isNewInstance())
					pifGwCat.setPlanyear(getPlanyear());
				pifGwCat.insert();
			}
			pifGwCats = null;
		}
		if(pifImpactTypes != null){
			for(PifImpactType pifImpactType:getPifImpactTypes()){
				if(pifImpactType.isNewInstance())
					pifImpactType.setPlanyear(getPlanyear());
				pifImpactType.insert();
			}
			pifImpactTypes = null;
		}
		if(pifImpactValues != null){
			for(PifImpactValue pifImpactValue:getPifImpactValues()){
				if(pifImpactValue.isNewInstance())
					pifImpactValue.setPlanyear(getPlanyear());
				pifImpactValue.insert();
			}
			pifImpactValues = null;
		}
		if(pifLabors != null){
			for(PifLabor pifLabor:getPifLabors()){
				if(pifLabor.isNewInstance())
					pifLabor.setPlanyear(getPlanyear());
				pifLabor.insert();
			}
			pifLabors = null;
		}
		if(pifLineJusts != null){
			for(PifLineJust pifLineJust:getPifLineJusts()){
				if(pifLineJust.isNewInstance())
					pifLineJust.setPlanyear(getPlanyear());
				pifLineJust.insert();
			}
			pifLineJusts = null;
		}
		if(pifMajorCustTypes != null){
			for(PifMajorCustType pifMajorCustType:getPifMajorCustTypes()){
				if(pifMajorCustType.isNewInstance())
					pifMajorCustType.setPlanyear(getPlanyear());
				pifMajorCustType.insert();
			}
			pifMajorCustTypes = null;
		}
		if(pifPrioritys != null){
			for(PifPriority pifPriority:getPifPrioritys()){
				if(pifPriority.isNewInstance())
					pifPriority.setPlanyear(getPlanyear());
				pifPriority.insert();
			}
			pifPrioritys = null;
		}
		if(pifProjDrivers != null){
			for(PifProjDriver pifProjDriver:getPifProjDrivers()){
				if(pifProjDriver.isNewInstance())
					pifProjDriver.setPlanyear(getPlanyear());
				pifProjDriver.insert();
			}
			pifProjDrivers = null;
		}
		if(pifStatuss != null){
			for(PifStatus pifStatus:getPifStatuss()){
				if(pifStatus.isNewInstance())
					pifStatus.setPlanyear(getPlanyear());
				pifStatus.insert();
			}
			pifStatuss = null;
		}
		if(pifSubJusts != null){
			for(PifSubJust pifSubJust:getPifSubJusts()){
				if(pifSubJust.isNewInstance())
					pifSubJust.setPlanyear(getPlanyear());
				pifSubJust.insert();
			}
			pifSubJusts = null;
		}
		if(pifVoltJusts != null){
			for(PifVoltJust pifVoltJust:getPifVoltJusts()){
				if(pifVoltJust.isNewInstance())
					pifVoltJust.setPlanyear(getPlanyear());
				pifVoltJust.insert();
			}
			pifVoltJusts = null;
		}
		if(pifWos != null){
			for(PifWo pifWo:getPifWos()){
				if(pifWo.isNewInstance())
					pifWo.setPlanyear(getPlanyear());
				pifWo.insert();
			}
			pifWos = null;
		}
		if(pifWoImpacts != null){
			for(PifWoImpact pifWoImpact:getPifWoImpacts()){
				if(pifWoImpact.isNewInstance())
					pifWoImpact.setPlanyear(getPlanyear());
				pifWoImpact.insert();
			}
			pifWoImpacts = null;
		}
		if(pqEquInvs != null){
			for(PqEquInv pqEquInv:getPqEquInvs()){
				if(pqEquInv.isNewInstance())
					pqEquInv.setPlanyear(getPlanyear());
				pqEquInv.insert();
			}
			pqEquInvs = null;
		}
		if(pqTroubleLogs != null){
			for(PqTroubleLog pqTroubleLog:getPqTroubleLogs()){
				if(pqTroubleLog.isNewInstance())
					pqTroubleLog.setPlanyear(getPlanyear());
				pqTroubleLog.insert();
			}
			pqTroubleLogs = null;
		}
		if(progs != null){
			for(Prog prog:getProgs()){
				if(prog.isNewInstance())
					prog.setPlanyear(getPlanyear());
				prog.insert();
			}
			progs = null;
		}
		if(progElems != null){
			for(ProgElem progElem:getProgElems()){
				if(progElem.isNewInstance())
					progElem.setPlanyear(getPlanyear());
				progElem.insert();
			}
			progElems = null;
		}
		if(progExcepts != null){
			for(ProgExcept progExcept:getProgExcepts()){
				if(progExcept.isNewInstance())
					progExcept.setPlanyear(getPlanyear());
				progExcept.insert();
			}
			progExcepts = null;
		}
		if(projs != null){
			for(Proj proj:getProjs()){
				if(proj.isNewInstance())
					proj.setPlanyear(getPlanyear());
				proj.insert();
			}
			projs = null;
		}
		if(projElems != null){
			for(ProjElem projElem:getProjElems()){
				if(projElem.isNewInstance())
					projElem.setPlanyear(getPlanyear());
				projElem.insert();
			}
			projElems = null;
		}
		if(projElemCosts != null){
			for(ProjElemCost projElemCost:getProjElemCosts()){
				if(projElemCost.isNewInstance())
					projElemCost.setPlanyear(getPlanyear());
				projElemCost.insert();
			}
			projElemCosts = null;
		}
		if(projElemCostYears != null){
			for(ProjElemCostYear projElemCostYear:getProjElemCostYears()){
				if(projElemCostYear.isNewInstance())
					projElemCostYear.setPlanyear(getPlanyear());
				projElemCostYear.insert();
			}
			projElemCostYears = null;
		}
		if(redbookScds != null){
			for(RedbookScd redbookScd:getRedbookScds()){
				if(redbookScd.isNewInstance())
					redbookScd.setPlanyear(getPlanyear());
				redbookScd.insert();
			}
			redbookScds = null;
		}
		if(regions != null){
			for(Region region:getRegions()){
				if(region.isNewInstance())
					region.setPlanyear(getPlanyear());
				region.insert();
			}
			regions = null;
		}
		if(sceSimAlts != null){
			for(SceSimAlt sceSimAlt:getSceSimAlts()){
				if(sceSimAlt.isNewInstance())
					sceSimAlt.setPlanyear(getPlanyear());
				sceSimAlt.insert();
			}
			sceSimAlts = null;
		}
		if(simulations != null){
			for(Simulation simulation:getSimulations()){
				if(simulation.isNewInstance())
					simulation.setPlanyear(getPlanyear());
				simulation.insert();
			}
			simulations = null;
		}
		if(simAlts != null){
			for(SimAlt simAlt:getSimAlts()){
				if(simAlt.isNewInstance())
					simAlt.setPlanyear(getPlanyear());
				simAlt.insert();
			}
			simAlts = null;
		}
		if(simCkts != null){
			for(SimCkt simCkt:getSimCkts()){
				if(simCkt.isNewInstance())
					simCkt.setPlanyear(getPlanyear());
				simCkt.insert();
			}
			simCkts = null;
		}
		if(simSubs != null){
			for(SimSub simSub:getSimSubs()){
				if(simSub.isNewInstance())
					simSub.setPlanyear(getPlanyear());
				simSub.insert();
			}
			simSubs = null;
		}
		if(simSyss != null){
			for(SimSys simSys:getSimSyss()){
				if(simSys.isNewInstance())
					simSys.setPlanyear(getPlanyear());
				simSys.insert();
			}
			simSyss = null;
		}
		if(stls != null){
			for(Stl stl:getStls()){
				if(stl.isNewInstance())
					stl.setPlanyear(getPlanyear());
				stl.insert();
			}
			stls = null;
		}
		if(subs != null){
			for(Sub sub:getSubs()){
				if(sub.isNewInstance())
					sub.setPlanyear(getPlanyear());
				sub.insert();
			}
			subs = null;
		}
		if(subConts != null){
			for(SubCont subCont:getSubConts()){
				if(subCont.isNewInstance())
					subCont.setPlanyear(getPlanyear());
				subCont.insert();
			}
			subConts = null;
		}
		if(subContSheds != null){
			for(SubContShed subContShed:getSubContSheds()){
				if(subContShed.isNewInstance())
					subContShed.setPlanyear(getPlanyear());
				subContShed.insert();
			}
			subContSheds = null;
		}
		if(subContTranss != null){
			for(SubContTrans subContTrans:getSubContTranss()){
				if(subContTrans.isNewInstance())
					subContTrans.setPlanyear(getPlanyear());
				subContTrans.insert();
			}
			subContTranss = null;
		}
		if(subFiles != null){
			for(SubFile subFile:getSubFiles()){
				if(subFile.isNewInstance())
					subFile.setPlanyear(getPlanyear());
				subFile.insert();
			}
			subFiles = null;
		}
		if(subTypes != null){
			for(SubType subType:getSubTypes()){
				if(subType.isNewInstance())
					subType.setPlanyear(getPlanyear());
				subType.insert();
			}
			subTypes = null;
		}
		if(subUnitCosts != null){
			for(SubUnitCost subUnitCost:getSubUnitCosts()){
				if(subUnitCost.isNewInstance())
					subUnitCost.setPlanyear(getPlanyear());
				subUnitCost.insert();
			}
			subUnitCosts = null;
		}
		if(subVars != null){
			for(SubVar subVar:getSubVars()){
				if(subVar.isNewInstance())
					subVar.setPlanyear(getPlanyear());
				subVar.insert();
			}
			subVars = null;
		}
		if(subWeathers != null){
			for(SubWeather subWeather:getSubWeathers()){
				if(subWeather.isNewInstance())
					subWeather.setPlanyear(getPlanyear());
				subWeather.insert();
			}
			subWeathers = null;
		}
		if(swtProcs != null){
			for(SwtProc swtProc:getSwtProcs()){
				if(swtProc.isNewInstance())
					swtProc.setPlanyear(getPlanyear());
				swtProc.insert();
			}
			swtProcs = null;
		}
		if(syss != null){
			for(Sys sys:getSyss()){
				if(sys.isNewInstance())
					sys.setPlanyear(getPlanyear());
				sys.insert();
			}
			syss = null;
		}
		if(sysDailys != null){
			for(SysDaily sysDaily:getSysDailys()){
				if(sysDaily.isNewInstance())
					sysDaily.setPlanyear(getPlanyear());
				sysDaily.insert();
			}
			sysDailys = null;
		}
		if(sysMonthlys != null){
			for(SysMonthly sysMonthly:getSysMonthlys()){
				if(sysMonthly.isNewInstance())
					sysMonthly.setPlanyear(getPlanyear());
				sysMonthly.insert();
			}
			sysMonthlys = null;
		}
		if(sysYears != null){
			for(SysYear sysYear:getSysYears()){
				if(sysYear.isNewInstance())
					sysYear.setPlanyear(getPlanyear());
				sysYear.insert();
			}
			sysYears = null;
		}
		if(sysYearCosts != null){
			for(SysYearCost sysYearCost:getSysYearCosts()){
				if(sysYearCost.isNewInstance())
					sysYearCost.setPlanyear(getPlanyear());
				sysYearCost.insert();
			}
			sysYearCosts = null;
		}
		if(sysYearProjs != null){
			for(SysYearProj sysYearProj:getSysYearProjs()){
				if(sysYearProj.isNewInstance())
					sysYearProj.setPlanyear(getPlanyear());
				sysYearProj.insert();
			}
			sysYearProjs = null;
		}
		if(sysYearSceCosts != null){
			for(SysYearSceCost sysYearSceCost:getSysYearSceCosts()){
				if(sysYearSceCost.isNewInstance())
					sysYearSceCost.setPlanyear(getPlanyear());
				sysYearSceCost.insert();
			}
			sysYearSceCosts = null;
		}
		if(sysYearSceProjs != null){
			for(SysYearSceProj sysYearSceProj:getSysYearSceProjs()){
				if(sysYearSceProj.isNewInstance())
					sysYearSceProj.setPlanyear(getPlanyear());
				sysYearSceProj.insert();
			}
			sysYearSceProjs = null;
		}
		if(userSelects != null){
			for(UserSelect userSelect:getUserSelects()){
				if(userSelect.isNewInstance())
					userSelect.setPlanyear(getPlanyear());
				userSelect.insert();
			}
			userSelects = null;
		}
		if(userSyss != null){
			for(UserSys userSys:getUserSyss()){
				if(userSys.isNewInstance())
					userSys.setPlanyear(getPlanyear());
				userSys.insert();
			}
			userSyss = null;
		}
		if(weatherstations != null){
			for(Weatherstation weatherstation:getWeatherstations()){
				if(weatherstation.isNewInstance())
					weatherstation.setPlanyear(getPlanyear());
				weatherstation.insert();
			}
			weatherstations = null;
		}
		if(xfmrs != null){
			for(Xfmr xfmr:getXfmrs()){
				if(xfmr.isNewInstance())
					xfmr.setPlanyear(getPlanyear());
				xfmr.insert();
			}
			xfmrs = null;
		}
		if(zones != null){
			for(Zone zone:getZones()){
				if(zone.isNewInstance())
					zone.setPlanyear(getPlanyear());
				zone.insert();
			}
			zones = null;
		}
	}
}
