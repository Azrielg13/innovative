package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Qbr;
import com.sce.esp.object.model.SubQbr;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SubQbrDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SUB_QBR_ID};
	public static enum PROPERTY{SUB_QBR_ID,QBR_ID,NAME,APPROVER_USER_ID,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SUBQBRID_LIMIT = 9;
	public final static int QBRID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int APPROVERUSERID_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int subQbrId;
	private int qbrId;
	private String name;
	private int approverUserId;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Qbr qbr;
	private User user;
	public static SubQbr getInstance(int subQbrId)throws java.sql.SQLException{
		return getInstance(subQbrId, true);
	}
	public static SubQbr getInstance(int subQbrId, boolean fetch)throws java.sql.SQLException{
		if(isNull(subQbrId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(subQbrId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SubQbr o = null;
		if(cache != null && cache.contains(SubQbr.class, pk))
			o = em.find(SubQbr.class, pk);
		if(o==null && getAICache().contains(SubQbr.class, pk))
			o = getAICache().find(SubQbr.class, pk);
		if(o==null && fetch)
			o = em.find(SubQbr.class, pk);
		if(o==null && fetch && SubQbr.class.getAnnotation(AutoInsertable.class) != null){
			o = new SubQbr(subQbrId);
			getAICache().cache(SubQbr.class, o);
		}
		return o;
	}
	public static Collection<SubQbr> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SubQbr> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SubQbr> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SubQbr o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SubQbr> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubQbr> tq = em.createQuery(jpql,SubQbr.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SubQbr> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubQbr> tq = em.createNamedQuery(name,SubQbr.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SubQbrDAO(){}
	public SubQbrDAO(int subQbrId){
		this.subQbrId=subQbrId;
	}
	public SubQbrDAO(SubQbrDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SubQbrDAO orig){
		this.qbrId=orig.getQbrId();
		this.name=orig.getName();
		this.approverUserId=orig.getApproverUserId();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{subQbrId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS98_SEQ",sequenceName="MDIS98_SEQ")
	@Column(name="SUB_QBR_ID",nullable=false,length=9)
	public int getSubQbrId(){
		return subQbrId;
	}
	public void setSubQbrId(int subQbrId) throws java.sql.SQLException{
		if(isSame(subQbrId, getSubQbrId()))return;
		int oldValue = getSubQbrId();
		this.subQbrId=subQbrId;
		setProperty("SUB_QBR_ID", subQbrId, oldValue);
	}
	@Column(name="QBR_ID",nullable=false,length=9)
	public int getQbrId(){
		return qbrId;
	}
	public void setQbrId(int qbrId) throws java.sql.SQLException{
		if(isSame(qbrId, getQbrId()))return;
		int oldValue = getQbrId();
		this.qbrId=qbrId;
		setProperty("QBR_ID", qbrId, oldValue);
		qbr=null;
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="APPROVER_USER_ID",nullable=true,length=9)
	public int getApproverUserId(){
		return approverUserId;
	}
	public void setApproverUserId(int approverUserId) throws java.sql.SQLException{
		if(isSame(approverUserId, getApproverUserId()))return;
		int oldValue = getApproverUserId();
		this.approverUserId=approverUserId;
		setProperty("APPROVER_USER_ID", approverUserId, oldValue);
		user=null;
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Qbr getQbr()throws java.sql.SQLException{
		if(qbr==null)
			qbr=Qbr.getInstance(getQbrId());
		return qbr;
	}
	public void setQbr(Qbr qbr)throws java.sql.SQLException{
		setQbrId(qbr==null?0:qbr.getQbrId());
		this.qbr=qbr;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getApproverUserId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setApproverUserId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public SubQbr copy()throws java.sql.SQLException{
		SubQbr cp = new SubQbr((SubQbr)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SubQbrDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SubQbrDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getSubQbrId(),o.getSubQbrId())) diffs.add("SUB_QBR_ID");
		if(!isSame(getQbrId(),o.getQbrId())) diffs.add("QBR_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getApproverUserId(),o.getApproverUserId())) diffs.add("APPROVER_USER_ID");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
