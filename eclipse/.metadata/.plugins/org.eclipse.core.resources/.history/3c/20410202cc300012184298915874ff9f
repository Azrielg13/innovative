package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.SimSub;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.Sub;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class SimSubDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,SUB_ID};
	public static enum PROPERTY{PLANYEAR,SIM_ID,SUB_ID,PROJ_ID,NAMEPLATE,PLL_FACTOR,IN_SERVICE_DATE,OUT_SERVICE_DATE,NOTE,WS_NOTE,CRITERIA_NOTE,TS_NOTE,OP_DRF_NOTE,PLL_NOTE,NP_NOTE,LG_NOTE,USER_SP_NOTE,DEP_GEN_NOTE,BYPASS_GEN_NOTE,PEAK_DATE,ALT_ADJ_PEAK,USE_ALT,PA_FINALIZED,PA_APPROVED,LG_FINALIZED,LG_APPROVED,SS_FINALIZED,SS_APPROVED,IN_SERVICE_PROJ_ID,OUT_SERVICE_PROJ_ID,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,USE_USER_PRN,USER_PRN,PREV_P_R_N};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int SUBID_LIMIT = 9;
	public final static int PROJID_LIMIT = 9;
	public final static int NAMEPLATE_LIMIT = 24;
	public final static int PLLFACTOR_LIMIT = 24;
	public final static int INSERVICEDATE_LIMIT = 7;
	public final static int OUTSERVICEDATE_LIMIT = 7;
	public final static int NOTE_LIMIT = 256;
	public final static int WSNOTE_LIMIT = 256;
	public final static int CRITERIANOTE_LIMIT = 256;
	public final static int TSNOTE_LIMIT = 256;
	public final static int OPDRFNOTE_LIMIT = 256;
	public final static int PLLNOTE_LIMIT = 256;
	public final static int NPNOTE_LIMIT = 256;
	public final static int LGNOTE_LIMIT = 256;
	public final static int USERSPNOTE_LIMIT = 256;
	public final static int DEPGENNOTE_LIMIT = 256;
	public final static int BYPASSGENNOTE_LIMIT = 256;
	public final static int PEAKDATE_LIMIT = 7;
	public final static int ALTADJPEAK_LIMIT = 24;
	public final static int USEALT_LIMIT = 1;
	public final static int PAFINALIZED_LIMIT = 1;
	public final static int PAAPPROVED_LIMIT = 1;
	public final static int LGFINALIZED_LIMIT = 1;
	public final static int LGAPPROVED_LIMIT = 1;
	public final static int SSFINALIZED_LIMIT = 1;
	public final static int SSAPPROVED_LIMIT = 1;
	public final static int INSERVICEPROJID_LIMIT = 9;
	public final static int OUTSERVICEPROJID_LIMIT = 9;
	public final static int USEUSERPRN_LIMIT = 1;
	public final static int USERPRN_LIMIT = 24;
	public final static int PREVPRN_LIMIT = 24;
	private SimSub ptr;
	private int planyear;
	private int simId;
	private int subId;
	private int projId;
	private double nameplate;
	private double pllFactor;
	private Calendar inServiceDate;
	private Calendar outServiceDate;
	private String note;
	private String wsNote;
	private String criteriaNote;
	private String tsNote;
	private String opDrfNote;
	private String pllNote;
	private String npNote;
	private String lgNote;
	private String userSpNote;
	private String depGenNote;
	private String bypassGenNote;
	private Calendar peakDate;
	private double altAdjPeak;
	private boolean useAlt;
	private boolean paFinalized;
	private boolean paApproved;
	private boolean lgFinalized;
	private boolean lgApproved;
	private boolean ssFinalized;
	private boolean ssApproved;
	private int inServiceProjId;
	private int outServiceProjId;
	private boolean useUserPrn;
	private double userPrn;
	private double prevPRN;
	private Proj proj;
	private Proj proj2;
	private Proj proj3;
	private Simulation simulation;
	private Sub sub;
	public static SimSub getInstance(int planyear, int simId, int subId)throws java.sql.SQLException{
		return getInstance(planyear, simId, subId, true);
	}
	public static SimSub getInstance(int planyear, int simId, int subId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, subId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, subId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SimSub o = null;
		if(cache != null && cache.contains(SimSub.class, pk))
			o = em.find(SimSub.class, pk);
		if(o==null && getAICache().contains(SimSub.class, pk))
			o = getAICache().find(SimSub.class, pk);
		if(o==null && fetch)
			o = em.find(SimSub.class, pk);
		if(o==null && fetch && SimSub.class.getAnnotation(AutoInsertable.class) != null){
			o = new SimSub(planyear, simId, subId);
			getAICache().cache(SimSub.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<SimSub> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SimSub> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SimSub> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SimSub o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SimSub> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SimSub> tq = em.createQuery(jpql,SimSub.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SimSub> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SimSub> tq = em.createNamedQuery(name,SimSub.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SimSubDAO(){}
	public SimSubDAO(int planyear, int simId, int subId){
		this.planyear=planyear;
		this.simId=simId;
		this.subId=subId;
	}
	public SimSubDAO(SimSubDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		this.subId=orig.getSubId();
		copyFrom(orig);
	}
	public void copyFrom(SimSubDAO orig){
		this.projId=orig.getProjId();
		this.nameplate=orig.getNameplate();
		this.pllFactor=orig.getPllFactor();
		this.inServiceDate=orig.getInServiceDate();
		this.outServiceDate=orig.getOutServiceDate();
		this.note=orig.getNote();
		this.wsNote=orig.getWsNote();
		this.criteriaNote=orig.getCriteriaNote();
		this.tsNote=orig.getTsNote();
		this.opDrfNote=orig.getOpDrfNote();
		this.pllNote=orig.getPllNote();
		this.npNote=orig.getNpNote();
		this.lgNote=orig.getLgNote();
		this.userSpNote=orig.getUserSpNote();
		this.depGenNote=orig.getDepGenNote();
		this.bypassGenNote=orig.getBypassGenNote();
		this.peakDate=orig.getPeakDate();
		this.altAdjPeak=orig.getAltAdjPeak();
		this.useAlt=orig.isUseAlt();
		this.paFinalized=orig.isPaFinalized();
		this.paApproved=orig.isPaApproved();
		this.lgFinalized=orig.isLgFinalized();
		this.lgApproved=orig.isLgApproved();
		this.ssFinalized=orig.isSsFinalized();
		this.ssApproved=orig.isSsApproved();
		this.inServiceProjId=orig.getInServiceProjId();
		this.outServiceProjId=orig.getOutServiceProjId();
		this.useUserPrn=orig.isUseUserPrn();
		this.userPrn=orig.getUserPrn();
		this.prevPRN=orig.getPrevPRN();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, subId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public SimSub getPtr(){
		return ptr;
	}
	public void setPtr(SimSub ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getSubId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
		simulation=null;
	}
	@Id
	@Column(name="SUB_ID",nullable=false,length=9)
	public int getSubId(){
		return subId;
	}
	public void setSubId(int subId) throws java.sql.SQLException{
		if(isSame(subId, getSubId()))return;
		int oldValue = getSubId();
		this.subId=subId;
		setProperty("SUB_ID", subId, oldValue);
		sub=null;
	}
	@Column(name="PROJ_ID",nullable=true,length=9)
	public int getProjId(){
		if(getPtr()!=null)
			return getPtr().getProjId();
		return projId;
	}
	public void setProjId(int projId) throws java.sql.SQLException{
		if(isSame(projId, getProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getProjId();
		this.projId=projId;
		setProperty("PROJ_ID", projId, oldValue);
		proj=null;
	}
	@Column(name="NAMEPLATE",nullable=true,length=24)
	public double getNameplate(){
		if(getPtr()!=null)
			return getPtr().getNameplate();
		return nameplate;
	}
	public void setNameplate(double nameplate) throws java.sql.SQLException{
		if(isSame(nameplate, getNameplate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getNameplate();
		this.nameplate=nameplate;
		setProperty("NAMEPLATE", nameplate, oldValue);
	}
	@Column(name="PLL_FACTOR",nullable=true,length=24)
	public double getPllFactor(){
		if(getPtr()!=null)
			return getPtr().getPllFactor();
		return pllFactor;
	}
	public void setPllFactor(double pllFactor) throws java.sql.SQLException{
		if(isSame(pllFactor, getPllFactor()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getPllFactor();
		this.pllFactor=pllFactor;
		setProperty("PLL_FACTOR", pllFactor, oldValue);
	}
	@Column(name="IN_SERVICE_DATE",nullable=true,length=7)
	public Calendar getInServiceDate(){
		if(getPtr()!=null)
			return getPtr().getInServiceDate();
		return inServiceDate;
	}
	public void setInServiceDate(Calendar inServiceDate) throws java.sql.SQLException{
		if(isSame(inServiceDate, getInServiceDate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getInServiceDate();
		this.inServiceDate=inServiceDate;
		setProperty("IN_SERVICE_DATE", inServiceDate, oldValue);
	}
	@Column(name="OUT_SERVICE_DATE",nullable=true,length=7)
	public Calendar getOutServiceDate(){
		if(getPtr()!=null)
			return getPtr().getOutServiceDate();
		return outServiceDate;
	}
	public void setOutServiceDate(Calendar outServiceDate) throws java.sql.SQLException{
		if(isSame(outServiceDate, getOutServiceDate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getOutServiceDate();
		this.outServiceDate=outServiceDate;
		setProperty("OUT_SERVICE_DATE", outServiceDate, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		if(getPtr()!=null)
			return getPtr().getNote();
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="WS_NOTE",nullable=true,length=256)
	public String getWsNote(){
		if(getPtr()!=null)
			return getPtr().getWsNote();
		return wsNote;
	}
	public void setWsNote(String wsNote) throws java.sql.SQLException{
		if(isSame(wsNote, getWsNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getWsNote();
		this.wsNote=wsNote;
		setProperty("WS_NOTE", wsNote, oldValue);
	}
	@Column(name="CRITERIA_NOTE",nullable=true,length=256)
	public String getCriteriaNote(){
		if(getPtr()!=null)
			return getPtr().getCriteriaNote();
		return criteriaNote;
	}
	public void setCriteriaNote(String criteriaNote) throws java.sql.SQLException{
		if(isSame(criteriaNote, getCriteriaNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getCriteriaNote();
		this.criteriaNote=criteriaNote;
		setProperty("CRITERIA_NOTE", criteriaNote, oldValue);
	}
	@Column(name="TS_NOTE",nullable=true,length=256)
	public String getTsNote(){
		if(getPtr()!=null)
			return getPtr().getTsNote();
		return tsNote;
	}
	public void setTsNote(String tsNote) throws java.sql.SQLException{
		if(isSame(tsNote, getTsNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getTsNote();
		this.tsNote=tsNote;
		setProperty("TS_NOTE", tsNote, oldValue);
	}
	@Column(name="OP_DRF_NOTE",nullable=true,length=256)
	public String getOpDrfNote(){
		if(getPtr()!=null)
			return getPtr().getOpDrfNote();
		return opDrfNote;
	}
	public void setOpDrfNote(String opDrfNote) throws java.sql.SQLException{
		if(isSame(opDrfNote, getOpDrfNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getOpDrfNote();
		this.opDrfNote=opDrfNote;
		setProperty("OP_DRF_NOTE", opDrfNote, oldValue);
	}
	@Column(name="PLL_NOTE",nullable=true,length=256)
	public String getPllNote(){
		if(getPtr()!=null)
			return getPtr().getPllNote();
		return pllNote;
	}
	public void setPllNote(String pllNote) throws java.sql.SQLException{
		if(isSame(pllNote, getPllNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getPllNote();
		this.pllNote=pllNote;
		setProperty("PLL_NOTE", pllNote, oldValue);
	}
	@Column(name="NP_NOTE",nullable=true,length=256)
	public String getNpNote(){
		if(getPtr()!=null)
			return getPtr().getNpNote();
		return npNote;
	}
	public void setNpNote(String npNote) throws java.sql.SQLException{
		if(isSame(npNote, getNpNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getNpNote();
		this.npNote=npNote;
		setProperty("NP_NOTE", npNote, oldValue);
	}
	@Column(name="LG_NOTE",nullable=true,length=256)
	public String getLgNote(){
		if(getPtr()!=null)
			return getPtr().getLgNote();
		return lgNote;
	}
	public void setLgNote(String lgNote) throws java.sql.SQLException{
		if(isSame(lgNote, getLgNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getLgNote();
		this.lgNote=lgNote;
		setProperty("LG_NOTE", lgNote, oldValue);
	}
	@Column(name="USER_SP_NOTE",nullable=true,length=256)
	public String getUserSpNote(){
		if(getPtr()!=null)
			return getPtr().getUserSpNote();
		return userSpNote;
	}
	public void setUserSpNote(String userSpNote) throws java.sql.SQLException{
		if(isSame(userSpNote, getUserSpNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getUserSpNote();
		this.userSpNote=userSpNote;
		setProperty("USER_SP_NOTE", userSpNote, oldValue);
	}
	@Column(name="DEP_GEN_NOTE",nullable=true,length=256)
	public String getDepGenNote(){
		if(getPtr()!=null)
			return getPtr().getDepGenNote();
		return depGenNote;
	}
	public void setDepGenNote(String depGenNote) throws java.sql.SQLException{
		if(isSame(depGenNote, getDepGenNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getDepGenNote();
		this.depGenNote=depGenNote;
		setProperty("DEP_GEN_NOTE", depGenNote, oldValue);
	}
	@Column(name="BYPASS_GEN_NOTE",nullable=true,length=256)
	public String getBypassGenNote(){
		if(getPtr()!=null)
			return getPtr().getBypassGenNote();
		return bypassGenNote;
	}
	public void setBypassGenNote(String bypassGenNote) throws java.sql.SQLException{
		if(isSame(bypassGenNote, getBypassGenNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getBypassGenNote();
		this.bypassGenNote=bypassGenNote;
		setProperty("BYPASS_GEN_NOTE", bypassGenNote, oldValue);
	}
	@Column(name="PEAK_DATE",nullable=true,length=7)
	public Calendar getPeakDate(){
		if(getPtr()!=null)
			return getPtr().getPeakDate();
		return peakDate;
	}
	public void setPeakDate(Calendar peakDate) throws java.sql.SQLException{
		if(isSame(peakDate, getPeakDate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getPeakDate();
		this.peakDate=peakDate;
		setProperty("PEAK_DATE", peakDate, oldValue);
	}
	@Column(name="ALT_ADJ_PEAK",nullable=true,length=24)
	public double getAltAdjPeak(){
		if(getPtr()!=null)
			return getPtr().getAltAdjPeak();
		return altAdjPeak;
	}
	public void setAltAdjPeak(double altAdjPeak) throws java.sql.SQLException{
		if(isSame(altAdjPeak, getAltAdjPeak()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getAltAdjPeak();
		this.altAdjPeak=altAdjPeak;
		setProperty("ALT_ADJ_PEAK", altAdjPeak, oldValue);
	}
	@Column(name="USE_ALT",nullable=true,length=1)
	public boolean isUseAlt(){
		if(getPtr()!=null)
			return getPtr().isUseAlt();
		return useAlt;
	}
	public void setUseAlt(boolean useAlt) throws java.sql.SQLException{
		if(isSame(useAlt, isUseAlt()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUseAlt();
		this.useAlt=useAlt;
		setProperty("USE_ALT", useAlt, oldValue);
	}
	@Column(name="PA_FINALIZED",nullable=true,length=1)
	public boolean isPaFinalized(){
		if(getPtr()!=null)
			return getPtr().isPaFinalized();
		return paFinalized;
	}
	public void setPaFinalized(boolean paFinalized) throws java.sql.SQLException{
		if(isSame(paFinalized, isPaFinalized()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isPaFinalized();
		this.paFinalized=paFinalized;
		setProperty("PA_FINALIZED", paFinalized, oldValue);
	}
	@Column(name="PA_APPROVED",nullable=true,length=1)
	public boolean isPaApproved(){
		if(getPtr()!=null)
			return getPtr().isPaApproved();
		return paApproved;
	}
	public void setPaApproved(boolean paApproved) throws java.sql.SQLException{
		if(isSame(paApproved, isPaApproved()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isPaApproved();
		this.paApproved=paApproved;
		setProperty("PA_APPROVED", paApproved, oldValue);
	}
	@Column(name="LG_FINALIZED",nullable=true,length=1)
	public boolean isLgFinalized(){
		if(getPtr()!=null)
			return getPtr().isLgFinalized();
		return lgFinalized;
	}
	public void setLgFinalized(boolean lgFinalized) throws java.sql.SQLException{
		if(isSame(lgFinalized, isLgFinalized()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isLgFinalized();
		this.lgFinalized=lgFinalized;
		setProperty("LG_FINALIZED", lgFinalized, oldValue);
	}
	@Column(name="LG_APPROVED",nullable=true,length=1)
	public boolean isLgApproved(){
		if(getPtr()!=null)
			return getPtr().isLgApproved();
		return lgApproved;
	}
	public void setLgApproved(boolean lgApproved) throws java.sql.SQLException{
		if(isSame(lgApproved, isLgApproved()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isLgApproved();
		this.lgApproved=lgApproved;
		setProperty("LG_APPROVED", lgApproved, oldValue);
	}
	@Column(name="SS_FINALIZED",nullable=true,length=1)
	public boolean isSsFinalized(){
		if(getPtr()!=null)
			return getPtr().isSsFinalized();
		return ssFinalized;
	}
	public void setSsFinalized(boolean ssFinalized) throws java.sql.SQLException{
		if(isSame(ssFinalized, isSsFinalized()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isSsFinalized();
		this.ssFinalized=ssFinalized;
		setProperty("SS_FINALIZED", ssFinalized, oldValue);
	}
	@Column(name="SS_APPROVED",nullable=true,length=1)
	public boolean isSsApproved(){
		if(getPtr()!=null)
			return getPtr().isSsApproved();
		return ssApproved;
	}
	public void setSsApproved(boolean ssApproved) throws java.sql.SQLException{
		if(isSame(ssApproved, isSsApproved()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isSsApproved();
		this.ssApproved=ssApproved;
		setProperty("SS_APPROVED", ssApproved, oldValue);
	}
	@Column(name="IN_SERVICE_PROJ_ID",nullable=true,length=9)
	public int getInServiceProjId(){
		if(getPtr()!=null)
			return getPtr().getInServiceProjId();
		return inServiceProjId;
	}
	public void setInServiceProjId(int inServiceProjId) throws java.sql.SQLException{
		if(isSame(inServiceProjId, getInServiceProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getInServiceProjId();
		this.inServiceProjId=inServiceProjId;
		setProperty("IN_SERVICE_PROJ_ID", inServiceProjId, oldValue);
		proj2=null;
	}
	@Column(name="OUT_SERVICE_PROJ_ID",nullable=true,length=9)
	public int getOutServiceProjId(){
		if(getPtr()!=null)
			return getPtr().getOutServiceProjId();
		return outServiceProjId;
	}
	public void setOutServiceProjId(int outServiceProjId) throws java.sql.SQLException{
		if(isSame(outServiceProjId, getOutServiceProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getOutServiceProjId();
		this.outServiceProjId=outServiceProjId;
		setProperty("OUT_SERVICE_PROJ_ID", outServiceProjId, oldValue);
		proj3=null;
	}
	@Column(name="USE_USER_PRN",nullable=true,length=1)
	public boolean isUseUserPrn(){
		if(getPtr()!=null)
			return getPtr().isUseUserPrn();
		return useUserPrn;
	}
	public void setUseUserPrn(boolean useUserPrn) throws java.sql.SQLException{
		if(isSame(useUserPrn, isUseUserPrn()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUseUserPrn();
		this.useUserPrn=useUserPrn;
		setProperty("USE_USER_PRN", useUserPrn, oldValue);
	}
	@Column(name="USER_PRN",nullable=true,length=24)
	public double getUserPrn(){
		if(getPtr()!=null)
			return getPtr().getUserPrn();
		return userPrn;
	}
	public void setUserPrn(double userPrn) throws java.sql.SQLException{
		if(isSame(userPrn, getUserPrn()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getUserPrn();
		this.userPrn=userPrn;
		setProperty("USER_PRN", userPrn, oldValue);
	}
	@Column(name="PREV_P_R_N",nullable=true,length=24)
	public double getPrevPRN(){
		if(getPtr()!=null)
			return getPtr().getPrevPRN();
		return prevPRN;
	}
	public void setPrevPRN(double prevPRN) throws java.sql.SQLException{
		if(isSame(prevPRN, getPrevPRN()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getPrevPRN();
		this.prevPRN=prevPRN;
		setProperty("PREV_P_R_N", prevPRN, oldValue);
	}
	public Proj getProj()throws java.sql.SQLException{
		if(proj==null)
			proj=Proj.getInstance(getPlanyear(), getSimId(), getProjId());
		return proj;
	}
	public void setProj(Proj proj)throws java.sql.SQLException{
		setProjId(proj==null?0:proj.getProjId());
		this.proj=proj;
	}
	public Proj getProj2()throws java.sql.SQLException{
		if(proj2==null)
			proj2=Proj.getInstance(getPlanyear(), getSimId(), getInServiceProjId());
		return proj2;
	}
	public void setProj2(Proj proj2)throws java.sql.SQLException{
		setInServiceProjId(proj2==null?0:proj2.getProjId());
		this.proj2=proj2;
	}
	public Proj getProj3()throws java.sql.SQLException{
		if(proj3==null)
			proj3=Proj.getInstance(getPlanyear(), getSimId(), getOutServiceProjId());
		return proj3;
	}
	public void setProj3(Proj proj3)throws java.sql.SQLException{
		setOutServiceProjId(proj3==null?0:proj3.getProjId());
		this.proj3=proj3;
	}
	public Simulation getSimulation()throws java.sql.SQLException{
		if(simulation==null)
			simulation=Simulation.getInstance(getPlanyear(), getSimId());
		return simulation;
	}
	public void setSimulation(Simulation simulation)throws java.sql.SQLException{
		setSimId(simulation==null?0:simulation.getSimId());
		this.simulation=simulation;
	}
	public Sub getSub()throws java.sql.SQLException{
		if(sub==null)
			sub=Sub.getInstance(getPlanyear(), getSubId());
		return sub;
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		setSubId(sub==null?0:sub.getSubId());
		this.sub=sub;
	}
	public SimSub copy()throws java.sql.SQLException{
		SimSub cp = new SimSub((SimSub)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SimSubDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SimSubDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getSubId(),o.getSubId())) diffs.add("SUB_ID");
		if(!isSame(getProjId(),o.getProjId())) diffs.add("PROJ_ID");
		if(!isSame(getNameplate(),o.getNameplate())) diffs.add("NAMEPLATE");
		if(!isSame(getPllFactor(),o.getPllFactor())) diffs.add("PLL_FACTOR");
		if(!isSame(getInServiceDate(),o.getInServiceDate())) diffs.add("IN_SERVICE_DATE");
		if(!isSame(getOutServiceDate(),o.getOutServiceDate())) diffs.add("OUT_SERVICE_DATE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getWsNote(),o.getWsNote())) diffs.add("WS_NOTE");
		if(!isSame(getCriteriaNote(),o.getCriteriaNote())) diffs.add("CRITERIA_NOTE");
		if(!isSame(getTsNote(),o.getTsNote())) diffs.add("TS_NOTE");
		if(!isSame(getOpDrfNote(),o.getOpDrfNote())) diffs.add("OP_DRF_NOTE");
		if(!isSame(getPllNote(),o.getPllNote())) diffs.add("PLL_NOTE");
		if(!isSame(getNpNote(),o.getNpNote())) diffs.add("NP_NOTE");
		if(!isSame(getLgNote(),o.getLgNote())) diffs.add("LG_NOTE");
		if(!isSame(getUserSpNote(),o.getUserSpNote())) diffs.add("USER_SP_NOTE");
		if(!isSame(getDepGenNote(),o.getDepGenNote())) diffs.add("DEP_GEN_NOTE");
		if(!isSame(getBypassGenNote(),o.getBypassGenNote())) diffs.add("BYPASS_GEN_NOTE");
		if(!isSame(getPeakDate(),o.getPeakDate())) diffs.add("PEAK_DATE");
		if(!isSame(getAltAdjPeak(),o.getAltAdjPeak())) diffs.add("ALT_ADJ_PEAK");
		if(!isSame(isUseAlt(),o.isUseAlt())) diffs.add("USE_ALT");
		if(!isSame(isPaFinalized(),o.isPaFinalized())) diffs.add("PA_FINALIZED");
		if(!isSame(isPaApproved(),o.isPaApproved())) diffs.add("PA_APPROVED");
		if(!isSame(isLgFinalized(),o.isLgFinalized())) diffs.add("LG_FINALIZED");
		if(!isSame(isLgApproved(),o.isLgApproved())) diffs.add("LG_APPROVED");
		if(!isSame(isSsFinalized(),o.isSsFinalized())) diffs.add("SS_FINALIZED");
		if(!isSame(isSsApproved(),o.isSsApproved())) diffs.add("SS_APPROVED");
		if(!isSame(getInServiceProjId(),o.getInServiceProjId())) diffs.add("IN_SERVICE_PROJ_ID");
		if(!isSame(getOutServiceProjId(),o.getOutServiceProjId())) diffs.add("OUT_SERVICE_PROJ_ID");
		if(!isSame(isUseUserPrn(),o.isUseUserPrn())) diffs.add("USE_USER_PRN");
		if(!isSame(getUserPrn(),o.getUserPrn())) diffs.add("USER_PRN");
		if(!isSame(getPrevPRN(),o.getPrevPRN())) diffs.add("PREV_P_R_N");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
