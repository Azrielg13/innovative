package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PifStatus;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PifStatusDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,STATUS_ID};
	public static enum PROPERTY{PLANYEAR,STATUS_ID,STATUS,STATUS_CODE,COLOR_RGB,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int STATUSID_LIMIT = 9;
	public final static int STATUS_LIMIT = 32;
	public final static int STATUSCODE_LIMIT = 1;
	public final static int COLORRGB_LIMIT = 8;
	private int planyear;
	private int statusId;
	private String status;
	private String statusCode;
	private int colorRgb;
	private Department department;
	public static PifStatus getInstance(int planyear, int statusId)throws java.sql.SQLException{
		return getInstance(planyear, statusId, true);
	}
	public static PifStatus getInstance(int planyear, int statusId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, statusId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, statusId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifStatus o = null;
		if(cache != null && cache.contains(PifStatus.class, pk))
			o = em.find(PifStatus.class, pk);
		if(o==null && getAICache().contains(PifStatus.class, pk))
			o = getAICache().find(PifStatus.class, pk);
		if(o==null && fetch)
			o = em.find(PifStatus.class, pk);
		if(o==null && fetch && PifStatus.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifStatus(planyear, statusId);
			getAICache().cache(PifStatus.class, o);
		}
		return o;
	}
	public static Collection<PifStatus> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifStatus> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifStatus> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifStatus o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifStatus> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifStatus> tq = em.createQuery(jpql,PifStatus.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifStatus> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifStatus> tq = em.createNamedQuery(name,PifStatus.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifStatusDAO(){}
	public PifStatusDAO(int planyear, int statusId){
		this.planyear=planyear;
		this.statusId=statusId;
	}
	public PifStatusDAO(PifStatusDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(PifStatusDAO orig){
		this.status=orig.getStatus();
		this.statusCode=orig.getStatusCode();
		this.colorRgb=orig.getColorRgb();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, statusId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI645_SEQ",sequenceName="MDI645_SEQ")
	@Column(name="STATUS_ID",nullable=false,length=9)
	public int getStatusId(){
		return statusId;
	}
	public void setStatusId(int statusId) throws java.sql.SQLException{
		if(isSame(statusId, getStatusId()))return;
		int oldValue = getStatusId();
		this.statusId=statusId;
		setProperty("STATUS_ID", statusId, oldValue);
	}
	@Column(name="STATUS",nullable=false,length=32)
	public String getStatus(){
		return status;
	}
	public void setStatus(String status) throws java.sql.SQLException{
		if(isSame(status, getStatus()))return;
		String oldValue = getStatus();
		this.status=status;
		setProperty("STATUS", status, oldValue);
	}
	@Column(name="STATUS_CODE",nullable=true,length=1)
	public String getStatusCode(){
		return statusCode;
	}
	public void setStatusCode(String statusCode) throws java.sql.SQLException{
		if(isSame(statusCode, getStatusCode()))return;
		String oldValue = getStatusCode();
		this.statusCode=statusCode;
		setProperty("STATUS_CODE", statusCode, oldValue);
	}
	@Column(name="COLOR_RGB",nullable=true,length=8)
	public int getColorRgb(){
		return colorRgb;
	}
	public void setColorRgb(int colorRgb) throws java.sql.SQLException{
		if(isSame(colorRgb, getColorRgb()))return;
		int oldValue = getColorRgb();
		this.colorRgb=colorRgb;
		setProperty("COLOR_RGB", colorRgb, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public PifStatus copy()throws java.sql.SQLException{
		PifStatus cp = new PifStatus((PifStatus)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifStatusDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PifStatusDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getStatusId(),o.getStatusId())) diffs.add("STATUS_ID");
		if(!isSame(getStatus(),o.getStatus())) diffs.add("STATUS");
		if(!isSame(getStatusCode(),o.getStatusCode())) diffs.add("STATUS_CODE");
		if(!isSame(getColorRgb(),o.getColorRgb())) diffs.add("COLOR_RGB");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
