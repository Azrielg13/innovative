/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Rectangle;

import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

import com.jidesoft.pane.BookmarkPane;
import com.jidesoft.plaf.UIDefaultsLookup;
import com.jidesoft.plaf.basic.ThemePainter;
import com.jidesoft.swing.Resizable;
import com.jidesoft.swing.ResizablePanel;

public class ESPBookmarkPane extends BookmarkPane {

	/**
	 * 
	 */
	private static final long serialVersionUID = 5972303482680430351L;

	public ESPBookmarkPane() {
		super();
		setBorder(new HierarchicalPanelBorder());
	}

	public void insertTab(String title, Icon icon, Component component,
			String tip, int index) {
		if (!(component instanceof ResizablePanel)) {
			ResizablePanel panel = new ResizablePanel(new BorderLayout()) {
				/**
				 * 
				 */
				private static final long serialVersionUID = 3686507894722072833L;

				@Override
				protected Resizable createResizable() {
					Resizable resizable = new Resizable(this);
					resizable.setResizableCorners(Resizable.LOWER);
					return resizable;
				}
			};
			panel.add(component);
			panel.setBorder(new EmptyBorder(0, 0, 4, 0) {
				/**
				 * 
				 */
				private static final long serialVersionUID = 6831585369724096735L;

				@Override
				public void paintBorder(Component c, Graphics g, int x, int y,
						int width, int height) {
					super.paintBorder(c, g, x, y, width, height);
					ThemePainter painter = (ThemePainter) UIDefaultsLookup
							.get("Theme.painter");
					if (painter != null) {
						Insets insets = getBorderInsets(c);
						Rectangle rect = new Rectangle(0, y + height
								- insets.bottom, width, insets.bottom);
						painter.paintGripper((JComponent) c, g, rect,
								SwingConstants.HORIZONTAL,
								ThemePainter.STATE_DEFAULT);
					}
				}
			});
			super.insertTab(title, icon, panel, tip, index);
		} else {
			super.insertTab(title, icon, component, tip, index);
		}
	}

	class HierarchicalPanelBorder implements Border {
		public void paintBorder(Component c, Graphics g, int x, int y,
				int width, int height) {
			g.setColor(UIDefaultsLookup.getColor("controlShadow"));
			g.drawLine(x, y, x + width - 1, y);
			g.setColor(UIDefaultsLookup.getColor("controlShadow"));
			g.drawLine(x, y + height - 1, x + width - 1, y + height - 1);
			g.setColor(UIDefaultsLookup.getColor("control"));
			g.drawLine(x + width - 1, y, x + width - 1, y + height - 1);
			g.drawLine(x + width - 1, y, x + width - 1, y + height - 1);
		}

		public Insets getBorderInsets(Component c) {
			return new Insets(1, 1, 1, 1);
		}

		public boolean isBorderOpaque() {
			return true;
		}

	}

}
