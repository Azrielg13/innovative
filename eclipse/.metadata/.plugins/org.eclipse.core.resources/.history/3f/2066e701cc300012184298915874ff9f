package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.BlobFile;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.SubFile;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SubFileDAO extends BlobFile{
	public static enum KEY_PROPERTY{PLANYEAR,FILE_ID};
	public static enum PROPERTY{PLANYEAR,FILE_ID,SUB_ID,FILE_NAME,FILE_SIZE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int FILEID_LIMIT = 9;
	public final static int SUBID_LIMIT = 9;
	public final static int FILENAME_LIMIT = 64;
	public final static int FILESIZE_LIMIT = 9;
	private int planyear;
	private int fileId;
	private int subId;
	private String fileName;
	private int fileSize;
	private Sub sub;
	public static SubFile getInstance(int planyear, int fileId)throws java.sql.SQLException{
		return getInstance(planyear, fileId, true);
	}
	public static SubFile getInstance(int planyear, int fileId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, fileId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, fileId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SubFile o = null;
		if(cache != null && cache.contains(SubFile.class, pk))
			o = em.find(SubFile.class, pk);
		if(o==null && getAICache().contains(SubFile.class, pk))
			o = getAICache().find(SubFile.class, pk);
		if(o==null && fetch)
			o = em.find(SubFile.class, pk);
		if(o==null && fetch && SubFile.class.getAnnotation(AutoInsertable.class) != null){
			o = new SubFile(planyear, fileId);
			getAICache().cache(SubFile.class, o);
		}
		return o;
	}
	public static Collection<SubFile> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SubFile> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SubFile> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SubFile o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SubFile> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubFile> tq = em.createQuery(jpql,SubFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SubFile> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubFile> tq = em.createNamedQuery(name,SubFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SubFileDAO(){}
	public SubFileDAO(int planyear, int fileId){
		this.planyear=planyear;
		this.fileId=fileId;
	}
	public SubFileDAO(SubFileDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(SubFileDAO orig){
		this.subId=orig.getSubId();
		this.fileName=orig.getFileName();
		this.fileSize=orig.getFileSize();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, fileId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI160_SEQ",sequenceName="MDI160_SEQ")
	@Column(name="FILE_ID",nullable=false,length=9)
	public int getFileId(){
		return fileId;
	}
	public void setFileId(int fileId) throws java.sql.SQLException{
		if(isSame(fileId, getFileId()))return;
		int oldValue = getFileId();
		this.fileId=fileId;
		setProperty("FILE_ID", fileId, oldValue);
	}
	@Column(name="SUB_ID",nullable=false,length=9)
	public int getSubId(){
		return subId;
	}
	public void setSubId(int subId) throws java.sql.SQLException{
		if(isSame(subId, getSubId()))return;
		int oldValue = getSubId();
		this.subId=subId;
		setProperty("SUB_ID", subId, oldValue);
		sub=null;
	}
	@Column(name="FILE_NAME",nullable=false,length=64)
	public String getFileName(){
		return fileName;
	}
	public void setFileName(String fileName) throws java.sql.SQLException{
		if(isSame(fileName, getFileName()))return;
		String oldValue = getFileName();
		this.fileName=fileName;
		setProperty("FILE_NAME", fileName, oldValue);
	}
	@Column(name="FILE_SIZE",nullable=false,length=9)
	public int getFileSize(){
		return fileSize;
	}
	public void setFileSize(int fileSize) throws java.sql.SQLException{
		if(isSame(fileSize, getFileSize()))return;
		int oldValue = getFileSize();
		this.fileSize=fileSize;
		setProperty("FILE_SIZE", fileSize, oldValue);
	}
	public Sub getSub()throws java.sql.SQLException{
		if(sub==null)
			sub=Sub.getInstance(getPlanyear(), getSubId());
		return sub;
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		setSubId(sub==null?0:sub.getSubId());
		this.sub=sub;
	}
	public SubFile copy()throws java.sql.SQLException{
		SubFile cp = new SubFile((SubFile)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SubFileDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SubFileDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getFileId(),o.getFileId())) diffs.add("FILE_ID");
		if(!isSame(getSubId(),o.getSubId())) diffs.add("SUB_ID");
		if(!isSame(getFileName(),o.getFileName())) diffs.add("FILE_NAME");
		if(!isSame(getFileSize(),o.getFileSize())) diffs.add("FILE_SIZE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
