/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.TreeSet;


/**
 * The ABankTie Object -
 * This object creates a tie object that
 * has a collection of bbank from ties and a
 * collection of bbank to ties.  This object also
 * has a method to get a transfer amount for
 * a given year.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class ParentTie implements SubTie, Comparable<Object>{
	
	/** The this abank. */
	private Sub thisAbank;
	
	/** The other abank. */
	private Sub otherAbank;
    
    /** The from ties. */
    private TreeSet<BbankTie> fromTies = new TreeSet<BbankTie>();
    
    /** The to ties. */
    private TreeSet<BbankTie> toTies = new TreeSet<BbankTie>();
    
    private int simId;

    /**
	 * The Constructor.
	 * 
	 * @param otherAbank the other abank
	 * @param thisAbank the this abank
	 * 
	 * @throws SQLException the SQL exception
	 */
    public ParentTie(Abank thisAbank, Abank otherAbank, int simId)throws SQLException{
        this.thisAbank=thisAbank;
		this.otherAbank=otherAbank;
		this.simId = simId;
    }
    
    /**
     * The Constructor.
     * 
     * @param otherAbank the other abank
     * @param thisAbank the this abank
     * 
     * @throws SQLException the SQL exception
     */
    public ParentTie(Bbank thisAbank, Bbank otherAbank)throws SQLException{
        this.thisAbank=thisAbank;
        this.otherAbank=otherAbank;
    }
	
    /**
     * Gets the from ties.
     * 
     * @return the from ties
     * 
     * @throws SQLException the SQL exception
     */
    public TreeSet<BbankTie> getFromTies()throws SQLException{
		return fromTies;
	}
	
    /**
     * Gets the to ties.
     * 
     * @return the to ties
     * 
     * @throws SQLException the SQL exception
     */
    public TreeSet<BbankTie> getToTies()throws SQLException{
		return toTies;
	}
	
    /**
     * Adds the from tie.
     * 
     * @param tie the tie
     */
    public void addFromTie(BbankTie tie){
		fromTies.add(tie);
	}
	
    /**
     * Adds the to tie.
     * 
     * @param tie the tie
     */
    public void addToTie(BbankTie tie){
		toTies.add(tie);
	}
	
    /*
     *  (non-Javadoc)
     * @see com.sce.mdi.object.BBankTie#getTransfer(int)
     */
    /**
     * Gets the transfer.
     * 
     * @param year the year
     * @param simId the sim id
     * 
     * @return the transfer
     * 
     * @throws SQLException the SQL exception
     */
    public ABankTransfer getTransfer(int year)throws SQLException{
		ABankTransfer transfer = new ABankTransfer(this,year);
		TreeSet<Bbank> thisAbankSubs = thisAbank.getYear(simId,year).getDownStreamSubs();
		TreeSet<Bbank> otherAbankSubs = otherAbank.getYear(simId,year).getDownStreamSubs();
		for(BbankTie st : fromTies) {
			if(thisAbankSubs.contains(st.getFromSub())) {
				if(otherAbankSubs.contains(st.getToSub()))
					transfer.addFromTransfer(st.getTransfer(year));
			}
		}
		for(BbankTie st : toTies) {
			if(thisAbankSubs.contains(st.getToSub())) {
				if(otherAbankSubs.contains(st.getFromSub()))
					transfer.addToTransfer(st.getTransfer(year));
			}
		}
		return transfer;
	}
	
    /*
     *  (non-Javadoc)
     * @see com.sce.mdi.object.BBankTie#getFromSub()
     */
    /**
     * Gets the from sub.
     * 
     * @return the from sub
     */
    public Sub getFromSub() {
		return getOtherAbank();
	}
	
    /*
     *  (non-Javadoc)
     * @see com.sce.mdi.object.BBankTie#getToSub()
     */
    /**
     * Gets the to sub.
     * 
     * @return the to sub
     */
    public Sub getToSub() {
		return getOtherAbank();
	}
    
    /**
     * Gets the other abank.
     * 
     * @return otherAbank
     */
    public Sub getOtherAbank() {
		return otherAbank;
	}
	
    /*
     *  (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    /**
     * To string.
     * 
     * @return the string
     */
    public String toString(){
		return otherAbank.toString();
	}
	
    /**
     * Compare to.
     * 
     * @param o the o
     * 
     * @return the int
     */
    public int compareTo(Object o) {
		if(o instanceof ParentTie) {
			return otherAbank.compareTo(((ParentTie)o).getOtherAbank());
		}
		return toString().compareTo(o.toString());
	}
}
