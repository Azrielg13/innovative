package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.ElemEscRate;
import com.sce.esp.object.model.SceElem;
import com.sce.esp.object.model.SceProjElemCost;
import com.sce.esp.object.model.ScopeTypeElem;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SceElemDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCE_ELEM_ID};
	public static enum PROPERTY{SCE_ELEM_ID,NAME,DESCRIPTION,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1};
	public final static int SCEELEMID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 256;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int sceElemId;
	private String name;
	private String description;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Collection<SceProjElemCost> sceProjElemCosts;
	private Collection<ScopeTypeElem> scopeTypeElems;
	private Collection<ElemEscRate> elemEscRates;
	public static SceElem getInstance(int sceElemId)throws java.sql.SQLException{
		return getInstance(sceElemId, true);
	}
	public static SceElem getInstance(int sceElemId, boolean fetch)throws java.sql.SQLException{
		if(isNull(sceElemId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(sceElemId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceElem o = null;
		if(cache != null && cache.contains(SceElem.class, pk))
			o = em.find(SceElem.class, pk);
		if(o==null && getAICache().contains(SceElem.class, pk))
			o = getAICache().find(SceElem.class, pk);
		if(o==null && fetch)
			o = em.find(SceElem.class, pk);
		if(o==null && fetch && SceElem.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceElem(sceElemId);
			getAICache().cache(SceElem.class, o);
		}
		return o;
	}
	public static Collection<SceElem> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceElem> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceElem> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceElem o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceElem> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceElem> tq = em.createQuery(jpql,SceElem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceElem> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceElem> tq = em.createNamedQuery(name,SceElem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceElemDAO(){}
	public SceElemDAO(int sceElemId){
		this.sceElemId=sceElemId;
	}
	public SceElemDAO(SceElemDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SceElemDAO orig){
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{sceElemId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS70_SEQ",sequenceName="MDIS70_SEQ")
	@Column(name="SCE_ELEM_ID",nullable=false,length=9)
	public int getSceElemId(){
		return sceElemId;
	}
	public void setSceElemId(int sceElemId) throws java.sql.SQLException{
		if(isSame(sceElemId, getSceElemId()))return;
		int oldValue = getSceElemId();
		this.sceElemId=sceElemId;
		setProperty("SCE_ELEM_ID", sceElemId, oldValue);
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Collection<SceProjElemCost> getSceProjElemCosts()throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemCosts != null){
			if(sceProjElemCosts == null)
				sceProjElemCosts = new TreeSet<SceProjElemCost>();
			return sceProjElemCosts;
		}
		return SceProjElemCost.getNamedCollection("findBySceElem",getSceElemId());
	}
	public void addSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		sceProjElemCost.setSceElem((SceElem)this);
		if(isNewInstance() || sceProjElemCosts != null)
			getSceProjElemCosts().add(sceProjElemCost);
		else
			sceProjElemCost.insert();
	}
	public void removeSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemCosts != null)
			getSceProjElemCosts().remove(sceProjElemCost);
		else
			sceProjElemCost.delete();
	}
	public Collection<ScopeTypeElem> getScopeTypeElems()throws java.sql.SQLException{
		if(isNewInstance() || scopeTypeElems != null){
			if(scopeTypeElems == null)
				scopeTypeElems = new TreeSet<ScopeTypeElem>();
			return scopeTypeElems;
		}
		return ScopeTypeElem.getNamedCollection("findBySceElem",getSceElemId());
	}
	public void addScopeTypeElem(ScopeTypeElem scopeTypeElem)throws java.sql.SQLException{
		scopeTypeElem.setSceElem((SceElem)this);
		if(isNewInstance() || scopeTypeElems != null)
			getScopeTypeElems().add(scopeTypeElem);
		else
			scopeTypeElem.insert();
	}
	public void removeScopeTypeElem(ScopeTypeElem scopeTypeElem)throws java.sql.SQLException{
		if(isNewInstance() || scopeTypeElems != null)
			getScopeTypeElems().remove(scopeTypeElem);
		else
			scopeTypeElem.delete();
	}
	public Collection<ElemEscRate> getElemEscRates()throws java.sql.SQLException{
		if(isNewInstance() || elemEscRates != null){
			if(elemEscRates == null)
				elemEscRates = new TreeSet<ElemEscRate>();
			return elemEscRates;
		}
		return ElemEscRate.getNamedCollection("findBySceElem",getSceElemId());
	}
	public void addElemEscRate(ElemEscRate elemEscRate)throws java.sql.SQLException{
		elemEscRate.setSceElem((SceElem)this);
		if(isNewInstance() || elemEscRates != null)
			getElemEscRates().add(elemEscRate);
		else
			elemEscRate.insert();
	}
	public void removeElemEscRate(ElemEscRate elemEscRate)throws java.sql.SQLException{
		if(isNewInstance() || elemEscRates != null)
			getElemEscRates().remove(elemEscRate);
		else
			elemEscRate.delete();
	}
	public SceElem copy()throws java.sql.SQLException{
		SceElem cp = new SceElem((SceElem)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceElemDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(SceProjElemCost child:getSceProjElemCosts())
			cp.addSceProjElemCost(child.copy());
		for(ScopeTypeElem child:getScopeTypeElems())
			cp.addScopeTypeElem(child.copy());
		for(ElemEscRate child:getElemEscRates())
			cp.addElemEscRate(child.copy());
	}
	public Vector<String> getDifference(SceElemDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getSceElemId(),o.getSceElemId())) diffs.add("SCE_ELEM_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
	}
	public void insertChildren()throws java.sql.SQLException{
		if(sceProjElemCosts != null){
			for(SceProjElemCost sceProjElemCost:getSceProjElemCosts())
				sceProjElemCost.setSceElem((SceElem)this);
		}
		if(scopeTypeElems != null){
			for(ScopeTypeElem scopeTypeElem:getScopeTypeElems())
				scopeTypeElem.setSceElem((SceElem)this);
		}
		if(elemEscRates != null){
			for(ElemEscRate elemEscRate:getElemEscRates())
				elemEscRate.setSceElem((SceElem)this);
		}
		if(sceProjElemCosts != null){
			for(SceProjElemCost sceProjElemCost:getSceProjElemCosts())
				if(sceProjElemCost.isNewInstance())
					sceProjElemCost.insert();
			sceProjElemCosts = null;
		}
		if(scopeTypeElems != null){
			for(ScopeTypeElem scopeTypeElem:getScopeTypeElems())
				if(scopeTypeElem.isNewInstance())
					scopeTypeElem.insert();
			scopeTypeElems = null;
		}
		if(elemEscRates != null){
			for(ElemEscRate elemEscRate:getElemEscRates())
				if(elemEscRate.isNewInstance())
					elemEscRate.insert();
			elemEscRates = null;
		}
	}
}
