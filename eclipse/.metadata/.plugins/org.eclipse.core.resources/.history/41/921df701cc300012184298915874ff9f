package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import java.util.Collection;
import java.util.Vector;

import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;

import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Issue;
import com.sce.esp.object.model.Resolver;
import com.sce.esp.object.model.User;
public abstract class ResolverDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ISSUE_ID,USER_ID};
	public static enum PROPERTY{ISSUE_ID,USER_ID,CLOSED,COMMENTS};
	public final static int ISSUEID_LIMIT = 9;
	public final static int USERID_LIMIT = 9;
	public final static int CLOSED_LIMIT = 9;
	public final static int COMMENTS_LIMIT = 512;
	private int issueId;
	private int userId;
	private int closed;
	private String comments;
	private Issue tits;
	private User tigUser;
	public static Resolver getInstance(int issueId, int userId)throws java.sql.SQLException{
		return getInstance(issueId, userId, true);
	}
	public static Resolver getInstance(int issueId, int userId, boolean fetch)throws java.sql.SQLException{
		if(isNull(issueId, userId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(issueId, userId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Resolver o = null;
		if(cache != null && cache.contains(Resolver.class, pk))
			o = em.find(Resolver.class, pk);
		if(o==null && getAICache().contains(Resolver.class, pk))
			o = getAICache().find(Resolver.class, pk);
		if(o==null && fetch)
			o = em.find(Resolver.class, pk);
		if(o==null && fetch && Resolver.class.getAnnotation(AutoInsertable.class) != null){
			o = new Resolver(issueId, userId);
			getAICache().cache(Resolver.class, o);
		}
		return o;
	}
	public static Collection<Resolver> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Resolver> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Resolver> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Resolver o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Resolver> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Resolver> tq = em.createQuery(jpql,Resolver.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Resolver> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Resolver> tq = em.createNamedQuery(name,Resolver.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ResolverDAO(){}
	public ResolverDAO(int issueId, int userId){
		this.issueId=issueId;
		this.userId=userId;
	}
	public ResolverDAO(ResolverDAO orig){
		super(orig);
		this.issueId=orig.getIssueId();
		this.userId=orig.getUserId();
		copyFrom(orig);
	}
	public void copyFrom(ResolverDAO orig){
		this.closed=orig.getClosed();
		this.comments=orig.getComments();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{issueId, userId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="ISSUE_ID",nullable=false,length=9)
	public int getIssueId(){
		return issueId;
	}
	public void setIssueId(int issueId) throws java.sql.SQLException{
		if(isSame(issueId, getIssueId()))return;
		int oldValue = getIssueId();
		this.issueId=issueId;
		setProperty("ISSUE_ID", issueId, oldValue);
		tits=null;
	}
	@Id
	@Column(name="USER_ID",nullable=false,length=9)
	public int getUserId(){
		return userId;
	}
	public void setUserId(int userId) throws java.sql.SQLException{
		if(isSame(userId, getUserId()))return;
		int oldValue = getUserId();
		this.userId=userId;
		setProperty("USER_ID", userId, oldValue);
		tigUser=null;
	}
	@Column(name="CLOSED",nullable=true,length=9)
	public int getClosed(){
		return closed;
	}
	public void setClosed(int closed) throws java.sql.SQLException{
		if(isSame(closed, getClosed()))return;
		int oldValue = getClosed();
		this.closed=closed;
		setProperty("CLOSED", closed, oldValue);
	}
	@Column(name="COMMENTS",nullable=true,length=512)
	public String getComments(){
		return comments;
	}
	public void setComments(String comments) throws java.sql.SQLException{
		if(isSame(comments, getComments()))return;
		String oldValue = getComments();
		this.comments=comments;
		setProperty("COMMENTS", comments, oldValue);
	}
	public Issue getTits()throws java.sql.SQLException{
		if(tits==null)
			tits=Issue.getInstance(getIssueId());
		return tits;
	}
	public void setTits(Issue tits)throws java.sql.SQLException{
		setIssueId(tits==null?0:tits.getIssueId());
		this.tits=tits;
	}
	public User getTigUser()throws java.sql.SQLException{
		if(tigUser==null)
			tigUser=User.getInstance(getUserId());
		return tigUser;
	}
	public void setTigUser(User tigUser)throws java.sql.SQLException{
		setUserId(tigUser==null?0:tigUser.getUsernameId());
		this.tigUser=tigUser;
	}
	public Resolver copy()throws java.sql.SQLException{
		Resolver cp = new Resolver((Resolver)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ResolverDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ResolverDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getIssueId(),o.getIssueId())) diffs.add("ISSUE_ID");
		if(!isSame(getUserId(),o.getUserId())) diffs.add("USER_ID");
		if(!isSame(getClosed(),o.getClosed())) diffs.add("CLOSED");
		if(!isSame(getComments(),o.getComments())) diffs.add("COMMENTS");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(tits != null && tits.isNewInstance())
				tits.insert();
		if(tigUser != null && tigUser.isNewInstance())
				tigUser.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
