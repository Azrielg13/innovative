package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.User;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SimulationDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID};
	public static enum PROPERTY{PLANYEAR,SIM_ID,BASE_SIM_ID,SIM_NAME,CREATOR_USERNAME_ID,NOTE,PLAN_FOR,COLOR_RGB,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int BASESIMID_LIMIT = 9;
	public final static int SIMNAME_LIMIT = 40;
	public final static int CREATORUSERNAMEID_LIMIT = 9;
	public final static int NOTE_LIMIT = 256;
	public final static int PLANFOR_LIMIT = 2;
	public final static int COLORRGB_LIMIT = 8;
	private int planyear;
	private int simId;
	private int baseSimId;
	private String simName;
	private int creatorUsernameId;
	private String note;
	private int planFor;
	private int colorRgb = 6929132;
	private Collection<Proj> projs;
	private Department department;
	private User user;
	public static Simulation getInstance(int planyear, int simId)throws java.sql.SQLException{
		return getInstance(planyear, simId, true);
	}
	public static Simulation getInstance(int planyear, int simId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Simulation o = null;
		if(cache != null && cache.contains(Simulation.class, pk))
			o = em.find(Simulation.class, pk);
		if(o==null && getAICache().contains(Simulation.class, pk))
			o = getAICache().find(Simulation.class, pk);
		if(o==null && fetch)
			o = em.find(Simulation.class, pk);
		if(o==null && fetch && Simulation.class.getAnnotation(AutoInsertable.class) != null){
			o = new Simulation(planyear, simId);
			getAICache().cache(Simulation.class, o);
		}
		return o;
	}
	public static Collection<Simulation> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Simulation> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Simulation> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Simulation o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Simulation> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Simulation> tq = em.createQuery(jpql,Simulation.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Simulation> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Simulation> tq = em.createNamedQuery(name,Simulation.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SimulationDAO(){}
	public SimulationDAO(int planyear, int simId){
		this.planyear=planyear;
		this.simId=simId;
	}
	public SimulationDAO(SimulationDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(SimulationDAO orig){
		this.baseSimId=orig.getBaseSimId();
		this.simName=orig.getSimName();
		this.creatorUsernameId=orig.getCreatorUsernameId();
		this.note=orig.getNote();
		this.planFor=orig.getPlanFor();
		this.colorRgb=orig.getColorRgb();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI020_SEQ",sequenceName="MDI020_SEQ")
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Column(name="BASE_SIM_ID",nullable=true,length=9)
	public int getBaseSimId(){
		return baseSimId;
	}
	public void setBaseSimId(int baseSimId) throws java.sql.SQLException{
		if(isSame(baseSimId, getBaseSimId()))return;
		int oldValue = getBaseSimId();
		this.baseSimId=baseSimId;
		setProperty("BASE_SIM_ID", baseSimId, oldValue);
	}
	@Column(name="SIM_NAME",nullable=false,length=40)
	public String getSimName(){
		return simName;
	}
	public void setSimName(String simName) throws java.sql.SQLException{
		if(isSame(simName, getSimName()))return;
		String oldValue = getSimName();
		this.simName=simName;
		setProperty("SIM_NAME", simName, oldValue);
	}
	@Column(name="CREATOR_USERNAME_ID",nullable=false,length=9)
	public int getCreatorUsernameId(){
		return creatorUsernameId;
	}
	public void setCreatorUsernameId(int creatorUsernameId) throws java.sql.SQLException{
		if(isSame(creatorUsernameId, getCreatorUsernameId()))return;
		int oldValue = getCreatorUsernameId();
		this.creatorUsernameId=creatorUsernameId;
		setProperty("CREATOR_USERNAME_ID", creatorUsernameId, oldValue);
		user=null;
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="PLAN_FOR",nullable=true,length=2)
	public int getPlanFor(){
		return planFor;
	}
	public void setPlanFor(int planFor) throws java.sql.SQLException{
		if(isSame(planFor, getPlanFor()))return;
		int oldValue = getPlanFor();
		this.planFor=planFor;
		setProperty("PLAN_FOR", planFor, oldValue);
	}
	@Column(name="COLOR_RGB",nullable=true,length=8)
	public int getColorRgb(){
		return colorRgb;
	}
	public void setColorRgb(int colorRgb) throws java.sql.SQLException{
		if(isSame(colorRgb, getColorRgb()))return;
		int oldValue = getColorRgb();
		this.colorRgb=colorRgb;
		setProperty("COLOR_RGB", colorRgb, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getCreatorUsernameId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setCreatorUsernameId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public Collection<Proj> getProjs()throws java.sql.SQLException{
		if(isNewInstance() || projs != null){
			if(projs == null)
				projs = new TreeSet<Proj>();
			return projs;
		}
		return Proj.getNamedCollection("findBySimulation",getPlanyear(), getSimId());
	}
	public void addProj(Proj proj)throws java.sql.SQLException{
		proj.setSimulation((Simulation)this);
		if(isNewInstance() || projs != null)
			getProjs().add(proj);
		else
			proj.insert();
	}
	public void removeProj(Proj proj)throws java.sql.SQLException{
		if(isNewInstance() || projs != null)
			getProjs().remove(proj);
		else
			proj.delete();
	}
	public Simulation copy()throws java.sql.SQLException{
		Simulation cp = new Simulation((Simulation)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SimulationDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(Proj child:getProjs())
			cp.addProj(child.copy());
	}
	public Vector<String> getDifference(SimulationDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getBaseSimId(),o.getBaseSimId())) diffs.add("BASE_SIM_ID");
		if(!isSame(getSimName(),o.getSimName())) diffs.add("SIM_NAME");
		if(!isSame(getCreatorUsernameId(),o.getCreatorUsernameId())) diffs.add("CREATOR_USERNAME_ID");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getPlanFor(),o.getPlanFor())) diffs.add("PLAN_FOR");
		if(!isSame(getColorRgb(),o.getColorRgb())) diffs.add("COLOR_RGB");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(projs != null){
			for(Proj proj:getProjs()){
				if(proj.isNewInstance())
					proj.setSimulation((Simulation)this);
				proj.insert();
			}
			projs = null;
		}
	}
}
