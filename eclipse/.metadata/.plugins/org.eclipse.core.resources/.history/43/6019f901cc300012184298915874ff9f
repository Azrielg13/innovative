package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AbankN1Tie;
import com.sce.esp.object.model.AbankShed;
import com.sce.esp.object.model.AgObject;
import com.sce.esp.object.model.Region;
import com.sce.esp.object.model.Sys;
import com.sce.esp.object.model.SysDaily;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SysDAO extends AgObject{
	public static enum KEY_PROPERTY{PLANYEAR,SYS_ID};
	public static enum PROPERTY{PLANYEAR,SYS_ID,REGION_ID,SYS_NUM,SYS_NAME,PRIMARY_KV,SECONDARY_KV,FOREIGN_SYS,ISO,N1_APPROVED,N1_FINALIZED,STV_FINALIZED,STV_APPROVED,VAR_ANALYSIS_TYPE,TEN_YEAR_SUM,WS_COUNT_BY_INSTANCE,LAST_CALC_WS_DATA,B_ACT,B_ADJ,LAST_CALC_B_LOAD,A_ACT,A_ADJ,LAST_CALC_A_LOAD,SUB_COUNT,CKT_COUNT,PEAK_FIN,PEAK_APP,LG_FIN,LG_APP,SS_FIN,SS_APP,CS_FIN,CS_APP,PROJ_FIN,PROJ_APP,EXCEP_FIN,EXCEP_APP,CONT_FIN,CONT_APP,N1_FIN,N1_APP,VAR_FIN,VAR_APP,LAST_CALC_FIN_APP,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SYSID_LIMIT = 9;
	public final static int REGIONID_LIMIT = 9;
	public final static int SYSNUM_LIMIT = 10;
	public final static int SYSNAME_LIMIT = 40;
	public final static int PRIMARYKV_LIMIT = 5;
	public final static int SECONDARYKV_LIMIT = 5;
	public final static int FOREIGNSYS_LIMIT = 1;
	public final static int ISO_LIMIT = 1;
	public final static int N1APPROVED_LIMIT = 1;
	public final static int N1FINALIZED_LIMIT = 1;
	public final static int STVFINALIZED_LIMIT = 1;
	public final static int STVAPPROVED_LIMIT = 1;
	public final static int VARANALYSISTYPE_LIMIT = 2;
	public final static int TENYEARSUM_LIMIT = 24;
	public final static int WSCOUNTBYINSTANCE_LIMIT = 4;
	public final static int LASTCALCWSDATA_LIMIT = 7;
	public final static int BACT_LIMIT = 24;
	public final static int BADJ_LIMIT = 24;
	public final static int LASTCALCBLOAD_LIMIT = 7;
	public final static int AACT_LIMIT = 24;
	public final static int AADJ_LIMIT = 24;
	public final static int LASTCALCALOAD_LIMIT = 7;
	public final static int SUBCOUNT_LIMIT = 4;
	public final static int CKTCOUNT_LIMIT = 4;
	public final static int PEAKFIN_LIMIT = 4;
	public final static int PEAKAPP_LIMIT = 4;
	public final static int LGFIN_LIMIT = 4;
	public final static int LGAPP_LIMIT = 4;
	public final static int SSFIN_LIMIT = 4;
	public final static int SSAPP_LIMIT = 4;
	public final static int CSFIN_LIMIT = 4;
	public final static int CSAPP_LIMIT = 4;
	public final static int PROJFIN_LIMIT = 4;
	public final static int PROJAPP_LIMIT = 4;
	public final static int EXCEPFIN_LIMIT = 4;
	public final static int EXCEPAPP_LIMIT = 4;
	public final static int CONTFIN_LIMIT = 4;
	public final static int CONTAPP_LIMIT = 4;
	public final static int N1FIN_LIMIT = 4;
	public final static int N1APP_LIMIT = 4;
	public final static int VARFIN_LIMIT = 4;
	public final static int VARAPP_LIMIT = 4;
	public final static int LASTCALCFINAPP_LIMIT = 7;
	private int planyear;
	private int sysId;
	private int regionId;
	private String sysNum;
	private String sysName;
	private double primaryKv;
	private double secondaryKv;
	private boolean foreignSys;
	private boolean iso;
	private boolean n1Approved;
	private boolean n1Finalized;
	private boolean stvFinalized;
	private boolean stvApproved;
	private int varAnalysisType;
	private double tenYearSum;
	private int wsCountByInstance;
	private Calendar lastCalcWsData;
	private double bAct;
	private double bAdj;
	private Calendar lastCalcBLoad;
	private double aAct;
	private double aAdj;
	private Calendar lastCalcALoad;
	private int subCount;
	private int cktCount;
	private int peakFin;
	private int peakApp;
	private int lgFin;
	private int lgApp;
	private int ssFin;
	private int ssApp;
	private int csFin;
	private int csApp;
	private int projFin;
	private int projApp;
	private int excepFin;
	private int excepApp;
	private int contFin;
	private int contApp;
	private int n1Fin;
	private int n1App;
	private int varFin;
	private int varApp;
	private Calendar lastCalcFinApp;
	private Collection<AbankN1Tie> abankN1Ties;
	private Collection<AbankShed> abankSheds;
	private Collection<SysDaily> sysDailys;
	private Region region;
	public static Sys getInstance(int planyear, int sysId)throws java.sql.SQLException{
		return getInstance(planyear, sysId, true);
	}
	public static Sys getInstance(int planyear, int sysId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, sysId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, sysId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Sys o = null;
		if(cache != null && cache.contains(Sys.class, pk))
			o = em.find(Sys.class, pk);
		if(o==null && getAICache().contains(Sys.class, pk))
			o = getAICache().find(Sys.class, pk);
		if(o==null && fetch)
			o = em.find(Sys.class, pk);
		if(o==null && fetch && Sys.class.getAnnotation(AutoInsertable.class) != null){
			o = new Sys(planyear, sysId);
			getAICache().cache(Sys.class, o);
		}
		return o;
	}
	public static Collection<Sys> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Sys> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Sys> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Sys o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Sys> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Sys> tq = em.createQuery(jpql,Sys.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Sys> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Sys> tq = em.createNamedQuery(name,Sys.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SysDAO(){}
	public SysDAO(int planyear, int sysId){
		this.planyear=planyear;
		this.sysId=sysId;
	}
	public SysDAO(SysDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(SysDAO orig){
		this.regionId=orig.getRegionId();
		this.sysNum=orig.getSysNum();
		this.sysName=orig.getSysName();
		this.primaryKv=orig.getPrimaryKv();
		this.secondaryKv=orig.getSecondaryKv();
		this.foreignSys=orig.isForeignSys();
		this.iso=orig.isIso();
		this.n1Approved=orig.isN1Approved();
		this.n1Finalized=orig.isN1Finalized();
		this.stvFinalized=orig.isStvFinalized();
		this.stvApproved=orig.isStvApproved();
		this.varAnalysisType=orig.getVarAnalysisType();
		this.tenYearSum=orig.getTenYearSum();
		this.wsCountByInstance=orig.getWsCountByInstance();
		this.lastCalcWsData=orig.getLastCalcWsData();
		this.bAct=orig.getBAct();
		this.bAdj=orig.getBAdj();
		this.lastCalcBLoad=orig.getLastCalcBLoad();
		this.aAct=orig.getAAct();
		this.aAdj=orig.getAAdj();
		this.lastCalcALoad=orig.getLastCalcALoad();
		this.subCount=orig.getSubCount();
		this.cktCount=orig.getCktCount();
		this.peakFin=orig.getPeakFin();
		this.peakApp=orig.getPeakApp();
		this.lgFin=orig.getLgFin();
		this.lgApp=orig.getLgApp();
		this.ssFin=orig.getSsFin();
		this.ssApp=orig.getSsApp();
		this.csFin=orig.getCsFin();
		this.csApp=orig.getCsApp();
		this.projFin=orig.getProjFin();
		this.projApp=orig.getProjApp();
		this.excepFin=orig.getExcepFin();
		this.excepApp=orig.getExcepApp();
		this.contFin=orig.getContFin();
		this.contApp=orig.getContApp();
		this.n1Fin=orig.getN1Fin();
		this.n1App=orig.getN1App();
		this.varFin=orig.getVarFin();
		this.varApp=orig.getVarApp();
		this.lastCalcFinApp=orig.getLastCalcFinApp();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, sysId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI060_SEQ",sequenceName="MDI060_SEQ")
	@Column(name="SYS_ID",nullable=false,length=9)
	public int getSysId(){
		return sysId;
	}
	public void setSysId(int sysId) throws java.sql.SQLException{
		if(isSame(sysId, getSysId()))return;
		int oldValue = getSysId();
		this.sysId=sysId;
		setProperty("SYS_ID", sysId, oldValue);
	}
	@Column(name="REGION_ID",nullable=false,length=9)
	public int getRegionId(){
		return regionId;
	}
	public void setRegionId(int regionId) throws java.sql.SQLException{
		if(isSame(regionId, getRegionId()))return;
		int oldValue = getRegionId();
		this.regionId=regionId;
		setProperty("REGION_ID", regionId, oldValue);
		region=null;
	}
	@Column(name="SYS_NUM",nullable=true,length=10)
	public String getSysNum(){
		return sysNum;
	}
	public void setSysNum(String sysNum) throws java.sql.SQLException{
		if(isSame(sysNum, getSysNum()))return;
		String oldValue = getSysNum();
		this.sysNum=sysNum;
		setProperty("SYS_NUM", sysNum, oldValue);
	}
	@Column(name="SYS_NAME",nullable=false,length=40)
	public String getSysName(){
		return sysName;
	}
	public void setSysName(String sysName) throws java.sql.SQLException{
		if(isSame(sysName, getSysName()))return;
		String oldValue = getSysName();
		this.sysName=sysName;
		setProperty("SYS_NAME", sysName, oldValue);
	}
	@Column(name="PRIMARY_KV",nullable=false,length=5)
	public double getPrimaryKv(){
		return primaryKv;
	}
	public void setPrimaryKv(double primaryKv) throws java.sql.SQLException{
		if(isSame(primaryKv, getPrimaryKv()))return;
		double oldValue = getPrimaryKv();
		this.primaryKv=primaryKv;
		setProperty("PRIMARY_KV", primaryKv, oldValue);
	}
	@Column(name="SECONDARY_KV",nullable=false,length=5)
	public double getSecondaryKv(){
		return secondaryKv;
	}
	public void setSecondaryKv(double secondaryKv) throws java.sql.SQLException{
		if(isSame(secondaryKv, getSecondaryKv()))return;
		double oldValue = getSecondaryKv();
		this.secondaryKv=secondaryKv;
		setProperty("SECONDARY_KV", secondaryKv, oldValue);
	}
	@Column(name="FOREIGN_SYS",nullable=true,length=1)
	public boolean isForeignSys(){
		return foreignSys;
	}
	public void setForeignSys(boolean foreignSys) throws java.sql.SQLException{
		if(isSame(foreignSys, isForeignSys()))return;
		boolean oldValue = isForeignSys();
		this.foreignSys=foreignSys;
		setProperty("FOREIGN_SYS", foreignSys, oldValue);
	}
	@Column(name="ISO",nullable=true,length=1)
	public boolean isIso(){
		return iso;
	}
	public void setIso(boolean iso) throws java.sql.SQLException{
		if(isSame(iso, isIso()))return;
		boolean oldValue = isIso();
		this.iso=iso;
		setProperty("ISO", iso, oldValue);
	}
	@Column(name="N1_APPROVED",nullable=true,length=1)
	public boolean isN1Approved(){
		return n1Approved;
	}
	public void setN1Approved(boolean n1Approved) throws java.sql.SQLException{
		if(isSame(n1Approved, isN1Approved()))return;
		boolean oldValue = isN1Approved();
		this.n1Approved=n1Approved;
		setProperty("N1_APPROVED", n1Approved, oldValue);
	}
	@Column(name="N1_FINALIZED",nullable=true,length=1)
	public boolean isN1Finalized(){
		return n1Finalized;
	}
	public void setN1Finalized(boolean n1Finalized) throws java.sql.SQLException{
		if(isSame(n1Finalized, isN1Finalized()))return;
		boolean oldValue = isN1Finalized();
		this.n1Finalized=n1Finalized;
		setProperty("N1_FINALIZED", n1Finalized, oldValue);
	}
	@Column(name="STV_FINALIZED",nullable=true,length=1)
	public boolean isStvFinalized(){
		return stvFinalized;
	}
	public void setStvFinalized(boolean stvFinalized) throws java.sql.SQLException{
		if(isSame(stvFinalized, isStvFinalized()))return;
		boolean oldValue = isStvFinalized();
		this.stvFinalized=stvFinalized;
		setProperty("STV_FINALIZED", stvFinalized, oldValue);
	}
	@Column(name="STV_APPROVED",nullable=true,length=1)
	public boolean isStvApproved(){
		return stvApproved;
	}
	public void setStvApproved(boolean stvApproved) throws java.sql.SQLException{
		if(isSame(stvApproved, isStvApproved()))return;
		boolean oldValue = isStvApproved();
		this.stvApproved=stvApproved;
		setProperty("STV_APPROVED", stvApproved, oldValue);
	}
	@Column(name="VAR_ANALYSIS_TYPE",nullable=true,length=2)
	public int getVarAnalysisType(){
		return varAnalysisType;
	}
	public void setVarAnalysisType(int varAnalysisType) throws java.sql.SQLException{
		if(isSame(varAnalysisType, getVarAnalysisType()))return;
		int oldValue = getVarAnalysisType();
		this.varAnalysisType=varAnalysisType;
		setProperty("VAR_ANALYSIS_TYPE", varAnalysisType, oldValue);
	}
	@Column(name="TEN_YEAR_SUM",nullable=true,length=24)
	public double getTenYearSum(){
		return tenYearSum;
	}
	public void setTenYearSum(double tenYearSum) throws java.sql.SQLException{
		if(isSame(tenYearSum, getTenYearSum()))return;
		double oldValue = getTenYearSum();
		this.tenYearSum=tenYearSum;
		setProperty("TEN_YEAR_SUM", tenYearSum, oldValue);
	}
	@Column(name="WS_COUNT_BY_INSTANCE",nullable=true,length=4)
	public int getWsCountByInstance(){
		return wsCountByInstance;
	}
	public void setWsCountByInstance(int wsCountByInstance) throws java.sql.SQLException{
		if(isSame(wsCountByInstance, getWsCountByInstance()))return;
		int oldValue = getWsCountByInstance();
		this.wsCountByInstance=wsCountByInstance;
		setProperty("WS_COUNT_BY_INSTANCE", wsCountByInstance, oldValue);
	}
	@Column(name="LAST_CALC_WS_DATA",nullable=true,length=7)
	public Calendar getLastCalcWsData(){
		return lastCalcWsData;
	}
	public void setLastCalcWsData(Calendar lastCalcWsData) throws java.sql.SQLException{
		if(isSame(lastCalcWsData, getLastCalcWsData()))return;
		Calendar oldValue = getLastCalcWsData();
		this.lastCalcWsData=lastCalcWsData;
		setProperty("LAST_CALC_WS_DATA", lastCalcWsData, oldValue);
	}
	@Column(name="B_ACT",nullable=true,length=24)
	public double getBAct(){
		return bAct;
	}
	public void setBAct(double bAct) throws java.sql.SQLException{
		if(isSame(bAct, getBAct()))return;
		double oldValue = getBAct();
		this.bAct=bAct;
		setProperty("B_ACT", bAct, oldValue);
	}
	@Column(name="B_ADJ",nullable=true,length=24)
	public double getBAdj(){
		return bAdj;
	}
	public void setBAdj(double bAdj) throws java.sql.SQLException{
		if(isSame(bAdj, getBAdj()))return;
		double oldValue = getBAdj();
		this.bAdj=bAdj;
		setProperty("B_ADJ", bAdj, oldValue);
	}
	@Column(name="LAST_CALC_B_LOAD",nullable=true,length=7)
	public Calendar getLastCalcBLoad(){
		return lastCalcBLoad;
	}
	public void setLastCalcBLoad(Calendar lastCalcBLoad) throws java.sql.SQLException{
		if(isSame(lastCalcBLoad, getLastCalcBLoad()))return;
		Calendar oldValue = getLastCalcBLoad();
		this.lastCalcBLoad=lastCalcBLoad;
		setProperty("LAST_CALC_B_LOAD", lastCalcBLoad, oldValue);
	}
	@Column(name="A_ACT",nullable=true,length=24)
	public double getAAct(){
		return aAct;
	}
	public void setAAct(double aAct) throws java.sql.SQLException{
		if(isSame(aAct, getAAct()))return;
		double oldValue = getAAct();
		this.aAct=aAct;
		setProperty("A_ACT", aAct, oldValue);
	}
	@Column(name="A_ADJ",nullable=true,length=24)
	public double getAAdj(){
		return aAdj;
	}
	public void setAAdj(double aAdj) throws java.sql.SQLException{
		if(isSame(aAdj, getAAdj()))return;
		double oldValue = getAAdj();
		this.aAdj=aAdj;
		setProperty("A_ADJ", aAdj, oldValue);
	}
	@Column(name="LAST_CALC_A_LOAD",nullable=true,length=7)
	public Calendar getLastCalcALoad(){
		return lastCalcALoad;
	}
	public void setLastCalcALoad(Calendar lastCalcALoad) throws java.sql.SQLException{
		if(isSame(lastCalcALoad, getLastCalcALoad()))return;
		Calendar oldValue = getLastCalcALoad();
		this.lastCalcALoad=lastCalcALoad;
		setProperty("LAST_CALC_A_LOAD", lastCalcALoad, oldValue);
	}
	@Column(name="SUB_COUNT",nullable=true,length=4)
	public int getSubCount(){
		return subCount;
	}
	public void setSubCount(int subCount) throws java.sql.SQLException{
		if(isSame(subCount, getSubCount()))return;
		int oldValue = getSubCount();
		this.subCount=subCount;
		setProperty("SUB_COUNT", subCount, oldValue);
	}
	@Column(name="CKT_COUNT",nullable=true,length=4)
	public int getCktCount(){
		return cktCount;
	}
	public void setCktCount(int cktCount) throws java.sql.SQLException{
		if(isSame(cktCount, getCktCount()))return;
		int oldValue = getCktCount();
		this.cktCount=cktCount;
		setProperty("CKT_COUNT", cktCount, oldValue);
	}
	@Column(name="PEAK_FIN",nullable=true,length=4)
	public int getPeakFin(){
		return peakFin;
	}
	public void setPeakFin(int peakFin) throws java.sql.SQLException{
		if(isSame(peakFin, getPeakFin()))return;
		int oldValue = getPeakFin();
		this.peakFin=peakFin;
		setProperty("PEAK_FIN", peakFin, oldValue);
	}
	@Column(name="PEAK_APP",nullable=true,length=4)
	public int getPeakApp(){
		return peakApp;
	}
	public void setPeakApp(int peakApp) throws java.sql.SQLException{
		if(isSame(peakApp, getPeakApp()))return;
		int oldValue = getPeakApp();
		this.peakApp=peakApp;
		setProperty("PEAK_APP", peakApp, oldValue);
	}
	@Column(name="LG_FIN",nullable=true,length=4)
	public int getLgFin(){
		return lgFin;
	}
	public void setLgFin(int lgFin) throws java.sql.SQLException{
		if(isSame(lgFin, getLgFin()))return;
		int oldValue = getLgFin();
		this.lgFin=lgFin;
		setProperty("LG_FIN", lgFin, oldValue);
	}
	@Column(name="LG_APP",nullable=true,length=4)
	public int getLgApp(){
		return lgApp;
	}
	public void setLgApp(int lgApp) throws java.sql.SQLException{
		if(isSame(lgApp, getLgApp()))return;
		int oldValue = getLgApp();
		this.lgApp=lgApp;
		setProperty("LG_APP", lgApp, oldValue);
	}
	@Column(name="SS_FIN",nullable=true,length=4)
	public int getSsFin(){
		return ssFin;
	}
	public void setSsFin(int ssFin) throws java.sql.SQLException{
		if(isSame(ssFin, getSsFin()))return;
		int oldValue = getSsFin();
		this.ssFin=ssFin;
		setProperty("SS_FIN", ssFin, oldValue);
	}
	@Column(name="SS_APP",nullable=true,length=4)
	public int getSsApp(){
		return ssApp;
	}
	public void setSsApp(int ssApp) throws java.sql.SQLException{
		if(isSame(ssApp, getSsApp()))return;
		int oldValue = getSsApp();
		this.ssApp=ssApp;
		setProperty("SS_APP", ssApp, oldValue);
	}
	@Column(name="CS_FIN",nullable=true,length=4)
	public int getCsFin(){
		return csFin;
	}
	public void setCsFin(int csFin) throws java.sql.SQLException{
		if(isSame(csFin, getCsFin()))return;
		int oldValue = getCsFin();
		this.csFin=csFin;
		setProperty("CS_FIN", csFin, oldValue);
	}
	@Column(name="CS_APP",nullable=true,length=4)
	public int getCsApp(){
		return csApp;
	}
	public void setCsApp(int csApp) throws java.sql.SQLException{
		if(isSame(csApp, getCsApp()))return;
		int oldValue = getCsApp();
		this.csApp=csApp;
		setProperty("CS_APP", csApp, oldValue);
	}
	@Column(name="PROJ_FIN",nullable=true,length=4)
	public int getProjFin(){
		return projFin;
	}
	public void setProjFin(int projFin) throws java.sql.SQLException{
		if(isSame(projFin, getProjFin()))return;
		int oldValue = getProjFin();
		this.projFin=projFin;
		setProperty("PROJ_FIN", projFin, oldValue);
	}
	@Column(name="PROJ_APP",nullable=true,length=4)
	public int getProjApp(){
		return projApp;
	}
	public void setProjApp(int projApp) throws java.sql.SQLException{
		if(isSame(projApp, getProjApp()))return;
		int oldValue = getProjApp();
		this.projApp=projApp;
		setProperty("PROJ_APP", projApp, oldValue);
	}
	@Column(name="EXCEP_FIN",nullable=true,length=4)
	public int getExcepFin(){
		return excepFin;
	}
	public void setExcepFin(int excepFin) throws java.sql.SQLException{
		if(isSame(excepFin, getExcepFin()))return;
		int oldValue = getExcepFin();
		this.excepFin=excepFin;
		setProperty("EXCEP_FIN", excepFin, oldValue);
	}
	@Column(name="EXCEP_APP",nullable=true,length=4)
	public int getExcepApp(){
		return excepApp;
	}
	public void setExcepApp(int excepApp) throws java.sql.SQLException{
		if(isSame(excepApp, getExcepApp()))return;
		int oldValue = getExcepApp();
		this.excepApp=excepApp;
		setProperty("EXCEP_APP", excepApp, oldValue);
	}
	@Column(name="CONT_FIN",nullable=true,length=4)
	public int getContFin(){
		return contFin;
	}
	public void setContFin(int contFin) throws java.sql.SQLException{
		if(isSame(contFin, getContFin()))return;
		int oldValue = getContFin();
		this.contFin=contFin;
		setProperty("CONT_FIN", contFin, oldValue);
	}
	@Column(name="CONT_APP",nullable=true,length=4)
	public int getContApp(){
		return contApp;
	}
	public void setContApp(int contApp) throws java.sql.SQLException{
		if(isSame(contApp, getContApp()))return;
		int oldValue = getContApp();
		this.contApp=contApp;
		setProperty("CONT_APP", contApp, oldValue);
	}
	@Column(name="N1_FIN",nullable=true,length=4)
	public int getN1Fin(){
		return n1Fin;
	}
	public void setN1Fin(int n1Fin) throws java.sql.SQLException{
		if(isSame(n1Fin, getN1Fin()))return;
		int oldValue = getN1Fin();
		this.n1Fin=n1Fin;
		setProperty("N1_FIN", n1Fin, oldValue);
	}
	@Column(name="N1_APP",nullable=true,length=4)
	public int getN1App(){
		return n1App;
	}
	public void setN1App(int n1App) throws java.sql.SQLException{
		if(isSame(n1App, getN1App()))return;
		int oldValue = getN1App();
		this.n1App=n1App;
		setProperty("N1_APP", n1App, oldValue);
	}
	@Column(name="VAR_FIN",nullable=true,length=4)
	public int getVarFin(){
		return varFin;
	}
	public void setVarFin(int varFin) throws java.sql.SQLException{
		if(isSame(varFin, getVarFin()))return;
		int oldValue = getVarFin();
		this.varFin=varFin;
		setProperty("VAR_FIN", varFin, oldValue);
	}
	@Column(name="VAR_APP",nullable=true,length=4)
	public int getVarApp(){
		return varApp;
	}
	public void setVarApp(int varApp) throws java.sql.SQLException{
		if(isSame(varApp, getVarApp()))return;
		int oldValue = getVarApp();
		this.varApp=varApp;
		setProperty("VAR_APP", varApp, oldValue);
	}
	@Column(name="LAST_CALC_FIN_APP",nullable=true,length=7)
	public Calendar getLastCalcFinApp(){
		return lastCalcFinApp;
	}
	public void setLastCalcFinApp(Calendar lastCalcFinApp) throws java.sql.SQLException{
		if(isSame(lastCalcFinApp, getLastCalcFinApp()))return;
		Calendar oldValue = getLastCalcFinApp();
		this.lastCalcFinApp=lastCalcFinApp;
		setProperty("LAST_CALC_FIN_APP", lastCalcFinApp, oldValue);
	}
	public Region getRegion()throws java.sql.SQLException{
		if(region==null)
			region=Region.getInstance(getPlanyear(), getRegionId());
		return region;
	}
	public void setRegion(Region region)throws java.sql.SQLException{
		setRegionId(region==null?0:region.getRegionId());
		this.region=region;
	}
	public Collection<AbankN1Tie> getAbankN1Ties()throws java.sql.SQLException{
		if(isNewInstance() || abankN1Ties != null){
			if(abankN1Ties == null)
				abankN1Ties = new TreeSet<AbankN1Tie>();
			return abankN1Ties;
		}
		return AbankN1Tie.getNamedCollection("findBySys",getPlanyear(), getSysId());
	}
	public void addAbankN1Tie(AbankN1Tie abankN1Tie)throws java.sql.SQLException{
		abankN1Tie.setSys((Sys)this);
		if(isNewInstance() || abankN1Ties != null)
			getAbankN1Ties().add(abankN1Tie);
		else
			abankN1Tie.insert();
	}
	public void removeAbankN1Tie(AbankN1Tie abankN1Tie)throws java.sql.SQLException{
		if(isNewInstance() || abankN1Ties != null)
			getAbankN1Ties().remove(abankN1Tie);
		else
			abankN1Tie.delete();
	}
	public Collection<AbankShed> getAbankSheds()throws java.sql.SQLException{
		if(isNewInstance() || abankSheds != null){
			if(abankSheds == null)
				abankSheds = new TreeSet<AbankShed>();
			return abankSheds;
		}
		return AbankShed.getNamedCollection("findBySys",getPlanyear(), getSysId());
	}
	public void addAbankShed(AbankShed abankShed)throws java.sql.SQLException{
		abankShed.setSys((Sys)this);
		if(isNewInstance() || abankSheds != null)
			getAbankSheds().add(abankShed);
		else
			abankShed.insert();
	}
	public void removeAbankShed(AbankShed abankShed)throws java.sql.SQLException{
		if(isNewInstance() || abankSheds != null)
			getAbankSheds().remove(abankShed);
		else
			abankShed.delete();
	}
	public Collection<SysDaily> getSysDailys()throws java.sql.SQLException{
		if(isNewInstance() || sysDailys != null){
			if(sysDailys == null)
				sysDailys = new TreeSet<SysDaily>();
			return sysDailys;
		}
		return SysDaily.getNamedCollection("findBySys",getPlanyear(), getSysId());
	}
	public void addSysDaily(SysDaily sysDaily)throws java.sql.SQLException{
		sysDaily.setSys((Sys)this);
		if(isNewInstance() || sysDailys != null)
			getSysDailys().add(sysDaily);
		else
			sysDaily.insert();
	}
	public void removeSysDaily(SysDaily sysDaily)throws java.sql.SQLException{
		if(isNewInstance() || sysDailys != null)
			getSysDailys().remove(sysDaily);
		else
			sysDaily.delete();
	}
	public Sys copy()throws java.sql.SQLException{
		Sys cp = new Sys((Sys)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SysDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(AbankN1Tie child:getAbankN1Ties())
			cp.addAbankN1Tie(child.copy());
		for(AbankShed child:getAbankSheds())
			cp.addAbankShed(child.copy());
		for(SysDaily child:getSysDailys())
			cp.addSysDaily(child.copy());
	}
	public Vector<String> getDifference(SysDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSysId(),o.getSysId())) diffs.add("SYS_ID");
		if(!isSame(getRegionId(),o.getRegionId())) diffs.add("REGION_ID");
		if(!isSame(getSysNum(),o.getSysNum())) diffs.add("SYS_NUM");
		if(!isSame(getSysName(),o.getSysName())) diffs.add("SYS_NAME");
		if(!isSame(getPrimaryKv(),o.getPrimaryKv())) diffs.add("PRIMARY_KV");
		if(!isSame(getSecondaryKv(),o.getSecondaryKv())) diffs.add("SECONDARY_KV");
		if(!isSame(isForeignSys(),o.isForeignSys())) diffs.add("FOREIGN_SYS");
		if(!isSame(isIso(),o.isIso())) diffs.add("ISO");
		if(!isSame(isN1Approved(),o.isN1Approved())) diffs.add("N1_APPROVED");
		if(!isSame(isN1Finalized(),o.isN1Finalized())) diffs.add("N1_FINALIZED");
		if(!isSame(isStvFinalized(),o.isStvFinalized())) diffs.add("STV_FINALIZED");
		if(!isSame(isStvApproved(),o.isStvApproved())) diffs.add("STV_APPROVED");
		if(!isSame(getVarAnalysisType(),o.getVarAnalysisType())) diffs.add("VAR_ANALYSIS_TYPE");
		if(!isSame(getTenYearSum(),o.getTenYearSum())) diffs.add("TEN_YEAR_SUM");
		if(!isSame(getWsCountByInstance(),o.getWsCountByInstance())) diffs.add("WS_COUNT_BY_INSTANCE");
		if(!isSame(getLastCalcWsData(),o.getLastCalcWsData())) diffs.add("LAST_CALC_WS_DATA");
		if(!isSame(getBAct(),o.getBAct())) diffs.add("B_ACT");
		if(!isSame(getBAdj(),o.getBAdj())) diffs.add("B_ADJ");
		if(!isSame(getLastCalcBLoad(),o.getLastCalcBLoad())) diffs.add("LAST_CALC_B_LOAD");
		if(!isSame(getAAct(),o.getAAct())) diffs.add("A_ACT");
		if(!isSame(getAAdj(),o.getAAdj())) diffs.add("A_ADJ");
		if(!isSame(getLastCalcALoad(),o.getLastCalcALoad())) diffs.add("LAST_CALC_A_LOAD");
		if(!isSame(getSubCount(),o.getSubCount())) diffs.add("SUB_COUNT");
		if(!isSame(getCktCount(),o.getCktCount())) diffs.add("CKT_COUNT");
		if(!isSame(getPeakFin(),o.getPeakFin())) diffs.add("PEAK_FIN");
		if(!isSame(getPeakApp(),o.getPeakApp())) diffs.add("PEAK_APP");
		if(!isSame(getLgFin(),o.getLgFin())) diffs.add("LG_FIN");
		if(!isSame(getLgApp(),o.getLgApp())) diffs.add("LG_APP");
		if(!isSame(getSsFin(),o.getSsFin())) diffs.add("SS_FIN");
		if(!isSame(getSsApp(),o.getSsApp())) diffs.add("SS_APP");
		if(!isSame(getCsFin(),o.getCsFin())) diffs.add("CS_FIN");
		if(!isSame(getCsApp(),o.getCsApp())) diffs.add("CS_APP");
		if(!isSame(getProjFin(),o.getProjFin())) diffs.add("PROJ_FIN");
		if(!isSame(getProjApp(),o.getProjApp())) diffs.add("PROJ_APP");
		if(!isSame(getExcepFin(),o.getExcepFin())) diffs.add("EXCEP_FIN");
		if(!isSame(getExcepApp(),o.getExcepApp())) diffs.add("EXCEP_APP");
		if(!isSame(getContFin(),o.getContFin())) diffs.add("CONT_FIN");
		if(!isSame(getContApp(),o.getContApp())) diffs.add("CONT_APP");
		if(!isSame(getN1Fin(),o.getN1Fin())) diffs.add("N1_FIN");
		if(!isSame(getN1App(),o.getN1App())) diffs.add("N1_APP");
		if(!isSame(getVarFin(),o.getVarFin())) diffs.add("VAR_FIN");
		if(!isSame(getVarApp(),o.getVarApp())) diffs.add("VAR_APP");
		if(!isSame(getLastCalcFinApp(),o.getLastCalcFinApp())) diffs.add("LAST_CALC_FIN_APP");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(abankN1Ties != null){
			for(AbankN1Tie abankN1Tie:getAbankN1Ties()){
				if(abankN1Tie.isNewInstance())
					abankN1Tie.setSys((Sys)this);
				abankN1Tie.insert();
			}
			abankN1Ties = null;
		}
		if(abankSheds != null){
			for(AbankShed abankShed:getAbankSheds()){
				if(abankShed.isNewInstance())
					abankShed.setSys((Sys)this);
				abankShed.insert();
			}
			abankSheds = null;
		}
		if(sysDailys != null){
			for(SysDaily sysDaily:getSysDailys()){
				if(sysDaily.isNewInstance())
					sysDaily.setSys((Sys)this);
				sysDaily.insert();
			}
			sysDailys = null;
		}
	}
}
