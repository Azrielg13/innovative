package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.dao.TaskNotifyDAO;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.util.ESPProperties;
@Entity
@Table(schema="MDI",name="MDIT04_TASK_NOTIFY")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM TaskNotify o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM TaskNotify o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM TaskNotify o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByTaskResource", query="SELECT o FROM TaskNotify o WHERE o.TASK_RES_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	//FIXME should not care what day it is if they haven't been notified.
})															
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIT04_TASK_NOTIFY o WHERE o.ID=?"),//AUTO-GENERATED
})
public class TaskNotify extends TaskNotifyDAO{
	public TaskNotify(){
	}
	public TaskNotify(int id){
		super(id);
	}
	public TaskNotify(TaskNotify orig){
		super(orig);
	}
	public int getPlanyear() {
		return 0;
	}
	
	//--------------------------------- Kate Customized ----------------------------------------//
	
	public static Collection<TaskNotify> getUnnotify()throws java.sql.SQLException{
		return getNamedCollection("findUnnotify");
	}
	public static Collection<TaskNotify> getAllByProj(int projTaskId)throws java.sql.SQLException{
		return getNamedCollection("findByTaskNotify", projTaskId);
	}
	
	public boolean isNotified(){
		return getNotifiedDate()!=null;
	}
	
	public static void insertFakies(){
		try {
			TaskNotify task = new TaskNotify();
			//task.setProjTaskId(6);
			task.insert();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static ArrayList<TaskResource> getAllTaskResource(){			// prepare all resources by date and put in a list
		ArrayList<TaskResource> trList = new ArrayList<TaskResource>();
		try {
			for(TaskNotify task : TaskNotify.getUnnotify()){			// only look at particular day of task(s) (current)
				for(TaskResource res : TaskResource.getAllByTask(task.getTaskResId()))	// get all the resources from today task(s)
					trList.add(res);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return trList;
	}
	
	public static boolean sendNotification(HashMap<User, ArrayList<TaskResource>> map) throws SQLException{
		for (Map.Entry<User, ArrayList<TaskResource>> entry : map.entrySet()) {
			User user = entry.getKey();
			ArrayList<TaskResource> res = entry.getValue();
			String content = "";
			for(TaskResource tres:res){
				content = tres.getProjTask()+"\t"+tres.getProjRole()+"\n"+content;
				
			}
//			LotusNotification.sendSCMT(content);
			EspLogger.message(TaskNotify.class, user.getEmail()+"\n"+content);
		}
		return true;
	}
	
	public static boolean sendInitNotif(){
		return true;
	}
	
	public void runEmailBatch(){
		
	}
	
	public static void main(String[] argu){
		try {
			EntityManagerHelper.init(ESPProperties.getInstance().getRogDbUrl(), "mdi", "edison", System.getProperty("user.name").toLowerCase());

//			sendNotification(TaskResource.getAccAndPart(true));

			//---------------fake inserts --------------//
//			TaskNotify task = new TaskNotify();
//			task.setProjTaskId(6);
//			task.insert();
			//------------------------------------------//
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
