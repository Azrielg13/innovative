package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.CktVar;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PifBi;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CktVarDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,CAP_ID};
	public static enum PROPERTY{PLANYEAR,CAP_ID,CKT_ID,CAP_NUM,IN_SERVICE_DATE,OUT_SERVICE_DATE,STRUCTURE,KVAR,FIXED,PADMOUNT,CAP_DP,KV_DP,LOC_DESC,REAS_VOLTAGE,PRIORITY,DISABLED,BI_ID,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int CAPID_LIMIT = 9;
	public final static int CKTID_LIMIT = 9;
	public final static int CAPNUM_LIMIT = 10;
	public final static int INSERVICEDATE_LIMIT = 7;
	public final static int OUTSERVICEDATE_LIMIT = 7;
	public final static int STRUCTURE_LIMIT = 20;
	public final static int KVAR_LIMIT = 6;
	public final static int FIXED_LIMIT = 2;
	public final static int PADMOUNT_LIMIT = 2;
	public final static int CAPDP_LIMIT = 64;
	public final static int KVDP_LIMIT = 64;
	public final static int LOCDESC_LIMIT = 256;
	public final static int REASVOLTAGE_LIMIT = 1;
	public final static int PRIORITY_LIMIT = 2;
	public final static int DISABLED_LIMIT = 1;
	public final static int BIID_LIMIT = 9;
	private int planyear;
	private int capId;
	private int cktId;
	private String capNum;
	private Calendar inServiceDate;
	private Calendar outServiceDate;
	private String structure;
	private int kvar;
	private int fixed;
	private int padmount;
	private String capDp;
	private String kvDp;
	private String locDesc;
	private boolean reasVoltage;
	private int priority;
	private boolean disabled;
	private int biId;
	private Ckt ckt;
	private PifBi pifBi;
	public static CktVar getInstance(int planyear, int capId)throws java.sql.SQLException{
		return getInstance(planyear, capId, true);
	}
	public static CktVar getInstance(int planyear, int capId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, capId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, capId);
		Cache cache = em.getEntityManagerFactory().getCache();
		CktVar o = null;
		if(cache != null && cache.contains(CktVar.class, pk))
			o = em.find(CktVar.class, pk);
		if(o==null && getAICache().contains(CktVar.class, pk))
			o = getAICache().find(CktVar.class, pk);
		if(o==null && fetch)
			o = em.find(CktVar.class, pk);
		if(o==null && fetch && CktVar.class.getAnnotation(AutoInsertable.class) != null){
			o = new CktVar(planyear, capId);
			getAICache().cache(CktVar.class, o);
		}
		return o;
	}
	public static Collection<CktVar> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CktVar> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CktVar> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CktVar o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CktVar> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktVar> tq = em.createQuery(jpql,CktVar.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CktVar> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktVar> tq = em.createNamedQuery(name,CktVar.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CktVarDAO(){}
	public CktVarDAO(int planyear, int capId){
		this.planyear=planyear;
		this.capId=capId;
	}
	public CktVarDAO(CktVarDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(CktVarDAO orig){
		this.cktId=orig.getCktId();
		this.capNum=orig.getCapNum();
		this.inServiceDate=orig.getInServiceDate();
		this.outServiceDate=orig.getOutServiceDate();
		this.structure=orig.getStructure();
		this.kvar=orig.getKvar();
		this.fixed=orig.getFixed();
		this.padmount=orig.getPadmount();
		this.capDp=orig.getCapDp();
		this.kvDp=orig.getKvDp();
		this.locDesc=orig.getLocDesc();
		this.reasVoltage=orig.isReasVoltage();
		this.priority=orig.getPriority();
		this.disabled=orig.isDisabled();
		this.biId=orig.getBiId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, capId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI470_SEQ",sequenceName="MDI470_SEQ")
	@Column(name="CAP_ID",nullable=false,length=9)
	public int getCapId(){
		return capId;
	}
	public void setCapId(int capId) throws java.sql.SQLException{
		if(isSame(capId, getCapId()))return;
		int oldValue = getCapId();
		this.capId=capId;
		setProperty("CAP_ID", capId, oldValue);
	}
	@Column(name="CKT_ID",nullable=false,length=9)
	public int getCktId(){
		return cktId;
	}
	public void setCktId(int cktId) throws java.sql.SQLException{
		if(isSame(cktId, getCktId()))return;
		int oldValue = getCktId();
		this.cktId=cktId;
		setProperty("CKT_ID", cktId, oldValue);
		ckt=null;
	}
	@Column(name="CAP_NUM",nullable=false,length=10)
	public String getCapNum(){
		return capNum;
	}
	public void setCapNum(String capNum) throws java.sql.SQLException{
		if(isSame(capNum, getCapNum()))return;
		String oldValue = getCapNum();
		this.capNum=capNum;
		setProperty("CAP_NUM", capNum, oldValue);
	}
	@Column(name="IN_SERVICE_DATE",nullable=true,length=7)
	public Calendar getInServiceDate(){
		return inServiceDate;
	}
	public void setInServiceDate(Calendar inServiceDate) throws java.sql.SQLException{
		if(isSame(inServiceDate, getInServiceDate()))return;
		Calendar oldValue = getInServiceDate();
		this.inServiceDate=inServiceDate;
		setProperty("IN_SERVICE_DATE", inServiceDate, oldValue);
	}
	@Column(name="OUT_SERVICE_DATE",nullable=true,length=7)
	public Calendar getOutServiceDate(){
		return outServiceDate;
	}
	public void setOutServiceDate(Calendar outServiceDate) throws java.sql.SQLException{
		if(isSame(outServiceDate, getOutServiceDate()))return;
		Calendar oldValue = getOutServiceDate();
		this.outServiceDate=outServiceDate;
		setProperty("OUT_SERVICE_DATE", outServiceDate, oldValue);
	}
	@Column(name="STRUCTURE",nullable=true,length=20)
	public String getStructure(){
		return structure;
	}
	public void setStructure(String structure) throws java.sql.SQLException{
		if(isSame(structure, getStructure()))return;
		String oldValue = getStructure();
		this.structure=structure;
		setProperty("STRUCTURE", structure, oldValue);
	}
	@Column(name="KVAR",nullable=true,length=6)
	public int getKvar(){
		return kvar;
	}
	public void setKvar(int kvar) throws java.sql.SQLException{
		if(isSame(kvar, getKvar()))return;
		int oldValue = getKvar();
		this.kvar=kvar;
		setProperty("KVAR", kvar, oldValue);
	}
	@Column(name="FIXED",nullable=true,length=2)
	public int getFixed(){
		return fixed;
	}
	public void setFixed(int fixed) throws java.sql.SQLException{
		if(isSame(fixed, getFixed()))return;
		int oldValue = getFixed();
		this.fixed=fixed;
		setProperty("FIXED", fixed, oldValue);
	}
	@Column(name="PADMOUNT",nullable=true,length=2)
	public int getPadmount(){
		return padmount;
	}
	public void setPadmount(int padmount) throws java.sql.SQLException{
		if(isSame(padmount, getPadmount()))return;
		int oldValue = getPadmount();
		this.padmount=padmount;
		setProperty("PADMOUNT", padmount, oldValue);
	}
	@Column(name="CAP_DP",nullable=true,length=64)
	public String getCapDp(){
		return capDp;
	}
	public void setCapDp(String capDp) throws java.sql.SQLException{
		if(isSame(capDp, getCapDp()))return;
		String oldValue = getCapDp();
		this.capDp=capDp;
		setProperty("CAP_DP", capDp, oldValue);
	}
	@Column(name="KV_DP",nullable=true,length=64)
	public String getKvDp(){
		return kvDp;
	}
	public void setKvDp(String kvDp) throws java.sql.SQLException{
		if(isSame(kvDp, getKvDp()))return;
		String oldValue = getKvDp();
		this.kvDp=kvDp;
		setProperty("KV_DP", kvDp, oldValue);
	}
	@Column(name="LOC_DESC",nullable=true,length=256)
	public String getLocDesc(){
		return locDesc;
	}
	public void setLocDesc(String locDesc) throws java.sql.SQLException{
		if(isSame(locDesc, getLocDesc()))return;
		String oldValue = getLocDesc();
		this.locDesc=locDesc;
		setProperty("LOC_DESC", locDesc, oldValue);
	}
	@Column(name="REAS_VOLTAGE",nullable=true,length=1)
	public boolean isReasVoltage(){
		return reasVoltage;
	}
	public void setReasVoltage(boolean reasVoltage) throws java.sql.SQLException{
		if(isSame(reasVoltage, isReasVoltage()))return;
		boolean oldValue = isReasVoltage();
		this.reasVoltage=reasVoltage;
		setProperty("REAS_VOLTAGE", reasVoltage, oldValue);
	}
	@Column(name="PRIORITY",nullable=true,length=2)
	public int getPriority(){
		return priority;
	}
	public void setPriority(int priority) throws java.sql.SQLException{
		if(isSame(priority, getPriority()))return;
		int oldValue = getPriority();
		this.priority=priority;
		setProperty("PRIORITY", priority, oldValue);
	}
	@Column(name="DISABLED",nullable=true,length=1)
	public boolean isDisabled(){
		return disabled;
	}
	public void setDisabled(boolean disabled) throws java.sql.SQLException{
		if(isSame(disabled, isDisabled()))return;
		boolean oldValue = isDisabled();
		this.disabled=disabled;
		setProperty("DISABLED", disabled, oldValue);
	}
	@Column(name="BI_ID",nullable=true,length=9)
	public int getBiId(){
		return biId;
	}
	public void setBiId(int biId) throws java.sql.SQLException{
		if(isSame(biId, getBiId()))return;
		int oldValue = getBiId();
		this.biId=biId;
		setProperty("BI_ID", biId, oldValue);
		pifBi=null;
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public PifBi getPifBi()throws java.sql.SQLException{
		if(pifBi==null)
			pifBi=PifBi.getInstance(getPlanyear(), getBiId());
		return pifBi;
	}
	public void setPifBi(PifBi pifBi)throws java.sql.SQLException{
		setBiId(pifBi==null?0:pifBi.getBiId());
		this.pifBi=pifBi;
	}
	public CktVar copy()throws java.sql.SQLException{
		CktVar cp = new CktVar((CktVar)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CktVarDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CktVarDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getCapId(),o.getCapId())) diffs.add("CAP_ID");
		if(!isSame(getCktId(),o.getCktId())) diffs.add("CKT_ID");
		if(!isSame(getCapNum(),o.getCapNum())) diffs.add("CAP_NUM");
		if(!isSame(getInServiceDate(),o.getInServiceDate())) diffs.add("IN_SERVICE_DATE");
		if(!isSame(getOutServiceDate(),o.getOutServiceDate())) diffs.add("OUT_SERVICE_DATE");
		if(!isSame(getStructure(),o.getStructure())) diffs.add("STRUCTURE");
		if(!isSame(getKvar(),o.getKvar())) diffs.add("KVAR");
		if(!isSame(getFixed(),o.getFixed())) diffs.add("FIXED");
		if(!isSame(getPadmount(),o.getPadmount())) diffs.add("PADMOUNT");
		if(!isSame(getCapDp(),o.getCapDp())) diffs.add("CAP_DP");
		if(!isSame(getKvDp(),o.getKvDp())) diffs.add("KV_DP");
		if(!isSame(getLocDesc(),o.getLocDesc())) diffs.add("LOC_DESC");
		if(!isSame(isReasVoltage(),o.isReasVoltage())) diffs.add("REAS_VOLTAGE");
		if(!isSame(getPriority(),o.getPriority())) diffs.add("PRIORITY");
		if(!isSame(isDisabled(),o.isDisabled())) diffs.add("DISABLED");
		if(!isSame(getBiId(),o.getBiId())) diffs.add("BI_ID");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
