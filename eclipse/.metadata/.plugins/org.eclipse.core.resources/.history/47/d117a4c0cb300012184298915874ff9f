/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.RenderingHints;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.lang.reflect.InvocationTargetException;

import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

public class JSlidingPane extends JPanelEnhanced {
	/**
	 * 
	 */
	private static final long serialVersionUID = -1904300589343414753L;
	public static final int NORTH = 1;
	public static final int SOUTH = 2;
	public static final int WEST = 3;
	public static final int EAST = 4;

	private int where = WEST;
	private JPanel mainPanel;
	private JComponent slidableComponent;
	private JComponent centralComponent;
	private JPanel expansionBar;
	private JImage expansionButton;
	private JPanel dividerBar;
	private JImage dividerButton;
	private boolean resize;
	private int dividerSize = 8;
	private double percentage = 0.0;
	private int slidableSize = 0;
	private int percentageSlidableSize = 0;
	private int slidableMinimum = 25;
	private int centralMinimum = 25;
	private boolean resizable = true;
	private boolean border = false;

	private int offset = 0;
	private long slideEnd = 0;
	private long slideLastRefresh = 0;

	private int dragOffset = 0;
	private boolean onButton = false;
	private boolean onExpansion = false;
	private boolean expanded = true;
	private boolean onExpander = false;
	private boolean expanding;

	public JSlidingPane() {
		mainPanel = new JPanel();
		mainPanel.setOpaque(false);
		mainPanel.setLayout(null);
		setLayout(null);
		dividerBar = new JPanel();
		dividerBar.setLayout(new GridBagLayout());
		dividerBar.setOpaque(false);
		dividerButton = new JImage();
		dividerBar.add(dividerButton, new GridBagConstraints(0, 0, 1, 1, 0.0,
				0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE,
				new Insets(0, 0, 0, 0), 0, 0));
		dividerButton.setOpaque(false);
		dividerButton.setImage(createDividerImage());

		expansionBar = new JPanel();
		expansionBar.setLayout(new GridBagLayout());
		expansionBar.setOpaque(false);
		expansionButton = new JImage();
		expansionBar.add(expansionButton, new GridBagConstraints(0, 0, 1, 1,
				0.0, 0.0, GridBagConstraints.CENTER, GridBagConstraints.NONE,
				new Insets(0, 0, 0, 0), 0, 0));
		expansionButton.setOpaque(false);
		expansionButton.setImage(createDividerImage());

		mainPanel.add(dividerBar);
		add(mainPanel);
		add(expansionBar);

		expansionButton.addMouseListener(expansionMouseListener);
		mainPanel.addMouseListener(dividerMouseListener);
		mainPanel.addMouseMotionListener(dividerMouseMotionListener);
	}

	private transient MouseMotionListener dividerMouseMotionListener = new MouseMotionListener() {
		public void mouseDragged(MouseEvent arg0) {
			if (onExpander && expanding) {
				switch (where) {
					case NORTH : {
						slidableSize = arg0.getY() - dragOffset;
						if (slidableSize < slidableMinimum) {
							slidableSize = slidableMinimum;
						}
						if (getWidth() - slidableSize - dividerSize < centralMinimum) {
							slidableSize = getHeight() - dividerSize
									- centralMinimum;
						}
						doLayout();
						slidableComponent.validate();
					}
						break;
					case SOUTH : {
						slidableSize = dragOffset - (arg0.getY() - getHeight());
						if (slidableSize < slidableMinimum) {
							slidableSize = slidableMinimum;
						}
						if (getWidth() - slidableSize - dividerSize < centralMinimum) {
							slidableSize = getHeight() - dividerSize
									- centralMinimum;
						}
						doLayout();
						slidableComponent.validate();
					}
						break;
					case EAST : {
						slidableSize = dragOffset - (arg0.getX() - getWidth());
						if (slidableSize < slidableMinimum) {
							slidableSize = slidableMinimum;
						}
						if (getWidth() - slidableSize - dividerSize < centralMinimum) {
							slidableSize = getWidth() - dividerSize
									- centralMinimum;
						}
						doLayout();
						slidableComponent.validate();
					}
						break;
					case WEST :
					default : {
						slidableSize = arg0.getX() - dragOffset;
						if (slidableSize < slidableMinimum) {
							slidableSize = slidableMinimum;
						}
						if (getWidth() - slidableSize - dividerSize < centralMinimum) {
							slidableSize = getWidth() - dividerSize
									- centralMinimum;
						}
						doLayout();
						slidableComponent.validate();
					}
						break;
				}
			}
		}

		public void mouseMoved(MouseEvent arg0) {
			if (!onExpander) {
				if (mainPanel.getComponentAt(arg0.getPoint()) == dividerBar) {
					if (slidableComponent != null && centralComponent != null) {
						onExpander = true;
						setCursor();
					}
				}
			} else if (onExpander) {
				if (mainPanel.getComponentAt(arg0.getPoint()) != dividerBar) {
					onExpander = false;
					onButton = false;
					setCursor();
				}
			}

			if (onExpander) {
				if (onButton
						&& !(dividerBar.getComponentAt(
								arg0.getX() - dividerBar.getX(), arg0.getY()
										- dividerBar.getY()) == dividerButton)) {
					onButton = false;
					setCursor();
				} else if (!onButton
						&& (dividerBar.getComponentAt(
								arg0.getX() - dividerBar.getX(), arg0.getY()
										- dividerBar.getY()) == dividerButton)) {
					onButton = true;
					setCursor();
				}

			}
		}
	};

	private transient MouseListener dividerMouseListener = new MouseListener() {
		public void mouseClicked(MouseEvent arg0) {
			if (onExpander && onButton) {
				toggleExpanded();
				onExpander = false;
				onButton = false;
				setCursor();
			}
		}

		public void mousePressed(MouseEvent arg0) {
			if (onExpander && isResizable()) {
				expanding = true;
				switch (where) {
					case NORTH : {
						dragOffset = arg0.getY() - slidableSize;
					}
						break;
					case SOUTH : {
						dragOffset = arg0.getY() - (getHeight() - slidableSize);
					}
						break;
					case EAST : {
						dragOffset = arg0.getX() - (getWidth() - slidableSize);
					}
						break;
					case WEST :
					default : {
						dragOffset = arg0.getX() - slidableSize;
					}
						break;
				}
			}
		}

		public void mouseReleased(MouseEvent arg0) {
			onExpander = mainPanel.getComponentAt(arg0.getPoint()) == dividerBar;
			onButton = onExpander
					? (dividerBar.getComponentAt(
							arg0.getX() - dividerBar.getX(), arg0.getY()
									- dividerBar.getY()) == dividerButton)
					: false;
			setCursor();
			expanding = false;
		}

		public void mouseEntered(MouseEvent arg0) {
		}

		public void mouseExited(MouseEvent arg0) {
			if (!expanding) {
				onExpander = false;
				onButton = false;
			}
			setCursor();
		}
	};

	private transient MouseListener expansionMouseListener = new MouseListener() {
		public void mouseClicked(MouseEvent arg0) {
			toggleExpanded();
			setCursor();
		}

		public void mousePressed(MouseEvent arg0) {
		}

		public void mouseReleased(MouseEvent arg0) {
		}

		public void mouseEntered(MouseEvent arg0) {
			onExpansion = true;
			setCursor();
		}

		public void mouseExited(MouseEvent arg0) {
			onExpansion = false;
			setCursor();
		}
	};

	private void setCursor() {
		if (onButton || onExpansion) {
			setCursor(new Cursor(Cursor.HAND_CURSOR));
		} else if (isResizable() && onExpander) {
			switch (where) {
				case NORTH : {
					setCursor(new Cursor(Cursor.N_RESIZE_CURSOR));
				}
					break;
				case SOUTH : {
					setCursor(new Cursor(Cursor.S_RESIZE_CURSOR));
				}
					break;
				case EAST : {
					setCursor(new Cursor(Cursor.E_RESIZE_CURSOR));
				}
					break;
				case WEST :
				default : {
					setCursor(new Cursor(Cursor.W_RESIZE_CURSOR));
				}
					break;
			}
		} else {
			setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
		}
	}

	public boolean isResizable() {
		return expanded && resizable;
	}

	public void setResizable(boolean resizable) {
		this.resizable = resizable;
	}

	public boolean getResizable() {
		return this.resizable;
	}

	public void setExpanded(boolean expanded) {
		if (this.expanded != expanded) {
			toggleExpanded();
		}
	}

	public boolean isExpanded() {
		return expanded;
	}

	private transient Thread slideThread = null;
	private long slideTime = 500;

	private void toggleExpanded() {
		expanded = !expanded;
		if (slideThread == null) {
			slideLastRefresh = System.currentTimeMillis();
			slideEnd = System.currentTimeMillis() + slideTime;
			slideThread = new Thread(new Runnable() {
				public void run() {
					try {
						while (slideEnd != 0) {
							long remaining = (slideEnd - System
									.currentTimeMillis());
							setExpansion(remaining);
							if (slideEnd != 0) {
								try {
									Thread.sleep(25);
								} catch (InterruptedException e) {
								}
							}
						}
						try {
							if (SwingUtilities.isEventDispatchThread())
								repaint();
							else
								SwingUtilities.invokeAndWait(new Runnable() {
									public void run() {
										repaint();
									}
								});
						} catch (InterruptedException e) {
							throw new RuntimeException(e);
						} catch (InvocationTargetException e) {
							throw new RuntimeException(e);
						}
					} finally {
						slideThread = null;
					}
				}
			});
			slideThread.start();
		}
	}

	private void setExpansion(long remaining) {
		int distance = 0;
		if (expanded) {
			distance = -offset;
		} else {
			distance = -(slidableSize + offset);
		}
		int slideStep = 0;

		if (remaining <= 0) {
			slideStep = distance;
		} else {
			long time = System.currentTimeMillis() - slideLastRefresh;
			double segment = distance / (double) remaining;
			slideStep = (int) (segment * time);
		}

		offset += slideStep;
		if (offset <= -slidableSize && !expanded) {
			offset = -slidableSize;
			slideEnd = 0;
			expanded = false;
		} else if (offset >= 0 && expanded) {
			offset = 0;
			slideEnd = 0;
			expanded = true;
		}
		slideLastRefresh = System.currentTimeMillis();
		try {
			if (SwingUtilities.isEventDispatchThread())
				doLayout();
			else
				SwingUtilities.invokeAndWait(new Runnable() {
					public void run() {
						doLayout();
					}
				});
		} catch (InterruptedException e) {
			throw new RuntimeException(e);
		} catch (InvocationTargetException e) {
			throw new RuntimeException(e);
		}
	}

	public JComponent getCentralComponent() {
		return centralComponent;
	}

	public void setCentralComponent(JComponent component) {
		if (centralComponent != null) {
			mainPanel.remove(centralComponent);
		}
		centralComponent = component;
		if (centralComponent != null) {
			mainPanel.add(centralComponent);
		}
	}

	public void setPercentage(double percentage) {
		this.percentage = percentage;
		slidableSize = 0;
		offset = 0;
	}

	public void resetSlidableSize() {
		slidableSize = 0;
		offset = 0;
	}

	public void setSlidableComponent(JComponent component) {
		if (slidableComponent != null) {
			mainPanel.remove(slidableComponent);
		}
		resetSlidableSize();
		slidableComponent = component;
		if (slidableComponent != null) {
			mainPanel.add(slidableComponent);
		}
	}

	public void setBorderExpansion(boolean border) {
		this.border = border;
	}

	public void doLayout() {
		if (slidableComponent != null && centralComponent != null) {
			int w = getWidth();
			int h = getHeight();
			int width = w;
			int height = h;
			switch (where) {
				case NORTH : {
					if (percentage > 0) {
						if (percentage > 0)
							percentageSlidableSize = (int) (getHeight() * percentage);
						if (slidableSize != percentageSlidableSize) {
							slidableSize = percentageSlidableSize;
							if (!expanded)
								offset = -slidableSize;
						}
					} else if (slidableSize == 0) {
						slidableSize = (int) slidableComponent
								.getPreferredSize().getHeight();
						if (!expanded)
							offset = -slidableSize;
					}
					int slidingHeight = slidableSize;
					height = height - dividerSize;
					slidingHeight = slidingHeight > height
							? height
							: slidingHeight;
					height = height - (slidingHeight + offset);
					int sliderHeight = h - height - dividerSize;
					if (border) {
						expansionBar.setVisible(true);
						expansionBar.setBounds(0, 0, width, dividerSize);
						mainPanel.setBounds(0, dividerSize, w, h - dividerSize);
						slidableComponent.setBounds(0, offset, width,
								slidingHeight);
						if (resizable) {
							dividerBar.setVisible(true);
							dividerBar.setBounds(0, offset + slidingHeight,
									width, dividerSize);
							centralComponent.setBounds(0, offset
									+ slidingHeight + dividerSize, width,
									height);
						} else {
							dividerBar.setVisible(false);
							centralComponent.setBounds(0, offset
									+ slidingHeight, width, height);
						}
						centralComponent.setBounds(0, offset + slidingHeight,
								width, height);
					} else {
						expansionBar.setVisible(false);
						dividerBar.setVisible(true);
						mainPanel.setBounds(0, 0, w, h);
						slidableComponent.setBounds(0, offset, width,
								slidingHeight);
						dividerBar.setBounds(0, offset + slidingHeight, width,
								dividerSize);
						centralComponent.setBounds(0, offset + slidingHeight
								+ dividerSize, width, height);
					}
					centralComponent.validate();
					Graphics g = getGraphics();
					if (g != null) {
						g.setClip(0, 0, width, offset + slidingHeight
								+ dividerSize);
					}
				}
					break;
				case SOUTH : {
					if (percentage > 0) {
						if (percentage > 0)
							percentageSlidableSize = (int) (getHeight() * percentage);
						if (slidableSize != percentageSlidableSize) {
							slidableSize = percentageSlidableSize;
							if (!expanded)
								offset = -slidableSize;
						}
					} else if (slidableSize == 0) {
						slidableSize = (int) slidableComponent
								.getPreferredSize().getHeight();
						if (!expanded)
							offset = -slidableSize;
					}
					int slidingHeight = slidableSize;
					height = height - dividerSize;
					slidingHeight = slidingHeight > height
							? height
							: slidingHeight;
					height = height - (slidingHeight + offset);
					int sliderHeight = h - height - dividerSize;
					if (border) {
						expansionBar.setVisible(true);
						dividerBar.setVisible(false);
						mainPanel.setBounds(0, 0, w, h - dividerSize);
						centralComponent.setBounds(0, 0, width, height);
						if (resizable) {
							dividerBar.setVisible(true);
							dividerBar.setBounds(0, height, width, dividerSize);
							slidableComponent.setBounds(0,
									height + dividerSize, width, slidingHeight);
						} else {
							dividerBar.setVisible(false);
							slidableComponent.setBounds(0, height, width,
									slidingHeight);
						}
						expansionBar.setBounds(0, height + sliderHeight, width,
								dividerSize);
					} else {
						expansionBar.setVisible(false);
						dividerBar.setVisible(true);
						mainPanel.setBounds(0, 0, w, h);
						centralComponent.setBounds(0, 0, width, height);
						dividerBar.setBounds(0, height, width, dividerSize);
						slidableComponent.setBounds(0, height + dividerSize,
								width, slidingHeight);
					}
					centralComponent.validate();
					Graphics g = getGraphics();
					if (g != null) {
						g.setClip(0, height, width, dividerSize + slidingHeight);
					}
				}
					break;
				case EAST : {
					if (percentage > 0) {
						if (percentage > 0)
							percentageSlidableSize = (int) (getWidth() * percentage);
						if (slidableSize != percentageSlidableSize) {
							slidableSize = percentageSlidableSize;
							if (!expanded)
								offset = -slidableSize;
						}
					} else if (slidableSize == 0) {
						slidableSize = (int) slidableComponent
								.getPreferredSize().getWidth();
						if (!expanded)
							offset = -slidableSize;
					}
					int slidingWidth = slidableSize;
					width = width - dividerSize;
					slidingWidth = slidingWidth > width ? width : slidingWidth;
					width = width - (slidingWidth + offset);
					int sliderWidth = w - width - dividerSize;
					if (border) {
						expansionBar.setVisible(true);
						mainPanel.setBounds(0, 0, w - dividerSize, h);
						centralComponent.setBounds(0, 0, width, height);
						if (resizable) {
							dividerBar.setVisible(true);
							dividerBar.setBounds(width, 0, dividerSize, height);
							slidableComponent.setBounds(width + dividerSize, 0,
									slidingWidth, height);
						} else {
							dividerBar.setVisible(false);
							slidableComponent.setBounds(width, 0, slidingWidth,
									height);
						}
						expansionBar.setBounds(width + sliderWidth, 0,
								dividerSize, height);
					} else {
						expansionBar.setVisible(false);
						dividerBar.setVisible(true);
						mainPanel.setBounds(0, 0, w, h);
						centralComponent.setBounds(0, 0, width, height);
						dividerBar.setBounds(width, 0, dividerSize, height);
						slidableComponent.setBounds(width + dividerSize, 0,
								slidingWidth, height);
					}
					centralComponent.validate();
					Graphics g = getGraphics();
					if (g != null) {
						g.setClip(width, 0, dividerSize + slidingWidth, height);
					}
				}
					break;
				case WEST :
				default : {
					if (percentage > 0) {
						if (percentage > 0)
							percentageSlidableSize = (int) (getWidth() * percentage);
						if (slidableSize != percentageSlidableSize) {
							slidableSize = percentageSlidableSize;
							if (!expanded)
								offset = -slidableSize;
						}
					} else if (slidableSize == 0) {
						slidableSize = (int) slidableComponent
								.getPreferredSize().getWidth();
						if (!expanded)
							offset = -slidableSize;
					}
					int slidingWidth = slidableSize;
					width = width - dividerSize;
					slidingWidth = slidingWidth > width ? width : slidingWidth;
					width = width - (slidingWidth + offset);
					int sliderWidth = w - width - dividerSize;
					if (border) {
						expansionBar.setVisible(true);
						expansionBar.setBounds(0, 0, dividerSize, height);
						mainPanel.setBounds(dividerSize, 0, w - dividerSize, h);
						slidableComponent.setBounds(offset, 0, slidingWidth,
								height);
						if (resizable) {
							dividerBar.setVisible(true);
							dividerBar.setBounds(offset + slidingWidth, 0,
									dividerSize, height);
							centralComponent.setBounds(offset + slidingWidth
									+ dividerSize, 0, width - dividerSize,
									height);
						} else {
							dividerBar.setVisible(false);
							centralComponent.setBounds(offset + slidingWidth,
									0, width, height);
						}
					} else {
						expansionBar.setVisible(false);
						dividerBar.setVisible(true);
						mainPanel.setBounds(0, 0, w, h);
						slidableComponent.setBounds(offset, 0, slidingWidth,
								height);
						dividerBar.setBounds(offset + slidingWidth, 0,
								dividerSize, height);
						centralComponent.setBounds(offset + slidingWidth
								+ dividerSize, 0, width, height);
					}
					centralComponent.validate();
					Graphics g = getGraphics();
					if (g != null) {
						g.setClip(0, 0, offset + slidingWidth + dividerSize,
								height);
					}
				}
					break;
			}
		}
	}

	public Dimension getPreferredSize() {
		int w = 0;
		int h = 0;
		switch (where) {
			case NORTH :
			case SOUTH : {
				int w1 = centralComponent != null ? centralComponent
						.getPreferredSize().width : 0;
				int w2 = slidableComponent != null ? slidableComponent
						.getPreferredSize().width : 0;
				int h1 = centralComponent != null ? centralComponent
						.getPreferredSize().height : 0;
				int h2 = slidableComponent != null ? slidableComponent
						.getPreferredSize().height : 0;
				w = w1 > w2 ? w1 : w2;
				h = h1 + h2 + dividerSize + (border ? dividerSize : 0);
			}
				break;
			case EAST :
			case WEST : {
				int w1 = centralComponent != null ? centralComponent
						.getPreferredSize().width : 0;
				int w2 = slidableComponent != null ? slidableComponent
						.getPreferredSize().width : 0;
				int h1 = centralComponent != null ? centralComponent
						.getPreferredSize().height : 0;
				int h2 = slidableComponent != null ? slidableComponent
						.getPreferredSize().height : 0;
				w = w1 + w2 + dividerSize + (border ? dividerSize : 0);
				h = h1 > h2 ? h1 : h2;
			}
				break;
		}
		return new Dimension(w, h);
	}

	public void setDividerLocation(int where) {
		this.where = where;
		dividerButton.setImage(createDividerImage());
		expansionButton.setImage(createDividerImage());
		slidableSize = 0;
		doLayout();
	}

	private Image createDividerImage() {
		BufferedImage image = null;
		switch (where) {
			case NORTH :
			case SOUTH : {
				int gap = dividerSize + 1;
				image = new BufferedImage(gap * 6, dividerSize - 2,
						BufferedImage.TYPE_INT_ARGB);
				int h = image.getHeight() - 1;
				Graphics2D g2 = image.createGraphics();
				g2.setColor(new Color(0, 0, 0, 0));
				g2.fillRect(0, 0, getWidth(), getHeight());
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
						RenderingHints.VALUE_ANTIALIAS_ON);
				for (int i = 0; i < 6; i++) {
					g2.setColor(ColorTableManager.adjustColor(getBackground(),
							0.8));
					g2.fillOval(gap * i + 2, 2, h, h);
					g2.setColor(ColorTableManager.adjustColor(getBackground(),
							1.2));
					g2.fillOval(gap * i, 0, h, h);
					g2.setColor(ColorTableManager.adjustColor(getBackground(),
							0.7));
					g2.drawOval(gap * i, 0, h, h);
					g2.setColor(ColorTableManager.adjustColor(getBackground(),
							1.1));
					g2.drawArc(gap * i, 0, h, h, 215, 400);
				}
			}
				break;
			case EAST :
			case WEST :
			default : {
				int gap = dividerSize + 1;
				image = new BufferedImage(dividerSize - 2, gap * 6,
						BufferedImage.TYPE_INT_ARGB);
				int w = image.getWidth() - 1;
				Graphics2D g2 = image.createGraphics();
				g2.setColor(new Color(0, 0, 0, 0));
				g2.fillRect(0, 0, getWidth(), getHeight());
				g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
						RenderingHints.VALUE_ANTIALIAS_ON);
				for (int i = 0; i < 6; i++) {
					g2.setColor(ColorTableManager.adjustColor(getBackground(),
							0.8));
					g2.fillOval(2, gap * i + 2, w, w);
					g2.setColor(ColorTableManager.adjustColor(getBackground(),
							1.2));
					g2.fillOval(0, gap * i, w, w);
					g2.setColor(ColorTableManager.adjustColor(getBackground(),
							0.7));
					g2.drawOval(0, gap * i, w, w);
					g2.setColor(ColorTableManager.adjustColor(getBackground(),
							1.1));
					g2.drawArc(0, gap * i, w, w, 215, 400);
				}
			}
				break;
		}
		return image;
	}
}
