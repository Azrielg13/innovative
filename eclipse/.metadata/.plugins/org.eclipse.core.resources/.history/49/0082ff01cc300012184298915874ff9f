package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Pif;
import com.sce.esp.object.model.PifCktJust;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class PifCktJustDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,PIF_ID,CKT_ID};
	public static enum PROPERTY{PLANYEAR,PIF_ID,CKT_ID,BEFORE_LOAD,AFTER_LOAD,BEFORE_PLL,AFTER_PLL,BEFORE_DB,AFTER_DB,NOTE,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_DOUBLE4,ALT_VARCHAR1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int PIFID_LIMIT = 9;
	public final static int CKTID_LIMIT = 9;
	public final static int BEFORELOAD_LIMIT = 24;
	public final static int AFTERLOAD_LIMIT = 24;
	public final static int BEFOREPLL_LIMIT = 24;
	public final static int AFTERPLL_LIMIT = 24;
	public final static int BEFOREDB_LIMIT = 24;
	public final static int AFTERDB_LIMIT = 24;
	public final static int NOTE_LIMIT = 512;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTDOUBLE4_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 512;
	private int planyear;
	private int pifId;
	private int cktId;
	private double beforeLoad;
	private double afterLoad;
	private double beforePll;
	private double afterPll;
	private double beforeDb;
	private double afterDb;
	private String note;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private double altDouble4;
	private String altVarchar1;
	private Ckt ckt;
	private Pif pif;
	public static PifCktJust getInstance(int planyear, int pifId, int cktId)throws java.sql.SQLException{
		return getInstance(planyear, pifId, cktId, true);
	}
	public static PifCktJust getInstance(int planyear, int pifId, int cktId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, pifId, cktId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, pifId, cktId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifCktJust o = null;
		if(cache != null && cache.contains(PifCktJust.class, pk))
			o = em.find(PifCktJust.class, pk);
		if(o==null && getAICache().contains(PifCktJust.class, pk))
			o = getAICache().find(PifCktJust.class, pk);
		if(o==null && fetch)
			o = em.find(PifCktJust.class, pk);
		if(o==null && fetch && PifCktJust.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifCktJust(planyear, pifId, cktId);
			getAICache().cache(PifCktJust.class, o);
		}
		return o;
	}
	public static Collection<PifCktJust> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifCktJust> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifCktJust> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifCktJust o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifCktJust> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifCktJust> tq = em.createQuery(jpql,PifCktJust.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifCktJust> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifCktJust> tq = em.createNamedQuery(name,PifCktJust.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifCktJustDAO(){}
	public PifCktJustDAO(int planyear, int pifId, int cktId){
		this.planyear=planyear;
		this.pifId=pifId;
		this.cktId=cktId;
	}
	public PifCktJustDAO(PifCktJustDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.pifId=orig.getPifId();
		this.cktId=orig.getCktId();
		copyFrom(orig);
	}
	public void copyFrom(PifCktJustDAO orig){
		this.beforeLoad=orig.getBeforeLoad();
		this.afterLoad=orig.getAfterLoad();
		this.beforePll=orig.getBeforePll();
		this.afterPll=orig.getAfterPll();
		this.beforeDb=orig.getBeforeDb();
		this.afterDb=orig.getAfterDb();
		this.note=orig.getNote();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altDouble4=orig.getAltDouble4();
		this.altVarchar1=orig.getAltVarchar1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, pifId, cktId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="PIF_ID",nullable=false,length=9)
	public int getPifId(){
		return pifId;
	}
	public void setPifId(int pifId) throws java.sql.SQLException{
		if(isSame(pifId, getPifId()))return;
		int oldValue = getPifId();
		this.pifId=pifId;
		setProperty("PIF_ID", pifId, oldValue);
		pif=null;
	}
	@Id
	@Column(name="CKT_ID",nullable=false,length=9)
	public int getCktId(){
		return cktId;
	}
	public void setCktId(int cktId) throws java.sql.SQLException{
		if(isSame(cktId, getCktId()))return;
		int oldValue = getCktId();
		this.cktId=cktId;
		setProperty("CKT_ID", cktId, oldValue);
		ckt=null;
	}
	@Column(name="BEFORE_LOAD",nullable=true,length=24)
	public double getBeforeLoad(){
		return beforeLoad;
	}
	public void setBeforeLoad(double beforeLoad) throws java.sql.SQLException{
		if(isSame(beforeLoad, getBeforeLoad()))return;
		double oldValue = getBeforeLoad();
		this.beforeLoad=beforeLoad;
		setProperty("BEFORE_LOAD", beforeLoad, oldValue);
	}
	@Column(name="AFTER_LOAD",nullable=true,length=24)
	public double getAfterLoad(){
		return afterLoad;
	}
	public void setAfterLoad(double afterLoad) throws java.sql.SQLException{
		if(isSame(afterLoad, getAfterLoad()))return;
		double oldValue = getAfterLoad();
		this.afterLoad=afterLoad;
		setProperty("AFTER_LOAD", afterLoad, oldValue);
	}
	@Column(name="BEFORE_PLL",nullable=true,length=24)
	public double getBeforePll(){
		return beforePll;
	}
	public void setBeforePll(double beforePll) throws java.sql.SQLException{
		if(isSame(beforePll, getBeforePll()))return;
		double oldValue = getBeforePll();
		this.beforePll=beforePll;
		setProperty("BEFORE_PLL", beforePll, oldValue);
	}
	@Column(name="AFTER_PLL",nullable=true,length=24)
	public double getAfterPll(){
		return afterPll;
	}
	public void setAfterPll(double afterPll) throws java.sql.SQLException{
		if(isSame(afterPll, getAfterPll()))return;
		double oldValue = getAfterPll();
		this.afterPll=afterPll;
		setProperty("AFTER_PLL", afterPll, oldValue);
	}
	@Column(name="BEFORE_DB",nullable=true,length=24)
	public double getBeforeDb(){
		return beforeDb;
	}
	public void setBeforeDb(double beforeDb) throws java.sql.SQLException{
		if(isSame(beforeDb, getBeforeDb()))return;
		double oldValue = getBeforeDb();
		this.beforeDb=beforeDb;
		setProperty("BEFORE_DB", beforeDb, oldValue);
	}
	@Column(name="AFTER_DB",nullable=true,length=24)
	public double getAfterDb(){
		return afterDb;
	}
	public void setAfterDb(double afterDb) throws java.sql.SQLException{
		if(isSame(afterDb, getAfterDb()))return;
		double oldValue = getAfterDb();
		this.afterDb=afterDb;
		setProperty("AFTER_DB", afterDb, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_DOUBLE4",nullable=true,length=24)
	public double getAltDouble4(){
		return altDouble4;
	}
	public void setAltDouble4(double altDouble4) throws java.sql.SQLException{
		if(isSame(altDouble4, getAltDouble4()))return;
		double oldValue = getAltDouble4();
		this.altDouble4=altDouble4;
		setProperty("ALT_DOUBLE4", altDouble4, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=512)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public Pif getPif()throws java.sql.SQLException{
		if(pif==null)
			pif=Pif.getInstance(getPlanyear(), getPifId());
		return pif;
	}
	public void setPif(Pif pif)throws java.sql.SQLException{
		setPifId(pif==null?0:pif.getPifId());
		this.pif=pif;
	}
	public PifCktJust copy()throws java.sql.SQLException{
		PifCktJust cp = new PifCktJust((PifCktJust)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifCktJustDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PifCktJustDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getPifId(),o.getPifId())) diffs.add("PIF_ID");
		if(!isSame(getCktId(),o.getCktId())) diffs.add("CKT_ID");
		if(!isSame(getBeforeLoad(),o.getBeforeLoad())) diffs.add("BEFORE_LOAD");
		if(!isSame(getAfterLoad(),o.getAfterLoad())) diffs.add("AFTER_LOAD");
		if(!isSame(getBeforePll(),o.getBeforePll())) diffs.add("BEFORE_PLL");
		if(!isSame(getAfterPll(),o.getAfterPll())) diffs.add("AFTER_PLL");
		if(!isSame(getBeforeDb(),o.getBeforeDb())) diffs.add("BEFORE_DB");
		if(!isSame(getAfterDb(),o.getAfterDb())) diffs.add("AFTER_DB");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltDouble4(),o.getAltDouble4())) diffs.add("ALT_DOUBLE4");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
