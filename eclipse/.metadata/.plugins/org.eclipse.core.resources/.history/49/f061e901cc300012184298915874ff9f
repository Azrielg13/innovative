package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostStage;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CostStageDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{COST_STAGE_ID};
	public static enum PROPERTY{COST_STAGE_ID,NAME,DESCRIPTION,APPROVED_COST,UNIT_COSTABLE,ENABLED,ALT_VARCHAR1,ALT_DOUBLE1,ALT_DATE1,COST_TYPE};
	public final static int COSTSTAGEID_LIMIT = 9;
	public final static int NAME_LIMIT = 32;
	public final static int DESCRIPTION_LIMIT = 256;
	public final static int APPROVEDCOST_LIMIT = 1;
	public final static int UNITCOSTABLE_LIMIT = 1;
	public final static int ENABLED_LIMIT = 1;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int COSTTYPE_LIMIT = 2;
	private int costStageId;
	private String name;
	private String description;
	private boolean approvedCost;
	private boolean unitCostable;
	private boolean enabled = true;
	private String altVarchar1;
	private double altDouble1;
	private Calendar altDate1;
	private int costType;
	public static CostStage getInstance(int costStageId)throws java.sql.SQLException{
		return getInstance(costStageId, true);
	}
	public static CostStage getInstance(int costStageId, boolean fetch)throws java.sql.SQLException{
		if(isNull(costStageId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(costStageId);
		Cache cache = em.getEntityManagerFactory().getCache();
		CostStage o = null;
		if(cache != null && cache.contains(CostStage.class, pk))
			o = em.find(CostStage.class, pk);
		if(o==null && getAICache().contains(CostStage.class, pk))
			o = getAICache().find(CostStage.class, pk);
		if(o==null && fetch)
			o = em.find(CostStage.class, pk);
		if(o==null && fetch && CostStage.class.getAnnotation(AutoInsertable.class) != null){
			o = new CostStage(costStageId);
			getAICache().cache(CostStage.class, o);
		}
		return o;
	}
	public static Collection<CostStage> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CostStage> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CostStage> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CostStage o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CostStage> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostStage> tq = em.createQuery(jpql,CostStage.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CostStage> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostStage> tq = em.createNamedQuery(name,CostStage.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CostStageDAO(){}
	public CostStageDAO(int costStageId){
		this.costStageId=costStageId;
	}
	public CostStageDAO(CostStageDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CostStageDAO orig){
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.approvedCost=orig.isApprovedCost();
		this.unitCostable=orig.isUnitCostable();
		this.enabled=orig.isEnabled();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDouble1=orig.getAltDouble1();
		this.altDate1=orig.getAltDate1();
		this.costType=orig.getCostType();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{costStageId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS75_SEQ",sequenceName="MDIS75_SEQ")
	@Column(name="COST_STAGE_ID",nullable=false,length=9)
	public int getCostStageId(){
		return costStageId;
	}
	public void setCostStageId(int costStageId) throws java.sql.SQLException{
		if(isSame(costStageId, getCostStageId()))return;
		int oldValue = getCostStageId();
		this.costStageId=costStageId;
		setProperty("COST_STAGE_ID", costStageId, oldValue);
	}
	@Column(name="NAME",nullable=false,length=32)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="APPROVED_COST",nullable=true,length=1)
	public boolean isApprovedCost(){
		return approvedCost;
	}
	public void setApprovedCost(boolean approvedCost) throws java.sql.SQLException{
		if(isSame(approvedCost, isApprovedCost()))return;
		boolean oldValue = isApprovedCost();
		this.approvedCost=approvedCost;
		setProperty("APPROVED_COST", approvedCost, oldValue);
	}
	@Column(name="UNIT_COSTABLE",nullable=true,length=1)
	public boolean isUnitCostable(){
		return unitCostable;
	}
	public void setUnitCostable(boolean unitCostable) throws java.sql.SQLException{
		if(isSame(unitCostable, isUnitCostable()))return;
		boolean oldValue = isUnitCostable();
		this.unitCostable=unitCostable;
		setProperty("UNIT_COSTABLE", unitCostable, oldValue);
	}
	@Column(name="ENABLED",nullable=true,length=1)
	public boolean isEnabled(){
		return enabled;
	}
	public void setEnabled(boolean enabled) throws java.sql.SQLException{
		if(isSame(enabled, isEnabled()))return;
		boolean oldValue = isEnabled();
		this.enabled=enabled;
		setProperty("ENABLED", enabled, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="COST_TYPE",nullable=true,length=2)
	public int getCostType(){
		return costType;
	}
	public void setCostType(int costType) throws java.sql.SQLException{
		if(isSame(costType, getCostType()))return;
		int oldValue = getCostType();
		this.costType=costType;
		setProperty("COST_TYPE", costType, oldValue);
	}
	public CostStage copy()throws java.sql.SQLException{
		CostStage cp = new CostStage((CostStage)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CostStageDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CostStageDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getCostStageId(),o.getCostStageId())) diffs.add("COST_STAGE_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(isApprovedCost(),o.isApprovedCost())) diffs.add("APPROVED_COST");
		if(!isSame(isUnitCostable(),o.isUnitCostable())) diffs.add("UNIT_COSTABLE");
		if(!isSame(isEnabled(),o.isEnabled())) diffs.add("ENABLED");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getCostType(),o.getCostType())) diffs.add("COST_TYPE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
