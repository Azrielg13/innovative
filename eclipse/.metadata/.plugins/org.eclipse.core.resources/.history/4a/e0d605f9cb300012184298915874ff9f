package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Vector;

/**
 * The Class SubFilter.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class SubFilter {
	
	public final static SubFilter CORE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.CORE_SUB_FILTER,SubFilterCriteria.IN_SERIVCE_OR_FUTURE});
	public final static SubFilter CORE_IN_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.CORE_SUB_FILTER,SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter IN_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter OUT_OF_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.OUT_OF_SERIVCE});
	public final static SubFilter IN_SERVICE_OR_FUTURE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.IN_SERIVCE_OR_FUTURE});
	public final static SubFilter CORE_IN_OR_OUT_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.CORE_SUB_FILTER});
	public final static SubFilter CUST_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.CUST_FILTER,SubFilterCriteria.IN_SERIVCE_OR_FUTURE});
	public final static SubFilter CUST_SUB_IN_SERVICE = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.CUST_FILTER,SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter ADS_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.ADS_SUB_FILTER,SubFilterCriteria.IN_SERIVCE_OR_FUTURE});
	public final static SubFilter ADS_IN_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.ADS_SUB_FILTER,SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter ADSC_IN_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.ADSC_SUB_FILTER,SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter ADC_IN_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.ADC_SUB_FILTER,SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter D_IN_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.D_SUB_FILTER,SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter D_IN_SERVICE_TEMP_SENSITIVE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.D_SUB_FILTER,SubFilterCriteria.IN_SERIVCE, SubFilterCriteria.T_SENS_SUB_FILTER});
	
	public final static SubFilter NON_AUTO_SUB_FILTER = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.NON_AUTO_SUB_FILTER, SubFilterCriteria.ADS_SUB_FILTER, SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter AUTOMATED_SUB_FILTER = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.AUTOMATED_SUB_FILTER, SubFilterCriteria.IN_SERIVCE});
	public final static SubFilter PUBLISH_SUBS = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.CORE_SUB_FILTER,SubFilterCriteria.IN_SERIVCE_OR_FUTURE});
	
	public final static SubFilter AA_IN_SERVICE_SUB = new SubFilter(new SubFilterCriteria[]{SubFilterCriteria.AA_SUB_FILTER,SubFilterCriteria.IN_SERIVCE_OR_FUTURE});
	
	private Vector<SubFilterCriteria> criterias;
	
	/**
	 * 
	 */
	public SubFilter(){	
	}
	
	/**
	 * 
	 * @param criterias
	 */
	public SubFilter(Vector<SubFilterCriteria> criterias){
		setCriterias(criterias);
	}
	
	/**
	 * 
	 * @param criterias
	 */
	public SubFilter(SubFilterCriteria[] criterias){
		for(SubFilterCriteria sfc:criterias)
			addCriteria(sfc);
	}
	
	/**
	 * 
	 * @param criterias
	 */
	public void setCriterias(Vector<SubFilterCriteria> criterias){
		this.criterias = criterias;
	}
	
	/**
	 * 
	 * @return
	 */
	public Vector<SubFilterCriteria> getCriterias(){
		return criterias;
	}
	
	/**
	 * 
	 * @param criteria
	 */
	public void addCriteria(SubFilterCriteria criteria){
		if(criterias == null)
			criterias = new Vector<SubFilterCriteria>();
		criterias.add(criteria);
	}
	
	/**
	 * 
	 * @param criteria
	 */
	public void removeCriteria(SubFilterCriteria criteria){
		if(criterias != null)
			criterias.remove(criteria);
	}
	
	/**
	 * determines if the sub meets criteria
	 * @param sub
	 * @param simId
	 * @return
	 * @throws SQLException
	 */
	public boolean meetsCriteria(Sub sub, int simId) throws SQLException{
		return meetsCriteria(sub,simId,Department.getActivePlanYear()-1);
	}
	
	/**
	 * determines if the sub meets criteria for the given year
	 * @param sub
	 * @param simId
	 * @param year
	 * @return
	 * @throws SQLException
	 */
	public boolean meetsCriteria(Sub sub, int simId, int year) throws SQLException{
		if(criterias != null){
			for(SubFilterCriteria sfc:criterias)
				if(!sfc.meetsCriteria(sub, simId, year))
					return false;
		}
		return true;
	}	
}