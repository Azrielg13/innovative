package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AbstractTask;
import com.sce.esp.object.model.ProjTask;
import com.sce.esp.object.model.SceProjRev;
import com.sce.esp.object.model.TaskRelation;
import com.sce.esp.object.model.TaskResource;
import com.sce.esp.object.model.TaskType;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ProjTaskDAO extends AbstractTask<TaskResource>{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,SCE_PROJ_REV_ID,TASK_TYPE_ID,NAME,DESCRIPTION,PARENT_ID,DELIVERABLE,PERF_CRIT,EST_EFFORT,ACT_EFFORT,SHIFT,EST_DURATION,PERCENT_COMP,EST_START_DATE,ACT_START_DATE,EST_END_DATE,ACT_END_DATE,NOTE,DATA};
	public final static int ID_LIMIT = 9;
	public final static int SCEPROJREVID_LIMIT = 9;
	public final static int TASKTYPEID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 512;
	public final static int PARENTID_LIMIT = 9;
	public final static int DELIVERABLE_LIMIT = 256;
	public final static int PERFCRIT_LIMIT = 256;
	public final static int ESTEFFORT_LIMIT = 24;
	public final static int ACTEFFORT_LIMIT = 24;
	public final static int SHIFT_LIMIT = 24;
	public final static int ESTDURATION_LIMIT = 24;
	public final static int PERCENTCOMP_LIMIT = 24;
	public final static int ESTSTARTDATE_LIMIT = 7;
	public final static int ACTSTARTDATE_LIMIT = 7;
	public final static int ESTENDDATE_LIMIT = 7;
	public final static int ACTENDDATE_LIMIT = 7;
	public final static int NOTE_LIMIT = 512;
	public final static int DATA_LIMIT = 2048;
	private int id;
	private int sceProjRevId;
	private int taskTypeId;
	private String name;
	private String description;
	private int parentId;
	private String deliverable;
	private String perfCrit;
	private double estEffort;
	private double actEffort;
	private double shift;
	private double estDuration;
	private double percentComp;
	private Calendar estStartDate;
	private Calendar actStartDate;
	private Calendar estEndDate;
	private Calendar actEndDate;
	private String note;
	private String data;
	private Collection<ProjTask> childTasks;
	private Collection<TaskRelation> preds;
	private Collection<TaskRelation> succs;
	private Collection<TaskResource> resources;
	private SceProjRev sceProjRev;
	private TaskType taskType;
	private ProjTask parent;
	public static ProjTask getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static ProjTask getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProjTask o = null;
		if(cache != null && cache.contains(ProjTask.class, pk))
			o = em.find(ProjTask.class, pk);
		if(o==null && getAICache().contains(ProjTask.class, pk))
			o = getAICache().find(ProjTask.class, pk);
		if(o==null && fetch)
			o = em.find(ProjTask.class, pk);
		if(o==null && fetch && ProjTask.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProjTask(id);
			getAICache().cache(ProjTask.class, o);
		}
		return o;
	}
	public static Collection<ProjTask> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProjTask> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProjTask> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProjTask o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProjTask> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjTask> tq = em.createQuery(jpql,ProjTask.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProjTask> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjTask> tq = em.createNamedQuery(name,ProjTask.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProjTaskDAO(){}
	public ProjTaskDAO(int id){
		this.id=id;
	}
	public ProjTaskDAO(ProjTaskDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ProjTaskDAO orig){
		this.sceProjRevId=orig.getSceProjRevId();
		this.taskTypeId=orig.getTaskTypeId();
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.parentId=orig.getParentId();
		this.deliverable=orig.getDeliverable();
		this.perfCrit=orig.getPerfCrit();
		this.estEffort=orig.getEstEffort();
		this.actEffort=orig.getActEffort();
		this.shift=orig.getShift();
		this.estDuration=orig.getEstDuration();
		this.percentComp=orig.getPercentComp();
		this.estStartDate=orig.getEstStartDate();
		this.actStartDate=orig.getActStartDate();
		this.estEndDate=orig.getEstEndDate();
		this.actEndDate=orig.getActEndDate();
		this.note=orig.getNote();
		this.data=orig.getData();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT03_SEQ",sequenceName="MDIT03_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="SCE_PROJ_REV_ID",nullable=false,length=9)
	public int getSceProjRevId(){
		return sceProjRevId;
	}
	public void setSceProjRevId(int sceProjRevId) throws java.sql.SQLException{
		if(isSame(sceProjRevId, getSceProjRevId()))return;
		int oldValue = getSceProjRevId();
		this.sceProjRevId=sceProjRevId;
		setProperty("SCE_PROJ_REV_ID", sceProjRevId, oldValue);
		sceProjRev=null;
	}
	@Column(name="TASK_TYPE_ID",nullable=false,length=9)
	public int getTaskTypeId(){
		return taskTypeId;
	}
	public void setTaskTypeId(int taskTypeId) throws java.sql.SQLException{
		if(isSame(taskTypeId, getTaskTypeId()))return;
		int oldValue = getTaskTypeId();
		this.taskTypeId=taskTypeId;
		setProperty("TASK_TYPE_ID", taskTypeId, oldValue);
		taskType=null;
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=false,length=512)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="PARENT_ID",nullable=true,length=9)
	public int getParentId(){
		return parentId;
	}
	public void setParentId(int parentId) throws java.sql.SQLException{
		if(isSame(parentId, getParentId()))return;
		int oldValue = getParentId();
		this.parentId=parentId;
		setProperty("PARENT_ID", parentId, oldValue);
		parent=null;
	}
	@Column(name="DELIVERABLE",nullable=true,length=256)
	public String getDeliverable(){
		return deliverable;
	}
	public void setDeliverable(String deliverable) throws java.sql.SQLException{
		if(isSame(deliverable, getDeliverable()))return;
		String oldValue = getDeliverable();
		this.deliverable=deliverable;
		setProperty("DELIVERABLE", deliverable, oldValue);
	}
	@Column(name="PERF_CRIT",nullable=true,length=256)
	public String getPerfCrit(){
		return perfCrit;
	}
	public void setPerfCrit(String perfCrit) throws java.sql.SQLException{
		if(isSame(perfCrit, getPerfCrit()))return;
		String oldValue = getPerfCrit();
		this.perfCrit=perfCrit;
		setProperty("PERF_CRIT", perfCrit, oldValue);
	}
	@Column(name="EST_EFFORT",nullable=true,length=24)
	public double getEstEffort(){
		return estEffort;
	}
	public void setEstEffort(double estEffort) throws java.sql.SQLException{
		if(isSame(estEffort, getEstEffort()))return;
		double oldValue = getEstEffort();
		this.estEffort=estEffort;
		setProperty("EST_EFFORT", estEffort, oldValue);
	}
	@Column(name="ACT_EFFORT",nullable=true,length=24)
	public double getActEffort(){
		return actEffort;
	}
	public void setActEffort(double actEffort) throws java.sql.SQLException{
		if(isSame(actEffort, getActEffort()))return;
		double oldValue = getActEffort();
		this.actEffort=actEffort;
		setProperty("ACT_EFFORT", actEffort, oldValue);
	}
	@Column(name="SHIFT",nullable=true,length=24)
	public double getShift(){
		return shift;
	}
	public void setShift(double shift) throws java.sql.SQLException{
		if(isSame(shift, getShift()))return;
		double oldValue = getShift();
		this.shift=shift;
		setProperty("SHIFT", shift, oldValue);
	}
	@Column(name="EST_DURATION",nullable=true,length=24)
	public double getEstDuration(){
		return estDuration;
	}
	public void setEstDuration(double estDuration) throws java.sql.SQLException{
		if(isSame(estDuration, getEstDuration()))return;
		double oldValue = getEstDuration();
		this.estDuration=estDuration;
		setProperty("EST_DURATION", estDuration, oldValue);
	}
	@Column(name="PERCENT_COMP",nullable=true,length=24)
	public double getPercentComp(){
		return percentComp;
	}
	public void setPercentComp(double percentComp) throws java.sql.SQLException{
		if(isSame(percentComp, getPercentComp()))return;
		double oldValue = getPercentComp();
		this.percentComp=percentComp;
		setProperty("PERCENT_COMP", percentComp, oldValue);
	}
	@Column(name="EST_START_DATE",nullable=true,length=7)
	public Calendar getEstStartDate(){
		return estStartDate;
	}
	public void setEstStartDate(Calendar estStartDate) throws java.sql.SQLException{
		if(isSame(estStartDate, getEstStartDate()))return;
		Calendar oldValue = getEstStartDate();
		this.estStartDate=estStartDate;
		setProperty("EST_START_DATE", estStartDate, oldValue);
	}
	@Column(name="ACT_START_DATE",nullable=true,length=7)
	public Calendar getActStartDate(){
		return actStartDate;
	}
	public void setActStartDate(Calendar actStartDate) throws java.sql.SQLException{
		if(isSame(actStartDate, getActStartDate()))return;
		Calendar oldValue = getActStartDate();
		this.actStartDate=actStartDate;
		setProperty("ACT_START_DATE", actStartDate, oldValue);
	}
	@Column(name="EST_END_DATE",nullable=true,length=7)
	public Calendar getEstEndDate(){
		return estEndDate;
	}
	public void setEstEndDate(Calendar estEndDate) throws java.sql.SQLException{
		if(isSame(estEndDate, getEstEndDate()))return;
		Calendar oldValue = getEstEndDate();
		this.estEndDate=estEndDate;
		setProperty("EST_END_DATE", estEndDate, oldValue);
	}
	@Column(name="ACT_END_DATE",nullable=true,length=7)
	public Calendar getActEndDate(){
		return actEndDate;
	}
	public void setActEndDate(Calendar actEndDate) throws java.sql.SQLException{
		if(isSame(actEndDate, getActEndDate()))return;
		Calendar oldValue = getActEndDate();
		this.actEndDate=actEndDate;
		setProperty("ACT_END_DATE", actEndDate, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="DATA",nullable=true,length=2048)
	public String getData(){
		return data;
	}
	public void setData(String data) throws java.sql.SQLException{
		if(isSame(data, getData()))return;
		String oldValue = getData();
		this.data=data;
		setProperty("DATA", data, oldValue);
	}
	public SceProjRev getSceProjRev()throws java.sql.SQLException{
		if(sceProjRev==null)
			sceProjRev=SceProjRev.getInstance(getSceProjRevId());
		return sceProjRev;
	}
	public void setSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		setSceProjRevId(sceProjRev==null?0:sceProjRev.getSceProjRevId());
		this.sceProjRev=sceProjRev;
	}
	public TaskType getTaskType()throws java.sql.SQLException{
		if(taskType==null)
			taskType=TaskType.getInstance(getTaskTypeId());
		return taskType;
	}
	public void setTaskType(TaskType taskType)throws java.sql.SQLException{
		setTaskTypeId(taskType==null?0:taskType.getId());
		this.taskType=taskType;
	}
	public ProjTask getParent()throws java.sql.SQLException{
		if(parent==null)
			parent=ProjTask.getInstance(getParentId());
		return parent;
	}
	public void setParent(ProjTask parent)throws java.sql.SQLException{
		setParentId(parent==null?0:parent.getId());
		this.parent=parent;
	}
	public Collection<ProjTask> getChildTasks()throws java.sql.SQLException{
		if(isNewInstance() || childTasks != null){
			if(childTasks == null)
				childTasks = new TreeSet<ProjTask>();
			return childTasks;
		}
		return ProjTask.getNamedCollection("findByParent",getId());
	}
	public void addChildTask(ProjTask childTask)throws java.sql.SQLException{
		childTask.setParent((ProjTask)this);
		if(isNewInstance() || childTasks != null)
			getChildTasks().add(childTask);
		else
			childTask.insert();
	}
	public void removeChildTask(ProjTask childTask)throws java.sql.SQLException{
		if(isNewInstance() || childTasks != null)
			getChildTasks().remove(childTask);
		else
			childTask.delete();
	}
	public Collection<TaskRelation> getPreds()throws java.sql.SQLException{
		if(isNewInstance() || preds != null){
			if(preds == null)
				preds = new TreeSet<TaskRelation>();
			return preds;
		}
		return TaskRelation.getNamedCollection("findBySuccTask",getId());
	}
	public void addPred(TaskRelation pred)throws java.sql.SQLException{
		pred.setSuccTask((ProjTask)this);
		if(isNewInstance() || preds != null)
			getPreds().add(pred);
		else
			pred.insert();
	}
	public void removePred(TaskRelation pred)throws java.sql.SQLException{
		if(isNewInstance() || preds != null)
			getPreds().remove(pred);
		else
			pred.delete();
	}
	public Collection<TaskRelation> getSuccs()throws java.sql.SQLException{
		if(isNewInstance() || succs != null){
			if(succs == null)
				succs = new TreeSet<TaskRelation>();
			return succs;
		}
		return TaskRelation.getNamedCollection("findByPredTask",getId());
	}
	public void addSucc(TaskRelation succ)throws java.sql.SQLException{
		succ.setPredTask((ProjTask)this);
		if(isNewInstance() || succs != null)
			getSuccs().add(succ);
		else
			succ.insert();
	}
	public void removeSucc(TaskRelation succ)throws java.sql.SQLException{
		if(isNewInstance() || succs != null)
			getSuccs().remove(succ);
		else
			succ.delete();
	}
	public Collection<TaskResource> getResources()throws java.sql.SQLException{
		if(isNewInstance() || resources != null){
			if(resources == null)
				resources = new TreeSet<TaskResource>();
			return resources;
		}
		return TaskResource.getNamedCollection("findByProjTask",getId());
	}
	public void addResource(TaskResource resource)throws java.sql.SQLException{
		resource.setProjTask((ProjTask)this);
		if(isNewInstance() || resources != null)
			getResources().add(resource);
		else
			resource.insert();
	}
	public void removeResource(TaskResource resource)throws java.sql.SQLException{
		if(isNewInstance() || resources != null)
			getResources().remove(resource);
		else
			resource.delete();
	}
	public ProjTask copy()throws java.sql.SQLException{
		ProjTask cp = new ProjTask((ProjTask)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProjTaskDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(ProjTask child:getChildTasks())
			cp.addChildTask(child.copy());
		for(TaskRelation child:getPreds())
			cp.addPred(child.copy());
		for(TaskRelation child:getSuccs())
			cp.addSucc(child.copy());
		for(TaskResource child:getResources())
			cp.addResource(child.copy());
	}
	public Vector<String> getDifference(ProjTaskDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getSceProjRevId(),o.getSceProjRevId())) diffs.add("SCE_PROJ_REV_ID");
		if(!isSame(getTaskTypeId(),o.getTaskTypeId())) diffs.add("TASK_TYPE_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getParentId(),o.getParentId())) diffs.add("PARENT_ID");
		if(!isSame(getDeliverable(),o.getDeliverable())) diffs.add("DELIVERABLE");
		if(!isSame(getPerfCrit(),o.getPerfCrit())) diffs.add("PERF_CRIT");
		if(!isSame(getEstEffort(),o.getEstEffort())) diffs.add("EST_EFFORT");
		if(!isSame(getActEffort(),o.getActEffort())) diffs.add("ACT_EFFORT");
		if(!isSame(getShift(),o.getShift())) diffs.add("SHIFT");
		if(!isSame(getEstDuration(),o.getEstDuration())) diffs.add("EST_DURATION");
		if(!isSame(getPercentComp(),o.getPercentComp())) diffs.add("PERCENT_COMP");
		if(!isSame(getEstStartDate(),o.getEstStartDate())) diffs.add("EST_START_DATE");
		if(!isSame(getActStartDate(),o.getActStartDate())) diffs.add("ACT_START_DATE");
		if(!isSame(getEstEndDate(),o.getEstEndDate())) diffs.add("EST_END_DATE");
		if(!isSame(getActEndDate(),o.getActEndDate())) diffs.add("ACT_END_DATE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getData(),o.getData())) diffs.add("DATA");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(sceProjRev != null && sceProjRev.isNewInstance())
				sceProjRev.insert();
		if(taskType != null && taskType.isNewInstance())
				taskType.insert();
		if(parent != null && parent.isNewInstance())
				parent.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(childTasks != null){
			for(ProjTask childTask:getChildTasks())
				childTask.setParent((ProjTask)this);
		}
		if(preds != null){
			for(TaskRelation pred:getPreds())
				pred.setSuccTask((ProjTask)this);
		}
		if(succs != null){
			for(TaskRelation succ:getSuccs())
				succ.setPredTask((ProjTask)this);
		}
		if(resources != null){
			for(TaskResource resource:getResources())
				resource.setProjTask((ProjTask)this);
		}
		if(childTasks != null){
			for(ProjTask childTask:getChildTasks())
				if(childTask.isNewInstance())
					childTask.insert();
			childTasks = null;
		}
		if(preds != null){
			for(TaskRelation pred:getPreds())
				if(pred.isNewInstance())
					pred.insert();
			preds = null;
		}
		if(succs != null){
			for(TaskRelation succ:getSuccs())
				if(succ.isNewInstance())
					succ.insert();
			succs = null;
		}
		if(resources != null){
			for(TaskResource resource:getResources())
				if(resource.isNewInstance())
					resource.insert();
			resources = null;
		}
	}
}
