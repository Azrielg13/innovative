package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Sys;
import com.sce.esp.object.model.User;
import com.sce.esp.object.model.UserSys;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class UserSysDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,USERNAME_ID,SYS_ID};
	public static enum PROPERTY{PLANYEAR,USERNAME_ID,SYS_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int USERNAMEID_LIMIT = 9;
	public final static int SYSID_LIMIT = 9;
	private int planyear;
	private int usernameId;
	private int sysId;
	private User user;
	private Sys sys;
	public static UserSys getInstance(int planyear, int usernameId, int sysId)throws java.sql.SQLException{
		return getInstance(planyear, usernameId, sysId, true);
	}
	public static UserSys getInstance(int planyear, int usernameId, int sysId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, usernameId, sysId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, usernameId, sysId);
		Cache cache = em.getEntityManagerFactory().getCache();
		UserSys o = null;
		if(cache != null && cache.contains(UserSys.class, pk))
			o = em.find(UserSys.class, pk);
		if(o==null && getAICache().contains(UserSys.class, pk))
			o = getAICache().find(UserSys.class, pk);
		if(o==null && fetch)
			o = em.find(UserSys.class, pk);
		if(o==null && fetch && UserSys.class.getAnnotation(AutoInsertable.class) != null){
			o = new UserSys(planyear, usernameId, sysId);
			getAICache().cache(UserSys.class, o);
		}
		return o;
	}
	public static Collection<UserSys> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<UserSys> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<UserSys> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM UserSys o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<UserSys> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<UserSys> tq = em.createQuery(jpql,UserSys.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<UserSys> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<UserSys> tq = em.createNamedQuery(name,UserSys.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public UserSysDAO(){}
	public UserSysDAO(int planyear, int usernameId, int sysId){
		this.planyear=planyear;
		this.usernameId=usernameId;
		this.sysId=sysId;
	}
	public UserSysDAO(UserSysDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.usernameId=orig.getUsernameId();
		this.sysId=orig.getSysId();
		copyFrom(orig);
	}
	public void copyFrom(UserSysDAO orig){
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, usernameId, sysId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="USERNAME_ID",nullable=false,length=9)
	public int getUsernameId(){
		return usernameId;
	}
	public void setUsernameId(int usernameId) throws java.sql.SQLException{
		if(isSame(usernameId, getUsernameId()))return;
		int oldValue = getUsernameId();
		this.usernameId=usernameId;
		setProperty("USERNAME_ID", usernameId, oldValue);
		user=null;
	}
	@Id
	@Column(name="SYS_ID",nullable=false,length=9)
	public int getSysId(){
		return sysId;
	}
	public void setSysId(int sysId) throws java.sql.SQLException{
		if(isSame(sysId, getSysId()))return;
		int oldValue = getSysId();
		this.sysId=sysId;
		setProperty("SYS_ID", sysId, oldValue);
		sys=null;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getUsernameId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setUsernameId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public Sys getSys()throws java.sql.SQLException{
		if(sys==null)
			sys=Sys.getInstance(getPlanyear(), getSysId());
		return sys;
	}
	public void setSys(Sys sys)throws java.sql.SQLException{
		setSysId(sys==null?0:sys.getSysId());
		this.sys=sys;
	}
	public UserSys copy()throws java.sql.SQLException{
		UserSys cp = new UserSys((UserSys)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(UserSysDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(UserSysDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getUsernameId(),o.getUsernameId())) diffs.add("USERNAME_ID");
		if(!isSame(getSysId(),o.getSysId())) diffs.add("SYS_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(user != null && user.isNewInstance())
				user.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
