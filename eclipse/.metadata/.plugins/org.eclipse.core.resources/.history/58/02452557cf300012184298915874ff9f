package com.sce.esp.object.model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Table;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.ESPTestCase;
import com.sce.esp.util.Calculate;
import com.sce.esp.util.FormatText;
import com.sce.esp.util.db.PDBConnection;
import com.sce.esp.util.db.Synchronizer;


public class SyncTest extends ESPTestCase {
	static{
		Synchronizer synchronizer = new Synchronizer(null){
			public void preSync() {
			}
			public void postSync() {
			}
		};
		synchronizer.start();
	}
	private Connection conn;
	public Connection getSecondaryConnection() throws SQLException{
		if(conn==null)
			conn = DriverManager.getConnection(PDBConnection.getInstance().getURL(),"mayfiee","edison");
		return conn;
	}
	public void testSubDaily() throws SQLException{
		Calendar cal = Calculate.getCal(2011, Calendar.AUGUST, 27);
		SubDaily sd = SubDaily.getInstance(2012,800,cal);
		EspLogger.message(this, "PK: "+sd.getHashKey());
		assertEquals(0,sd.getPeakAdj());
		assertEquals(7,sd.getGenAdj());
		assertEquals(4977,sd.getPeakValue());
		Connection conn = getSecondaryConnection();
		PreparedStatement ps = conn.prepareStatement("UPDATE mdi."+SubDaily.class.getAnnotation(Table.class).name()+" SET PEAK_ADJ=? WHERE PLANYEAR=? AND SUB_ID=? AND TO_CHAR(PEAK_DATE,'YYYY-MM-DD')=?");
		int i=1;
		ps.setInt(i++, 400);
		ps.setInt(i++, sd.getPlanyear());
		ps.setInt(i++, sd.getSubId());
		String date = FormatText.formatDate(cal, FormatText.MYSQL_DATE);
		ps.setString(i++, date);
		EspLogger.message(this, ps.executeUpdate()+" record(s) updated");
		EspLogger.message(this, "Updating to first update");
		Synchronizer.getInstance().sync();
		ps.setInt(1, 0);
		EspLogger.message(this, ps.executeUpdate()+" record(s) updated");
		ps.close();
		assertEquals(400,sd.getPeakAdj());
		Synchronizer.getInstance().sync();
		EspLogger.message(this, "Updating to second update");
		assertEquals(0,sd.getPeakAdj());
	}
	public void testBankDaily() throws SQLException{
		Calendar cal = Calculate.getCal(2011, Calendar.AUGUST, 27);
		BankDaily sd = BankDaily.getInstance(2012,0,800,cal);
		EspLogger.message(this, "PK: "+sd.getHashKey());
		assertEquals(0,sd.getPeakAdj());
		Connection conn = getSecondaryConnection();
		PreparedStatement ps = conn.prepareStatement("UPDATE mdi."+BankDaily.class.getAnnotation(Table.class).name()+" SET PEAK_ADJ=? WHERE PLANYEAR=? AND SIM_ID=? AND BANK_ID=? AND TO_CHAR(PEAK_DATE,'YYYY-MM-DD')=?");
		int i=1;
		ps.setInt(i++, 400);
		ps.setInt(i++, sd.getPlanyear());
		ps.setInt(i++, sd.getSimId());
		ps.setInt(i++, sd.getBankId());
		String date = FormatText.formatDate(cal, FormatText.MYSQL_DATE);
		ps.setString(i++, date);
		EspLogger.message(this, ps.executeUpdate()+" record(s) updated");
		EspLogger.message(this, "Updating to first update");
		Synchronizer.getInstance().sync();
		ps.setInt(1, 0);
		EspLogger.message(this, ps.executeUpdate()+" record(s) updated");
		ps.close();
		assertEquals(400,sd.getPeakAdj());
		Synchronizer.getInstance().sync();
		EspLogger.message(this, "Updating to second update");
		assertEquals(0,sd.getPeakAdj());
	}
	public void testCktDaily() throws SQLException{
		Calendar cal = Calculate.getCal(2011, Calendar.AUGUST, 27);
		CktDaily sd = CktDaily.getInstance(2012,800,cal);
		EspLogger.message(this, "PK: "+sd.getHashKey());
		assertEquals(0,sd.getPeakAdj());
		Connection conn = getSecondaryConnection();
		PreparedStatement ps = conn.prepareStatement("UPDATE mdi."+CktDaily.class.getAnnotation(Table.class).name()+" SET PEAK_ADJ=? WHERE PLANYEAR=? AND CKT_ID=? AND TO_CHAR(PEAK_DATE,'YYYY-MM-DD')=?");
		int i=1;
		ps.setInt(i++, 400);
		ps.setInt(i++, sd.getPlanyear());
		ps.setInt(i++, sd.getCktId());
		String date = FormatText.formatDate(cal, FormatText.MYSQL_DATE);
		ps.setString(i++, date);
		EspLogger.message(this, ps.executeUpdate()+" record(s) updated");
		EspLogger.message(this, "Updating to first update");
		Synchronizer.getInstance().sync();
		ps.setInt(1, 0);
		EspLogger.message(this, ps.executeUpdate()+" record(s) updated");
		ps.close();
		assertEquals(400,sd.getPeakAdj());
		Synchronizer.getInstance().sync();
		EspLogger.message(this, "Updating to second update");
		assertEquals(0,sd.getPeakAdj());
	}
}
