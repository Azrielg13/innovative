package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostType;
import com.sce.esp.object.model.CostTypeRate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CostTypeRateDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,COST_TYPE_ID,EFF_DATE,EST_YEAR,RATE_SCE,RATE_CONT,CONT_FACTOR,N_T_RATIO};
	public final static int ID_LIMIT = 9;
	public final static int COSTTYPEID_LIMIT = 9;
	public final static int EFFDATE_LIMIT = 64;
	public final static int ESTYEAR_LIMIT = 4;
	public final static int RATESCE_LIMIT = 24;
	public final static int RATECONT_LIMIT = 24;
	public final static int CONTFACTOR_LIMIT = 24;
	public final static int NTRATIO_LIMIT = 24;
	private int id;
	private int costTypeId;
	private Calendar effDate;
	private int estYear;
	private double rateSce;
	private double rateCont;
	private double contFactor;
	private double nTRatio;
	private CostType costType;
	public static CostTypeRate getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static CostTypeRate getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		CostTypeRate o = null;
		if(cache != null && cache.contains(CostTypeRate.class, pk))
			o = em.find(CostTypeRate.class, pk);
		if(o==null && getAICache().contains(CostTypeRate.class, pk))
			o = getAICache().find(CostTypeRate.class, pk);
		if(o==null && fetch)
			o = em.find(CostTypeRate.class, pk);
		if(o==null && fetch && CostTypeRate.class.getAnnotation(AutoInsertable.class) != null){
			o = new CostTypeRate(id);
			getAICache().cache(CostTypeRate.class, o);
		}
		return o;
	}
	public static Collection<CostTypeRate> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CostTypeRate> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CostTypeRate> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CostTypeRate o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CostTypeRate> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostTypeRate> tq = em.createQuery(jpql,CostTypeRate.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CostTypeRate> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostTypeRate> tq = em.createNamedQuery(name,CostTypeRate.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CostTypeRateDAO(){}
	public CostTypeRateDAO(int id){
		this.id=id;
	}
	public CostTypeRateDAO(CostTypeRateDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CostTypeRateDAO orig){
		this.costTypeId=orig.getCostTypeId();
		this.effDate=orig.getEffDate();
		this.estYear=orig.getEstYear();
		this.rateSce=orig.getRateSce();
		this.rateCont=orig.getRateCont();
		this.contFactor=orig.getContFactor();
		this.nTRatio=orig.getNTRatio();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIU30_SEQ",sequenceName="MDIU30_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="COST_TYPE_ID",nullable=false,length=9)
	public int getCostTypeId(){
		return costTypeId;
	}
	public void setCostTypeId(int costTypeId) throws java.sql.SQLException{
		if(isSame(costTypeId, getCostTypeId()))return;
		int oldValue = getCostTypeId();
		this.costTypeId=costTypeId;
		setProperty("COST_TYPE_ID", costTypeId, oldValue);
		costType=null;
	}
	@Column(name="EFF_DATE",nullable=false,length=64)
	public Calendar getEffDate(){
		return effDate;
	}
	public void setEffDate(Calendar effDate) throws java.sql.SQLException{
		if(isSame(effDate, getEffDate()))return;
		Calendar oldValue = getEffDate();
		this.effDate=effDate;
		setProperty("EFF_DATE", effDate, oldValue);
	}
	@Column(name="EST_YEAR",nullable=true,length=4)
	public int getEstYear(){
		return estYear;
	}
	public void setEstYear(int estYear) throws java.sql.SQLException{
		if(isSame(estYear, getEstYear()))return;
		int oldValue = getEstYear();
		this.estYear=estYear;
		setProperty("EST_YEAR", estYear, oldValue);
	}
	@Column(name="RATE_SCE",nullable=true,length=24)
	public double getRateSce(){
		return rateSce;
	}
	public void setRateSce(double rateSce) throws java.sql.SQLException{
		if(isSame(rateSce, getRateSce()))return;
		double oldValue = getRateSce();
		this.rateSce=rateSce;
		setProperty("RATE_SCE", rateSce, oldValue);
	}
	@Column(name="RATE_CONT",nullable=true,length=24)
	public double getRateCont(){
		return rateCont;
	}
	public void setRateCont(double rateCont) throws java.sql.SQLException{
		if(isSame(rateCont, getRateCont()))return;
		double oldValue = getRateCont();
		this.rateCont=rateCont;
		setProperty("RATE_CONT", rateCont, oldValue);
	}
	@Column(name="CONT_FACTOR",nullable=true,length=24)
	public double getContFactor(){
		return contFactor;
	}
	public void setContFactor(double contFactor) throws java.sql.SQLException{
		if(isSame(contFactor, getContFactor()))return;
		double oldValue = getContFactor();
		this.contFactor=contFactor;
		setProperty("CONT_FACTOR", contFactor, oldValue);
	}
	@Column(name="N_T_RATIO",nullable=true,length=24)
	public double getNTRatio(){
		return nTRatio;
	}
	public void setNTRatio(double nTRatio) throws java.sql.SQLException{
		if(isSame(nTRatio, getNTRatio()))return;
		double oldValue = getNTRatio();
		this.nTRatio=nTRatio;
		setProperty("N_T_RATIO", nTRatio, oldValue);
	}
	public CostType getCostType()throws java.sql.SQLException{
		if(costType==null)
			costType=CostType.getInstance(getCostTypeId());
		return costType;
	}
	public void setCostType(CostType costType)throws java.sql.SQLException{
		setCostTypeId(costType==null?0:costType.getId());
		this.costType=costType;
	}
	public CostTypeRate copy()throws java.sql.SQLException{
		CostTypeRate cp = new CostTypeRate((CostTypeRate)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CostTypeRateDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CostTypeRateDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getCostTypeId(),o.getCostTypeId())) diffs.add("COST_TYPE_ID");
		if(!isSame(getEffDate(),o.getEffDate())) diffs.add("EFF_DATE");
		if(!isSame(getEstYear(),o.getEstYear())) diffs.add("EST_YEAR");
		if(!isSame(getRateSce(),o.getRateSce())) diffs.add("RATE_SCE");
		if(!isSame(getRateCont(),o.getRateCont())) diffs.add("RATE_CONT");
		if(!isSame(getContFactor(),o.getContFactor())) diffs.add("CONT_FACTOR");
		if(!isSame(getNTRatio(),o.getNTRatio())) diffs.add("N_T_RATIO");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(costType != null && costType.isNewInstance())
				costType.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
