/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2002-2007, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;
import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.swing.Icon;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.dao.SysDAO;
import com.sce.esp.util.ESPTreeSet;
import com.sce.esp.util.IconsFactory;
import com.sce.esp.util.db.PDBConnection;
@Entity
@Table(schema="MDI",name="MDI060_SYS")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Sys o WHERE o.PLANYEAR=?1 AND o.SYS_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Sys o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Sys o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByRegion", query="SELECT o FROM Sys o WHERE o.PLANYEAR=?1 AND o.REGION_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI060_SYS o WHERE o.PLANYEAR=? AND o.SYS_ID=?"),//AUTO-GENERATED
})
public class Sys extends SysDAO implements Serializable{

	private static final long serialVersionUID = 1214023763108456502L;

	/** The Constant UNITY for ABank VAR analysis. */
	public final static int UNITY = 0;

	/** The Constant ACTUAL for ABank VAR analysis. */
	public final static int ACTUAL = 1;

	/** The Constant EDIT for ABank VAR analysis. */
	public final static int EDIT = 2;	

	/** The Constant SWTFX. */
	public final static String[] VAR_ANAL = {"Unity","Actual","User Input"};

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 */
	public Sys(){
	}
	public Sys(int planyear) {
		super(planyear,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param sysId the sys id
	 * @param planyear the planyear
	 */
	public Sys(int planyear, int sysId){
		super(planyear,sysId);
	}

	public Sys(Sys sys) {
		super(sys);
	}

	public int getId(){
		return getSysId();
	}

	public int getCoTypeId(){
		return CoType.SYSTEM;
	}

	/**
	 * Gets the year.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the year
	 * 
	 * @throws SQLException the SQL exception
	 */
	public SysYear getYear(int simId, int year)throws SQLException{
		return SysYear.getInstance(getPlanyear(),simId,getSysId(),year);
	}

	/**
	 * Gets the temperatures.
	 * 
	 * @param startDate the start date
	 * @param endDate the end date
	 * 
	 * @return the temperatures
	 * 
	 * @throws SQLException the SQL exception
	 */
	public AgTemperature[] getTemperatures(Calendar startDate, Calendar endDate)throws SQLException{	   	
		AgTemperature[] peaks = new AgTemperature[(int)Math.round((endDate.getTimeInMillis()-startDate.getTimeInMillis())/(1000.0*60*60*24)+1)];
		Calendar cal = (Calendar)startDate.clone();
		for(int p=0; p<peaks.length; p++){
			peaks[p] = AgTemperature.getInstance(this,cal);
			cal.add(Calendar.DATE,1);
		}
		return peaks;
	}

	/**
	 * Gets the weatherstations.
	 * 
	 * @return the weatherstations
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getWeatherStations()
	 */
	public synchronized TreeSet<Weatherstation> getWeatherStations()throws SQLException{
		TreeSet<Weatherstation> weatherstations = new TreeSet<Weatherstation>();
		for(int year=getPlanyear()-1; year<getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor();year++)
			weatherstations.addAll(getYear(0, year).getWeatherStations());
		return weatherstations;
	}

	/**
	 * <p>Title: getPeakEff</p>
	 * <p>Peak Effective Temperature for a given year</p>.
	 * 
	 * @param year the year
	 * 
	 * @return the peak eff
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getPeakEff(int year)throws SQLException{
		double sum=0;
		double avg=0;
		Vector<Weatherstation> wss = getWeatherStationsByInstance();
		for(Weatherstation ws:wss)
			sum+=ws.getPeakEff(year);
		if(wss.size()>0)
			avg=sum/wss.size();
		return avg;
	}

	/**
	 * Gets the interruption.
	 * 
	 * @param date the date
	 * 
	 * @return data, boolean
	 * 
	 * @throws SQLException the SQL exception
	 */
	public SysDaily getInterruption(Calendar date)throws SQLException {
		return getInterruption(date, true);		
	}

	/**
	 * Gets the interruption.
	 * 
	 * @param fetch the fetch
	 * @param date the date
	 * 
	 * @return sysId,date
	 * 
	 * @throws SQLException the SQL exception
	 */
	public SysDaily getInterruption(Calendar date, boolean fetch)throws SQLException{
		return SysDaily.getInstance(getPlanyear(),getSysId(),date);    
	}

	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		return getName()+" System";
	}

	/**
	 * Gets the down stream subs.
	 * 
	 * @param simId the sim id
	 * @param filter the filter
	 * 
	 * @return the down stream subs
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Sub> getDownStreamSubs(int simId, SubFilter filter) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getDownStreamSubs(filter);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getABanks(int)
	 */
	public TreeSet<Abank> getAbanks(int simId) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getAbanks();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getABanks(int, com.sce.mdi.object.SubFilter)
	 */
	public TreeSet<Abank> getAbanks(int simId, SubFilter filter) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getAbanks(filter);
	}

	public TreeSet<Abank> getAAbanks(int simId) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getAbanks(SubFilter.AA_IN_SERVICE_SUB);
	}

	/**
	 * Retrives the first layor of bbanks ever under object in the current getPlanyear().
	 * 
	 * @param simId the sim id
	 * 
	 * @return TreeSet<BBank> containing the first layor of bbanks
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Bbank> getBbanks(int simId)throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getBbanks();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getBBanks(int, com.sce.mdi.object.SubFilter)
	 */
	public TreeSet<Bbank> getBbanks(int simId, SubFilter filter)throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getBbanks(filter);
	}

	//	/*
	//	 * (non-Javadoc)
	//	 * @see com.sce.mdi.object.CoreObject#getSyss(int)
	//	 */
	//	public Vector<Sys> getSyss(int simId)throws SQLException{
	//		Vector<Sys> syss = new Vector<Sys>();
	//		syss.add(this);
	//		return syss;
	//	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getSyss(int)
	 */
	public Vector<Sys> getSyssSCE(int simId)throws SQLException{
		Vector<Sys> syss = new Vector<Sys>();
		if(!isForeignSys())
			syss.add(this);
		return syss;
	}

	/**
	 * Gets the daily peak.
	 * 
	 * @param date the date
	 * 
	 * @return the daily peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public AgDailyPeak getDailyPeak(Calendar date)throws SQLException{
		return new AgDailyPeak(this,date);
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getABankGrowthRate(int)
	 */
	public double getABankGrowthRate(int simId) throws SQLException{
		double sp = getYear(simId, getGrowthRateStartYear(simId)).getABankProjLoad();	   
		double tg = 0;		   
		for(int y=1; y<=getGrowthRateRange(simId); y++){
			tg += getYear(simId,getGrowthRateStartYear(simId)+y).getABankGrowth();
		}	   
		if(sp!=0)
			return (Math.pow((sp+tg)/sp,1.0/(getGrowthRateRange(simId)))-1);
		return 0;
	}

	/**
	 * Gets the growth rate start year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the growth rate start year
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getGrowthRateStartYear(int)
	 */
	public int getGrowthRateStartYear(int simId) throws SQLException{
		return Department.getInstance(getPlanyear()).getNormalizationDate().get(Calendar.YEAR);
	}

	/**
	 * Gets the growth rate range.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the growth rate range
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getGrowthRateRange(int)
	 */
	public int getGrowthRateRange(int simId) throws SQLException{
		return Simulation.getInstance(getPlanyear(), simId).getPlanFor() - (getGrowthRateStartYear(simId) - getPlanyear() + 1);
	}

	/**
	 * Gets the user filtered syss.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the user filtered syss
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getUserFilteredSyss()
	 */
	public Collection<Sys> getUserFilteredSyss(int simId) throws SQLException{
		return getSyss(simId);
	}

	/**
	 * Gets the level.
	 * 
	 * @return the level
	 */
	public int getLevel() {
		return SYSTEM;
	}

	public TreeSet<Referee> getSysFlags(int simId) throws SQLException{
		TreeSet<Referee> flags = new TreeSet<Referee>();
		int flagId = getN1STFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getN1LTFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getN1RollFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getN1ShedFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getN1LimitChangeFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getN1LimitNoChangeFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getVarReserveFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		return flags;
	}

	/**
	 * Gets the flags.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the flags
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Referee> getFlags(int simId)throws Exception{
		TreeSet<Referee> flags = getSysFlags(simId);
		for(Sub sub:getDownStreamSubs(simId, User.getActiveUser().getSubFilter()))
			flags.addAll(sub.getFlags(simId));
		return flags;
	}  

	/**
	 * Gets the ten year avg flag.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the ten year avg flag
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getTenYearAvgFlag()
	 */
	public int getTenYearAvgFlag(int simId) throws SQLException{
		int flagId = Flag.TEN_YR_AVG_FLAG;
		Flag flag = Flag.getInstance(getPlanyear(), flagId);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {		
			for(int year=getPlanyear()-11; year<getPlanyear()-1; year++) {
				if(getTenYearAvgPeakEffFlag(year) > 0)
					return flagId;
			}
		}
		return 0;
	}

	/**
	 * Gets the ten year avg peak eff flag.
	 * 
	 * @param year the year
	 * 
	 * @return the ten year avg peak eff flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getTenYearAvgPeakEffFlag(int year)throws SQLException{
		int flagId = Flag.TEN_YR_AVG_FLAG;
		Flag flag = Flag.getInstance(getPlanyear(), flagId);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {    		
			if(Math.abs(getPeakEff(year)/getTenYearAvg()-1) > flag.getValue())
				return flagId;			
		}
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * A-Bank Short Term Reserve < &value% for a given year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getN1STFlag(int simId) throws SQLException{
		Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_ST_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {     
			for(int y=getPlanyear(); y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++){               
				if(getYear(simId, y).getN1STFlag()>0)
					return flag.getFlagId();
			}           
		}
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * A-Bank Long Term Reserve < &value% for a given year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getN1LTFlag(int simId) throws SQLException{
		Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_LT_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {     
			for(int y=getPlanyear(); y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++){               
				if(getYear(simId, y).getN1LTFlag()>0)
					return flag.getFlagId();
			}           
		}
		return 0;
	}    

	/**
	 * Gets the n1 roll flag.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the n1 roll flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getN1RollFlag(int simId)throws SQLException{
		Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_ROLL_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()){
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++){
				if(getYear(simId, y).getN1RollFlag()>0)
					return flag.getFlagId();
			}
		}
		return 0;
	}

	/**
	 * Gets the stls.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the stls
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Stl> getStls(int simId)throws SQLException{
		TreeSet<Stl> stls = new TreeSet<Stl>();
		for(Abank ab:getAbanks(simId))
			stls.addAll(ab.getStls());
		return stls;
	}

	/**
	 * Gets the n1 shed flag.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the n1 shed flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getN1ShedFlag(int simId)throws SQLException{
		Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_SHED_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()){
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++){
				if(getYear(simId, y).getN1ShedFlag()>0)
					return flag.getFlagId();
			}
		}
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * Limit changed without a project (variance greater than &value%).
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getN1LimitChangeFlag(int simId) throws SQLException{
		Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_LIMIT_CHANGE_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {	
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++){
				if(getYear(simId, y).getLTN1LimitChangeFlag()>0 || getYear(simId, y).getSTN1LimitChangeFlag()>0)
					return flag.getFlagId();
			}
		}
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * A-Bank limit changed but System limit did not (variance greater than &value%).
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getN1LimitNoChangeFlag(int simId) throws SQLException{
		Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_LIMIT_CHANGE_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {	
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++){
				if(getYear(simId, y).getLTN1LimitNoChangeFlag()>0 || getYear(simId, y).getSTN1LimitNoChangeFlag()>0)
					return flag.getFlagId();
			}
		}
		return 0;
	}

	/**
	 * Gets the var reserve flag.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the var reserve flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getVarReserveFlag(int simId)throws SQLException{
		Flag flag = Flag.getInstance(getPlanyear(), Flag.VAR_RESERVE_DIST_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()){
			for(int y=getPlanyear(); y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++){
				if(getYear(simId, y).getVarReserveFlag()>0)
					return flag.getFlagId();
			}
		}
		return 0;
	}

	/**
	 * Gets the abank n1 active ties.
	 * 
	 * @return the abank n1 active ties
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Vector<AbankN1Tie> getAbankN1ActiveTies()throws SQLException{
		Vector<AbankN1Tie> ret = new Vector<AbankN1Tie>();
		for(AbankN1Tie tie:getAbankN1Ties())
			if(!tie.isDisabled())
				ret.add(tie);
		return ret;
	}

	/**
	 * Gets the icon.
	 * 
	 * @return the icon
	 */
	public Icon getIcon(){
		try {
			for(UserSys usys : User.getActiveUser().getUserSyss())
				if(getSysId()==usys.getSysId()) 
					return IconsFactory.ICON_USER_SYS;
		}catch(Exception e) {
			e.printStackTrace();
		}
		return IconsFactory.ICON_ASYSTEM;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getDistricts(int)
	 */
	/**
	 * Gets the districts.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the districts
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<District> getDistricts(int simId) throws SQLException {
		TreeSet<District> d = new TreeSet<District>();
		for(Bbank b:getBbanks(simId))
			if(!d.contains(b.getDistrict()))
				d.add(b.getDistrict());
		return d;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getDistricts()
	 */
	public Collection<District> getDistricts() throws SQLException {
		return getDistricts(0);
	}

	/**
	 * Returns the varAnalysisType.
	 * 
	 * @return The varAnalysisType
	 */
	public String getVarAnalysisTypeText(){
		return VAR_ANAL[getVarAnalysisType()];
	}

	/**
	 * Sets the capType.
	 * 
	 * @param varAnalysisType the var analysis type
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setVarAnalysisTypeText(String varAnalysisType)throws SQLException{
		if(varAnalysisType!=null){
			for(int i=0;i<VAR_ANAL.length;i++){
				if(varAnalysisType.equalsIgnoreCase(VAR_ANAL[i]))
					setVarAnalysisType(i);
			}
		}
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getChildren(int)
	 */
	public Collection<Bbank> getChildren(int simId)throws SQLException{
		return getChildren(simId,SubFilter.CORE_SUB);
	}

	public Collection<Bbank> getChildren(int simId, SubFilter sf) throws SQLException {
		return getBbanks(simId,sf);
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getPYInstance(int)
	 */
	public Sys getPlanYearInstance(int planyear)throws SQLException{
		return getInstance(planyear,getSysId());
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.esp.object.CoreObject#getSyss(int)
	 */
	public synchronized Collection<Sys> getSyss(int simId)throws SQLException{
		return new ESPTreeSet<Sys>(this);
	}

	TreeSet<SceProj> sceProjs;

	public synchronized TreeSet<SceProj> getSceProjsOLD(int simId) throws SQLException{
		TreeSet<SceProj> sceProjs = new TreeSet<SceProj>();
		for(Sub sub:getYear(simId, getPlanyear()-1).getDownStreamSubs()){
			for(SceProj proj:sub.getSceProjs())
				if(proj.getCurRev()!=null && proj.getCurRev().getPeakYear(getPlanyear()) < getPlanyear())
					if(proj.getCurRev().getSimId()==simId)
						sceProjs.add(proj);
		}
		for(int year=getPlanyear(); year<getPlanyear()+10; year++)
			for(Sub sub:getYear(simId, year).getDownStreamSubs()){
				for(SceProj proj:sub.getSceProjs())
					if(proj.getCurRev()!=null && proj.getCurRev().getSimId()==simId)
						sceProjs.add(proj);
			}
		return sceProjs;
	}

	/*
	 * @see com.sce.esp.object.AgObject#getSceProjs(int)
	 */
	public synchronized TreeSet<SceProj> getSceProjs(int simId) throws SQLException{
		if(simId>0)
			return getSceProjsOLD(simId);
		if(sceProjs==null){
			refreshProjsViaQuery(simId);
		}
		return sceProjs;
	}
	
	protected void refreshProjsViaQuery(int simId)throws SQLException{
		if(sceProjs==null)
			sceProjs = new TreeSet<SceProj>();
		else
			sceProjs.clear();

		//Obtain all Bbank projects for all years via direct query
		String query = "SELECT DISTINCT Sce_Proj_Rev_Id, BBANK_SUB_ID  FROM MDI.MDIS80_SCE_PROJ_ELEM_COST pec, (SELECT BBANK_SUB_ID FROM MDI.MDI108_BBANK_V WHERE (PLANYEAR,BBANK_SUB_ID) IN "+
		"(SELECT DISTINCT PLANYEAR, BBANK_SUB_ID FROM MDI.MDI130_BBANK_YEAR WHERE PLANYEAR=? AND PARENT_SUB_ID IN (SELECT SUB_ID FROM MDI.MDI105_SUB "+
		"WHERE (PLANYEAR, Sub_Id) IN (SELECT DISTINCT PLANYEAR, ABANK_SUB_ID FROM MDI.MDI120_ABANK_YEAR WHERE PLANYEAR=? AND SYS_ID=?)))) b "+
		"WHERE (CO_TYPE_ID="+CoType.BBANK+" "+
		" AND FACILITY_ID=(b.BBANK_SUB_ID) "+
		" AND DELETED_TS IS NULL "+
		"AND SCE_PROJ_REV_ID IN (SELECT DISTINCT SCE_PROJ_REV_ID FROM MDI.MDIS40_SCE_PROJ_REV))";

		PreparedStatement ps = PDBConnection.getInstance().getConnection().prepareStatement(query);
		ps.setInt(1,getPlanyear());
		ps.setInt(2,getPlanyear());
		ps.setInt(3,getSysId());

		try{
			TreeSet<Bbank> bbs = new TreeSet<Bbank>();
			ResultSet rs = ps.executeQuery();
			while(rs.next()){
				bbs.add(Bbank.getInstance(getPlanyear(),rs.getInt("BBANK_SUB_ID")));
				if(SceProjRev.getInstance(rs.getInt("Sce_Proj_Rev_Id")).getSimId()==simId)
					sceProjs.add(SceProjRev.getInstance(rs.getInt("Sce_Proj_Rev_Id")).getSceProj());
			}
			rs.close();
			ps.close();
			
			//Add Abank records through objects
			for(Sub sub:getAbanks(simId))
				sceProjs.addAll(sub.getSceProjs(simId));	
			//Add child bbank through objects
			for(Bbank b: bbs){
				for(Bbank b2: b.getDownStreamSubs(simId)){
					sceProjs.addAll(b2.getSceProjs(simId));
				}
			}
			bbs.clear();
			
		}catch(Exception e){	
			EspLogger.error(this, this+" getSceProjs(simId) failed!!!\nUnable to load projects");
			//using fallback method if an error occurs:
			sceProjs.addAll(getSceProjsOLD(simId));
		}
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getLgProjs(int)
	 */
	public TreeSet<LgProj> getLgProjs(int simId) throws SQLException {
		TreeSet<LgProj> lgProjs = new TreeSet<LgProj>();
		for(Sub sub : getYear(simId, getPlanyear()).getDownStreamSubs()) {
			if(sub instanceof Bbank) {
				for(LgProj lgProj : ((Bbank)sub).getLgProjs()) {
					lgProjs.add(lgProj);
				}
			}
		}
		return lgProjs;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getParent()
	 */
	public Region getParent()throws SQLException {
		return getRegion();
	}

	/**
	 * Gets the fx mvar req.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the fx mvar req
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getFxMvarReq(int simId, int year) throws SQLException {
		double sum = 0;
		for(Abank abank : getAbanks(simId))
			for(Bbank bbank : abank.getYear(simId, year).getBbanks())
				for(Ckt ckt : bbank.getCkts(simId)) 
					sum += ckt.getYear(simId, year).getFxKvarReq();
		return sum/1000.0;
	}

	/**
	 * BME Move to sys year
	 * 
	 * Gets the swt mvar req.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the swt mvar req
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getSwtMvarReq(int simId, int year) throws SQLException {
		double sum = 0;
		for(Abank abank : getAbanks(simId)) {
			for(Bbank bb : abank.getYear(simId, year).getBbanks()) {
				for(Ckt ckt : bb.getCkts(simId)) {
					sum += ckt.getYear(simId, year).getSwtKvarReq();
				}
				sum += bb.getYear(simId, year).getStationMvarReq()*1000.0;
			}
		}
		return sum/1000;
	}

	/**
	 * Gets the fx mvar exist.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the fx mvar exist
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getFxMvarExist(int simId, int year) throws SQLException {
		double sum = 0;
		for(Abank abank : getAbanks(simId))
			for(Bbank bb : abank.getYear(simId, year).getBbanks())
				for(Ckt ckt : bb.getCkts(simId))
					sum += ckt.getYear(simId, year).getFxKvarExist();
		return sum/1000.0;
	}

	/**
	 * BME Move to sys year
	 * 
	 * Gets the swt mvar exist.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the swt mvar exist
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getSwtMvarExist(int simId, int year) throws SQLException {
		double sum = 0;
		for(Abank abank : getAbanks(simId)) {
			for(Bbank bb : abank.getYear(simId, year).getBbanks()) {
				for(Ckt ckt : bb.getCkts(simId))
					sum += ckt.getYear(simId, year).getSwtKvarExist();
				BbankYear bby = bb.getYear(simId, year);
				sum += bby.getStationKvar()-(bby.getKvarAdd());
			}
		}
		return sum/1000.0;
	}

	/**
	 * BME Move to sys year
	 * 
	 * Gets the fx mvar prop.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the fx mvar prop
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getFxMvarProp(int simId, int year) throws SQLException {
		double sum = 0;
		for(Abank abank : getAbanks(simId))
			for(Bbank bb : abank.getYear(simId, year).getBbanks())
				for(Ckt ckt : bb.getCkts(simId))
					sum += ckt.getYear(simId, year).getFxKvarProp();
		return sum/1000.0;
	}
	/**
	 * BME Move to sys year
	 * 
	 * Gets the swt mvar prop.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the swt mvar prop
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getSwtMvarProp(int simId, int year) throws SQLException {
		double sum = 0;
		for(Abank abank : getAbanks(simId)) {
			for(Bbank bb : abank.getYear(simId, year).getBbanks()) {
				for(Ckt ckt : bb.getCkts(simId)) {
					sum += ckt.getYear(simId, year).getSwtKvarProp();
				}
				sum += bb.getYear(simId, year).getKvarAdd();
			}
		}
		return sum/1000;
	}

	/**
	 * BME Move to sys year
	 * 
	 * Gets the fx mvar reserve.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the fx mvar reserve
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getFxMvarReserve(int simId, int year) throws SQLException {
		double sum = 0;
		for(Abank abank : getAbanks(simId)) {
			for(Bbank bb : abank.getYear(simId, year).getBbanks()) {
				for(Ckt ckt : bb.getCkts(simId)) {
					sum += ckt.getYear(simId, year).getFxKvarReserve();
				}
			}
		}
		return sum/1000.0;
	}

	/**
	 * BME Move to sys year
	 * 
	 * Gets the swt mvar reserve.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the swt mvar reserve
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getSwtMvarReserve(int simId, int year) throws SQLException {
		double sum = 0;
		for(Abank abank : getAbanks(simId)) {
			for(Bbank bb : abank.getYear(simId, year).getBbanks()) {
				for(Ckt ckt : bb.getCkts(simId))
					sum += ckt.getYear(simId, year).getSwtKvarReserve();
				BbankYear bby = bb.getYear(simId, year);
				sum += bby.getStationKvar()-bby.getStationMvarReq()*1000.0;
			}
		}
		return sum/1000.0;
	}

	/**
	 * Gets the b act.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the b act
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getBAct(int simId) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getBAct();
	}

	/**
	 * Gets the b adj.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the b adj
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getBAdj(int simId) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getBAdj();
	}
	
	public double getBGenAdj(int simId) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getBGenAdj();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getWeatherstationsByInstance()
	 */
	public synchronized Vector<Weatherstation> getWeatherStationsByInstance() throws SQLException {
		return SimSys.getInstance(getPlanyear(), 0, getSysId()).getWeatherstationsByInstance();
	}

	public double getPLL(Calendar asOf, int simId) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getPLL(asOf);
	}

	public double getPLLInService(Calendar asOf, int simId) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId()).getPLLInService(asOf);
	}

	/**
	 * Gets the sim sys.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the sim sys
	 * 
	 * @throws SQLException the SQL exception
	 */
	public SimSys getSimSys(int simId) throws SQLException{
		return SimSys.getInstance(getPlanyear(), simId, getSysId());
	}

	/**
	 * Gets the proj count.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the proj count
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getProjCount(int simId) throws SQLException{
		return getSimSys(simId).getProjCount();
	}

	/**
	 * Gets the proj count.
	 * 
	 * @param simId the sim id
	 * @param prog the prog
	 * 
	 * @return the proj count
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getProjCount(int simId, Collection<Program> prog) throws SQLException{
		return getProjCount(simId,prog,Simulation.getInstance(getPlanyear(), simId).getPlanFor());
	}

	/**
	 * Gets the proj count.
	 * 
	 * @param simId the sim id
	 * @param prog the prog
	 * @param planFor the plan for
	 * 
	 * @return the proj count
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getProjCount(int simId, Collection<Program> prog, int planFor) throws SQLException{
		return getSimSys(simId).getProjCount(prog,planFor);
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getSubCount(int)
	 */
	public int getSubCount(int simId) throws SQLException{
		return getSimSys(simId).getSubCount();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getCktCount(int)
	 */
	public int getCktCount(int simId)throws SQLException{
		return getSimSys(simId).getCktCount();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getPaFin(int)
	 */
	public int getPaFin(int simId) throws SQLException {
		return getSimSys(simId).getPeakFin();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getLgFin(int)
	 */
	public int getLgFin(int simId) throws SQLException {
		return getSimSys(simId).getLgFin();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getSsFin(int)
	 */
	public int getSsFin(int simId) throws SQLException{
		return getSimSys(simId).getSsFin();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getCsFin(int)
	 */
	public int getCsFin(int simId) throws SQLException {
		return getSimSys(simId).getCsFin();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getProjFin(int)
	 */
	public int getProjFin(int simId) throws SQLException {
		return getSimSys(simId).getProjFin();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getN1Fin(int)
	 */
	public int getN1Fin(int simId) throws SQLException {
		return getSimSys(simId).getN1Fin();
	}	

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getExFin(int)
	 */
	public int getExFin(int simId) throws SQLException {
		return getSimSys(simId).getExcepFin();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getContFin(int)
	 */
	public int getContFin(int simId) throws SQLException {
		return getSimSys(simId).getContFin();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getVarFin(int)
	 */
	public int getVarFin(int simId) throws SQLException {
		return getSimSys(simId).getVarFin();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getPaApp(int)
	 */
	public int getPaApp(int simId) throws SQLException {
		return getSimSys(simId).getPeakApp();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getLgApp(int)
	 */
	public int getLgApp(int simId) throws SQLException {
		return getSimSys(simId).getLgApp();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getSsApp(int)
	 */
	public int getSsApp(int simId) throws SQLException{
		return getSimSys(simId).getSsApp();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getCsApp(int)
	 */
	public int getCsApp(int simId) throws SQLException {
		return getSimSys(simId).getCsApp();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getProjApp(int)
	 */
	public int getProjApp(int simId) throws SQLException {
		return getSimSys(simId).getProjApp();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getN1App(int)
	 */
	public int getN1App(int simId) throws SQLException {
		return getSimSys(simId).getN1App();
	}	

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getExApp(int)
	 */
	public int getExApp(int simId) throws SQLException {
		return getSimSys(simId).getExcepApp();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getContApp(int)
	 */
	public int getContApp(int simId) throws SQLException {
		return getSimSys(simId).getContApp();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getVarApp(int)
	 */
	public int getVarApp(int simId) throws SQLException {
		return getSimSys(simId).getVarApp();
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getLastCalcFinApp(int)
	 */
	public Calendar getLastCalcFinApp(int simId) throws SQLException{
		return getSimSys(simId).getLastCalcFinApp();
	}

	public String getName() {
		return getSysName();
	}

	public SysMonthly getMonthlyPeak(int simId, int year, int month)throws SQLException{
		return SysMonthly.getInstance(getPlanyear(), simId, getSysId(), year, month);
	}
	public TreeSet<Zone> getZones() throws SQLException {
		return getRegion().getZones();
	}
	public TreeSet<Region> getRegions() throws SQLException{
		TreeSet<Region> regions = new TreeSet<Region>();
		regions.add(getRegion());
		return regions;
	}

	public double getVarARequired(int simId, int year) throws SQLException {
		return getYear(simId, year).getAReqKvar();
	}

	public double getVarASupply(int simId, int year) throws SQLException {
		return getYear(simId, year).getASupKvar();
	}

	public double getVarBRequired(int simId, int year) throws SQLException {
		return getYear(simId, year).getBReqKvar();
	}

	public double getVarBSupply(int simId, int year) throws SQLException {
		return getYear(simId, year).getBSupKvar();
	}

	public double getVarAReserved(int simId, int year) throws SQLException {
		return getVarASupply(simId, year) - getVarARequired(simId, year);
	}

	public double getVarBReserved(int simId, int year) throws SQLException {
		return getVarBSupply(simId, year) - getVarBRequired(simId, year);
	}

	public double getAbankCapAddTotal() throws SQLException {
		return 0;
	}


	public double getNameplateTotal() throws SQLException {
		return 0;
	}


	public CoType getCoType() throws SQLException{
		return CoType.getInstance(CoType.SYSTEM);
	}

	//=========
	public int getProjCountTotal(int simId, Collection<Program> p)throws SQLException {
		int total = 0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getProjCount(p);
		return total;
	}

	public double getPropCostTotal(int simId, Collection<Program> p, SceElem e)throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getPropCostTotal(p, e);
		return total;
	}

	public double getCapAddTotal(int simId, Collection<Program> p, SceProjRev.YearType yearType) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getCapAdd(p,yearType);
		return total;
	}

	public int getCktAddTotal(int simId, Collection<Program> p, SceProjRev.YearType yearType)throws SQLException {
		int total = 0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getCktAdd(p, yearType);
		return total;
	}

	public double getVarAddTotal(int simId, Collection<Program> p, SceProjRev.YearType yearType)throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getVarAdd(p,yearType);
		return total;
	}

	public double getPriorPropCostTotal(int simId, Collection<Program> p, SceElem e) throws SQLException {
		int total = 0;
		for(int year = getPlanyear()-10; year < getPlanyear(); year++)
			total += getYear(simId, year).getPropCostTotal(p, e);
		return total;
	}

	public double getAppCostTotal(int simId, Collection<Program> p, SceElem e,int projStatuses) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getAppCostTotal(p, e);
		return total;
	}

	//DASH
	public double getPriorAppCostTotal(int simId, Collection<Program> p,SceElem e, int projStatuses) throws SQLException {
		int total = 0;
		for(int year = getPlanyear()-10; year < getPlanyear(); year++)
			total += getYear(simId, year).getAppCostTotal(p, e, projStatuses);
		return total;
	}

	//DASH
	public double getPriorPropCostTotal(int simId, Collection<Program> p,SceElem e, int projStatuses) throws SQLException {
		int total = 0;
		for(int year = getPlanyear()-10; year < getPlanyear(); year++)
			total += getYear(simId, year).getPropCostTotal(p, e, projStatuses);
		return total;
	}

	//DASH
	public double getPropCostTotal(int simId, Collection<Program> p, SceElem e,int projStatuses) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getPropCostTotal(p, e, projStatuses);
		return total;
	}

	public double getAppCostTotal(int simId, Collection<Program> p, SceElem e)throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			for(CostStage cs:CostStage.getCostStages(CostStage.Type.Approved))
				total += getYear(simId, year).getCostTotal(p, e, cs);
		return total;
	}


	public double getNetCostChangeTotal(int simId, Collection<Program> p, SceElem e) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getNetCostChange(p, e);
		return total;
	}

	public double getPriorAppCostTotal(int simId, Collection<Program> p, SceElem e) throws SQLException {
		int total = 0;
		for(int year = getPlanyear()-10; year < getPlanyear(); year++)
			for(CostStage cs:CostStage.getCostStages(CostStage.Type.Approved))
				total += getYear(simId, year).getCostTotal(p, e, cs);
		return total;
	}

	//DASH
	public double getPriorNetCostChangeTotal(int simId, Collection<Program> p, SceElem e) throws SQLException {
		int total = 0;
		for(int year = getPlanyear()-10; year < getPlanyear(); year++)
			total += getYear(simId, year).getNetCostChange(p, e);
		return total;
	}

	
	public String getSystemTitle(){
		String title = getSysName();
		String subIndex = Math.round(getSecondaryKv())+"";
		if(title.contains("/"))
			return title.substring(0, title.indexOf("/")-(subIndex.length()));	
		return title;
	}
	
	@Override
	public Sys getPrevInstance() throws SQLException {
		return getInstance(getPlanyear()-1, getSysId());
	}
}
