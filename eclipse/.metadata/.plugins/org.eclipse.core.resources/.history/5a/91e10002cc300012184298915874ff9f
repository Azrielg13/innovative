package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Org;
import com.sce.esp.object.model.Program;
import com.sce.esp.object.model.ProgramSponsor;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ProgramSponsorDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PROGRAM_ID,ORG_ID};
	public static enum PROPERTY{PROGRAM_ID,ORG_ID,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PROGRAMID_LIMIT = 9;
	public final static int ORGID_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int programId;
	private int orgId;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Org org;
	private Program program;
	public static ProgramSponsor getInstance(int programId, int orgId)throws java.sql.SQLException{
		return getInstance(programId, orgId, true);
	}
	public static ProgramSponsor getInstance(int programId, int orgId, boolean fetch)throws java.sql.SQLException{
		if(isNull(programId, orgId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(programId, orgId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProgramSponsor o = null;
		if(cache != null && cache.contains(ProgramSponsor.class, pk))
			o = em.find(ProgramSponsor.class, pk);
		if(o==null && getAICache().contains(ProgramSponsor.class, pk))
			o = getAICache().find(ProgramSponsor.class, pk);
		if(o==null && fetch)
			o = em.find(ProgramSponsor.class, pk);
		if(o==null && fetch && ProgramSponsor.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProgramSponsor(programId, orgId);
			getAICache().cache(ProgramSponsor.class, o);
		}
		return o;
	}
	public static Collection<ProgramSponsor> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProgramSponsor> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProgramSponsor> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProgramSponsor o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProgramSponsor> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProgramSponsor> tq = em.createQuery(jpql,ProgramSponsor.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProgramSponsor> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProgramSponsor> tq = em.createNamedQuery(name,ProgramSponsor.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProgramSponsorDAO(){}
	public ProgramSponsorDAO(int programId, int orgId){
		this.programId=programId;
		this.orgId=orgId;
	}
	public ProgramSponsorDAO(ProgramSponsorDAO orig){
		super(orig);
		this.programId=orig.getProgramId();
		this.orgId=orig.getOrgId();
		copyFrom(orig);
	}
	public void copyFrom(ProgramSponsorDAO orig){
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{programId, orgId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PROGRAM_ID",nullable=false,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
		program=null;
	}
	@Id
	@Column(name="ORG_ID",nullable=false,length=9)
	public int getOrgId(){
		return orgId;
	}
	public void setOrgId(int orgId) throws java.sql.SQLException{
		if(isSame(orgId, getOrgId()))return;
		int oldValue = getOrgId();
		this.orgId=orgId;
		setProperty("ORG_ID", orgId, oldValue);
		org=null;
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Org getOrg()throws java.sql.SQLException{
		if(org==null)
			org=Org.getInstance(getOrgId());
		return org;
	}
	public void setOrg(Org org)throws java.sql.SQLException{
		setOrgId(org==null?0:org.getOrgId());
		this.org=org;
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getProgramId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setProgramId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public ProgramSponsor copy()throws java.sql.SQLException{
		ProgramSponsor cp = new ProgramSponsor((ProgramSponsor)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProgramSponsorDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ProgramSponsorDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		if(!isSame(getOrgId(),o.getOrgId())) diffs.add("ORG_ID");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
