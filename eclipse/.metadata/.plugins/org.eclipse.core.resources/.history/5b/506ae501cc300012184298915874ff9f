package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostSheetOH;
import com.sce.esp.object.model.OverheadKey;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class OverheadKeyDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,NAME,DECRIPTION};
	public final static int ID_LIMIT = 9;
	public final static int NAME_LIMIT = 124;
	public final static int DECRIPTION_LIMIT = 9;
	private int id;
	private String name;
	private int decription;
	private Collection<CostSheetOH> costSheetOHs;
	public static OverheadKey getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static OverheadKey getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		OverheadKey o = null;
		if(cache != null && cache.contains(OverheadKey.class, pk))
			o = em.find(OverheadKey.class, pk);
		if(o==null && getAICache().contains(OverheadKey.class, pk))
			o = getAICache().find(OverheadKey.class, pk);
		if(o==null && fetch)
			o = em.find(OverheadKey.class, pk);
		if(o==null && fetch && OverheadKey.class.getAnnotation(AutoInsertable.class) != null){
			o = new OverheadKey(id);
			getAICache().cache(OverheadKey.class, o);
		}
		return o;
	}
	public static Collection<OverheadKey> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<OverheadKey> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<OverheadKey> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM OverheadKey o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<OverheadKey> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<OverheadKey> tq = em.createQuery(jpql,OverheadKey.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<OverheadKey> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<OverheadKey> tq = em.createNamedQuery(name,OverheadKey.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public OverheadKeyDAO(){}
	public OverheadKeyDAO(int id){
		this.id=id;
	}
	public OverheadKeyDAO(OverheadKeyDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(OverheadKeyDAO orig){
		this.name=orig.getName();
		this.decription=orig.getDecription();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIU72_SEQ",sequenceName="MDIU72_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="NAME",nullable=true,length=124)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DECRIPTION",nullable=true,length=9)
	public int getDecription(){
		return decription;
	}
	public void setDecription(int decription) throws java.sql.SQLException{
		if(isSame(decription, getDecription()))return;
		int oldValue = getDecription();
		this.decription=decription;
		setProperty("DECRIPTION", decription, oldValue);
	}
	public Collection<CostSheetOH> getCostSheetOHs()throws java.sql.SQLException{
		if(isNewInstance() || costSheetOHs != null){
			if(costSheetOHs == null)
				costSheetOHs = new TreeSet<CostSheetOH>();
			return costSheetOHs;
		}
		return CostSheetOH.getNamedCollection("findByOverheadKey",getId());
	}
	public void addCostSheetOH(CostSheetOH costSheetOH)throws java.sql.SQLException{
		costSheetOH.setOverheadKey((OverheadKey)this);
		if(isNewInstance() || costSheetOHs != null)
			getCostSheetOHs().add(costSheetOH);
		else
			costSheetOH.insert();
	}
	public void removeCostSheetOH(CostSheetOH costSheetOH)throws java.sql.SQLException{
		if(isNewInstance() || costSheetOHs != null)
			getCostSheetOHs().remove(costSheetOH);
		else
			costSheetOH.delete();
	}
	public OverheadKey copy()throws java.sql.SQLException{
		OverheadKey cp = new OverheadKey((OverheadKey)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(OverheadKeyDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(CostSheetOH child:getCostSheetOHs())
			cp.addCostSheetOH(child.copy());
	}
	public Vector<String> getDifference(OverheadKeyDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDecription(),o.getDecription())) diffs.add("DECRIPTION");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
	}
	public void insertChildren()throws java.sql.SQLException{
		if(costSheetOHs != null){
			for(CostSheetOH costSheetOH:getCostSheetOHs())
				costSheetOH.setOverheadKey((OverheadKey)this);
		}
		if(costSheetOHs != null){
			for(CostSheetOH costSheetOH:getCostSheetOHs())
				if(costSheetOH.isNewInstance())
					costSheetOH.insert();
			costSheetOHs = null;
		}
	}
}
