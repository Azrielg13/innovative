package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Bundle;
import com.sce.esp.object.model.SceProj;
import com.sce.esp.object.model.SceProjBundle;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SceProjBundleDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,BUNDLE_ID,SCE_PROJ_ID};
	public final static int ID_LIMIT = 9;
	public final static int BUNDLEID_LIMIT = 9;
	public final static int SCEPROJID_LIMIT = 9;
	private int id;
	private int bundleId;
	private int sceProjId;
	private Bundle bundle;
	private SceProj sceProj;
	public static SceProjBundle getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static SceProjBundle getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjBundle o = null;
		if(cache != null && cache.contains(SceProjBundle.class, pk))
			o = em.find(SceProjBundle.class, pk);
		if(o==null && getAICache().contains(SceProjBundle.class, pk))
			o = getAICache().find(SceProjBundle.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjBundle.class, pk);
		if(o==null && fetch && SceProjBundle.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjBundle(id);
			getAICache().cache(SceProjBundle.class, o);
		}
		return o;
	}
	public static Collection<SceProjBundle> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjBundle> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjBundle> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjBundle o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjBundle> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjBundle> tq = em.createQuery(jpql,SceProjBundle.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjBundle> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjBundle> tq = em.createNamedQuery(name,SceProjBundle.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjBundleDAO(){}
	public SceProjBundleDAO(int id){
		this.id=id;
	}
	public SceProjBundleDAO(SceProjBundleDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SceProjBundleDAO orig){
		this.bundleId=orig.getBundleId();
		this.sceProjId=orig.getSceProjId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS44_SEQ",sequenceName="MDIS44_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="BUNDLE_ID",nullable=false,length=9)
	public int getBundleId(){
		return bundleId;
	}
	public void setBundleId(int bundleId) throws java.sql.SQLException{
		if(isSame(bundleId, getBundleId()))return;
		int oldValue = getBundleId();
		this.bundleId=bundleId;
		setProperty("BUNDLE_ID", bundleId, oldValue);
		bundle=null;
	}
	@Column(name="SCE_PROJ_ID",nullable=false,length=9)
	public int getSceProjId(){
		return sceProjId;
	}
	public void setSceProjId(int sceProjId) throws java.sql.SQLException{
		if(isSame(sceProjId, getSceProjId()))return;
		int oldValue = getSceProjId();
		this.sceProjId=sceProjId;
		setProperty("SCE_PROJ_ID", sceProjId, oldValue);
		sceProj=null;
	}
	public Bundle getBundle()throws java.sql.SQLException{
		if(bundle==null)
			bundle=Bundle.getInstance(getBundleId());
		return bundle;
	}
	public void setBundle(Bundle bundle)throws java.sql.SQLException{
		setBundleId(bundle==null?0:bundle.getId());
		this.bundle=bundle;
	}
	public SceProj getSceProj()throws java.sql.SQLException{
		if(sceProj==null)
			sceProj=SceProj.getInstance(getSceProjId());
		return sceProj;
	}
	public void setSceProj(SceProj sceProj)throws java.sql.SQLException{
		setSceProjId(sceProj==null?0:sceProj.getSceProjId());
		this.sceProj=sceProj;
	}
	public SceProjBundle copy()throws java.sql.SQLException{
		SceProjBundle cp = new SceProjBundle((SceProjBundle)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjBundleDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SceProjBundleDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getBundleId(),o.getBundleId())) diffs.add("BUNDLE_ID");
		if(!isSame(getSceProjId(),o.getSceProjId())) diffs.add("SCE_PROJ_ID");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
