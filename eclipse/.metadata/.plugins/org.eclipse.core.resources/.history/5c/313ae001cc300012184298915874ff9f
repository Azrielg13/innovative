package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AbstractResource;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.ProjTask;
import com.sce.esp.object.model.TaskNotify;
import com.sce.esp.object.model.TaskResource;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class TaskResourceDAO extends AbstractResource{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,TASK_ID,RAM_ID,PROJ_ROLE_ID,USER_ID,EST_EFFORT,ACT_EFFORT,EST_DURATION,ACT_START_DATE,ACT_END_DATE,PERCENT_COMP,NOTE,DATA,NOTIFY};
	public final static int ID_LIMIT = 9;
	public final static int TASKID_LIMIT = 9;
	public final static int RAMID_LIMIT = 9;
	public final static int PROJROLEID_LIMIT = 9;
	public final static int USERID_LIMIT = 9;
	public final static int ESTEFFORT_LIMIT = 24;
	public final static int ACTEFFORT_LIMIT = 24;
	public final static int ESTDURATION_LIMIT = 24;
	public final static int ACTSTARTDATE_LIMIT = 7;
	public final static int ACTENDDATE_LIMIT = 7;
	public final static int PERCENTCOMP_LIMIT = 24;
	public final static int NOTE_LIMIT = 512;
	public final static int DATA_LIMIT = 2048;
	public final static int NOTIFY_LIMIT = 1;
	private int id;
	private int taskId;
	private int ramId;
	private int projRoleId;
	private int userId;
	private double estEffort;
	private double actEffort;
	private double estDuration;
	private Calendar actStartDate;
	private Calendar actEndDate;
	private double percentComp;
	private String note;
	private String data;
	private boolean notify = true;
	private Collection<TaskNotify> taskNotifys;
	private ProjTask projTask;
	private LookUp ram;
	private LookUp projRole;
	private User user;
	public static TaskResource getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static TaskResource getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		TaskResource o = null;
		if(cache != null && cache.contains(TaskResource.class, pk))
			o = em.find(TaskResource.class, pk);
		if(o==null && getAICache().contains(TaskResource.class, pk))
			o = getAICache().find(TaskResource.class, pk);
		if(o==null && fetch)
			o = em.find(TaskResource.class, pk);
		if(o==null && fetch && TaskResource.class.getAnnotation(AutoInsertable.class) != null){
			o = new TaskResource(id);
			getAICache().cache(TaskResource.class, o);
		}
		return o;
	}
	public static Collection<TaskResource> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<TaskResource> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<TaskResource> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM TaskResource o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<TaskResource> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TaskResource> tq = em.createQuery(jpql,TaskResource.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<TaskResource> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TaskResource> tq = em.createNamedQuery(name,TaskResource.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TaskResourceDAO(){}
	public TaskResourceDAO(int id){
		this.id=id;
	}
	public TaskResourceDAO(TaskResourceDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(TaskResourceDAO orig){
		this.taskId=orig.getTaskId();
		this.ramId=orig.getRamId();
		this.projRoleId=orig.getProjRoleId();
		this.userId=orig.getUserId();
		this.estEffort=orig.getEstEffort();
		this.actEffort=orig.getActEffort();
		this.estDuration=orig.getEstDuration();
		this.actStartDate=orig.getActStartDate();
		this.actEndDate=orig.getActEndDate();
		this.percentComp=orig.getPercentComp();
		this.note=orig.getNote();
		this.data=orig.getData();
		this.notify=orig.isNotify();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT07_SEQ",sequenceName="MDIT07_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="TASK_ID",nullable=false,length=9)
	public int getTaskId(){
		return taskId;
	}
	public void setTaskId(int taskId) throws java.sql.SQLException{
		if(isSame(taskId, getTaskId()))return;
		int oldValue = getTaskId();
		this.taskId=taskId;
		setProperty("TASK_ID", taskId, oldValue);
		projTask=null;
	}
	@Column(name="RAM_ID",nullable=false,length=9)
	public int getRamId(){
		return ramId;
	}
	public void setRamId(int ramId) throws java.sql.SQLException{
		if(isSame(ramId, getRamId()))return;
		int oldValue = getRamId();
		this.ramId=ramId;
		setProperty("RAM_ID", ramId, oldValue);
		ram=null;
	}
	@Column(name="PROJ_ROLE_ID",nullable=false,length=9)
	public int getProjRoleId(){
		return projRoleId;
	}
	public void setProjRoleId(int projRoleId) throws java.sql.SQLException{
		if(isSame(projRoleId, getProjRoleId()))return;
		int oldValue = getProjRoleId();
		this.projRoleId=projRoleId;
		setProperty("PROJ_ROLE_ID", projRoleId, oldValue);
		projRole=null;
	}
	@Column(name="USER_ID",nullable=true,length=9)
	public int getUserId(){
		return userId;
	}
	public void setUserId(int userId) throws java.sql.SQLException{
		if(isSame(userId, getUserId()))return;
		int oldValue = getUserId();
		this.userId=userId;
		setProperty("USER_ID", userId, oldValue);
		user=null;
	}
	@Column(name="EST_EFFORT",nullable=true,length=24)
	public double getEstEffort(){
		return estEffort;
	}
	public void setEstEffort(double estEffort) throws java.sql.SQLException{
		if(isSame(estEffort, getEstEffort()))return;
		double oldValue = getEstEffort();
		this.estEffort=estEffort;
		setProperty("EST_EFFORT", estEffort, oldValue);
	}
	@Column(name="ACT_EFFORT",nullable=true,length=24)
	public double getActEffort(){
		return actEffort;
	}
	public void setActEffort(double actEffort) throws java.sql.SQLException{
		if(isSame(actEffort, getActEffort()))return;
		double oldValue = getActEffort();
		this.actEffort=actEffort;
		setProperty("ACT_EFFORT", actEffort, oldValue);
	}
	@Column(name="EST_DURATION",nullable=true,length=24)
	public double getEstDuration(){
		return estDuration;
	}
	public void setEstDuration(double estDuration) throws java.sql.SQLException{
		if(isSame(estDuration, getEstDuration()))return;
		double oldValue = getEstDuration();
		this.estDuration=estDuration;
		setProperty("EST_DURATION", estDuration, oldValue);
	}
	@Column(name="ACT_START_DATE",nullable=true,length=7)
	public Calendar getActStartDate(){
		return actStartDate;
	}
	public void setActStartDate(Calendar actStartDate) throws java.sql.SQLException{
		if(isSame(actStartDate, getActStartDate()))return;
		Calendar oldValue = getActStartDate();
		this.actStartDate=actStartDate;
		setProperty("ACT_START_DATE", actStartDate, oldValue);
	}
	@Column(name="ACT_END_DATE",nullable=true,length=7)
	public Calendar getActEndDate(){
		return actEndDate;
	}
	public void setActEndDate(Calendar actEndDate) throws java.sql.SQLException{
		if(isSame(actEndDate, getActEndDate()))return;
		Calendar oldValue = getActEndDate();
		this.actEndDate=actEndDate;
		setProperty("ACT_END_DATE", actEndDate, oldValue);
	}
	@Column(name="PERCENT_COMP",nullable=true,length=24)
	public double getPercentComp(){
		return percentComp;
	}
	public void setPercentComp(double percentComp) throws java.sql.SQLException{
		if(isSame(percentComp, getPercentComp()))return;
		double oldValue = getPercentComp();
		this.percentComp=percentComp;
		setProperty("PERCENT_COMP", percentComp, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="DATA",nullable=true,length=2048)
	public String getData(){
		return data;
	}
	public void setData(String data) throws java.sql.SQLException{
		if(isSame(data, getData()))return;
		String oldValue = getData();
		this.data=data;
		setProperty("DATA", data, oldValue);
	}
	@Column(name="NOTIFY",nullable=true,length=1)
	public boolean isNotify(){
		return notify;
	}
	public void setNotify(boolean notify) throws java.sql.SQLException{
		if(isSame(notify, isNotify()))return;
		boolean oldValue = isNotify();
		this.notify=notify;
		setProperty("NOTIFY", notify, oldValue);
	}
	public ProjTask getProjTask()throws java.sql.SQLException{
		if(projTask==null)
			projTask=ProjTask.getInstance(getTaskId());
		return projTask;
	}
	public void setProjTask(ProjTask projTask)throws java.sql.SQLException{
		setTaskId(projTask==null?0:projTask.getId());
		this.projTask=projTask;
	}
	public LookUp getRam()throws java.sql.SQLException{
		if(ram==null)
			ram=LookUp.getInstance(getRamId());
		return ram;
	}
	public void setRam(LookUp ram)throws java.sql.SQLException{
		setRamId(ram==null?0:ram.getId());
		this.ram=ram;
	}
	public LookUp getProjRole()throws java.sql.SQLException{
		if(projRole==null)
			projRole=LookUp.getInstance(getProjRoleId());
		return projRole;
	}
	public void setProjRole(LookUp projRole)throws java.sql.SQLException{
		setProjRoleId(projRole==null?0:projRole.getId());
		this.projRole=projRole;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getUserId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setUserId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public Collection<TaskNotify> getTaskNotifys()throws java.sql.SQLException{
		if(isNewInstance() || taskNotifys != null){
			if(taskNotifys == null)
				taskNotifys = new TreeSet<TaskNotify>();
			return taskNotifys;
		}
		return TaskNotify.getNamedCollection("findByTaskResource",getId());
	}
	public void addTaskNotify(TaskNotify taskNotify)throws java.sql.SQLException{
		taskNotify.setTaskResource((TaskResource)this);
		if(isNewInstance() || taskNotifys != null)
			getTaskNotifys().add(taskNotify);
		else
			taskNotify.insert();
	}
	public void removeTaskNotify(TaskNotify taskNotify)throws java.sql.SQLException{
		if(isNewInstance() || taskNotifys != null)
			getTaskNotifys().remove(taskNotify);
		else
			taskNotify.delete();
	}
	public TaskResource copy()throws java.sql.SQLException{
		TaskResource cp = new TaskResource((TaskResource)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TaskResourceDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(TaskNotify child:getTaskNotifys())
			cp.addTaskNotify(child.copy());
	}
	public Vector<String> getDifference(TaskResourceDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getTaskId(),o.getTaskId())) diffs.add("TASK_ID");
		if(!isSame(getRamId(),o.getRamId())) diffs.add("RAM_ID");
		if(!isSame(getProjRoleId(),o.getProjRoleId())) diffs.add("PROJ_ROLE_ID");
		if(!isSame(getUserId(),o.getUserId())) diffs.add("USER_ID");
		if(!isSame(getEstEffort(),o.getEstEffort())) diffs.add("EST_EFFORT");
		if(!isSame(getActEffort(),o.getActEffort())) diffs.add("ACT_EFFORT");
		if(!isSame(getEstDuration(),o.getEstDuration())) diffs.add("EST_DURATION");
		if(!isSame(getActStartDate(),o.getActStartDate())) diffs.add("ACT_START_DATE");
		if(!isSame(getActEndDate(),o.getActEndDate())) diffs.add("ACT_END_DATE");
		if(!isSame(getPercentComp(),o.getPercentComp())) diffs.add("PERCENT_COMP");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getData(),o.getData())) diffs.add("DATA");
		if(!isSame(isNotify(),o.isNotify())) diffs.add("NOTIFY");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(projTask != null && projTask.isNewInstance())
				projTask.insert();
		if(user != null && user.isNewInstance())
				user.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(taskNotifys != null){
			for(TaskNotify taskNotify:getTaskNotifys())
				taskNotify.setTaskResource((TaskResource)this);
		}
		if(taskNotifys != null){
			for(TaskNotify taskNotify:getTaskNotifys())
				if(taskNotify.isNewInstance())
					taskNotify.insert();
			taskNotifys = null;
		}
	}
}
