package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.EscalationRate;
import com.sce.esp.object.model.ProgExcept;
import com.sce.esp.object.model.Program;
import com.sce.esp.object.model.ProgramSapWbs;
import com.sce.esp.object.model.RecommendedDriver;
import com.sce.esp.object.model.SceProgElem;
import com.sce.esp.object.model.SceProjRev;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ProgramDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PROGRAM_ID};
	public static enum PROPERTY{PROGRAM_ID,NAME,DESCRIPTION,APPROVER_USER_ID,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,RATE_PROG_ID};
	public final static int PROGRAMID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 256;
	public final static int APPROVERUSERID_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int RATEPROGID_LIMIT = 9;
	private int programId;
	private String name;
	private String description;
	private int approverUserId;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private int rateProgId;
	private Collection<EscalationRate> escalationRates;
	private Collection<ProgramSapWbs> programSapWbss;
	private Collection<ProgExcept> progExcepts;
	private Collection<RecommendedDriver> recommendedDrivers;
	private Collection<SceProgElem> sceProgElems;
	private Collection<SceProjRev> sceProjRevs;
	private Program program;
	private User user;
	public static Program getInstance(int programId)throws java.sql.SQLException{
		return getInstance(programId, true);
	}
	public static Program getInstance(int programId, boolean fetch)throws java.sql.SQLException{
		if(isNull(programId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(programId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Program o = null;
		if(cache != null && cache.contains(Program.class, pk))
			o = em.find(Program.class, pk);
		if(o==null && getAICache().contains(Program.class, pk))
			o = getAICache().find(Program.class, pk);
		if(o==null && fetch)
			o = em.find(Program.class, pk);
		if(o==null && fetch && Program.class.getAnnotation(AutoInsertable.class) != null){
			o = new Program(programId);
			getAICache().cache(Program.class, o);
		}
		return o;
	}
	public static Collection<Program> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Program> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Program> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Program o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Program> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Program> tq = em.createQuery(jpql,Program.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Program> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Program> tq = em.createNamedQuery(name,Program.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProgramDAO(){}
	public ProgramDAO(int programId){
		this.programId=programId;
	}
	public ProgramDAO(ProgramDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ProgramDAO orig){
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.approverUserId=orig.getApproverUserId();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
		this.rateProgId=orig.getRateProgId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{programId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS20_SEQ",sequenceName="MDIS20_SEQ")
	@Column(name="PROGRAM_ID",nullable=false,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="APPROVER_USER_ID",nullable=true,length=9)
	public int getApproverUserId(){
		return approverUserId;
	}
	public void setApproverUserId(int approverUserId) throws java.sql.SQLException{
		if(isSame(approverUserId, getApproverUserId()))return;
		int oldValue = getApproverUserId();
		this.approverUserId=approverUserId;
		setProperty("APPROVER_USER_ID", approverUserId, oldValue);
		user=null;
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="RATE_PROG_ID",nullable=true,length=9)
	public int getRateProgId(){
		return rateProgId;
	}
	public void setRateProgId(int rateProgId) throws java.sql.SQLException{
		if(isSame(rateProgId, getRateProgId()))return;
		int oldValue = getRateProgId();
		this.rateProgId=rateProgId;
		setProperty("RATE_PROG_ID", rateProgId, oldValue);
		program=null;
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getRateProgId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setRateProgId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getApproverUserId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setApproverUserId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public Collection<EscalationRate> getEscalationRates()throws java.sql.SQLException{
		if(isNewInstance() || escalationRates != null){
			if(escalationRates == null)
				escalationRates = new TreeSet<EscalationRate>();
			return escalationRates;
		}
		return EscalationRate.getNamedCollection("findByProgram",getProgramId());
	}
	public void addEscalationRate(EscalationRate escalationRate)throws java.sql.SQLException{
		escalationRate.setProgram((Program)this);
		if(isNewInstance() || escalationRates != null)
			getEscalationRates().add(escalationRate);
		else
			escalationRate.insert();
	}
	public void removeEscalationRate(EscalationRate escalationRate)throws java.sql.SQLException{
		if(isNewInstance() || escalationRates != null)
			getEscalationRates().remove(escalationRate);
		else
			escalationRate.delete();
	}
	public Collection<ProgramSapWbs> getProgramSapWbss()throws java.sql.SQLException{
		if(isNewInstance() || programSapWbss != null){
			if(programSapWbss == null)
				programSapWbss = new TreeSet<ProgramSapWbs>();
			return programSapWbss;
		}
		return ProgramSapWbs.getNamedCollection("findByProgram",getProgramId());
	}
	public void addProgramSapWbs(ProgramSapWbs programSapWbs)throws java.sql.SQLException{
		programSapWbs.setProgram((Program)this);
		if(isNewInstance() || programSapWbss != null)
			getProgramSapWbss().add(programSapWbs);
		else
			programSapWbs.insert();
	}
	public void removeProgramSapWbs(ProgramSapWbs programSapWbs)throws java.sql.SQLException{
		if(isNewInstance() || programSapWbss != null)
			getProgramSapWbss().remove(programSapWbs);
		else
			programSapWbs.delete();
	}
	public Collection<ProgExcept> getProgExcepts()throws java.sql.SQLException{
		if(isNewInstance() || progExcepts != null){
			if(progExcepts == null)
				progExcepts = new TreeSet<ProgExcept>();
			return progExcepts;
		}
		return ProgExcept.getNamedCollection("findByProgram",getProgramId());
	}
	public void addProgExcept(ProgExcept progExcept)throws java.sql.SQLException{
		progExcept.setProgram((Program)this);
		if(isNewInstance() || progExcepts != null)
			getProgExcepts().add(progExcept);
		else
			progExcept.insert();
	}
	public void removeProgExcept(ProgExcept progExcept)throws java.sql.SQLException{
		if(isNewInstance() || progExcepts != null)
			getProgExcepts().remove(progExcept);
		else
			progExcept.delete();
	}
	public Collection<RecommendedDriver> getRecommendedDrivers()throws java.sql.SQLException{
		if(isNewInstance() || recommendedDrivers != null){
			if(recommendedDrivers == null)
				recommendedDrivers = new TreeSet<RecommendedDriver>();
			return recommendedDrivers;
		}
		return RecommendedDriver.getNamedCollection("findByProgram",getProgramId());
	}
	public void addRecommendedDriver(RecommendedDriver recommendedDriver)throws java.sql.SQLException{
		recommendedDriver.setProgram((Program)this);
		if(isNewInstance() || recommendedDrivers != null)
			getRecommendedDrivers().add(recommendedDriver);
		else
			recommendedDriver.insert();
	}
	public void removeRecommendedDriver(RecommendedDriver recommendedDriver)throws java.sql.SQLException{
		if(isNewInstance() || recommendedDrivers != null)
			getRecommendedDrivers().remove(recommendedDriver);
		else
			recommendedDriver.delete();
	}
	public Collection<SceProgElem> getSceProgElems()throws java.sql.SQLException{
		if(isNewInstance() || sceProgElems != null){
			if(sceProgElems == null)
				sceProgElems = new TreeSet<SceProgElem>();
			return sceProgElems;
		}
		return SceProgElem.getNamedCollection("findByProgram",getProgramId());
	}
	public void addSceProgElem(SceProgElem sceProgElem)throws java.sql.SQLException{
		sceProgElem.setProgram((Program)this);
		if(isNewInstance() || sceProgElems != null)
			getSceProgElems().add(sceProgElem);
		else
			sceProgElem.insert();
	}
	public void removeSceProgElem(SceProgElem sceProgElem)throws java.sql.SQLException{
		if(isNewInstance() || sceProgElems != null)
			getSceProgElems().remove(sceProgElem);
		else
			sceProgElem.delete();
	}
	public Collection<SceProjRev> getSceProjRevs()throws java.sql.SQLException{
		if(isNewInstance() || sceProjRevs != null){
			if(sceProjRevs == null)
				sceProjRevs = new TreeSet<SceProjRev>();
			return sceProjRevs;
		}
		return SceProjRev.getNamedCollection("findByProgram",getProgramId());
	}
	public void addSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		sceProjRev.setProgram((Program)this);
		if(isNewInstance() || sceProjRevs != null)
			getSceProjRevs().add(sceProjRev);
		else
			sceProjRev.insert();
	}
	public void removeSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		if(isNewInstance() || sceProjRevs != null)
			getSceProjRevs().remove(sceProjRev);
		else
			sceProjRev.delete();
	}
	public Program copy()throws java.sql.SQLException{
		Program cp = new Program((Program)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProgramDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(EscalationRate child:getEscalationRates())
			cp.addEscalationRate(child.copy());
		for(ProgramSapWbs child:getProgramSapWbss())
			cp.addProgramSapWbs(child.copy());
		for(ProgExcept child:getProgExcepts())
			cp.addProgExcept(child.copy());
		for(RecommendedDriver child:getRecommendedDrivers())
			cp.addRecommendedDriver(child.copy());
		for(SceProgElem child:getSceProgElems())
			cp.addSceProgElem(child.copy());
		for(SceProjRev child:getSceProjRevs())
			cp.addSceProjRev(child.copy());
	}
	public Vector<String> getDifference(ProgramDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getApproverUserId(),o.getApproverUserId())) diffs.add("APPROVER_USER_ID");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getRateProgId(),o.getRateProgId())) diffs.add("RATE_PROG_ID");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(escalationRates != null){
			for(EscalationRate escalationRate:getEscalationRates()){
				if(escalationRate.isNewInstance())
					escalationRate.setProgram((Program)this);
				escalationRate.insert();
			}
			escalationRates = null;
		}
		if(programSapWbss != null){
			for(ProgramSapWbs programSapWbs:getProgramSapWbss()){
				if(programSapWbs.isNewInstance())
					programSapWbs.setProgram((Program)this);
				programSapWbs.insert();
			}
			programSapWbss = null;
		}
		if(progExcepts != null){
			for(ProgExcept progExcept:getProgExcepts()){
				if(progExcept.isNewInstance())
					progExcept.setProgram((Program)this);
				progExcept.insert();
			}
			progExcepts = null;
		}
		if(recommendedDrivers != null){
			for(RecommendedDriver recommendedDriver:getRecommendedDrivers()){
				if(recommendedDriver.isNewInstance())
					recommendedDriver.setProgram((Program)this);
				recommendedDriver.insert();
			}
			recommendedDrivers = null;
		}
		if(sceProgElems != null){
			for(SceProgElem sceProgElem:getSceProgElems()){
				if(sceProgElem.isNewInstance())
					sceProgElem.setProgram((Program)this);
				sceProgElem.insert();
			}
			sceProgElems = null;
		}
		if(sceProjRevs != null){
			for(SceProjRev sceProjRev:getSceProjRevs()){
				if(sceProjRev.isNewInstance())
					sceProjRev.setProgram((Program)this);
				sceProjRev.insert();
			}
			sceProjRevs = null;
		}
	}
}
