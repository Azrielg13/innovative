package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CritExcept;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.ProgExcept;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.SceProj;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.Stl;
import com.sce.esp.object.model.Sub;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CritExceptDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,EXCEPT_ID};
	public static enum PROPERTY{PLANYEAR,SIM_ID,EXCEPT_ID,EX_TYPE_ID,YEAR,SUB_ID,STL_ID,OUT_STL_ID,PROJ_ID,VIOLATION,RECOMMENDATION,LIMIT,LOAD,FINALIZED,APPROVED,USE_CALC,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,SCE_PROJ_ID,DISABLED};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int EXCEPTID_LIMIT = 9;
	public final static int EXTYPEID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int SUBID_LIMIT = 9;
	public final static int STLID_LIMIT = 9;
	public final static int OUTSTLID_LIMIT = 9;
	public final static int PROJID_LIMIT = 9;
	public final static int VIOLATION_LIMIT = 1024;
	public final static int RECOMMENDATION_LIMIT = 1024;
	public final static int LIMIT_LIMIT = 24;
	public final static int LOAD_LIMIT = 24;
	public final static int FINALIZED_LIMIT = 1;
	public final static int APPROVED_LIMIT = 1;
	public final static int USECALC_LIMIT = 1;
	public final static int SCEPROJID_LIMIT = 9;
	public final static int DISABLED_LIMIT = 1;
	private CritExcept ptr;
	private int planyear;
	private int simId;
	private int exceptId;
	private int exTypeId;
	private int year;
	private int subId;
	private int stlId;
	private int outStlId;
	private int projId;
	private String violation;
	private String recommendation;
	private double limit;
	private double load;
	private boolean finalized;
	private boolean approved;
	private boolean useCalc = true;
	private int sceProjId;
	private boolean disabled;
	private ProgExcept progExcept;
	private Proj proj;
	private SceProj sceProj;
	private Simulation simulation;
	private Stl stl;
	private Stl stl2;
	private Sub sub;
	public static CritExcept getInstance(int planyear, int simId, int exceptId)throws java.sql.SQLException{
		return getInstance(planyear, simId, exceptId, true);
	}
	public static CritExcept getInstance(int planyear, int simId, int exceptId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, exceptId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, exceptId);
		Cache cache = em.getEntityManagerFactory().getCache();
		CritExcept o = null;
		if(cache != null && cache.contains(CritExcept.class, pk))
			o = em.find(CritExcept.class, pk);
		if(o==null && getAICache().contains(CritExcept.class, pk))
			o = getAICache().find(CritExcept.class, pk);
		if(o==null && fetch)
			o = em.find(CritExcept.class, pk);
		if(o==null && fetch && CritExcept.class.getAnnotation(AutoInsertable.class) != null){
			o = new CritExcept(planyear, simId, exceptId);
			getAICache().cache(CritExcept.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<CritExcept> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CritExcept> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CritExcept> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CritExcept o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CritExcept> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CritExcept> tq = em.createQuery(jpql,CritExcept.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CritExcept> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CritExcept> tq = em.createNamedQuery(name,CritExcept.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CritExceptDAO(){}
	public CritExceptDAO(int planyear, int simId, int exceptId){
		this.planyear=planyear;
		this.simId=simId;
		this.exceptId=exceptId;
	}
	public CritExceptDAO(CritExceptDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		copyFrom(orig);
	}
	public void copyFrom(CritExceptDAO orig){
		this.exTypeId=orig.getExTypeId();
		this.year=orig.getYear();
		this.subId=orig.getSubId();
		this.stlId=orig.getStlId();
		this.outStlId=orig.getOutStlId();
		this.projId=orig.getProjId();
		this.violation=orig.getViolation();
		this.recommendation=orig.getRecommendation();
		this.limit=orig.getLimit();
		this.load=orig.getLoad();
		this.finalized=orig.isFinalized();
		this.approved=orig.isApproved();
		this.useCalc=orig.isUseCalc();
		this.sceProjId=orig.getSceProjId();
		this.disabled=orig.isDisabled();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, exceptId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public CritExcept getPtr(){
		return ptr;
	}
	public void setPtr(CritExcept ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getExceptId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
		simulation=null;
	}
	@Id
	@SequenceGenerator(name="MDI570_SEQ",sequenceName="MDI570_SEQ")
	@Column(name="EXCEPT_ID",nullable=false,length=9)
	public int getExceptId(){
		return exceptId;
	}
	public void setExceptId(int exceptId) throws java.sql.SQLException{
		if(isSame(exceptId, getExceptId()))return;
		int oldValue = getExceptId();
		this.exceptId=exceptId;
		setProperty("EXCEPT_ID", exceptId, oldValue);
	}
	@Column(name="EX_TYPE_ID",nullable=false,length=9)
	public int getExTypeId(){
		if(getPtr()!=null)
			return getPtr().getExTypeId();
		return exTypeId;
	}
	public void setExTypeId(int exTypeId) throws java.sql.SQLException{
		if(isSame(exTypeId, getExTypeId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getExTypeId();
		this.exTypeId=exTypeId;
		setProperty("EX_TYPE_ID", exTypeId, oldValue);
		progExcept=null;
	}
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		if(getPtr()!=null)
			return getPtr().getYear();
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="SUB_ID",nullable=true,length=9)
	public int getSubId(){
		if(getPtr()!=null)
			return getPtr().getSubId();
		return subId;
	}
	public void setSubId(int subId) throws java.sql.SQLException{
		if(isSame(subId, getSubId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSubId();
		this.subId=subId;
		setProperty("SUB_ID", subId, oldValue);
		sub=null;
	}
	@Column(name="STL_ID",nullable=true,length=9)
	public int getStlId(){
		if(getPtr()!=null)
			return getPtr().getStlId();
		return stlId;
	}
	public void setStlId(int stlId) throws java.sql.SQLException{
		if(isSame(stlId, getStlId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getStlId();
		this.stlId=stlId;
		setProperty("STL_ID", stlId, oldValue);
		stl=null;
	}
	@Column(name="OUT_STL_ID",nullable=true,length=9)
	public int getOutStlId(){
		if(getPtr()!=null)
			return getPtr().getOutStlId();
		return outStlId;
	}
	public void setOutStlId(int outStlId) throws java.sql.SQLException{
		if(isSame(outStlId, getOutStlId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getOutStlId();
		this.outStlId=outStlId;
		setProperty("OUT_STL_ID", outStlId, oldValue);
		stl2=null;
	}
	@Column(name="PROJ_ID",nullable=true,length=9)
	public int getProjId(){
		if(getPtr()!=null)
			return getPtr().getProjId();
		return projId;
	}
	public void setProjId(int projId) throws java.sql.SQLException{
		if(isSame(projId, getProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getProjId();
		this.projId=projId;
		setProperty("PROJ_ID", projId, oldValue);
		proj=null;
	}
	@Column(name="VIOLATION",nullable=true,length=1024)
	public String getViolation(){
		if(getPtr()!=null)
			return getPtr().getViolation();
		return violation;
	}
	public void setViolation(String violation) throws java.sql.SQLException{
		if(isSame(violation, getViolation()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getViolation();
		this.violation=violation;
		setProperty("VIOLATION", violation, oldValue);
	}
	@Column(name="RECOMMENDATION",nullable=true,length=1024)
	public String getRecommendation(){
		if(getPtr()!=null)
			return getPtr().getRecommendation();
		return recommendation;
	}
	public void setRecommendation(String recommendation) throws java.sql.SQLException{
		if(isSame(recommendation, getRecommendation()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getRecommendation();
		this.recommendation=recommendation;
		setProperty("RECOMMENDATION", recommendation, oldValue);
	}
	@Column(name="LIMIT",nullable=true,length=24)
	public double getLimit(){
		if(getPtr()!=null)
			return getPtr().getLimit();
		return limit;
	}
	public void setLimit(double limit) throws java.sql.SQLException{
		if(isSame(limit, getLimit()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getLimit();
		this.limit=limit;
		setProperty("LIMIT", limit, oldValue);
	}
	@Column(name="LOAD",nullable=true,length=24)
	public double getLoad(){
		if(getPtr()!=null)
			return getPtr().getLoad();
		return load;
	}
	public void setLoad(double load) throws java.sql.SQLException{
		if(isSame(load, getLoad()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getLoad();
		this.load=load;
		setProperty("LOAD", load, oldValue);
	}
	@Column(name="FINALIZED",nullable=true,length=1)
	public boolean isFinalized(){
		if(getPtr()!=null)
			return getPtr().isFinalized();
		return finalized;
	}
	public void setFinalized(boolean finalized) throws java.sql.SQLException{
		if(isSame(finalized, isFinalized()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isFinalized();
		this.finalized=finalized;
		setProperty("FINALIZED", finalized, oldValue);
	}
	@Column(name="APPROVED",nullable=true,length=1)
	public boolean isApproved(){
		if(getPtr()!=null)
			return getPtr().isApproved();
		return approved;
	}
	public void setApproved(boolean approved) throws java.sql.SQLException{
		if(isSame(approved, isApproved()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isApproved();
		this.approved=approved;
		setProperty("APPROVED", approved, oldValue);
	}
	@Column(name="USE_CALC",nullable=true,length=1)
	public boolean isUseCalc(){
		if(getPtr()!=null)
			return getPtr().isUseCalc();
		return useCalc;
	}
	public void setUseCalc(boolean useCalc) throws java.sql.SQLException{
		if(isSame(useCalc, isUseCalc()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUseCalc();
		this.useCalc=useCalc;
		setProperty("USE_CALC", useCalc, oldValue);
	}
	@Column(name="SCE_PROJ_ID",nullable=true,length=9)
	public int getSceProjId(){
		if(getPtr()!=null)
			return getPtr().getSceProjId();
		return sceProjId;
	}
	public void setSceProjId(int sceProjId) throws java.sql.SQLException{
		if(isSame(sceProjId, getSceProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSceProjId();
		this.sceProjId=sceProjId;
		setProperty("SCE_PROJ_ID", sceProjId, oldValue);
		sceProj=null;
	}
	@Column(name="DISABLED",nullable=true,length=1)
	public boolean isDisabled(){
		if(getPtr()!=null)
			return getPtr().isDisabled();
		return disabled;
	}
	public void setDisabled(boolean disabled) throws java.sql.SQLException{
		if(isSame(disabled, isDisabled()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isDisabled();
		this.disabled=disabled;
		setProperty("DISABLED", disabled, oldValue);
	}
	public ProgExcept getProgExcept()throws java.sql.SQLException{
		if(progExcept==null)
			progExcept=ProgExcept.getInstance(getPlanyear(), getExTypeId());
		return progExcept;
	}
	public void setProgExcept(ProgExcept progExcept)throws java.sql.SQLException{
		setExTypeId(progExcept==null?0:progExcept.getExTypeId());
		this.progExcept=progExcept;
	}
	public Proj getProj()throws java.sql.SQLException{
		if(proj==null)
			proj=Proj.getInstance(getPlanyear(), getSimId(), getProjId());
		return proj;
	}
	public void setProj(Proj proj)throws java.sql.SQLException{
		setProjId(proj==null?0:proj.getProjId());
		this.proj=proj;
	}
	public SceProj getSceProj()throws java.sql.SQLException{
		if(sceProj==null)
			sceProj=SceProj.getInstance(getSceProjId());
		return sceProj;
	}
	public void setSceProj(SceProj sceProj)throws java.sql.SQLException{
		setSceProjId(sceProj==null?0:sceProj.getSceProjId());
		this.sceProj=sceProj;
	}
	public Simulation getSimulation()throws java.sql.SQLException{
		if(simulation==null)
			simulation=Simulation.getInstance(getPlanyear(), getSimId());
		return simulation;
	}
	public void setSimulation(Simulation simulation)throws java.sql.SQLException{
		setSimId(simulation==null?0:simulation.getSimId());
		this.simulation=simulation;
	}
	public Stl getStl()throws java.sql.SQLException{
		if(stl==null)
			stl=Stl.getInstance(getPlanyear(), getStlId());
		return stl;
	}
	public void setStl(Stl stl)throws java.sql.SQLException{
		setStlId(stl==null?0:stl.getStlId());
		this.stl=stl;
	}
	public Stl getStl2()throws java.sql.SQLException{
		if(stl2==null)
			stl2=Stl.getInstance(getPlanyear(), getOutStlId());
		return stl2;
	}
	public void setStl2(Stl stl2)throws java.sql.SQLException{
		setOutStlId(stl2==null?0:stl2.getStlId());
		this.stl2=stl2;
	}
	public Sub getSub()throws java.sql.SQLException{
		if(sub==null)
			sub=Sub.getInstance(getPlanyear(), getSubId());
		return sub;
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		setSubId(sub==null?0:sub.getSubId());
		this.sub=sub;
	}
	public CritExcept copy()throws java.sql.SQLException{
		CritExcept cp = new CritExcept((CritExcept)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CritExceptDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CritExceptDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getExceptId(),o.getExceptId())) diffs.add("EXCEPT_ID");
		if(!isSame(getExTypeId(),o.getExTypeId())) diffs.add("EX_TYPE_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getSubId(),o.getSubId())) diffs.add("SUB_ID");
		if(!isSame(getStlId(),o.getStlId())) diffs.add("STL_ID");
		if(!isSame(getOutStlId(),o.getOutStlId())) diffs.add("OUT_STL_ID");
		if(!isSame(getProjId(),o.getProjId())) diffs.add("PROJ_ID");
		if(!isSame(getViolation(),o.getViolation())) diffs.add("VIOLATION");
		if(!isSame(getRecommendation(),o.getRecommendation())) diffs.add("RECOMMENDATION");
		if(!isSame(getLimit(),o.getLimit())) diffs.add("LIMIT");
		if(!isSame(getLoad(),o.getLoad())) diffs.add("LOAD");
		if(!isSame(isFinalized(),o.isFinalized())) diffs.add("FINALIZED");
		if(!isSame(isApproved(),o.isApproved())) diffs.add("APPROVED");
		if(!isSame(isUseCalc(),o.isUseCalc())) diffs.add("USE_CALC");
		if(!isSame(getSceProjId(),o.getSceProjId())) diffs.add("SCE_PROJ_ID");
		if(!isSame(isDisabled(),o.isDisabled())) diffs.add("DISABLED");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
