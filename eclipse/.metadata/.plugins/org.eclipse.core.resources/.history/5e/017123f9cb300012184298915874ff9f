/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;
import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.CritExceptDAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI570_CRIT_EXCEPT")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM CritExcept o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.EXCEPT_ID=?3"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM CritExcept o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM CritExcept o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByProgExcept", query="SELECT o FROM CritExcept o WHERE o.PLANYEAR=?1 AND o.EX_TYPE_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySub", query="SELECT o FROM CritExcept o WHERE o.PLANYEAR=?1 AND o.SUB_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI570_CRIT_EXCEPT o WHERE o.PLANYEAR=? AND o.SIM_ID=? AND o.EXCEPT_ID=?"),//AUTO-GENERATED
})
public class CritExcept extends CritExceptDAO implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = -8843853487018066503L;
	/**
	 * The Constructor.
	 * 
	 * @param exceptId the except id
	 * @param simId the sim id
	 * @param planyear the planyear
	 */
	public CritExcept(){
	}
	public CritExcept(int planyear, int simId, int exceptId){
		super(planyear, simId, exceptId);
	}

	/**
	 * Constructor for insert method.
	 * 
	 * @param planyear the planyear
	 * @param simId the sim id
	 */
	public CritExcept(int planyear, int simId) {
		super(planyear,simId,0);
	}

	public CritExcept(CritExcept critExcept) {
		super(critExcept);
	}

	/**
	 * Gets the out stl.
	 * 
	 * @return the out stl
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Stl getOutStl() throws SQLException{
		if(getExTypeId()==ProgExcept.STL_N1)
			return Stl.getInstance(getPlanyear(), getOutStlId());
		return null;
	}

	public int compareTo(Object o){
		int ret=0;
		if(o instanceof CritExcept){
			try {
				CritExcept ce = (CritExcept)o;
				if(getYear() < ce.getYear())
					return -1;
				if(getYear() > ce.getYear())
					return 1;
				if(getSub()!=null)
					ret = getSub().compareTo(ce.getSub());
				if(ret == 0)
					ret = getProgExcept().compareTo(ce.getProgExcept());
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		if(ret == 0)
			ret = super.compareTo(o);
		return ret;
	}
}

