package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.ESPTestCase;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.util.Calculate;
import com.sce.esp.util.FormatText;
import com.sce.esp.util.db.PDBConnection;


public class SubTest extends ESPTestCase{
	private static final int PLANYEAR = 2011;
	private static final int SUB_ID = 800;
	private static final int SCE_PROJ_REV_ID = 44413;
	public void setUp(){
		PDBConnection.getInstance().enable();
//		EspLogger.message(this, (short)Math.pow(10,(short)Math.log10(132)+1));
//		EspLogger.message(this, (short)Math.pow(10,(short)Math.log10(13)+1));
//		EspLogger.message(this, (short)Math.pow(10,(short)Math.log10(0)+1));
//		PrimaryKey pk = new PrimaryKey(2012,800);
//		EspLogger.message(this, pk.getHashKey()+" "+pk.hashCode());
//		pk = new PrimaryKey(Calendar.getInstance());
//		EspLogger.message(this, pk.getHashKey()+" "+pk.hashCode());
//		pk = new PrimaryKey(800,Calendar.getInstance());
//		EspLogger.message(this, pk.getHashKey()+" "+pk.hashCode());
//		pk = new PrimaryKey(2012,800,Calendar.getInstance());
//		EspLogger.message(this, pk.getHashKey()+" "+pk.hashCode());
//		pk = new PrimaryKey(2011,8000,Calendar.getInstance());
//		EspLogger.message(this, pk.getHashKey()+" "+pk.hashCode());
	}
	public void testGetById() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		assertNotNull(bb);
		EspLogger.message(this, bb);
	}
	public void testGetById2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		assertNotNull(bb);
		EspLogger.message(this, bb);
	}
	public void testGetById3() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, 743); //Declez
		assertNotNull(bb);
		EspLogger.message(this, bb);
	}
	public void testGetByName() throws SQLException{
		Sub alder = Sub.getInstanceBySubName(PLANYEAR, "Alder", 12);
		assertEquals("Alder",alder.getSubName());
		EspLogger.message(this, alder);
	}
	public void testGetByName2() throws SQLException{
		PDBConnection.getInstance().disable();
		Sub alder = Sub.getInstanceBySubName(PLANYEAR, "Alder", 12);
		assertEquals("Alder",alder.getSubName());
		EspLogger.message(this, alder);
	}
	public void testChangeName() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		bb.setSubName("Alder2");
		assertEquals("Alder2",bb.getSubName());
		EspLogger.message(this, bb);
		bb.setSubName("Alder");
		assertEquals("Alder",bb.getSubName());
		EspLogger.message(this, bb);
	}
//	public void testChangeError() throws SQLException{
//		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
//		bb.setSubName("Alder_Eddie_Mack_Mayfield_Jr._SCE_Scientist3");
//		assertEquals("Alder",bb.getSubName());
//		EspLogger.message(this, bb);
//		bb.setSubName("Alder");
//		assertEquals("Alder",bb.getSubName());
//		EspLogger.message(this, bb);
//	}
	public void testGetPeakDate() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Calendar peakDate = bb.getPeakDate(0);
		assertNotNull(peakDate);	
		EspLogger.message(this, bb+" Peak Date: "+FormatText.formatDate(peakDate));
	}
	public void testGetPeakDate2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Calendar peakDate = bb.getPeakDate(0);
		assertNotNull(peakDate);	
		EspLogger.message(this, bb+" Peak Date: "+FormatText.formatDate(peakDate));
	}
	public void testGetPeakEff() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double peakEff = Calculate.round(bb.getPeakEff(2010),1);
		assertEquals(116.2,peakEff);
		EspLogger.message(this, bb+" Peak Eff: "+peakEff+"F");
	}
	public void testGetPeakEff2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double peakEff = Calculate.round(bb.getPeakEff(2010),1);
		assertEquals(116.2,peakEff);
		EspLogger.message(this, bb+" Peak Eff: "+peakEff+"F");
	}
	public void testGetOldPeak() throws SQLException{
		Calendar date = Calendar.getInstance();
		date.set(Calendar.YEAR, 2009);
		date.set(Calendar.MONTH, Calendar.AUGUST);
		date.set(Calendar.DAY_OF_MONTH, 15);
		SubDaily sd2 = SubDaily.getInstance(PLANYEAR, SUB_ID, date);
		assertNotNull(sd2);
		EspLogger.message(this, "SubDaily.toString(): "+FormatText.formatDate(sd2.getPeakDate()));
		assertTrue(sd2.isRetrieved());
		assertTrue(sd2.isNewInstance());
		SubDaily sd = SubDaily.getInstance(PLANYEAR, SUB_ID, Calculate.getCal(2009, Calendar.AUGUST, 15));
		assertNotNull(sd);
		assertTrue(sd==sd2);
		assertNotSame(0,sd.getRecordedPeak());
		EspLogger.message(this, FormatText.formatDate(date)+" Rec'd Peak: "+sd.getRecordedPeak());
	}
	public void testGetOldPeak2() throws SQLException{
		PDBConnection.getInstance().disable();
		Calendar date = Calculate.getCal(2009, Calendar.AUGUST, 15);
		SubDaily sd = SubDaily.getInstance(PLANYEAR, SUB_ID, date);
		assertNotNull(sd);
		assertNotSame(0,sd.getRecordedPeak());
		EspLogger.message(this, FormatText.formatDate(date)+" Rec'd Peak: "+sd.getRecordedPeak());
	}
	public void testGetMonthlyPeak() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		SubMonthly sm = bb.getMonthlyPeak(0, 2010, 5);
		assertNotNull(sm);
		assertNotNull(sm.getPeakDate());
		assertNotSame(0.0,sm.getPeakValue());
		EspLogger.message(this, sm+" "+FormatText.formatDate(sm.getPeakDate())+" "+sm.getPeakValue());
	}
	public void testGetMonthlyPeak2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		SubMonthly sm = bb.getMonthlyPeak(0, 2010, 5);
		assertNotNull(sm);
		EspLogger.message(this, sm);
	}
	public void testBankDaily()throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR+1, SUB_ID);
		Bank bank = bb.getBanksInService(Calendar.getInstance(), 0).first();
		assertNotNull(bank);
		DailyPeak dp = bank.getDailyPeak(Calculate.getCal(2010,Calendar.AUGUST,15));
		assertNotNull(dp);
		assertTrue(dp.isRetrieved());
		EspLogger.message(this, bank+" "+FormatText.formatDate(dp.getPeakDate())+" "+dp.getPeakValue());
		dp = bank.getDailyPeak(Calculate.getCal(2011,Calendar.SEPTEMBER,28));
		//assertFalse(dp.isRetrieved());
		dp.getPeakPhase();
		EspLogger.message(this, bank+" "+FormatText.formatDate(dp.getPeakDate())+" "+dp.getPeakValue());
	}
	public void testBankDaily2()throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR+1, SUB_ID);
		Bank bank = bb.getBanksInService(Calendar.getInstance(), 0).first();
		assertNotNull(bank);
		DailyPeak dp = bank.getDailyPeak(Calculate.getCal(2010,Calendar.AUGUST,15));
		assertNotNull(dp);
		assertTrue(dp.isRetrieved());
		EspLogger.message(this, bank+" "+FormatText.formatDate(dp.getPeakDate())+" "+dp.getPeakValue());
	}
	public void testGetTenYearAvg() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double peakEff = Calculate.round(bb.getTenYearAvg(),1);
		assertEquals(112.2,peakEff);
		EspLogger.message(this, bb+" Ten Year Avg: "+peakEff+"F");
	}
	public void testGetTenYearAvg2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double peakEff = Calculate.round(bb.getTenYearAvg(),1);
		assertEquals(112.2,peakEff);
		EspLogger.message(this, bb+" Ten Year Avg: "+peakEff+"F");
	}
	public void testGetRecdPeak() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int recdPeak = (int)Math.round(bb.getRecordedPeak(0)*bb.getMVAFactor());
		assertEquals(5404,recdPeak);
		EspLogger.message(this, bb+" Recorded Peak "+recdPeak);
	}
	public void testGetRecdPeak2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int recdPeak = (int)Math.round(bb.getRecordedPeak(0)*bb.getMVAFactor());
		assertEquals(5404,recdPeak);
		EspLogger.message(this, bb+" Recorded Peak "+recdPeak);
	}
	public void testGetSceProjElemCosts() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Collection<SceProjElemCost> specs = bb.getSceProjElemCosts();
		assertNotSame(0,specs.size());
		EspLogger.message(this, bb+" SceProjElemCosts: "+specs.size());
	}
	public void testGetSceProjElemCosts2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Collection<SceProjElemCost> specs = bb.getSceProjElemCosts();
		assertNotSame(0,specs.size());
		EspLogger.message(this, bb+" SceProjElemCosts: "+specs.size());
	}
	public void testGetAdjPeak() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int adjPeak = (int)Math.round(bb.getAdjustedPeak(0)*bb.getMVAFactor());
		assertEquals(5511,adjPeak);
		EspLogger.message(this, bb+" Adjusted Peak: "+adjPeak);
	}
	public void testGetAdjPeak2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int adjPeak = (int)Math.round(bb.getAdjustedPeak(0)*bb.getMVAFactor());
		assertEquals(5511,adjPeak);
		EspLogger.message(this, bb+" Adjusted Peak: "+adjPeak);
	}
	public void testGetMostRecent() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Calendar asOf = Calendar.getInstance();
		asOf.set(2020, Calendar.SEPTEMBER, 15);
		SceProjElemCost last = bb.getMostRecentSceProjElemCost(asOf,0);
		assertNotNull(last);
	}
	public void testGetMostRecent2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Calendar asOf = Calendar.getInstance();
		asOf.set(2020, Calendar.SEPTEMBER, 15);
		SceProjElemCost last = bb.getMostRecentSceProjElemCost(asOf,0);
		assertNotNull(last);
	}
	public void testGetCkts() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Collection<Ckt> ckts = bb.getYear(0, 2020).getCkts();
		assertNotSame(0,ckts.size());
		EspLogger.message(this, bb+" 2020 Circuits Count: "+ckts.size());
	}
	public void testGetCkts2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Collection<Ckt> ckts = bb.getYear(0, 2020).getCkts();
		assertNotSame(0,ckts.size());
		EspLogger.message(this, bb+" 2020 Circuits Count: "+ckts.size());
	}
	public void testGetTotalGrowth() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int growTot = (int)Math.round(bb.getYear(0, 2020).getGrowthTotal()*bb.getMVAFactor());
		assertEquals(1515,growTot);
		EspLogger.message(this, bb+" 2020 Total Growth: "+growTot);
	}
	public void testGetTotalGrowth2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int growTot = (int)Math.round(bb.getYear(0, 2020).getGrowthTotal()*bb.getMVAFactor());
		assertEquals(1515,growTot);
		EspLogger.message(this, bb+" 2020 Total Growth: "+growTot);
	}
	public void testDisableProj()throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		SceProjRev rev = SceProjRev.getInstance(SCE_PROJ_REV_ID);
		rev.setActive(false);
		int growTot = (int)Math.round(bb.getYear(0, 2020).getGrowthTotal()*bb.getMVAFactor());
		assertEquals(1061,growTot);
		EspLogger.message(this, bb+" 2020 Total Growth: "+growTot);
	}
	public void testEnableProj()throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		SceProjRev rev = SceProjRev.getInstance(SCE_PROJ_REV_ID);
		rev.setActive(true);
		int growTot = (int)Math.round(bb.getYear(0, 2020).getGrowthTotal()*bb.getMVAFactor());
		assertEquals(1515,growTot);
		EspLogger.message(this, bb+" 2020 Total Growth: "+growTot);
	}
	public void testGetProjLoad() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int projLoad = (int)Math.round(bb.getYear(0, 2020).getProjLoad()*bb.getMVAFactor());
		assertEquals(5976,projLoad);
		EspLogger.message(this, bb+" 2020 Projected Load: "+projLoad);
	}
	public void testGetProjLoad2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int adjPeak = (int)Math.round(bb.getYear(0, 2020).getProjLoad()*bb.getMVAFactor());
		assertEquals(5976,adjPeak);
		EspLogger.message(this, bb+" 2020 Projected Load: "+adjPeak);
	}
	public void testGetCritProjLoad() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int adjPeak = (int)Math.round(bb.getYear(0, 2020).getCriteriaProjLoad()*bb.getMVAFactor());
		assertEquals(6550,adjPeak);
		EspLogger.message(this, bb+" 2020 Crit Proj Load: "+adjPeak);
	}
	public void testGetCritProjLoad2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int adjPeak = (int)Math.round(bb.getYear(0, 2020).getCriteriaProjLoad()*bb.getMVAFactor());
		assertEquals(6550,adjPeak);
		EspLogger.message(this, bb+" 2020 Crit Proj Load: "+adjPeak);
	}
	public void testGetBanks() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int bc = bb.getBanks(Calendar.getInstance(), 0).size();
		assertEquals(3,bc);
		EspLogger.message(this, bb+" Today's Bank Count: "+bc);
	}
	public void testGetBanks2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int bc = bb.getBanks(Calendar.getInstance(), 0).size();
		assertEquals(3,bc);
		EspLogger.message(this, bb+" Today's Bank Count: "+bc);
	}
	public void testNameplate() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getNameplate(),1);
		assertEquals(128.8,np);
		EspLogger.message(this, bb+" 2020 Nameplate: "+np);
	}
	public void testNameplate2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getNameplate(),1);
		assertEquals(128.8,np);
		EspLogger.message(this, bb+" 2020 Nameplate: "+np);
	}
	public void testPLLFactor() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getPLLFactor()*100,1);
		assertEquals(114.2,np);
		EspLogger.message(this, bb+" 2020 PLL %: "+np);
	}
	public void testPLLFactor2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getPLLFactor()*100,1);
		assertEquals(114.2,np);
		EspLogger.message(this, bb+" 2020 PLL %: "+np);
	}
	public void testPLL() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int pll = (int)Math.round(bb.getYear(0, 2020).getPLLBizLogic()*bb.getMVAFactor());
		assertEquals(6766,pll);
		EspLogger.message(this, bb+" 2020 PLL: "+pll);
	}
	public void testPLL2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int pll = (int)Math.round(bb.getYear(0, 2020).getPLLBizLogic()*bb.getMVAFactor());
		assertEquals(6766,pll);
		EspLogger.message(this, bb+" 2020 PLL: "+pll);
	}
	public void testGetReserve() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int reserve = (int)Math.round(bb.getYear(0, 2020).getCriteriaReserve()*bb.getMVAFactor());
		assertEquals(216,reserve);
		EspLogger.message(this, bb+" 2020 Crit Reserve: "+reserve);
	}
	public void testGetReserve2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int reserve = (int)Math.round(bb.getYear(0, 2020).getCriteriaReserve()*bb.getMVAFactor());
		assertEquals(216,reserve);
		EspLogger.message(this, bb+" 2020 Crit Reserve: "+reserve);
	}
	public void testELLFactor() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getELLFactor()*100,1);
		assertEquals(143.7,np);
		EspLogger.message(this, bb+" 2020 PLL %: "+np);
	}
	public void testELLFactor2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getELLFactor()*100,1);
		assertEquals(143.7,np);
		EspLogger.message(this, bb+" 2020 PLL %: "+np);
	}
	public void testELL() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int pll = (int)Math.round(bb.getYear(0, 2020).getELL()*bb.getMVAFactor());
		assertEquals(8516,pll);
		EspLogger.message(this, bb+" 2020 PLL: "+pll);
	}
	public void testELL2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int pll = (int)Math.round(bb.getYear(0, 2020).getELL()*bb.getMVAFactor());
		assertEquals(8516,pll);
		EspLogger.message(this, bb+" 2020 PLL: "+pll);
	}
	public void testN1Factor() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getN1Factor()*100,1);
		assertEquals(96.7,np);
		EspLogger.message(this, bb+" 2020 PLL %: "+np);
	}
	public void testN1Factor2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		double np = Calculate.round(bb.getYear(0, 2020).getN1Factor()*100,1);
		assertEquals(96.7,np);
		EspLogger.message(this, bb+" 2020 PLL %: "+np);
	}
	public void testN1() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int pll = (int)Math.round(bb.getYear(0, 2020).getN1()*bb.getMVAFactor());
		assertEquals(5730,pll);
		EspLogger.message(this, bb+" 2020 PLL: "+pll);
	}
	public void testN12() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int pll = (int)Math.round(bb.getYear(0, 2020).getN1()*bb.getMVAFactor());
		assertEquals(5730,pll);
		EspLogger.message(this, bb+" 2020 PLL: "+pll);
	}
	public void testGetMostRecentSceProjElemCost() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		SceProjElemCost spec = bb.getMostRecentSceProjElemCost(Calculate.getCal(2020,Calendar.SEPTEMBER,15), 0);
		assertNotNull(spec);
		EspLogger.message(this, spec.getSceProjRevId());
	}
	public void testGetCktsInService() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int cc = bb.getCktsInService(Calendar.getInstance(), 0).size();
		assertEquals(15,cc);
		EspLogger.message(this, bb+" Circuit Count: "+cc);
	}
	public void testGetCktsInService2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		int cc = bb.getCktsInService(Calendar.getInstance(), 0).size();
		assertEquals(15,cc);
		EspLogger.message(this, bb+" Circuit Count: "+cc);
	}
	public void testGetCktsByYear() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		for(int y=2020; y>=bb.getPlanyear(); y--){
			Collection<Ckt> ckts = bb.getYear(0, y).getCkts();
			assertNotSame(0,ckts.size());
			EspLogger.message(this, bb+" "+y+" Ckt Count: "+ckts.size());
		}
	}
	public void testGetCktsByYear2() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		for(int y=2020; y>=bb.getPlanyear(); y--){
			Collection<Ckt> ckts = bb.getYear(0, y).getCkts();
			assertNotSame(0,ckts.size());
			EspLogger.message(this, bb+" "+y+" Ckt Count: "+ckts.size());
		}
	}
	public void testGetCktGrowths() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Collection<Ckt> ckts = bb.getYear(0, 2020).getCkts();
		for(int y=2020; y>=bb.getPlanyear(); y--){
			for(Ckt ckt: ckts){
				Collection<CktGrowth> cgs = ckt.getCktGrowths(0);
				cgs.iterator().next().getHashKey();
				assertNotSame(0,cgs.size());
				EspLogger.message(this, ckt+" Ckt Growth Count: "+cgs.size());
			}
		}
	}
	public void testGetCktGrowths2() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Collection<Ckt> ckts = bb.getYear(0, 2020).getCkts();
		for(int y=2020; y>=bb.getPlanyear(); y--){
			for(Ckt ckt: ckts){
				Collection<CktGrowth> cgs = ckt.getCktGrowths(0);
				assertNotSame(0,cgs.size());
				EspLogger.message(this, ckt+" Ckt Growth Count: "+cgs.size());
			}
		}
	}
	public void testGetCktGrowths_int() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		for(Ckt ckt: bb.getYear(0, 2020).getCkts()){
			Collection<CktGrowth> cgs = ckt.getCktGrowths(0);
			assertNotSame(0,cgs.size());
			EspLogger.message(this, ckt+" Ckt Growth Count: "+cgs.size());
		}
	}
	public void testGetCktGrowth() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Collection<Ckt> ckts = bb.getYear(0, 2020).getCkts();
		for(int y=2020; y>=bb.getPlanyear(); y--){
			for(Ckt ckt: ckts){
				double growth = ckt.getYear(0, y).getGrowth();
				assertNotSame(0.0,growth);
				EspLogger.message(this, ckt+" "+y+" Growth: "+growth);
			}
		}
	}
	public void testGetCktGrowth2() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		Collection<Ckt> ckts = bb.getYear(0, 2020).getCkts();
		for(int y=2020; y>=bb.getPlanyear(); y--){
			for(Ckt ckt: ckts){
				double growth = ckt.getYear(0, y).getGrowth();
				assertNotSame(0.0,growth);
				EspLogger.message(this, ckt+" "+y+" Growth: "+growth);
			}
		}
	}
	public void testCktsOverPLL() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		assertNotNull(bb.getSimSub(0));
		EspLogger.message(this, bb+" 2020 Circuits Over: "+bb.getYear(0, 2020).getCktsOverPLL());
	}
	public void testCktsOverPLL2() throws SQLException{
		PDBConnection.getInstance().disable();
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		assertNotNull(bb.getSimSub(0));
		EspLogger.message(this, bb+" 2020 Circuits Over: "+bb.getYear(0, 2020).getCktsOverPLL());
	}
	public void testGetBbankTies() throws SQLException{
		Bbank bb = Bbank.getInstance(PLANYEAR, SUB_ID);
		for(int i=0; i<100; i++){
			assertNotSame(0,bb.getBbankTies().size());
		}
	}
	public void testInsertNewSubs() throws SQLException{
		EspLogger.message(this, "Ba hashCode: "+"Ba".hashCode());
		EspLogger.message(this, "CB hashCode: "+"CB".hashCode());
		Bbank bn = new Bbank(2012);
		bn.setSubName("Jerome");
		bn.setPrimaryKv(66);
		bn.setSecondaryKv(12);
		bn.setSubTypeId(SubType.D);
		bn.setDistrictId(35);
		bn.insert();
		Abank an = new Abank(2012);
		an.setSubName("JeromeDaddy");
		an.setPrimaryKv(66);
		an.setSecondaryKv(12);
		an.setSubTypeId(SubType.D);
		an.setDistrictId(35);
		an.insert();
	}
}
