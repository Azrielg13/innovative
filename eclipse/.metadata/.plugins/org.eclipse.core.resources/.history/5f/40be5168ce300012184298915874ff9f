/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */


package com.sce.esp.security;

import java.util.prefs.Preferences;


/**
 * Saves the user names in Preferences. Because any string could be part
 * of the user name, for every user name that must be saved a new Preferences
 * key/value pair must be stored.
 *
 * @author Bino George
 * @author rbair
 */
public class DefaultUserNameStore extends UserNameStore {
    /**
     * The key for one of the preferences
     */
    private static final String USER_KEY = "usernames";
    /**
     */
    private static final String NUM_KEY = "usernames.length";
    /**
     * A name that is used when retrieving preferences. By default, the
     * app name is &quot;default&quot. This should be set by the application
     * if the application wants it&apos;s own list of user names.
     */
    private static final String DEFAULT_APP_NAME = "default";
    /**
     * The preferences node
     */
    private Preferences prefs;
    /**
     * Contains the user names. Since the list of user names is not
     * frequently updated, there is no penalty in storing the values
     * in an array.
     */
    private String[] userNames;
    
    /**
     * Creates a new instance of DefaultUserNameStore
     */
    public DefaultUserNameStore() {
        userNames = new String[0];
    }
    
    /**
     * Loads the user names from Preferences
     */
    public void loadUserNames() {
        initPrefs();
        if (prefs != null) {
            int n = prefs.getInt(NUM_KEY, 0);
            String[] names = new String[n];
            for (int i = 0; i < n; i++) {
                names[i] = prefs.get(USER_KEY + "." + i, null);
            }
            setUserNames(names);
        }
    }
    
    /**
     * Saves the user names to Preferences
     */
    public void saveUserNames() {
        initPrefs();
        if (prefs != null) {
            prefs.putInt(NUM_KEY, userNames.length);
            for (int i = 0; i < userNames.length; i++) {
                prefs.put(USER_KEY + "." + i, userNames[i]);
            }
        }
    }
    
    /**
     * @inheritDoc
     */
    public String[] getUserNames() {
        return userNames;
    }
    
    /**
     * @inheritDoc
     */
    public void setUserNames(String[] userNames) {
        userNames = userNames == null ? new String[0] : userNames;
        String[] old = getUserNames();
        this.userNames = userNames;
        firePropertyChange("userNames", old, getUserNames());
    }
    
    /**
     * Add a username to the store.
     * @param name
     */
    public void addUserName(String name) {
        if (!containsUserName(name)) {
            String[] newNames = new String[userNames.length + 1];
            for (int i=0; i<userNames.length; i++) {
                newNames[i] = userNames[i];
            }
            newNames[newNames.length - 1] = name;
            setUserNames(newNames);
        }
    }
    
    /**
     * Removes a username from the list.
     *
     * @param name
     */
    public void removeUserName(String name) {
        if (containsUserName(name)) {
            String[] newNames = new String[userNames.length - 1];
            int index = 0;
            for (String s : userNames) {
                if (!s.equals(name)) {
                    newNames[index++] = s;
                }
            }
            setUserNames(newNames);
        }
    }
    
    /**
     * @inheritDoc
     */
    public boolean containsUserName(String name) {
        for (String s : userNames) {
            if (s.equals(name)) {
                return true;
            }
        }
        return false;
    }
    
    /**
     * @return Returns Preferences node in which the user names will be stored
     */
    public Preferences getPreferences() {
        return prefs;
    }
    
    /**
     * @param prefs the Preferences node to store the user names in. If null,
     * or undefined, then they are stored in /org/jdesktop/swingx/auth/DefaultUserNameStore.
     */
    public void setPreferences(Preferences prefs) {
        initPrefs();
        Preferences old = getPreferences();
        this.prefs = prefs;
        firePropertyChange("preferences", old, getPreferences());
        if (this.prefs != old) {
            //if prefs is null, this next method will create the default prefs node
            loadUserNames();
        }
    }

    /**
     * Creates the default prefs node
     */
    private void initPrefs() {
        if (prefs == null) {
            prefs = Preferences.userNodeForPackage(DefaultUserNameStore.class);
            prefs = prefs.node("DefaultUserNameStore");
        }
    }
}