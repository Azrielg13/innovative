/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.Component;
import java.awt.Graphics;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.sql.SQLException;

import javax.swing.JOptionPane;

import com.jidesoft.swing.AutoResizingTextArea;
import com.sce.esp.dialog.ESPDialog;
import com.sce.esp.security.TopFlight;
import com.sce.esp.security.UserRole;
import com.sce.esp.util.ui.LimitDocument;

public abstract class DynamicAutoResizingTextArea extends AutoResizingTextArea
		implements
			FocusListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = -4767242100505404635L;
	private Component c;
	private Object obj;
	private int userRole;
	private Object editingO;

	public DynamicAutoResizingTextArea(Component c, Object obj, int min,
			int max, int cols, int limit) {
		this(c, obj, min, max, cols, UserRole.MDI_R_USER, limit);
	}
	public DynamicAutoResizingTextArea(Component c, Object obj, int min,
			int max, int cols, int limit, int userRole) {
		super(min, max, cols);
		this.c = c;
		this.obj = obj;
		this.userRole = userRole;
		setLineWrap(true);
		setWrapStyleWord(true);
		addFocusListener(this);
		setDocument(new LimitDocument(limit));
	}
	public Object getObject() {
		return obj;
	}
	public void paintComponent(Graphics g) {
		Object o = getObject();
		try {
			Object value = null;
			if (o != null)
				value = getObjectValue();
			if (!hasFocus()
					&& o != null
					&& (value == null && getText().length() > 0 || value != null
							&& !getText().equals("" + value))) {
				if (value == null)
					setText("");
				else
					setText("" + value);
				this.setCaretPosition(0);
			}
			if (shouldBeEnabled() != isEnabled())
				setEnabled(shouldBeEnabled());
		} catch (Exception e) {
			e.printStackTrace();
		}
		super.paintComponent(g);
	}
	public void focusGained(FocusEvent fe) {
		if (fe.getOppositeComponent() != null)
			editingO = getObject();
	}
	public void focusLost(FocusEvent fe) {
		try {
			if (getEditingObject() != null)
				updateObject();
		} catch (Exception e) {
			e.printStackTrace();
			ESPDialog.showMessageDialog(this, e.getMessage(), "Error",
					JOptionPane.ERROR_MESSAGE);
		}
		c.repaint();
	}
	public boolean shouldBeEnabled() throws SQLException {
		return getObject() != null && hasPermission();
	}

	public boolean hasPermission() throws SQLException {
		return TopFlight.getInstance().hasAccessRight(userRole);
	}

	public abstract void updateObject() throws SQLException;

	protected Object getEditingObject() {
		return editingO;
	}
	public abstract Object getObjectValue() throws SQLException;
}