/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util.ui;

import java.awt.BorderLayout;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

import javax.swing.JFrame;

import com.sce.esp.util.IconsFactory;

/**
 * The JFrame edition of <b>JConsolePane</b>.<br>
 * {@link JConsolePane}
 * <p>
 */
public final class JConsole extends JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1079621261435565866L;
	/**
     * The single instance of JConsolePane.
     */
    private static JConsolePane s_consolePane = JConsolePane.getConsolePane();
    
    
    /**
     * Returns the instance of the <code>JConsolePane</code> for further
     * configuration.
     */
    public static JConsolePane getConsole()
    {
        return( s_consolePane );
    }
    
    
    /**
     * Constructor.
     * Creates a new JFrame and adds to it the single instance of JConsolePane.
     * Finally hides the frame until it is required to be seen.
     */
    public JConsole()
    {
        initComponents();
        
        setIconImage( IconsFactory.getImageIcon("icons/console.gif").getImage() );
        
        // attach a listener to watch for close button pressed
        s_consolePane.addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent evt)
            {
                // hide this frame also
                setVisible(false);
            }
        });

        // show console when frame is shown
        addComponentListener(new ComponentAdapter() {
            public void componentShown(ComponentEvent evt)
            {
                // usually not needed unless you have manually invoked:
                // getConsole().hideConsole() for some reason.
                // Make sure the console is visible when this frame
                // is made visible.
                s_consolePane.showConsole();
            }
        });

        // no need for the console to be hidden inside a frame. We will control
        // the frame visibility instead.
        s_consolePane.showConsole();
        
        getContentPane().add(s_consolePane, BorderLayout.CENTER);
        pack();
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(){

        setTitle("ESP Suite Console"); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
