package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CoType;
import com.sce.esp.object.model.GiApp;
import com.sce.esp.object.model.GiCustomer;
import com.sce.esp.object.model.GiStudy;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class GiAppDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,TARIFF_ID,GEN_NUMBER,APP_NAME,GEN_SIZE,STATUS_ID,SERV_ACCT,INSTALLED_SERVICE,ADDRESS,CITY,COUNTY,ZIPCODE,APP_RCVD,FAC_ID,CO_TYPE_ID,TECH_ID,FE_LEAD_ID,METER_NUM,APP_COMP,COMM_TEST,COMM_PASSED,APP_REVIEW_TIME,NOTES,CUST_ID,IREQ_ID,STUDY_ID,ALT_DATE1,ALT_VARCHAR1,ALT_INT1};
	public final static int ID_LIMIT = 9;
	public final static int TARIFFID_LIMIT = 9;
	public final static int GENNUMBER_LIMIT = 255;
	public final static int APPNAME_LIMIT = 255;
	public final static int GENSIZE_LIMIT = 9;
	public final static int STATUSID_LIMIT = 9;
	public final static int SERVACCT_LIMIT = 255;
	public final static int INSTALLEDSERVICE_LIMIT = 255;
	public final static int ADDRESS_LIMIT = 255;
	public final static int CITY_LIMIT = 255;
	public final static int COUNTY_LIMIT = 255;
	public final static int ZIPCODE_LIMIT = 15;
	public final static int APPRCVD_LIMIT = 7;
	public final static int FACID_LIMIT = 9;
	public final static int COTYPEID_LIMIT = 9;
	public final static int TECHID_LIMIT = 9;
	public final static int FELEADID_LIMIT = 9;
	public final static int METERNUM_LIMIT = 255;
	public final static int APPCOMP_LIMIT = 7;
	public final static int COMMTEST_LIMIT = 7;
	public final static int COMMPASSED_LIMIT = 1;
	public final static int APPREVIEWTIME_LIMIT = 9;
	public final static int NOTES_LIMIT = 4000;
	public final static int CUSTID_LIMIT = 9;
	public final static int IREQID_LIMIT = 9;
	public final static int STUDYID_LIMIT = 9;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTVARCHAR1_LIMIT = 255;
	public final static int ALTINT1_LIMIT = 9;
	private int id;
	private int tariffId;
	private String genNumber;
	private String appName;
	private double genSize;
	private int statusId;
	private String servAcct;
	private String installedService;
	private String address;
	private String city;
	private String county;
	private String zipcode;
	private Calendar appRcvd;
	private int facId;
	private int coTypeId;
	private int techId;
	private int feLeadId;
	private String meterNum;
	private Calendar appComp;
	private Calendar commTest;
	private boolean commPassed;
	private int appReviewTime;
	private String notes;
	private int custId;
	private int ireqId;
	private int studyId;
	private Calendar altDate1;
	private String altVarchar1;
	private int altInt1;
	private GiCustomer giCustomer;
	private LookUp tariff;
	private LookUp status;
	private LookUp tech;
	private User currentFe;
	private CoType coType;
	private GiStudy giStudy;
	public static GiApp getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static GiApp getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		GiApp o = null;
		if(cache != null && cache.contains(GiApp.class, pk))
			o = em.find(GiApp.class, pk);
		if(o==null && getAICache().contains(GiApp.class, pk))
			o = getAICache().find(GiApp.class, pk);
		if(o==null && fetch)
			o = em.find(GiApp.class, pk);
		if(o==null && fetch && GiApp.class.getAnnotation(AutoInsertable.class) != null){
			o = new GiApp(id);
			getAICache().cache(GiApp.class, o);
		}
		return o;
	}
	public static Collection<GiApp> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<GiApp> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<GiApp> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM GiApp o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<GiApp> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<GiApp> tq = em.createQuery(jpql,GiApp.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<GiApp> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<GiApp> tq = em.createNamedQuery(name,GiApp.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public GiAppDAO(){}
	public GiAppDAO(int id){
		this.id=id;
	}
	public GiAppDAO(GiAppDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(GiAppDAO orig){
		this.tariffId=orig.getTariffId();
		this.genNumber=orig.getGenNumber();
		this.appName=orig.getAppName();
		this.genSize=orig.getGenSize();
		this.statusId=orig.getStatusId();
		this.servAcct=orig.getServAcct();
		this.installedService=orig.getInstalledService();
		this.address=orig.getAddress();
		this.city=orig.getCity();
		this.county=orig.getCounty();
		this.zipcode=orig.getZipcode();
		this.appRcvd=orig.getAppRcvd();
		this.facId=orig.getFacId();
		this.coTypeId=orig.getCoTypeId();
		this.techId=orig.getTechId();
		this.feLeadId=orig.getFeLeadId();
		this.meterNum=orig.getMeterNum();
		this.appComp=orig.getAppComp();
		this.commTest=orig.getCommTest();
		this.commPassed=orig.isCommPassed();
		this.appReviewTime=orig.getAppReviewTime();
		this.notes=orig.getNotes();
		this.custId=orig.getCustId();
		this.ireqId=orig.getIreqId();
		this.studyId=orig.getStudyId();
		this.altDate1=orig.getAltDate1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altInt1=orig.getAltInt1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIZ99_SEQ",sequenceName="MDIZ99_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="TARIFF_ID",nullable=false,length=9)
	public int getTariffId(){
		return tariffId;
	}
	public void setTariffId(int tariffId) throws java.sql.SQLException{
		if(isSame(tariffId, getTariffId()))return;
		int oldValue = getTariffId();
		this.tariffId=tariffId;
		setProperty("TARIFF_ID", tariffId, oldValue);
		tariff=null;
	}
	@Column(name="GEN_NUMBER",nullable=true,length=255)
	public String getGenNumber(){
		return genNumber;
	}
	public void setGenNumber(String genNumber) throws java.sql.SQLException{
		if(isSame(genNumber, getGenNumber()))return;
		String oldValue = getGenNumber();
		this.genNumber=genNumber;
		setProperty("GEN_NUMBER", genNumber, oldValue);
	}
	@Column(name="APP_NAME",nullable=true,length=255)
	public String getAppName(){
		return appName;
	}
	public void setAppName(String appName) throws java.sql.SQLException{
		if(isSame(appName, getAppName()))return;
		String oldValue = getAppName();
		this.appName=appName;
		setProperty("APP_NAME", appName, oldValue);
	}
	@Column(name="GEN_SIZE",nullable=true,length=9)
	public double getGenSize(){
		return genSize;
	}
	public void setGenSize(double genSize) throws java.sql.SQLException{
		if(isSame(genSize, getGenSize()))return;
		double oldValue = getGenSize();
		this.genSize=genSize;
		setProperty("GEN_SIZE", genSize, oldValue);
	}
	@Column(name="STATUS_ID",nullable=true,length=9)
	public int getStatusId(){
		return statusId;
	}
	public void setStatusId(int statusId) throws java.sql.SQLException{
		if(isSame(statusId, getStatusId()))return;
		int oldValue = getStatusId();
		this.statusId=statusId;
		setProperty("STATUS_ID", statusId, oldValue);
		status=null;
	}
	@Column(name="SERV_ACCT",nullable=true,length=255)
	public String getServAcct(){
		return servAcct;
	}
	public void setServAcct(String servAcct) throws java.sql.SQLException{
		if(isSame(servAcct, getServAcct()))return;
		String oldValue = getServAcct();
		this.servAcct=servAcct;
		setProperty("SERV_ACCT", servAcct, oldValue);
	}
	@Column(name="INSTALLED_SERVICE",nullable=true,length=255)
	public String getInstalledService(){
		return installedService;
	}
	public void setInstalledService(String installedService) throws java.sql.SQLException{
		if(isSame(installedService, getInstalledService()))return;
		String oldValue = getInstalledService();
		this.installedService=installedService;
		setProperty("INSTALLED_SERVICE", installedService, oldValue);
	}
	@Column(name="ADDRESS",nullable=true,length=255)
	public String getAddress(){
		return address;
	}
	public void setAddress(String address) throws java.sql.SQLException{
		if(isSame(address, getAddress()))return;
		String oldValue = getAddress();
		this.address=address;
		setProperty("ADDRESS", address, oldValue);
	}
	@Column(name="CITY",nullable=true,length=255)
	public String getCity(){
		return city;
	}
	public void setCity(String city) throws java.sql.SQLException{
		if(isSame(city, getCity()))return;
		String oldValue = getCity();
		this.city=city;
		setProperty("CITY", city, oldValue);
	}
	@Column(name="COUNTY",nullable=true,length=255)
	public String getCounty(){
		return county;
	}
	public void setCounty(String county) throws java.sql.SQLException{
		if(isSame(county, getCounty()))return;
		String oldValue = getCounty();
		this.county=county;
		setProperty("COUNTY", county, oldValue);
	}
	@Column(name="ZIPCODE",nullable=true,length=15)
	public String getZipcode(){
		return zipcode;
	}
	public void setZipcode(String zipcode) throws java.sql.SQLException{
		if(isSame(zipcode, getZipcode()))return;
		String oldValue = getZipcode();
		this.zipcode=zipcode;
		setProperty("ZIPCODE", zipcode, oldValue);
	}
	@Column(name="APP_RCVD",nullable=true,length=7)
	public Calendar getAppRcvd(){
		return appRcvd;
	}
	public void setAppRcvd(Calendar appRcvd) throws java.sql.SQLException{
		if(isSame(appRcvd, getAppRcvd()))return;
		Calendar oldValue = getAppRcvd();
		this.appRcvd=appRcvd;
		setProperty("APP_RCVD", appRcvd, oldValue);
	}
	@Column(name="FAC_ID",nullable=true,length=9)
	public int getFacId(){
		return facId;
	}
	public void setFacId(int facId) throws java.sql.SQLException{
		if(isSame(facId, getFacId()))return;
		int oldValue = getFacId();
		this.facId=facId;
		setProperty("FAC_ID", facId, oldValue);
	}
	@Column(name="CO_TYPE_ID",nullable=true,length=9)
	public int getCoTypeId(){
		return coTypeId;
	}
	public void setCoTypeId(int coTypeId) throws java.sql.SQLException{
		if(isSame(coTypeId, getCoTypeId()))return;
		int oldValue = getCoTypeId();
		this.coTypeId=coTypeId;
		setProperty("CO_TYPE_ID", coTypeId, oldValue);
		coType=null;
	}
	@Column(name="TECH_ID",nullable=false,length=9)
	public int getTechId(){
		return techId;
	}
	public void setTechId(int techId) throws java.sql.SQLException{
		if(isSame(techId, getTechId()))return;
		int oldValue = getTechId();
		this.techId=techId;
		setProperty("TECH_ID", techId, oldValue);
		tech=null;
	}
	@Column(name="FE_LEAD_ID",nullable=true,length=9)
	public int getFeLeadId(){
		return feLeadId;
	}
	public void setFeLeadId(int feLeadId) throws java.sql.SQLException{
		if(isSame(feLeadId, getFeLeadId()))return;
		int oldValue = getFeLeadId();
		this.feLeadId=feLeadId;
		setProperty("FE_LEAD_ID", feLeadId, oldValue);
		currentFe=null;
	}
	@Column(name="METER_NUM",nullable=true,length=255)
	public String getMeterNum(){
		return meterNum;
	}
	public void setMeterNum(String meterNum) throws java.sql.SQLException{
		if(isSame(meterNum, getMeterNum()))return;
		String oldValue = getMeterNum();
		this.meterNum=meterNum;
		setProperty("METER_NUM", meterNum, oldValue);
	}
	@Column(name="APP_COMP",nullable=true,length=7)
	public Calendar getAppComp(){
		return appComp;
	}
	public void setAppComp(Calendar appComp) throws java.sql.SQLException{
		if(isSame(appComp, getAppComp()))return;
		Calendar oldValue = getAppComp();
		this.appComp=appComp;
		setProperty("APP_COMP", appComp, oldValue);
	}
	@Column(name="COMM_TEST",nullable=true,length=7)
	public Calendar getCommTest(){
		return commTest;
	}
	public void setCommTest(Calendar commTest) throws java.sql.SQLException{
		if(isSame(commTest, getCommTest()))return;
		Calendar oldValue = getCommTest();
		this.commTest=commTest;
		setProperty("COMM_TEST", commTest, oldValue);
	}
	@Column(name="COMM_PASSED",nullable=true,length=1)
	public boolean isCommPassed(){
		return commPassed;
	}
	public void setCommPassed(boolean commPassed) throws java.sql.SQLException{
		if(isSame(commPassed, isCommPassed()))return;
		boolean oldValue = isCommPassed();
		this.commPassed=commPassed;
		setProperty("COMM_PASSED", commPassed, oldValue);
	}
	@Column(name="APP_REVIEW_TIME",nullable=true,length=9)
	public int getAppReviewTime(){
		return appReviewTime;
	}
	public void setAppReviewTime(int appReviewTime) throws java.sql.SQLException{
		if(isSame(appReviewTime, getAppReviewTime()))return;
		int oldValue = getAppReviewTime();
		this.appReviewTime=appReviewTime;
		setProperty("APP_REVIEW_TIME", appReviewTime, oldValue);
	}
	@Column(name="NOTES",nullable=true,length=4000)
	public String getNotes(){
		return notes;
	}
	public void setNotes(String notes) throws java.sql.SQLException{
		if(isSame(notes, getNotes()))return;
		String oldValue = getNotes();
		this.notes=notes;
		setProperty("NOTES", notes, oldValue);
	}
	@Column(name="CUST_ID",nullable=true,length=9)
	public int getCustId(){
		return custId;
	}
	public void setCustId(int custId) throws java.sql.SQLException{
		if(isSame(custId, getCustId()))return;
		int oldValue = getCustId();
		this.custId=custId;
		setProperty("CUST_ID", custId, oldValue);
		giCustomer=null;
	}
	@Column(name="IREQ_ID",nullable=true,length=9)
	public int getIreqId(){
		return ireqId;
	}
	public void setIreqId(int ireqId) throws java.sql.SQLException{
		if(isSame(ireqId, getIreqId()))return;
		int oldValue = getIreqId();
		this.ireqId=ireqId;
		setProperty("IREQ_ID", ireqId, oldValue);
	}
	@Column(name="STUDY_ID",nullable=true,length=9)
	public int getStudyId(){
		return studyId;
	}
	public void setStudyId(int studyId) throws java.sql.SQLException{
		if(isSame(studyId, getStudyId()))return;
		int oldValue = getStudyId();
		this.studyId=studyId;
		setProperty("STUDY_ID", studyId, oldValue);
		giStudy=null;
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=255)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_INT1",nullable=true,length=9)
	public int getAltInt1(){
		return altInt1;
	}
	public void setAltInt1(int altInt1) throws java.sql.SQLException{
		if(isSame(altInt1, getAltInt1()))return;
		int oldValue = getAltInt1();
		this.altInt1=altInt1;
		setProperty("ALT_INT1", altInt1, oldValue);
	}
	public GiCustomer getGiCustomer()throws java.sql.SQLException{
		if(giCustomer==null)
			giCustomer=GiCustomer.getInstance(getCustId());
		return giCustomer;
	}
	public void setGiCustomer(GiCustomer giCustomer)throws java.sql.SQLException{
		setCustId(giCustomer==null?0:giCustomer.getId());
		this.giCustomer=giCustomer;
	}
	public LookUp getTariff()throws java.sql.SQLException{
		if(tariff==null)
			tariff=LookUp.getInstance(getTariffId());
		return tariff;
	}
	public void setTariff(LookUp tariff)throws java.sql.SQLException{
		setTariffId(tariff==null?0:tariff.getId());
		this.tariff=tariff;
	}
	public LookUp getStatus()throws java.sql.SQLException{
		if(status==null)
			status=LookUp.getInstance(getStatusId());
		return status;
	}
	public void setStatus(LookUp status)throws java.sql.SQLException{
		setStatusId(status==null?0:status.getId());
		this.status=status;
	}
	public LookUp getTech()throws java.sql.SQLException{
		if(tech==null)
			tech=LookUp.getInstance(getTechId());
		return tech;
	}
	public void setTech(LookUp tech)throws java.sql.SQLException{
		setTechId(tech==null?0:tech.getId());
		this.tech=tech;
	}
	public User getCurrentFe()throws java.sql.SQLException{
		if(currentFe==null)
			currentFe=User.getInstance(getFeLeadId());
		return currentFe;
	}
	public void setCurrentFe(User currentFe)throws java.sql.SQLException{
		setFeLeadId(currentFe==null?0:currentFe.getUsernameId());
		this.currentFe=currentFe;
	}
	public CoType getCoType()throws java.sql.SQLException{
		if(coType==null)
			coType=CoType.getInstance(getCoTypeId());
		return coType;
	}
	public void setCoType(CoType coType)throws java.sql.SQLException{
		setCoTypeId(coType==null?0:coType.getCoTypeId());
		this.coType=coType;
	}
	public GiStudy getGiStudy()throws java.sql.SQLException{
		if(giStudy==null)
			giStudy=GiStudy.getInstance(getStudyId());
		return giStudy;
	}
	public void setGiStudy(GiStudy giStudy)throws java.sql.SQLException{
		setStudyId(giStudy==null?0:giStudy.getId());
		this.giStudy=giStudy;
	}
	public GiApp copy()throws java.sql.SQLException{
		GiApp cp = new GiApp((GiApp)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(GiAppDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(GiAppDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getTariffId(),o.getTariffId())) diffs.add("TARIFF_ID");
		if(!isSame(getGenNumber(),o.getGenNumber())) diffs.add("GEN_NUMBER");
		if(!isSame(getAppName(),o.getAppName())) diffs.add("APP_NAME");
		if(!isSame(getGenSize(),o.getGenSize())) diffs.add("GEN_SIZE");
		if(!isSame(getStatusId(),o.getStatusId())) diffs.add("STATUS_ID");
		if(!isSame(getServAcct(),o.getServAcct())) diffs.add("SERV_ACCT");
		if(!isSame(getInstalledService(),o.getInstalledService())) diffs.add("INSTALLED_SERVICE");
		if(!isSame(getAddress(),o.getAddress())) diffs.add("ADDRESS");
		if(!isSame(getCity(),o.getCity())) diffs.add("CITY");
		if(!isSame(getCounty(),o.getCounty())) diffs.add("COUNTY");
		if(!isSame(getZipcode(),o.getZipcode())) diffs.add("ZIPCODE");
		if(!isSame(getAppRcvd(),o.getAppRcvd())) diffs.add("APP_RCVD");
		if(!isSame(getFacId(),o.getFacId())) diffs.add("FAC_ID");
		if(!isSame(getCoTypeId(),o.getCoTypeId())) diffs.add("CO_TYPE_ID");
		if(!isSame(getTechId(),o.getTechId())) diffs.add("TECH_ID");
		if(!isSame(getFeLeadId(),o.getFeLeadId())) diffs.add("FE_LEAD_ID");
		if(!isSame(getMeterNum(),o.getMeterNum())) diffs.add("METER_NUM");
		if(!isSame(getAppComp(),o.getAppComp())) diffs.add("APP_COMP");
		if(!isSame(getCommTest(),o.getCommTest())) diffs.add("COMM_TEST");
		if(!isSame(isCommPassed(),o.isCommPassed())) diffs.add("COMM_PASSED");
		if(!isSame(getAppReviewTime(),o.getAppReviewTime())) diffs.add("APP_REVIEW_TIME");
		if(!isSame(getNotes(),o.getNotes())) diffs.add("NOTES");
		if(!isSame(getCustId(),o.getCustId())) diffs.add("CUST_ID");
		if(!isSame(getIreqId(),o.getIreqId())) diffs.add("IREQ_ID");
		if(!isSame(getStudyId(),o.getStudyId())) diffs.add("STUDY_ID");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltInt1(),o.getAltInt1())) diffs.add("ALT_INT1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
