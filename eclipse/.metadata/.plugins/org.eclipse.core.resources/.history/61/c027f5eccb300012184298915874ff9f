/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.jortho;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/**
 * A hash list of Suggestions. The list is cut with a max dissimilarity. If a suggestion already exist then the
 * suggestion with the lower dissimilarity will be hold.
 * 
 * @author Volker Berlin
 */
class Suggestions {

    private final int maxDiff;
    private final HashMap<Suggestion,Suggestion> map = new HashMap<Suggestion,Suggestion>();

    /**
     * Create a suggestions list. Suggestion with a larger dissimilarity can not be added.
     * @param maxDiff the max dissimilarity
     */
    Suggestions(int maxDiff){
        this.maxDiff = maxDiff;
    }
    
    /**
     * Add a suggestion. 
     * @param suggestion the suggestion 
     */
    void add(Suggestion suggestion){
        if(suggestion.getDissimilarity() > maxDiff){
            return;
        }
        Suggestion oldSuggestion = map.get( suggestion );
        if(oldSuggestion != null && oldSuggestion.getDissimilarity() <= suggestion.getDissimilarity()){
            return;
        }
        map.put( suggestion, suggestion );
    }
    
    
    List<Suggestion> getlist(){
        ArrayList<Suggestion> list = new ArrayList<Suggestion>();
        for(Suggestion sugg : map.values()){
            list.add( sugg );
        }
        return list;
    }

    /**
     * Get the max dissimilarity. Suggestion with a larger value can not be added.
     * @return
     */
    int getMaxDissimilarity() {
        return maxDiff;
    }
}
