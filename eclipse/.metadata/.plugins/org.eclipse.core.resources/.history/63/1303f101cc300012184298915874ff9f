package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Abank;
import com.sce.esp.object.model.AbankYear;
import com.sce.esp.object.model.Criteria;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.SubYear;
import com.sce.esp.object.model.Sys;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class AbankYearDAO extends SubYear{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,ABANK_SUB_ID,YEAR};
	public static enum PROPERTY{PLANYEAR,SIM_ID,ABANK_SUB_ID,YEAR,SYS_ID,OPER_DRF,USE_OPER_DRF,TEMP_SENS,CRITERIA_ID,Q_LOSS,COND_OUTPUT,CHILD_KVAR_SUPPLY,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int ABANKSUBID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int SYSID_LIMIT = 9;
	public final static int OPERDRF_LIMIT = 24;
	public final static int USEOPERDRF_LIMIT = 1;
	public final static int TEMPSENS_LIMIT = 24;
	public final static int CRITERIAID_LIMIT = 9;
	public final static int QLOSS_LIMIT = 24;
	public final static int CONDOUTPUT_LIMIT = 24;
	public final static int CHILDKVARSUPPLY_LIMIT = 6;
	private AbankYear ptr;
	private int planyear;
	private int simId;
	private int abankSubId;
	private int year;
	private int sysId;
	private double operDrf;
	private boolean useOperDrf = true;
	private double tempSens;
	private int criteriaId = 1;
	private double qLoss;
	private double condOutput;
	private int childKvarSupply;
	private Abank abank;
	private Criteria criteria;
	private Sys sys;
	public static AbankYear getInstance(int planyear, int simId, int abankSubId, int year)throws java.sql.SQLException{
		return getInstance(planyear, simId, abankSubId, year, true);
	}
	public static AbankYear getInstance(int planyear, int simId, int abankSubId, int year, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, abankSubId, year))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, abankSubId, year);
		Cache cache = em.getEntityManagerFactory().getCache();
		AbankYear o = null;
		if(cache != null && cache.contains(AbankYear.class, pk))
			o = em.find(AbankYear.class, pk);
		if(o==null && getAICache().contains(AbankYear.class, pk))
			o = getAICache().find(AbankYear.class, pk);
		if(o==null && fetch)
			o = em.find(AbankYear.class, pk);
		if(o==null && fetch && AbankYear.class.getAnnotation(AutoInsertable.class) != null){
			o = new AbankYear(planyear, simId, abankSubId, year);
			getAICache().cache(AbankYear.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<AbankYear> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<AbankYear> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<AbankYear> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM AbankYear o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<AbankYear> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<AbankYear> tq = em.createQuery(jpql,AbankYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<AbankYear> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<AbankYear> tq = em.createNamedQuery(name,AbankYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public AbankYearDAO(){}
	public AbankYearDAO(int planyear, int simId, int abankSubId, int year){
		this.planyear=planyear;
		this.simId=simId;
		this.abankSubId=abankSubId;
		this.year=year;
	}
	public AbankYearDAO(AbankYearDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		this.abankSubId=orig.getAbankSubId();
		this.year=orig.getYear();
		copyFrom(orig);
	}
	public void copyFrom(AbankYearDAO orig){
		this.sysId=orig.getSysId();
		this.operDrf=orig.getOperDrf();
		this.useOperDrf=orig.isUseOperDrf();
		this.tempSens=orig.getTempSens();
		this.criteriaId=orig.getCriteriaId();
		this.qLoss=orig.getQLoss();
		this.condOutput=orig.getCondOutput();
		this.childKvarSupply=orig.getChildKvarSupply();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, abankSubId, year};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public AbankYear getPtr(){
		return ptr;
	}
	public void setPtr(AbankYear ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getAbankSubId(), getYear()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Id
	@Column(name="ABANK_SUB_ID",nullable=false,length=9)
	public int getAbankSubId(){
		return abankSubId;
	}
	public void setAbankSubId(int abankSubId) throws java.sql.SQLException{
		if(isSame(abankSubId, getAbankSubId()))return;
		int oldValue = getAbankSubId();
		this.abankSubId=abankSubId;
		setProperty("ABANK_SUB_ID", abankSubId, oldValue);
		abank=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="SYS_ID",nullable=false,length=9)
	public int getSysId(){
		if(getPtr()!=null)
			return getPtr().getSysId();
		return sysId;
	}
	public void setSysId(int sysId) throws java.sql.SQLException{
		if(isSame(sysId, getSysId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSysId();
		this.sysId=sysId;
		setProperty("SYS_ID", sysId, oldValue);
		sys=null;
	}
	@Column(name="OPER_DRF",nullable=true,length=24)
	public double getOperDrf(){
		if(getPtr()!=null)
			return getPtr().getOperDrf();
		return operDrf;
	}
	public void setOperDrf(double operDrf) throws java.sql.SQLException{
		if(isSame(operDrf, getOperDrf()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getOperDrf();
		this.operDrf=operDrf;
		setProperty("OPER_DRF", operDrf, oldValue);
	}
	@Column(name="USE_OPER_DRF",nullable=true,length=1)
	public boolean isUseOperDrf(){
		if(getPtr()!=null)
			return getPtr().isUseOperDrf();
		return useOperDrf;
	}
	public void setUseOperDrf(boolean useOperDrf) throws java.sql.SQLException{
		if(isSame(useOperDrf, isUseOperDrf()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUseOperDrf();
		this.useOperDrf=useOperDrf;
		setProperty("USE_OPER_DRF", useOperDrf, oldValue);
	}
	@Column(name="TEMP_SENS",nullable=true,length=24)
	public double getTempSens(){
		if(getPtr()!=null)
			return getPtr().getTempSens();
		return tempSens;
	}
	public void setTempSens(double tempSens) throws java.sql.SQLException{
		if(isSame(tempSens, getTempSens()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getTempSens();
		this.tempSens=tempSens;
		setProperty("TEMP_SENS", tempSens, oldValue);
	}
	@Column(name="CRITERIA_ID",nullable=true,length=9)
	public int getCriteriaId(){
		if(getPtr()!=null)
			return getPtr().getCriteriaId();
		return criteriaId;
	}
	public void setCriteriaId(int criteriaId) throws java.sql.SQLException{
		if(isSame(criteriaId, getCriteriaId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getCriteriaId();
		this.criteriaId=criteriaId;
		setProperty("CRITERIA_ID", criteriaId, oldValue);
		criteria=null;
	}
	@Column(name="Q_LOSS",nullable=true,length=24)
	public double getQLoss(){
		if(getPtr()!=null)
			return getPtr().getQLoss();
		return qLoss;
	}
	public void setQLoss(double qLoss) throws java.sql.SQLException{
		if(isSame(qLoss, getQLoss()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getQLoss();
		this.qLoss=qLoss;
		setProperty("Q_LOSS", qLoss, oldValue);
	}
	@Column(name="COND_OUTPUT",nullable=true,length=24)
	public double getCondOutput(){
		if(getPtr()!=null)
			return getPtr().getCondOutput();
		return condOutput;
	}
	public void setCondOutput(double condOutput) throws java.sql.SQLException{
		if(isSame(condOutput, getCondOutput()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getCondOutput();
		this.condOutput=condOutput;
		setProperty("COND_OUTPUT", condOutput, oldValue);
	}
	@Column(name="CHILD_KVAR_SUPPLY",nullable=true,length=6)
	public int getChildKvarSupply(){
		if(getPtr()!=null)
			return getPtr().getChildKvarSupply();
		return childKvarSupply;
	}
	public void setChildKvarSupply(int childKvarSupply) throws java.sql.SQLException{
		if(isSame(childKvarSupply, getChildKvarSupply()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getChildKvarSupply();
		this.childKvarSupply=childKvarSupply;
		setProperty("CHILD_KVAR_SUPPLY", childKvarSupply, oldValue);
	}
	public Abank getAbank()throws java.sql.SQLException{
		if(abank==null)
			abank=Abank.getInstance(getPlanyear(), getAbankSubId());
		return abank;
	}
	public void setAbank(Abank abank)throws java.sql.SQLException{
		setAbankSubId(abank==null?0:abank.getAbankSubId());
		this.abank=abank;
	}
	public Criteria getCriteria()throws java.sql.SQLException{
		if(criteria==null)
			criteria=Criteria.getInstance(getPlanyear(), getCriteriaId());
		return criteria;
	}
	public void setCriteria(Criteria criteria)throws java.sql.SQLException{
		setCriteriaId(criteria==null?0:criteria.getCriteriaId());
		this.criteria=criteria;
	}
	public Sys getSys()throws java.sql.SQLException{
		if(sys==null)
			sys=Sys.getInstance(getPlanyear(), getSysId());
		return sys;
	}
	public void setSys(Sys sys)throws java.sql.SQLException{
		setSysId(sys==null?0:sys.getSysId());
		this.sys=sys;
	}
	public AbankYear copy()throws java.sql.SQLException{
		AbankYear cp = new AbankYear((AbankYear)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(AbankYearDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(AbankYearDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getAbankSubId(),o.getAbankSubId())) diffs.add("ABANK_SUB_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getSysId(),o.getSysId())) diffs.add("SYS_ID");
		if(!isSame(getOperDrf(),o.getOperDrf())) diffs.add("OPER_DRF");
		if(!isSame(isUseOperDrf(),o.isUseOperDrf())) diffs.add("USE_OPER_DRF");
		if(!isSame(getTempSens(),o.getTempSens())) diffs.add("TEMP_SENS");
		if(!isSame(getCriteriaId(),o.getCriteriaId())) diffs.add("CRITERIA_ID");
		if(!isSame(getQLoss(),o.getQLoss())) diffs.add("Q_LOSS");
		if(!isSame(getCondOutput(),o.getCondOutput())) diffs.add("COND_OUTPUT");
		if(!isSame(getChildKvarSupply(),o.getChildKvarSupply())) diffs.add("CHILD_KVAR_SUPPLY");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
