package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Pif;
import com.sce.esp.object.model.PifLineJust;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PifLineJustDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,LINE_SECTION_ID,PIF_ID};
	public static enum PROPERTY{PLANYEAR,LINE_SECTION_ID,PIF_ID,LINE_SECTION,LENGTH,BEFORE_CABLE,AFTER_CABLE,BEFORE_RATING,AFTER_RATING,NOTE,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_DOUBLE4,ALT_VARCHAR1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int LINESECTIONID_LIMIT = 9;
	public final static int PIFID_LIMIT = 9;
	public final static int LINESECTION_LIMIT = 9;
	public final static int LENGTH_LIMIT = 32;
	public final static int BEFORECABLE_LIMIT = 32;
	public final static int AFTERCABLE_LIMIT = 32;
	public final static int BEFORERATING_LIMIT = 24;
	public final static int AFTERRATING_LIMIT = 24;
	public final static int NOTE_LIMIT = 512;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTDOUBLE4_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 512;
	private int planyear;
	private int lineSectionId;
	private int pifId;
	private int lineSection;
	private String length;
	private String beforeCable;
	private String afterCable;
	private double beforeRating;
	private double afterRating;
	private String note;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private double altDouble4;
	private String altVarchar1;
	private Pif pif;
	public static PifLineJust getInstance(int planyear, int lineSectionId, int pifId)throws java.sql.SQLException{
		return getInstance(planyear, lineSectionId, pifId, true);
	}
	public static PifLineJust getInstance(int planyear, int lineSectionId, int pifId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, lineSectionId, pifId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, lineSectionId, pifId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifLineJust o = null;
		if(cache != null && cache.contains(PifLineJust.class, pk))
			o = em.find(PifLineJust.class, pk);
		if(o==null && getAICache().contains(PifLineJust.class, pk))
			o = getAICache().find(PifLineJust.class, pk);
		if(o==null && fetch)
			o = em.find(PifLineJust.class, pk);
		if(o==null && fetch && PifLineJust.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifLineJust(planyear, lineSectionId, pifId);
			getAICache().cache(PifLineJust.class, o);
		}
		return o;
	}
	public static Collection<PifLineJust> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifLineJust> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifLineJust> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifLineJust o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifLineJust> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifLineJust> tq = em.createQuery(jpql,PifLineJust.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifLineJust> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifLineJust> tq = em.createNamedQuery(name,PifLineJust.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifLineJustDAO(){}
	public PifLineJustDAO(int planyear, int lineSectionId, int pifId){
		this.planyear=planyear;
		this.lineSectionId=lineSectionId;
		this.pifId=pifId;
	}
	public PifLineJustDAO(PifLineJustDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.pifId=orig.getPifId();
		copyFrom(orig);
	}
	public void copyFrom(PifLineJustDAO orig){
		this.lineSection=orig.getLineSection();
		this.length=orig.getLength();
		this.beforeCable=orig.getBeforeCable();
		this.afterCable=orig.getAfterCable();
		this.beforeRating=orig.getBeforeRating();
		this.afterRating=orig.getAfterRating();
		this.note=orig.getNote();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altDouble4=orig.getAltDouble4();
		this.altVarchar1=orig.getAltVarchar1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, lineSectionId, pifId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI693_SEQ",sequenceName="MDI693_SEQ")
	@Column(name="LINE_SECTION_ID",nullable=false,length=9)
	public int getLineSectionId(){
		return lineSectionId;
	}
	public void setLineSectionId(int lineSectionId) throws java.sql.SQLException{
		if(isSame(lineSectionId, getLineSectionId()))return;
		int oldValue = getLineSectionId();
		this.lineSectionId=lineSectionId;
		setProperty("LINE_SECTION_ID", lineSectionId, oldValue);
	}
	@Id
	@Column(name="PIF_ID",nullable=false,length=9)
	public int getPifId(){
		return pifId;
	}
	public void setPifId(int pifId) throws java.sql.SQLException{
		if(isSame(pifId, getPifId()))return;
		int oldValue = getPifId();
		this.pifId=pifId;
		setProperty("PIF_ID", pifId, oldValue);
		pif=null;
	}
	@Column(name="LINE_SECTION",nullable=true,length=9)
	public int getLineSection(){
		return lineSection;
	}
	public void setLineSection(int lineSection) throws java.sql.SQLException{
		if(isSame(lineSection, getLineSection()))return;
		int oldValue = getLineSection();
		this.lineSection=lineSection;
		setProperty("LINE_SECTION", lineSection, oldValue);
	}
	@Column(name="LENGTH",nullable=true,length=32)
	public String getLength(){
		return length;
	}
	public void setLength(String length) throws java.sql.SQLException{
		if(isSame(length, getLength()))return;
		String oldValue = getLength();
		this.length=length;
		setProperty("LENGTH", length, oldValue);
	}
	@Column(name="BEFORE_CABLE",nullable=true,length=32)
	public String getBeforeCable(){
		return beforeCable;
	}
	public void setBeforeCable(String beforeCable) throws java.sql.SQLException{
		if(isSame(beforeCable, getBeforeCable()))return;
		String oldValue = getBeforeCable();
		this.beforeCable=beforeCable;
		setProperty("BEFORE_CABLE", beforeCable, oldValue);
	}
	@Column(name="AFTER_CABLE",nullable=true,length=32)
	public String getAfterCable(){
		return afterCable;
	}
	public void setAfterCable(String afterCable) throws java.sql.SQLException{
		if(isSame(afterCable, getAfterCable()))return;
		String oldValue = getAfterCable();
		this.afterCable=afterCable;
		setProperty("AFTER_CABLE", afterCable, oldValue);
	}
	@Column(name="BEFORE_RATING",nullable=true,length=24)
	public double getBeforeRating(){
		return beforeRating;
	}
	public void setBeforeRating(double beforeRating) throws java.sql.SQLException{
		if(isSame(beforeRating, getBeforeRating()))return;
		double oldValue = getBeforeRating();
		this.beforeRating=beforeRating;
		setProperty("BEFORE_RATING", beforeRating, oldValue);
	}
	@Column(name="AFTER_RATING",nullable=true,length=24)
	public double getAfterRating(){
		return afterRating;
	}
	public void setAfterRating(double afterRating) throws java.sql.SQLException{
		if(isSame(afterRating, getAfterRating()))return;
		double oldValue = getAfterRating();
		this.afterRating=afterRating;
		setProperty("AFTER_RATING", afterRating, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_DOUBLE4",nullable=true,length=24)
	public double getAltDouble4(){
		return altDouble4;
	}
	public void setAltDouble4(double altDouble4) throws java.sql.SQLException{
		if(isSame(altDouble4, getAltDouble4()))return;
		double oldValue = getAltDouble4();
		this.altDouble4=altDouble4;
		setProperty("ALT_DOUBLE4", altDouble4, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=512)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	public Pif getPif()throws java.sql.SQLException{
		if(pif==null)
			pif=Pif.getInstance(getPlanyear(), getPifId());
		return pif;
	}
	public void setPif(Pif pif)throws java.sql.SQLException{
		setPifId(pif==null?0:pif.getPifId());
		this.pif=pif;
	}
	public PifLineJust copy()throws java.sql.SQLException{
		PifLineJust cp = new PifLineJust((PifLineJust)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifLineJustDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PifLineJustDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getLineSectionId(),o.getLineSectionId())) diffs.add("LINE_SECTION_ID");
		if(!isSame(getPifId(),o.getPifId())) diffs.add("PIF_ID");
		if(!isSame(getLineSection(),o.getLineSection())) diffs.add("LINE_SECTION");
		if(!isSame(getLength(),o.getLength())) diffs.add("LENGTH");
		if(!isSame(getBeforeCable(),o.getBeforeCable())) diffs.add("BEFORE_CABLE");
		if(!isSame(getAfterCable(),o.getAfterCable())) diffs.add("AFTER_CABLE");
		if(!isSame(getBeforeRating(),o.getBeforeRating())) diffs.add("BEFORE_RATING");
		if(!isSame(getAfterRating(),o.getAfterRating())) diffs.add("AFTER_RATING");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltDouble4(),o.getAltDouble4())) diffs.add("ALT_DOUBLE4");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
