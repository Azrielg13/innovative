package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.CktGrowth;
import com.sce.esp.object.model.GrowthType;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Simulation;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class CktGrowthDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,CKT_ID,GROWTH_TYPE_ID,YEAR};
	public static enum PROPERTY{PLANYEAR,SIM_ID,CKT_ID,GROWTH_TYPE_ID,YEAR,X1,X2,X3,X4,X5,X6,X7,X8,USE_DEFAULTS,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int CKTID_LIMIT = 9;
	public final static int GROWTHTYPEID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int X1_LIMIT = 24;
	public final static int X2_LIMIT = 24;
	public final static int X3_LIMIT = 24;
	public final static int X4_LIMIT = 24;
	public final static int X5_LIMIT = 24;
	public final static int X6_LIMIT = 24;
	public final static int X7_LIMIT = 24;
	public final static int X8_LIMIT = 24;
	public final static int USEDEFAULTS_LIMIT = 3;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 512;
	public final static int ALTDATE1_LIMIT = 7;
	private CktGrowth ptr;
	private int planyear;
	private int simId;
	private int cktId;
	private int growthTypeId;
	private int year;
	private double x1;
	private double x2;
	private double x3;
	private double x4;
	private double x5;
	private double x6;
	private double x7;
	private double x8;
	private int useDefaults;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Ckt ckt;
	private GrowthType growthType;
	private Simulation simulation;
	public static CktGrowth getInstance(int planyear, int simId, int cktId, int growthTypeId, int year)throws java.sql.SQLException{
		return getInstance(planyear, simId, cktId, growthTypeId, year, true);
	}
	public static CktGrowth getInstance(int planyear, int simId, int cktId, int growthTypeId, int year, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, cktId, growthTypeId, year))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, cktId, growthTypeId, year);
		Cache cache = em.getEntityManagerFactory().getCache();
		CktGrowth o = null;
		if(cache != null && cache.contains(CktGrowth.class, pk))
			o = em.find(CktGrowth.class, pk);
		if(o==null && getAICache().contains(CktGrowth.class, pk))
			o = getAICache().find(CktGrowth.class, pk);
		if(o==null && fetch)
			o = em.find(CktGrowth.class, pk);
		if(o==null && fetch && CktGrowth.class.getAnnotation(AutoInsertable.class) != null){
			o = new CktGrowth(planyear, simId, cktId, growthTypeId, year);
			getAICache().cache(CktGrowth.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<CktGrowth> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CktGrowth> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CktGrowth> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CktGrowth o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CktGrowth> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktGrowth> tq = em.createQuery(jpql,CktGrowth.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CktGrowth> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktGrowth> tq = em.createNamedQuery(name,CktGrowth.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CktGrowthDAO(){}
	public CktGrowthDAO(int planyear, int simId, int cktId, int growthTypeId, int year){
		this.planyear=planyear;
		this.simId=simId;
		this.cktId=cktId;
		this.growthTypeId=growthTypeId;
		this.year=year;
	}
	public CktGrowthDAO(CktGrowthDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		this.cktId=orig.getCktId();
		this.growthTypeId=orig.getGrowthTypeId();
		this.year=orig.getYear();
		copyFrom(orig);
	}
	public void copyFrom(CktGrowthDAO orig){
		this.x1=orig.getX1();
		this.x2=orig.getX2();
		this.x3=orig.getX3();
		this.x4=orig.getX4();
		this.x5=orig.getX5();
		this.x6=orig.getX6();
		this.x7=orig.getX7();
		this.x8=orig.getX8();
		this.useDefaults=orig.getUseDefaults();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, cktId, growthTypeId, year};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public CktGrowth getPtr(){
		return ptr;
	}
	public void setPtr(CktGrowth ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getCktId(), getGrowthTypeId(), getYear()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
		simulation=null;
	}
	@Id
	@Column(name="CKT_ID",nullable=false,length=9)
	public int getCktId(){
		return cktId;
	}
	public void setCktId(int cktId) throws java.sql.SQLException{
		if(isSame(cktId, getCktId()))return;
		int oldValue = getCktId();
		this.cktId=cktId;
		setProperty("CKT_ID", cktId, oldValue);
		ckt=null;
	}
	@Id
	@Column(name="GROWTH_TYPE_ID",nullable=false,length=9)
	public int getGrowthTypeId(){
		return growthTypeId;
	}
	public void setGrowthTypeId(int growthTypeId) throws java.sql.SQLException{
		if(isSame(growthTypeId, getGrowthTypeId()))return;
		int oldValue = getGrowthTypeId();
		this.growthTypeId=growthTypeId;
		setProperty("GROWTH_TYPE_ID", growthTypeId, oldValue);
		growthType=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="X1",nullable=true,length=24)
	public double getX1(){
		if(getPtr()!=null)
			return getPtr().getX1();
		return x1;
	}
	public void setX1(double x1) throws java.sql.SQLException{
		if(isSame(x1, getX1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getX1();
		this.x1=x1;
		setProperty("X1", x1, oldValue);
	}
	@Column(name="X2",nullable=true,length=24)
	public double getX2(){
		if(getPtr()!=null)
			return getPtr().getX2();
		return x2;
	}
	public void setX2(double x2) throws java.sql.SQLException{
		if(isSame(x2, getX2()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getX2();
		this.x2=x2;
		setProperty("X2", x2, oldValue);
	}
	@Column(name="X3",nullable=true,length=24)
	public double getX3(){
		if(getPtr()!=null)
			return getPtr().getX3();
		return x3;
	}
	public void setX3(double x3) throws java.sql.SQLException{
		if(isSame(x3, getX3()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getX3();
		this.x3=x3;
		setProperty("X3", x3, oldValue);
	}
	@Column(name="X4",nullable=true,length=24)
	public double getX4(){
		if(getPtr()!=null)
			return getPtr().getX4();
		return x4;
	}
	public void setX4(double x4) throws java.sql.SQLException{
		if(isSame(x4, getX4()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getX4();
		this.x4=x4;
		setProperty("X4", x4, oldValue);
	}
	@Column(name="X5",nullable=true,length=24)
	public double getX5(){
		if(getPtr()!=null)
			return getPtr().getX5();
		return x5;
	}
	public void setX5(double x5) throws java.sql.SQLException{
		if(isSame(x5, getX5()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getX5();
		this.x5=x5;
		setProperty("X5", x5, oldValue);
	}
	@Column(name="X6",nullable=true,length=24)
	public double getX6(){
		if(getPtr()!=null)
			return getPtr().getX6();
		return x6;
	}
	public void setX6(double x6) throws java.sql.SQLException{
		if(isSame(x6, getX6()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getX6();
		this.x6=x6;
		setProperty("X6", x6, oldValue);
	}
	@Column(name="X7",nullable=true,length=24)
	public double getX7(){
		if(getPtr()!=null)
			return getPtr().getX7();
		return x7;
	}
	public void setX7(double x7) throws java.sql.SQLException{
		if(isSame(x7, getX7()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getX7();
		this.x7=x7;
		setProperty("X7", x7, oldValue);
	}
	@Column(name="X8",nullable=true,length=24)
	public double getX8(){
		if(getPtr()!=null)
			return getPtr().getX8();
		return x8;
	}
	public void setX8(double x8) throws java.sql.SQLException{
		if(isSame(x8, getX8()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getX8();
		this.x8=x8;
		setProperty("X8", x8, oldValue);
	}
	@Column(name="USE_DEFAULTS",nullable=true,length=3)
	public int getUseDefaults(){
		if(getPtr()!=null)
			return getPtr().getUseDefaults();
		return useDefaults;
	}
	public void setUseDefaults(int useDefaults) throws java.sql.SQLException{
		if(isSame(useDefaults, getUseDefaults()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getUseDefaults();
		this.useDefaults=useDefaults;
		setProperty("USE_DEFAULTS", useDefaults, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		if(getPtr()!=null)
			return getPtr().getAltDouble1();
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=512)
	public String getAltVarchar1(){
		if(getPtr()!=null)
			return getPtr().getAltVarchar1();
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		if(getPtr()!=null)
			return getPtr().getAltDate1();
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public GrowthType getGrowthType()throws java.sql.SQLException{
		if(growthType==null)
			growthType=GrowthType.getInstance(getPlanyear(), getGrowthTypeId());
		return growthType;
	}
	public void setGrowthType(GrowthType growthType)throws java.sql.SQLException{
		setGrowthTypeId(growthType==null?0:growthType.getGrowthTypeId());
		this.growthType=growthType;
	}
	public Simulation getSimulation()throws java.sql.SQLException{
		if(simulation==null)
			simulation=Simulation.getInstance(getPlanyear(), getSimId());
		return simulation;
	}
	public void setSimulation(Simulation simulation)throws java.sql.SQLException{
		setSimId(simulation==null?0:simulation.getSimId());
		this.simulation=simulation;
	}
	public CktGrowth copy()throws java.sql.SQLException{
		CktGrowth cp = new CktGrowth((CktGrowth)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CktGrowthDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CktGrowthDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getCktId(),o.getCktId())) diffs.add("CKT_ID");
		if(!isSame(getGrowthTypeId(),o.getGrowthTypeId())) diffs.add("GROWTH_TYPE_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getX1(),o.getX1())) diffs.add("X1");
		if(!isSame(getX2(),o.getX2())) diffs.add("X2");
		if(!isSame(getX3(),o.getX3())) diffs.add("X3");
		if(!isSame(getX4(),o.getX4())) diffs.add("X4");
		if(!isSame(getX5(),o.getX5())) diffs.add("X5");
		if(!isSame(getX6(),o.getX6())) diffs.add("X6");
		if(!isSame(getX7(),o.getX7())) diffs.add("X7");
		if(!isSame(getX8(),o.getX8())) diffs.add("X8");
		if(!isSame(getUseDefaults(),o.getUseDefaults())) diffs.add("USE_DEFAULTS");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
