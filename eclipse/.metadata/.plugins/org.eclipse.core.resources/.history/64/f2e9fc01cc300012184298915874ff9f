package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.Cust;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CustDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,CUST_ID};
	public static enum PROPERTY{PLANYEAR,CUST_ID,BBANK_SUB_ID,CKT_ID,NAME,DESCRIPTION,ADDRESS,KVAR,KW,START_DATE,END_DATE,NOTE,CREATOR_USERNAME_ID,CREATED_DATE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,A_DP,B_DP,C_DP,N_DP,MW_DP,MVAR_DP,KV_DP,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_VARCHAR1,ALT_VARCHAR2,ALT_VARCHAR3,ALT_DATE1,ALT_DATE2,ALT_DATE3};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int CUSTID_LIMIT = 9;
	public final static int BBANKSUBID_LIMIT = 9;
	public final static int CKTID_LIMIT = 9;
	public final static int NAME_LIMIT = 32;
	public final static int DESCRIPTION_LIMIT = 256;
	public final static int ADDRESS_LIMIT = 128;
	public final static int KVAR_LIMIT = 24;
	public final static int KW_LIMIT = 24;
	public final static int STARTDATE_LIMIT = 7;
	public final static int ENDDATE_LIMIT = 7;
	public final static int NOTE_LIMIT = 256;
	public final static int CREATORUSERNAMEID_LIMIT = 9;
	public final static int CREATEDDATE_LIMIT = 7;
	public final static int ADP_LIMIT = 64;
	public final static int BDP_LIMIT = 64;
	public final static int CDP_LIMIT = 64;
	public final static int NDP_LIMIT = 64;
	public final static int MWDP_LIMIT = 64;
	public final static int MVARDP_LIMIT = 64;
	public final static int KVDP_LIMIT = 64;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTDATE2_LIMIT = 7;
	public final static int ALTDATE3_LIMIT = 7;
	private int planyear;
	private int custId;
	private int bbankSubId;
	private int cktId;
	private String name;
	private String description;
	private String address;
	private double kvar;
	private double kw;
	private Calendar startDate;
	private Calendar endDate;
	private String note;
	private int creatorUsernameId;
	private Calendar createdDate;
	private String aDp;
	private String bDp;
	private String cDp;
	private String nDp;
	private String mwDp;
	private String mvarDp;
	private String kvDp;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private String altVarchar1;
	private String altVarchar2;
	private String altVarchar3;
	private Calendar altDate1;
	private Calendar altDate2;
	private Calendar altDate3;
	private Bbank bbank;
	private Ckt ckt;
	private User user;
	public static Cust getInstance(int planyear, int custId)throws java.sql.SQLException{
		return getInstance(planyear, custId, true);
	}
	public static Cust getInstance(int planyear, int custId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, custId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, custId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Cust o = null;
		if(cache != null && cache.contains(Cust.class, pk))
			o = em.find(Cust.class, pk);
		if(o==null && getAICache().contains(Cust.class, pk))
			o = getAICache().find(Cust.class, pk);
		if(o==null && fetch)
			o = em.find(Cust.class, pk);
		if(o==null && fetch && Cust.class.getAnnotation(AutoInsertable.class) != null){
			o = new Cust(planyear, custId);
			getAICache().cache(Cust.class, o);
		}
		return o;
	}
	public static Collection<Cust> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Cust> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Cust> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Cust o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Cust> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Cust> tq = em.createQuery(jpql,Cust.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Cust> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Cust> tq = em.createNamedQuery(name,Cust.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CustDAO(){}
	public CustDAO(int planyear, int custId){
		this.planyear=planyear;
		this.custId=custId;
	}
	public CustDAO(CustDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(CustDAO orig){
		this.bbankSubId=orig.getBbankSubId();
		this.cktId=orig.getCktId();
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.address=orig.getAddress();
		this.kvar=orig.getKvar();
		this.kw=orig.getKw();
		this.startDate=orig.getStartDate();
		this.endDate=orig.getEndDate();
		this.note=orig.getNote();
		this.creatorUsernameId=orig.getCreatorUsernameId();
		this.createdDate=orig.getCreatedDate();
		this.aDp=orig.getADp();
		this.bDp=orig.getBDp();
		this.cDp=orig.getCDp();
		this.nDp=orig.getNDp();
		this.mwDp=orig.getMwDp();
		this.mvarDp=orig.getMvarDp();
		this.kvDp=orig.getKvDp();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altVarchar1=orig.getAltVarchar1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altDate1=orig.getAltDate1();
		this.altDate2=orig.getAltDate2();
		this.altDate3=orig.getAltDate3();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, custId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI920_SEQ",sequenceName="MDI920_SEQ")
	@Column(name="CUST_ID",nullable=false,length=9)
	public int getCustId(){
		return custId;
	}
	public void setCustId(int custId) throws java.sql.SQLException{
		if(isSame(custId, getCustId()))return;
		int oldValue = getCustId();
		this.custId=custId;
		setProperty("CUST_ID", custId, oldValue);
	}
	@Column(name="BBANK_SUB_ID",nullable=false,length=9)
	public int getBbankSubId(){
		return bbankSubId;
	}
	public void setBbankSubId(int bbankSubId) throws java.sql.SQLException{
		if(isSame(bbankSubId, getBbankSubId()))return;
		int oldValue = getBbankSubId();
		this.bbankSubId=bbankSubId;
		setProperty("BBANK_SUB_ID", bbankSubId, oldValue);
		bbank=null;
	}
	@Column(name="CKT_ID",nullable=true,length=9)
	public int getCktId(){
		return cktId;
	}
	public void setCktId(int cktId) throws java.sql.SQLException{
		if(isSame(cktId, getCktId()))return;
		int oldValue = getCktId();
		this.cktId=cktId;
		setProperty("CKT_ID", cktId, oldValue);
		ckt=null;
	}
	@Column(name="NAME",nullable=false,length=32)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="ADDRESS",nullable=true,length=128)
	public String getAddress(){
		return address;
	}
	public void setAddress(String address) throws java.sql.SQLException{
		if(isSame(address, getAddress()))return;
		String oldValue = getAddress();
		this.address=address;
		setProperty("ADDRESS", address, oldValue);
	}
	@Column(name="KVAR",nullable=true,length=24)
	public double getKvar(){
		return kvar;
	}
	public void setKvar(double kvar) throws java.sql.SQLException{
		if(isSame(kvar, getKvar()))return;
		double oldValue = getKvar();
		this.kvar=kvar;
		setProperty("KVAR", kvar, oldValue);
	}
	@Column(name="KW",nullable=true,length=24)
	public double getKw(){
		return kw;
	}
	public void setKw(double kw) throws java.sql.SQLException{
		if(isSame(kw, getKw()))return;
		double oldValue = getKw();
		this.kw=kw;
		setProperty("KW", kw, oldValue);
	}
	@Column(name="START_DATE",nullable=true,length=7)
	public Calendar getStartDate(){
		return startDate;
	}
	public void setStartDate(Calendar startDate) throws java.sql.SQLException{
		if(isSame(startDate, getStartDate()))return;
		Calendar oldValue = getStartDate();
		this.startDate=startDate;
		setProperty("START_DATE", startDate, oldValue);
	}
	@Column(name="END_DATE",nullable=true,length=7)
	public Calendar getEndDate(){
		return endDate;
	}
	public void setEndDate(Calendar endDate) throws java.sql.SQLException{
		if(isSame(endDate, getEndDate()))return;
		Calendar oldValue = getEndDate();
		this.endDate=endDate;
		setProperty("END_DATE", endDate, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="CREATOR_USERNAME_ID",nullable=true,length=9)
	public int getCreatorUsernameId(){
		return creatorUsernameId;
	}
	public void setCreatorUsernameId(int creatorUsernameId) throws java.sql.SQLException{
		if(isSame(creatorUsernameId, getCreatorUsernameId()))return;
		int oldValue = getCreatorUsernameId();
		this.creatorUsernameId=creatorUsernameId;
		setProperty("CREATOR_USERNAME_ID", creatorUsernameId, oldValue);
		user=null;
	}
	@Column(name="CREATED_DATE",nullable=true,length=7)
	public Calendar getCreatedDate(){
		return createdDate;
	}
	public void setCreatedDate(Calendar createdDate) throws java.sql.SQLException{
		if(isSame(createdDate, getCreatedDate()))return;
		Calendar oldValue = getCreatedDate();
		this.createdDate=createdDate;
		setProperty("CREATED_DATE", createdDate, oldValue);
	}
	@Column(name="A_DP",nullable=true,length=64)
	public String getADp(){
		return aDp;
	}
	public void setADp(String aDp) throws java.sql.SQLException{
		if(isSame(aDp, getADp()))return;
		String oldValue = getADp();
		this.aDp=aDp;
		setProperty("A_DP", aDp, oldValue);
	}
	@Column(name="B_DP",nullable=true,length=64)
	public String getBDp(){
		return bDp;
	}
	public void setBDp(String bDp) throws java.sql.SQLException{
		if(isSame(bDp, getBDp()))return;
		String oldValue = getBDp();
		this.bDp=bDp;
		setProperty("B_DP", bDp, oldValue);
	}
	@Column(name="C_DP",nullable=true,length=64)
	public String getCDp(){
		return cDp;
	}
	public void setCDp(String cDp) throws java.sql.SQLException{
		if(isSame(cDp, getCDp()))return;
		String oldValue = getCDp();
		this.cDp=cDp;
		setProperty("C_DP", cDp, oldValue);
	}
	@Column(name="N_DP",nullable=true,length=64)
	public String getNDp(){
		return nDp;
	}
	public void setNDp(String nDp) throws java.sql.SQLException{
		if(isSame(nDp, getNDp()))return;
		String oldValue = getNDp();
		this.nDp=nDp;
		setProperty("N_DP", nDp, oldValue);
	}
	@Column(name="MW_DP",nullable=true,length=64)
	public String getMwDp(){
		return mwDp;
	}
	public void setMwDp(String mwDp) throws java.sql.SQLException{
		if(isSame(mwDp, getMwDp()))return;
		String oldValue = getMwDp();
		this.mwDp=mwDp;
		setProperty("MW_DP", mwDp, oldValue);
	}
	@Column(name="MVAR_DP",nullable=true,length=64)
	public String getMvarDp(){
		return mvarDp;
	}
	public void setMvarDp(String mvarDp) throws java.sql.SQLException{
		if(isSame(mvarDp, getMvarDp()))return;
		String oldValue = getMvarDp();
		this.mvarDp=mvarDp;
		setProperty("MVAR_DP", mvarDp, oldValue);
	}
	@Column(name="KV_DP",nullable=true,length=64)
	public String getKvDp(){
		return kvDp;
	}
	public void setKvDp(String kvDp) throws java.sql.SQLException{
		if(isSame(kvDp, getKvDp()))return;
		String oldValue = getKvDp();
		this.kvDp=kvDp;
		setProperty("KV_DP", kvDp, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_DATE2",nullable=true,length=7)
	public Calendar getAltDate2(){
		return altDate2;
	}
	public void setAltDate2(Calendar altDate2) throws java.sql.SQLException{
		if(isSame(altDate2, getAltDate2()))return;
		Calendar oldValue = getAltDate2();
		this.altDate2=altDate2;
		setProperty("ALT_DATE2", altDate2, oldValue);
	}
	@Column(name="ALT_DATE3",nullable=true,length=7)
	public Calendar getAltDate3(){
		return altDate3;
	}
	public void setAltDate3(Calendar altDate3) throws java.sql.SQLException{
		if(isSame(altDate3, getAltDate3()))return;
		Calendar oldValue = getAltDate3();
		this.altDate3=altDate3;
		setProperty("ALT_DATE3", altDate3, oldValue);
	}
	public Bbank getBbank()throws java.sql.SQLException{
		if(bbank==null)
			bbank=Bbank.getInstance(getPlanyear(), getBbankSubId());
		return bbank;
	}
	public void setBbank(Bbank bbank)throws java.sql.SQLException{
		setBbankSubId(bbank==null?0:bbank.getBbankSubId());
		this.bbank=bbank;
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getCreatorUsernameId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setCreatorUsernameId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public Cust copy()throws java.sql.SQLException{
		Cust cp = new Cust((Cust)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CustDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CustDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getCustId(),o.getCustId())) diffs.add("CUST_ID");
		if(!isSame(getBbankSubId(),o.getBbankSubId())) diffs.add("BBANK_SUB_ID");
		if(!isSame(getCktId(),o.getCktId())) diffs.add("CKT_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getAddress(),o.getAddress())) diffs.add("ADDRESS");
		if(!isSame(getKvar(),o.getKvar())) diffs.add("KVAR");
		if(!isSame(getKw(),o.getKw())) diffs.add("KW");
		if(!isSame(getStartDate(),o.getStartDate())) diffs.add("START_DATE");
		if(!isSame(getEndDate(),o.getEndDate())) diffs.add("END_DATE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getCreatorUsernameId(),o.getCreatorUsernameId())) diffs.add("CREATOR_USERNAME_ID");
		if(!isSame(getCreatedDate(),o.getCreatedDate())) diffs.add("CREATED_DATE");
		if(!isSame(getADp(),o.getADp())) diffs.add("A_DP");
		if(!isSame(getBDp(),o.getBDp())) diffs.add("B_DP");
		if(!isSame(getCDp(),o.getCDp())) diffs.add("C_DP");
		if(!isSame(getNDp(),o.getNDp())) diffs.add("N_DP");
		if(!isSame(getMwDp(),o.getMwDp())) diffs.add("MW_DP");
		if(!isSame(getMvarDp(),o.getMvarDp())) diffs.add("MVAR_DP");
		if(!isSame(getKvDp(),o.getKvDp())) diffs.add("KV_DP");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltDate2(),o.getAltDate2())) diffs.add("ALT_DATE2");
		if(!isSame(getAltDate3(),o.getAltDate3())) diffs.add("ALT_DATE3");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
