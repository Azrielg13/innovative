/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.javadna;

import java.util.Calendar;


/**
 * The Class HistoryRead.
 * 
 * @author Distribution Staff Engineering
 */
public class HistoryRead implements Comparable<Object> {
	
	/** The value. */
	private double value;
	
	/** The time. */
	private String time;
	
	/** The status. */
	private String status;
	
	/**
	 * The Constructor.
	 * 
	 * @param time the time
	 * @param status the status
	 * @param value the value
	 */
	public HistoryRead(double value, String time, String status){
		this.value = value;
		this.time = time;
		this.status = status;
	}
	
	/**
	 * Gets the value.
	 * 
	 * @return the value
	 */
	public double getValue(){
		return value;
	}
	
	/**
	 * Gets the time.
	 * 
	 * @return the time
	 */
	public String getTime(){
		return time;
	}
	
	public Calendar getCalendar(){
		if(getTime()!=null && getTime().length()>0){
			Calendar cal = Calendar.getInstance();
			int year=0;
			try{
				year = Integer.parseInt(getTime().substring(6,8));
			}
			catch(Exception e){
				return null;
			}
			if(year < 80)
				year += 2000;
			else
				year += 1900;
			cal.set(Calendar.YEAR, year);
			cal.set(Calendar.MONTH, Integer.parseInt(getTime().substring(0,2))-1);
			cal.set(Calendar.DAY_OF_MONTH, Integer.parseInt(getTime().substring(3,5)));
			cal.set(Calendar.HOUR_OF_DAY,Integer.parseInt(getTime().substring(9,11)));
			cal.set(Calendar.MINUTE,Integer.parseInt(getTime().substring(12,14)));
			cal.set(Calendar.SECOND,Integer.parseInt(getTime().substring(15,17)));
			cal.set(Calendar.MILLISECOND, 0);
			return cal;
		}
		return null;
	}
	
	
	public String getJustDate(){
		return getTime().substring(0,8).trim();
	}
	
	public String getJustTime(){
		return getTime().substring(8,17).trim();
	}
	
	/**
	 * Gets the status.
	 * 
	 * @return the status
	 */
	public String getStatus(){
		return status;
	}
	
	public String toString(){
		return ""+getTime()+","+getValue();
	}

	public int compareTo(Object o) {
		if(getValue()>((HistoryRead)o).getValue())
			return -1;
//		if(getValue()<((HistoryRead)o).getValue())
//			return 1;
		return 1;
	}
}