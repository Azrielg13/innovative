package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.SceProj;
import com.sce.esp.object.model.SceProjRev;
import com.sce.esp.object.model.SceSimAlt;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SceProjDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCE_PROJ_ID};
	public static enum PROPERTY{SCE_PROJ_ID,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_VARCHAR1,ALT_VARCHAR2,ALT_VARCHAR3,ALT_DATE1,ALT_DATE2,ALT_DATE3,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SCEPROJID_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTDATE2_LIMIT = 7;
	public final static int ALTDATE3_LIMIT = 7;
	private int sceProjId;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private String altVarchar1;
	private String altVarchar2;
	private String altVarchar3;
	private Calendar altDate1;
	private Calendar altDate2;
	private Calendar altDate3;
	private Collection<SceProjRev> sceProjRevs;
	private Collection<SceSimAlt> sceSimAlts;
	public static SceProj getInstance(int sceProjId)throws java.sql.SQLException{
		return getInstance(sceProjId, true);
	}
	public static SceProj getInstance(int sceProjId, boolean fetch)throws java.sql.SQLException{
		if(isNull(sceProjId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(sceProjId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProj o = null;
		if(cache != null && cache.contains(SceProj.class, pk))
			o = em.find(SceProj.class, pk);
		if(o==null && getAICache().contains(SceProj.class, pk))
			o = getAICache().find(SceProj.class, pk);
		if(o==null && fetch)
			o = em.find(SceProj.class, pk);
		if(o==null && fetch && SceProj.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProj(sceProjId);
			getAICache().cache(SceProj.class, o);
		}
		return o;
	}
	public static Collection<SceProj> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProj> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProj> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProj o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProj> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProj> tq = em.createQuery(jpql,SceProj.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProj> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProj> tq = em.createNamedQuery(name,SceProj.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjDAO(){}
	public SceProjDAO(int sceProjId){
		this.sceProjId=sceProjId;
	}
	public SceProjDAO(SceProjDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SceProjDAO orig){
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altVarchar1=orig.getAltVarchar1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altDate1=orig.getAltDate1();
		this.altDate2=orig.getAltDate2();
		this.altDate3=orig.getAltDate3();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{sceProjId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS35_SEQ",sequenceName="MDIS35_SEQ")
	@Column(name="SCE_PROJ_ID",nullable=false,length=9)
	public int getSceProjId(){
		return sceProjId;
	}
	public void setSceProjId(int sceProjId) throws java.sql.SQLException{
		if(isSame(sceProjId, getSceProjId()))return;
		int oldValue = getSceProjId();
		this.sceProjId=sceProjId;
		setProperty("SCE_PROJ_ID", sceProjId, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_DATE2",nullable=true,length=7)
	public Calendar getAltDate2(){
		return altDate2;
	}
	public void setAltDate2(Calendar altDate2) throws java.sql.SQLException{
		if(isSame(altDate2, getAltDate2()))return;
		Calendar oldValue = getAltDate2();
		this.altDate2=altDate2;
		setProperty("ALT_DATE2", altDate2, oldValue);
	}
	@Column(name="ALT_DATE3",nullable=true,length=7)
	public Calendar getAltDate3(){
		return altDate3;
	}
	public void setAltDate3(Calendar altDate3) throws java.sql.SQLException{
		if(isSame(altDate3, getAltDate3()))return;
		Calendar oldValue = getAltDate3();
		this.altDate3=altDate3;
		setProperty("ALT_DATE3", altDate3, oldValue);
	}
	public Collection<SceProjRev> getSceProjRevs()throws java.sql.SQLException{
		if(isNewInstance() || sceProjRevs != null){
			if(sceProjRevs == null)
				sceProjRevs = new TreeSet<SceProjRev>();
			return sceProjRevs;
		}
		return SceProjRev.getNamedCollection("findBySceProj",getSceProjId());
	}
	public void addSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		sceProjRev.setSceProj((SceProj)this);
		if(isNewInstance() || sceProjRevs != null)
			getSceProjRevs().add(sceProjRev);
		else
			sceProjRev.insert();
	}
	public void removeSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		if(isNewInstance() || sceProjRevs != null)
			getSceProjRevs().remove(sceProjRev);
		else
			sceProjRev.delete();
	}
	public Collection<SceSimAlt> getSceSimAlts()throws java.sql.SQLException{
		if(isNewInstance() || sceSimAlts != null){
			if(sceSimAlts == null)
				sceSimAlts = new TreeSet<SceSimAlt>();
			return sceSimAlts;
		}
		return SceSimAlt.getNamedCollection("findBySceProj",getSceProjId());
	}
	public void addSceSimAlt(SceSimAlt sceSimAlt)throws java.sql.SQLException{
		sceSimAlt.setSceProj((SceProj)this);
		if(isNewInstance() || sceSimAlts != null)
			getSceSimAlts().add(sceSimAlt);
		else
			sceSimAlt.insert();
	}
	public void removeSceSimAlt(SceSimAlt sceSimAlt)throws java.sql.SQLException{
		if(isNewInstance() || sceSimAlts != null)
			getSceSimAlts().remove(sceSimAlt);
		else
			sceSimAlt.delete();
	}
	public SceProj copy()throws java.sql.SQLException{
		SceProj cp = new SceProj((SceProj)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(SceProjRev child:getSceProjRevs())
			cp.addSceProjRev(child.copy());
		for(SceSimAlt child:getSceSimAlts())
			cp.addSceSimAlt(child.copy());
	}
	public Vector<String> getDifference(SceProjDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getSceProjId(),o.getSceProjId())) diffs.add("SCE_PROJ_ID");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltDate2(),o.getAltDate2())) diffs.add("ALT_DATE2");
		if(!isSame(getAltDate3(),o.getAltDate3())) diffs.add("ALT_DATE3");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(sceProjRevs != null){
			for(SceProjRev sceProjRev:getSceProjRevs()){
				if(sceProjRev.isNewInstance())
					sceProjRev.setSceProj((SceProj)this);
				sceProjRev.insert();
			}
			sceProjRevs = null;
		}
		if(sceSimAlts != null){
			for(SceSimAlt sceSimAlt:getSceSimAlts()){
				if(sceSimAlt.isNewInstance())
					sceSimAlt.setSceProj((SceProj)this);
				sceSimAlt.insert();
			}
			sceSimAlts = null;
		}
	}
}
