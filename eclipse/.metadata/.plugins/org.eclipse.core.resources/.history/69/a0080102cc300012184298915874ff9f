package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.ProjElem;
import com.sce.esp.object.model.ProjElemCost;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.SubUnitCost;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ProjElemCostDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,COST_ID};
	public static enum PROPERTY{PLANYEAR,SIM_ID,COST_ID,PROJ_ID,ELEM_ID,STAGE,TITLE,SCOPE,EQUIP_ID,USE_CALC,PWEE_ID,WO,SAP_ORDER_NUM,SAP_WBS_ID,SAP_WBS_SEQ,PROPOSED_OD,APPROVED_OD,OD_NOTE,NOTE,FERC_FUNDING,ESTIMATE_BY,SENT_TS,RECEIVED_TS,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int COSTID_LIMIT = 9;
	public final static int PROJID_LIMIT = 9;
	public final static int ELEMID_LIMIT = 9;
	public final static int STAGE_LIMIT = 2;
	public final static int TITLE_LIMIT = 64;
	public final static int SCOPE_LIMIT = 3072;
	public final static int EQUIPID_LIMIT = 9;
	public final static int USECALC_LIMIT = 1;
	public final static int PWEEID_LIMIT = 20;
	public final static int WO_LIMIT = 20;
	public final static int SAPORDERNUM_LIMIT = 32;
	public final static int SAPWBSID_LIMIT = 9;
	public final static int SAPWBSSEQ_LIMIT = 9;
	public final static int PROPOSEDOD_LIMIT = 7;
	public final static int APPROVEDOD_LIMIT = 7;
	public final static int ODNOTE_LIMIT = 512;
	public final static int NOTE_LIMIT = 1024;
	public final static int FERCFUNDING_LIMIT = 24;
	public final static int ESTIMATEBY_LIMIT = 256;
	public final static int SENTTS_LIMIT = 7;
	public final static int RECEIVEDTS_LIMIT = 7;
	private ProjElemCost ptr;
	private int planyear;
	private int simId;
	private int costId;
	private int projId;
	private int elemId;
	private int stage;
	private String title;
	private String scope;
	private int equipId;
	private boolean useCalc;
	private String pweeId;
	private String wo;
	private String sapOrderNum;
	private int sapWbsId;
	private int sapWbsSeq;
	private Calendar proposedOd;
	private Calendar approvedOd;
	private String odNote;
	private String note;
	private double fercFunding;
	private String estimateBy;
	private Calendar sentTs;
	private Calendar receivedTs;
	private ProjElem projElem;
	private SubUnitCost subUnitCost;
	public static ProjElemCost getInstance(int planyear, int simId, int costId)throws java.sql.SQLException{
		return getInstance(planyear, simId, costId, true);
	}
	public static ProjElemCost getInstance(int planyear, int simId, int costId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, costId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, costId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProjElemCost o = null;
		if(cache != null && cache.contains(ProjElemCost.class, pk))
			o = em.find(ProjElemCost.class, pk);
		if(o==null && getAICache().contains(ProjElemCost.class, pk))
			o = getAICache().find(ProjElemCost.class, pk);
		if(o==null && fetch)
			o = em.find(ProjElemCost.class, pk);
		if(o==null && fetch && ProjElemCost.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProjElemCost(planyear, simId, costId);
			getAICache().cache(ProjElemCost.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<ProjElemCost> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProjElemCost> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProjElemCost> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProjElemCost o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProjElemCost> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjElemCost> tq = em.createQuery(jpql,ProjElemCost.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProjElemCost> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjElemCost> tq = em.createNamedQuery(name,ProjElemCost.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProjElemCostDAO(){}
	public ProjElemCostDAO(int planyear, int simId, int costId){
		this.planyear=planyear;
		this.simId=simId;
		this.costId=costId;
	}
	public ProjElemCostDAO(ProjElemCostDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		copyFrom(orig);
	}
	public void copyFrom(ProjElemCostDAO orig){
		this.projId=orig.getProjId();
		this.elemId=orig.getElemId();
		this.stage=orig.getStage();
		this.title=orig.getTitle();
		this.scope=orig.getScope();
		this.equipId=orig.getEquipId();
		this.useCalc=orig.isUseCalc();
		this.pweeId=orig.getPweeId();
		this.wo=orig.getWo();
		this.sapOrderNum=orig.getSapOrderNum();
		this.sapWbsId=orig.getSapWbsId();
		this.sapWbsSeq=orig.getSapWbsSeq();
		this.proposedOd=orig.getProposedOd();
		this.approvedOd=orig.getApprovedOd();
		this.odNote=orig.getOdNote();
		this.note=orig.getNote();
		this.fercFunding=orig.getFercFunding();
		this.estimateBy=orig.getEstimateBy();
		this.sentTs=orig.getSentTs();
		this.receivedTs=orig.getReceivedTs();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, costId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public ProjElemCost getPtr(){
		return ptr;
	}
	public void setPtr(ProjElemCost ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getCostId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI560_SEQ",sequenceName="MDI560_SEQ")
	@Column(name="COST_ID",nullable=false,length=9)
	public int getCostId(){
		return costId;
	}
	public void setCostId(int costId) throws java.sql.SQLException{
		if(isSame(costId, getCostId()))return;
		int oldValue = getCostId();
		this.costId=costId;
		setProperty("COST_ID", costId, oldValue);
	}
	@Column(name="PROJ_ID",nullable=false,length=9)
	public int getProjId(){
		if(getPtr()!=null)
			return getPtr().getProjId();
		return projId;
	}
	public void setProjId(int projId) throws java.sql.SQLException{
		if(isSame(projId, getProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getProjId();
		this.projId=projId;
		setProperty("PROJ_ID", projId, oldValue);
	}
	@Column(name="ELEM_ID",nullable=false,length=9)
	public int getElemId(){
		if(getPtr()!=null)
			return getPtr().getElemId();
		return elemId;
	}
	public void setElemId(int elemId) throws java.sql.SQLException{
		if(isSame(elemId, getElemId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getElemId();
		this.elemId=elemId;
		setProperty("ELEM_ID", elemId, oldValue);
		projElem=null;
	}
	@Column(name="STAGE",nullable=false,length=2)
	public int getStage(){
		if(getPtr()!=null)
			return getPtr().getStage();
		return stage;
	}
	public void setStage(int stage) throws java.sql.SQLException{
		if(isSame(stage, getStage()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getStage();
		this.stage=stage;
		setProperty("STAGE", stage, oldValue);
	}
	@Column(name="TITLE",nullable=true,length=64)
	public String getTitle(){
		if(getPtr()!=null)
			return getPtr().getTitle();
		return title;
	}
	public void setTitle(String title) throws java.sql.SQLException{
		if(isSame(title, getTitle()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getTitle();
		this.title=title;
		setProperty("TITLE", title, oldValue);
	}
	@Column(name="SCOPE",nullable=true,length=3072)
	public String getScope(){
		if(getPtr()!=null)
			return getPtr().getScope();
		return scope;
	}
	public void setScope(String scope) throws java.sql.SQLException{
		if(isSame(scope, getScope()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getScope();
		this.scope=scope;
		setProperty("SCOPE", scope, oldValue);
	}
	@Column(name="EQUIP_ID",nullable=true,length=9)
	public int getEquipId(){
		if(getPtr()!=null)
			return getPtr().getEquipId();
		return equipId;
	}
	public void setEquipId(int equipId) throws java.sql.SQLException{
		if(isSame(equipId, getEquipId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getEquipId();
		this.equipId=equipId;
		setProperty("EQUIP_ID", equipId, oldValue);
		subUnitCost=null;
	}
	@Column(name="USE_CALC",nullable=true,length=1)
	public boolean isUseCalc(){
		if(getPtr()!=null)
			return getPtr().isUseCalc();
		return useCalc;
	}
	public void setUseCalc(boolean useCalc) throws java.sql.SQLException{
		if(isSame(useCalc, isUseCalc()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUseCalc();
		this.useCalc=useCalc;
		setProperty("USE_CALC", useCalc, oldValue);
	}
	@Column(name="PWEE_ID",nullable=true,length=20)
	public String getPweeId(){
		if(getPtr()!=null)
			return getPtr().getPweeId();
		return pweeId;
	}
	public void setPweeId(String pweeId) throws java.sql.SQLException{
		if(isSame(pweeId, getPweeId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getPweeId();
		this.pweeId=pweeId;
		setProperty("PWEE_ID", pweeId, oldValue);
	}
	@Column(name="WO",nullable=true,length=20)
	public String getWo(){
		if(getPtr()!=null)
			return getPtr().getWo();
		return wo;
	}
	public void setWo(String wo) throws java.sql.SQLException{
		if(isSame(wo, getWo()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getWo();
		this.wo=wo;
		setProperty("WO", wo, oldValue);
	}
	@Column(name="SAP_ORDER_NUM",nullable=true,length=32)
	public String getSapOrderNum(){
		if(getPtr()!=null)
			return getPtr().getSapOrderNum();
		return sapOrderNum;
	}
	public void setSapOrderNum(String sapOrderNum) throws java.sql.SQLException{
		if(isSame(sapOrderNum, getSapOrderNum()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getSapOrderNum();
		this.sapOrderNum=sapOrderNum;
		setProperty("SAP_ORDER_NUM", sapOrderNum, oldValue);
	}
	@Column(name="SAP_WBS_ID",nullable=true,length=9)
	public int getSapWbsId(){
		if(getPtr()!=null)
			return getPtr().getSapWbsId();
		return sapWbsId;
	}
	public void setSapWbsId(int sapWbsId) throws java.sql.SQLException{
		if(isSame(sapWbsId, getSapWbsId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSapWbsId();
		this.sapWbsId=sapWbsId;
		setProperty("SAP_WBS_ID", sapWbsId, oldValue);
	}
	@Column(name="SAP_WBS_SEQ",nullable=true,length=9)
	public int getSapWbsSeq(){
		if(getPtr()!=null)
			return getPtr().getSapWbsSeq();
		return sapWbsSeq;
	}
	public void setSapWbsSeq(int sapWbsSeq) throws java.sql.SQLException{
		if(isSame(sapWbsSeq, getSapWbsSeq()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSapWbsSeq();
		this.sapWbsSeq=sapWbsSeq;
		setProperty("SAP_WBS_SEQ", sapWbsSeq, oldValue);
	}
	@Column(name="PROPOSED_OD",nullable=true,length=7)
	public Calendar getProposedOd(){
		if(getPtr()!=null)
			return getPtr().getProposedOd();
		return proposedOd;
	}
	public void setProposedOd(Calendar proposedOd) throws java.sql.SQLException{
		if(isSame(proposedOd, getProposedOd()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getProposedOd();
		this.proposedOd=proposedOd;
		setProperty("PROPOSED_OD", proposedOd, oldValue);
	}
	@Column(name="APPROVED_OD",nullable=true,length=7)
	public Calendar getApprovedOd(){
		if(getPtr()!=null)
			return getPtr().getApprovedOd();
		return approvedOd;
	}
	public void setApprovedOd(Calendar approvedOd) throws java.sql.SQLException{
		if(isSame(approvedOd, getApprovedOd()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getApprovedOd();
		this.approvedOd=approvedOd;
		setProperty("APPROVED_OD", approvedOd, oldValue);
	}
	@Column(name="OD_NOTE",nullable=true,length=512)
	public String getOdNote(){
		if(getPtr()!=null)
			return getPtr().getOdNote();
		return odNote;
	}
	public void setOdNote(String odNote) throws java.sql.SQLException{
		if(isSame(odNote, getOdNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getOdNote();
		this.odNote=odNote;
		setProperty("OD_NOTE", odNote, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=1024)
	public String getNote(){
		if(getPtr()!=null)
			return getPtr().getNote();
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="FERC_FUNDING",nullable=true,length=24)
	public double getFercFunding(){
		if(getPtr()!=null)
			return getPtr().getFercFunding();
		return fercFunding;
	}
	public void setFercFunding(double fercFunding) throws java.sql.SQLException{
		if(isSame(fercFunding, getFercFunding()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getFercFunding();
		this.fercFunding=fercFunding;
		setProperty("FERC_FUNDING", fercFunding, oldValue);
	}
	@Column(name="ESTIMATE_BY",nullable=true,length=256)
	public String getEstimateBy(){
		if(getPtr()!=null)
			return getPtr().getEstimateBy();
		return estimateBy;
	}
	public void setEstimateBy(String estimateBy) throws java.sql.SQLException{
		if(isSame(estimateBy, getEstimateBy()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getEstimateBy();
		this.estimateBy=estimateBy;
		setProperty("ESTIMATE_BY", estimateBy, oldValue);
	}
	@Column(name="SENT_TS",nullable=true,length=7)
	public Calendar getSentTs(){
		if(getPtr()!=null)
			return getPtr().getSentTs();
		return sentTs;
	}
	public void setSentTs(Calendar sentTs) throws java.sql.SQLException{
		if(isSame(sentTs, getSentTs()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getSentTs();
		this.sentTs=sentTs;
		setProperty("SENT_TS", sentTs, oldValue);
	}
	@Column(name="RECEIVED_TS",nullable=true,length=7)
	public Calendar getReceivedTs(){
		if(getPtr()!=null)
			return getPtr().getReceivedTs();
		return receivedTs;
	}
	public void setReceivedTs(Calendar receivedTs) throws java.sql.SQLException{
		if(isSame(receivedTs, getReceivedTs()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getReceivedTs();
		this.receivedTs=receivedTs;
		setProperty("RECEIVED_TS", receivedTs, oldValue);
	}
	public ProjElem getProjElem()throws java.sql.SQLException{
		if(projElem==null)
			projElem=ProjElem.getInstance(getPlanyear(), getSimId(), getProjId(), getElemId());
		return projElem;
	}
	public void setProjElem(ProjElem projElem)throws java.sql.SQLException{
		setElemId(projElem==null?0:projElem.getElemId());
		this.projElem=projElem;
	}
	public SubUnitCost getSubUnitCost()throws java.sql.SQLException{
		if(subUnitCost==null)
			subUnitCost=SubUnitCost.getInstance(getPlanyear(), getEquipId());
		return subUnitCost;
	}
	public void setSubUnitCost(SubUnitCost subUnitCost)throws java.sql.SQLException{
		setEquipId(subUnitCost==null?0:subUnitCost.getEquipId());
		this.subUnitCost=subUnitCost;
	}
	public ProjElemCost copy()throws java.sql.SQLException{
		ProjElemCost cp = new ProjElemCost((ProjElemCost)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProjElemCostDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ProjElemCostDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getCostId(),o.getCostId())) diffs.add("COST_ID");
		if(!isSame(getProjId(),o.getProjId())) diffs.add("PROJ_ID");
		if(!isSame(getElemId(),o.getElemId())) diffs.add("ELEM_ID");
		if(!isSame(getStage(),o.getStage())) diffs.add("STAGE");
		if(!isSame(getTitle(),o.getTitle())) diffs.add("TITLE");
		if(!isSame(getScope(),o.getScope())) diffs.add("SCOPE");
		if(!isSame(getEquipId(),o.getEquipId())) diffs.add("EQUIP_ID");
		if(!isSame(isUseCalc(),o.isUseCalc())) diffs.add("USE_CALC");
		if(!isSame(getPweeId(),o.getPweeId())) diffs.add("PWEE_ID");
		if(!isSame(getWo(),o.getWo())) diffs.add("WO");
		if(!isSame(getSapOrderNum(),o.getSapOrderNum())) diffs.add("SAP_ORDER_NUM");
		if(!isSame(getSapWbsId(),o.getSapWbsId())) diffs.add("SAP_WBS_ID");
		if(!isSame(getSapWbsSeq(),o.getSapWbsSeq())) diffs.add("SAP_WBS_SEQ");
		if(!isSame(getProposedOd(),o.getProposedOd())) diffs.add("PROPOSED_OD");
		if(!isSame(getApprovedOd(),o.getApprovedOd())) diffs.add("APPROVED_OD");
		if(!isSame(getOdNote(),o.getOdNote())) diffs.add("OD_NOTE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getFercFunding(),o.getFercFunding())) diffs.add("FERC_FUNDING");
		if(!isSame(getEstimateBy(),o.getEstimateBy())) diffs.add("ESTIMATE_BY");
		if(!isSame(getSentTs(),o.getSentTs())) diffs.add("SENT_TS");
		if(!isSame(getReceivedTs(),o.getReceivedTs())) diffs.add("RECEIVED_TS");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
