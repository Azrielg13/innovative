/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.jortho;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.zip.InflaterInputStream;

/**
 * A implementation of an Iterator which split a large text into lines. It is used to read words lists.
 * @author Volker Berlin
 */
public class WordIterator implements Iterator<String> {

    private BufferedReader input;
    private String word;
    
    /**
     * Load the directory from a compressed list of words with UTF8 encoding. The words must be delimmited with
     * newlines.
     * 
     * @param filename
     *            the name of the file
     * @throws IOException
     *             If an I/O error occurs.
     * @throws NullPointerException
     *             If filename is null.
     */
    public WordIterator(InputStream input ) throws IOException {
        this( createInflaterStream(input), "UTF8" );
    }
    
    /**
     * Load the directory from plain a list of words. The words must be delimmited with newlines.
     * 
     * @param stream
     *            a InputStream with words
     * @param charsetName
     *            the name of a codepage for example "UTF8" or "Cp1252"
     * @throws IOException
     *             If an I/O error occurs.
     * @throws NullPointerException
     *             If stream or charsetName is null.
     */
    public WordIterator( InputStream stream, String charsetName ) throws IOException {
       this( new InputStreamReader( stream, charsetName ) );
    }

    /**
     * Load the directory from plain a list of words. The words must be delimmited with newlines.
     * 
     * @param reader
     *            a Reader with words
     * @throws IOException
     *             If an I/O error occurs.
     * @throws NullPointerException
     *             If reader is null.
     */
    public WordIterator( Reader reader ) throws IOException {
        input = new BufferedReader( reader );
        word = input.readLine();
    }
    
    /**
     * Create a plain stream from a compressed file.
     * @param filename the file of a JOrtho dictionary
     * @return the stream
     * @throws IOException If an I/O error occurs.
     */
    private static InputStream createInflaterStream( InputStream input ) throws IOException{
//        URLConnection conn = filename.openConnection();
//        conn.setReadTimeout( 5000 );
//        InputStream input = conn.getInputStream();
        input = new InflaterInputStream( input );
        return new BufferedInputStream( input );
    }
    
    /**
     * {@inheritDoc}
     */
    public boolean hasNext() {
        return word != null;
    }

    /**
     * {@inheritDoc}
     */
    public String next() {
        if(!hasNext()){
            throw new NoSuchElementException();
        }
        String next = word;
        try {
            word = input.readLine();
            if(word == null){
                input.close();
            }
        } catch( IOException e ) {
            word = null;
            e.printStackTrace();
        }
        return next;
    }

    /**
     * {@inheritDoc}
     */
    public void remove() {
        throw new UnsupportedOperationException();
    }

}
