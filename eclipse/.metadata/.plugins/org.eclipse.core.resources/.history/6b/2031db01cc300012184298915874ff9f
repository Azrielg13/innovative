package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.BbankTie;
import com.sce.esp.object.model.CktTrans;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.SwtProc;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SwtProcDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,PROC_ID};
	public static enum PROPERTY{PLANYEAR,PROC_ID,BBANK_SUB_ID,TIE_ID,SIM_ID,NAME,OP_DATE,NOTE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int PROCID_LIMIT = 9;
	public final static int BBANKSUBID_LIMIT = 9;
	public final static int TIEID_LIMIT = 9;
	public final static int SIMID_LIMIT = 9;
	public final static int NAME_LIMIT = 512;
	public final static int OPDATE_LIMIT = 7;
	public final static int NOTE_LIMIT = 1024;
	private int planyear;
	private int procId;
	private int bbankSubId;
	private int tieId;
	private int simId;
	private String name;
	private Calendar opDate;
	private String note;
	private Collection<CktTrans> cktTranss;
	private Bbank bbank;
	private BbankTie bbankTie;
	public static SwtProc getInstance(int planyear, int procId)throws java.sql.SQLException{
		return getInstance(planyear, procId, true);
	}
	public static SwtProc getInstance(int planyear, int procId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, procId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, procId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SwtProc o = null;
		if(cache != null && cache.contains(SwtProc.class, pk))
			o = em.find(SwtProc.class, pk);
		if(o==null && getAICache().contains(SwtProc.class, pk))
			o = getAICache().find(SwtProc.class, pk);
		if(o==null && fetch)
			o = em.find(SwtProc.class, pk);
		if(o==null && fetch && SwtProc.class.getAnnotation(AutoInsertable.class) != null){
			o = new SwtProc(planyear, procId);
			getAICache().cache(SwtProc.class, o);
		}
		return o;
	}
	public static Collection<SwtProc> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SwtProc> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SwtProc> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SwtProc o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SwtProc> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SwtProc> tq = em.createQuery(jpql,SwtProc.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SwtProc> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SwtProc> tq = em.createNamedQuery(name,SwtProc.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SwtProcDAO(){}
	public SwtProcDAO(int planyear, int procId){
		this.planyear=planyear;
		this.procId=procId;
	}
	public SwtProcDAO(SwtProcDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(SwtProcDAO orig){
		this.bbankSubId=orig.getBbankSubId();
		this.tieId=orig.getTieId();
		this.simId=orig.getSimId();
		this.name=orig.getName();
		this.opDate=orig.getOpDate();
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, procId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI255_SEQ",sequenceName="MDI255_SEQ")
	@Column(name="PROC_ID",nullable=false,length=9)
	public int getProcId(){
		return procId;
	}
	public void setProcId(int procId) throws java.sql.SQLException{
		if(isSame(procId, getProcId()))return;
		int oldValue = getProcId();
		this.procId=procId;
		setProperty("PROC_ID", procId, oldValue);
	}
	@Column(name="BBANK_SUB_ID",nullable=true,length=9)
	public int getBbankSubId(){
		return bbankSubId;
	}
	public void setBbankSubId(int bbankSubId) throws java.sql.SQLException{
		if(isSame(bbankSubId, getBbankSubId()))return;
		int oldValue = getBbankSubId();
		this.bbankSubId=bbankSubId;
		setProperty("BBANK_SUB_ID", bbankSubId, oldValue);
		bbank=null;
	}
	@Column(name="TIE_ID",nullable=true,length=9)
	public int getTieId(){
		return tieId;
	}
	public void setTieId(int tieId) throws java.sql.SQLException{
		if(isSame(tieId, getTieId()))return;
		int oldValue = getTieId();
		this.tieId=tieId;
		setProperty("TIE_ID", tieId, oldValue);
		bbankTie=null;
	}
	@Column(name="SIM_ID",nullable=true,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Column(name="NAME",nullable=true,length=512)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="OP_DATE",nullable=true,length=7)
	public Calendar getOpDate(){
		return opDate;
	}
	public void setOpDate(Calendar opDate) throws java.sql.SQLException{
		if(isSame(opDate, getOpDate()))return;
		Calendar oldValue = getOpDate();
		this.opDate=opDate;
		setProperty("OP_DATE", opDate, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=1024)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public Bbank getBbank()throws java.sql.SQLException{
		if(bbank==null)
			bbank=Bbank.getInstance(getPlanyear(), getBbankSubId());
		return bbank;
	}
	public void setBbank(Bbank bbank)throws java.sql.SQLException{
		setBbankSubId(bbank==null?0:bbank.getBbankSubId());
		this.bbank=bbank;
	}
	public BbankTie getBbankTie()throws java.sql.SQLException{
		if(bbankTie==null)
			bbankTie=BbankTie.getInstance(getPlanyear(), getSimId(), getTieId());
		return bbankTie;
	}
	public void setBbankTie(BbankTie bbankTie)throws java.sql.SQLException{
		setTieId(bbankTie==null?0:bbankTie.getTieId());
		this.bbankTie=bbankTie;
	}
	public Collection<CktTrans> getCktTranss()throws java.sql.SQLException{
		if(isNewInstance() || cktTranss != null){
			if(cktTranss == null)
				cktTranss = new TreeSet<CktTrans>();
			return cktTranss;
		}
		return CktTrans.getNamedCollection("findBySwtProc",getPlanyear(), getProcId());
	}
	public void addCktTrans(CktTrans cktTrans)throws java.sql.SQLException{
		cktTrans.setSwtProc((SwtProc)this);
		if(isNewInstance() || cktTranss != null)
			getCktTranss().add(cktTrans);
		else
			cktTrans.insert();
	}
	public void removeCktTrans(CktTrans cktTrans)throws java.sql.SQLException{
		if(isNewInstance() || cktTranss != null)
			getCktTranss().remove(cktTrans);
		else
			cktTrans.delete();
	}
	public SwtProc copy()throws java.sql.SQLException{
		SwtProc cp = new SwtProc((SwtProc)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SwtProcDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(CktTrans child:getCktTranss())
			cp.addCktTrans(child.copy());
	}
	public Vector<String> getDifference(SwtProcDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getProcId(),o.getProcId())) diffs.add("PROC_ID");
		if(!isSame(getBbankSubId(),o.getBbankSubId())) diffs.add("BBANK_SUB_ID");
		if(!isSame(getTieId(),o.getTieId())) diffs.add("TIE_ID");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getOpDate(),o.getOpDate())) diffs.add("OP_DATE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(cktTranss != null){
			for(CktTrans cktTrans:getCktTranss()){
				if(cktTrans.isNewInstance())
					cktTrans.setSwtProc((SwtProc)this);
				cktTrans.insert();
			}
			cktTranss = null;
		}
	}
}
