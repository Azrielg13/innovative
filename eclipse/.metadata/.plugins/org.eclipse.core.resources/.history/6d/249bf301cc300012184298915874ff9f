package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.GiStep;
import com.sce.esp.object.model.GiStudy;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class GiStepDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,STUDY_ID,SAP_NUM,DUE_DATE,COMPLETE_DATE,LEAD_DEPARTMENT,EXECUTED_DATE,RELEASED_BY_CI,HOURS,PROTECTION_ENG,TECH_PLANNER,COST_ESTIMATE,FIELD_ENGINEER_ID,GC_MANAGER,NOTES,STEP_TYPE_ID,RELEASED_DATE,ALT_DATE1,ALT_VARCHAR1,ALT_INT1};
	public final static int ID_LIMIT = 9;
	public final static int STUDYID_LIMIT = 9;
	public final static int SAPNUM_LIMIT = 100;
	public final static int DUEDATE_LIMIT = 7;
	public final static int COMPLETEDATE_LIMIT = 7;
	public final static int LEADDEPARTMENT_LIMIT = 255;
	public final static int EXECUTEDDATE_LIMIT = 7;
	public final static int RELEASEDBYCI_LIMIT = 7;
	public final static int HOURS_LIMIT = 9;
	public final static int PROTECTIONENG_LIMIT = 255;
	public final static int TECHPLANNER_LIMIT = 255;
	public final static int COSTESTIMATE_LIMIT = 9;
	public final static int FIELDENGINEERID_LIMIT = 9;
	public final static int GCMANAGER_LIMIT = 255;
	public final static int NOTES_LIMIT = 4000;
	public final static int STEPTYPEID_LIMIT = 9;
	public final static int RELEASEDDATE_LIMIT = 7;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTVARCHAR1_LIMIT = 255;
	public final static int ALTINT1_LIMIT = 9;
	private int id;
	private int studyId;
	private String sapNum;
	private Calendar dueDate;
	private Calendar completeDate;
	private String leadDepartment;
	private Calendar executedDate;
	private Calendar releasedByCi;
	private int hours;
	private String protectionEng;
	private String techPlanner;
	private double costEstimate;
	private int fieldEngineerId;
	private String gcManager;
	private String notes;
	private int stepTypeId;
	private Calendar releasedDate;
	private Calendar altDate1;
	private String altVarchar1;
	private int altInt1;
	private GiStudy giStudy;
	private User fieldEngineer;
	private LookUp stepType;
	public static GiStep getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static GiStep getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		GiStep o = null;
		if(cache != null && cache.contains(GiStep.class, pk))
			o = em.find(GiStep.class, pk);
		if(o==null && getAICache().contains(GiStep.class, pk))
			o = getAICache().find(GiStep.class, pk);
		if(o==null && fetch)
			o = em.find(GiStep.class, pk);
		if(o==null && fetch && GiStep.class.getAnnotation(AutoInsertable.class) != null){
			o = new GiStep(id);
			getAICache().cache(GiStep.class, o);
		}
		return o;
	}
	public static Collection<GiStep> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<GiStep> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<GiStep> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM GiStep o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<GiStep> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<GiStep> tq = em.createQuery(jpql,GiStep.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<GiStep> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<GiStep> tq = em.createNamedQuery(name,GiStep.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public GiStepDAO(){}
	public GiStepDAO(int id){
		this.id=id;
	}
	public GiStepDAO(GiStepDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(GiStepDAO orig){
		this.studyId=orig.getStudyId();
		this.sapNum=orig.getSapNum();
		this.dueDate=orig.getDueDate();
		this.completeDate=orig.getCompleteDate();
		this.leadDepartment=orig.getLeadDepartment();
		this.executedDate=orig.getExecutedDate();
		this.releasedByCi=orig.getReleasedByCi();
		this.hours=orig.getHours();
		this.protectionEng=orig.getProtectionEng();
		this.techPlanner=orig.getTechPlanner();
		this.costEstimate=orig.getCostEstimate();
		this.fieldEngineerId=orig.getFieldEngineerId();
		this.gcManager=orig.getGcManager();
		this.notes=orig.getNotes();
		this.stepTypeId=orig.getStepTypeId();
		this.releasedDate=orig.getReleasedDate();
		this.altDate1=orig.getAltDate1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altInt1=orig.getAltInt1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIZ51_SEQ",sequenceName="MDIZ51_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="STUDY_ID",nullable=true,length=9)
	public int getStudyId(){
		return studyId;
	}
	public void setStudyId(int studyId) throws java.sql.SQLException{
		if(isSame(studyId, getStudyId()))return;
		int oldValue = getStudyId();
		this.studyId=studyId;
		setProperty("STUDY_ID", studyId, oldValue);
		giStudy=null;
	}
	@Column(name="SAP_NUM",nullable=true,length=100)
	public String getSapNum(){
		return sapNum;
	}
	public void setSapNum(String sapNum) throws java.sql.SQLException{
		if(isSame(sapNum, getSapNum()))return;
		String oldValue = getSapNum();
		this.sapNum=sapNum;
		setProperty("SAP_NUM", sapNum, oldValue);
	}
	@Column(name="DUE_DATE",nullable=true,length=7)
	public Calendar getDueDate(){
		return dueDate;
	}
	public void setDueDate(Calendar dueDate) throws java.sql.SQLException{
		if(isSame(dueDate, getDueDate()))return;
		Calendar oldValue = getDueDate();
		this.dueDate=dueDate;
		setProperty("DUE_DATE", dueDate, oldValue);
	}
	@Column(name="COMPLETE_DATE",nullable=true,length=7)
	public Calendar getCompleteDate(){
		return completeDate;
	}
	public void setCompleteDate(Calendar completeDate) throws java.sql.SQLException{
		if(isSame(completeDate, getCompleteDate()))return;
		Calendar oldValue = getCompleteDate();
		this.completeDate=completeDate;
		setProperty("COMPLETE_DATE", completeDate, oldValue);
	}
	@Column(name="LEAD_DEPARTMENT",nullable=true,length=255)
	public String getLeadDepartment(){
		return leadDepartment;
	}
	public void setLeadDepartment(String leadDepartment) throws java.sql.SQLException{
		if(isSame(leadDepartment, getLeadDepartment()))return;
		String oldValue = getLeadDepartment();
		this.leadDepartment=leadDepartment;
		setProperty("LEAD_DEPARTMENT", leadDepartment, oldValue);
	}
	@Column(name="EXECUTED_DATE",nullable=true,length=7)
	public Calendar getExecutedDate(){
		return executedDate;
	}
	public void setExecutedDate(Calendar executedDate) throws java.sql.SQLException{
		if(isSame(executedDate, getExecutedDate()))return;
		Calendar oldValue = getExecutedDate();
		this.executedDate=executedDate;
		setProperty("EXECUTED_DATE", executedDate, oldValue);
	}
	@Column(name="RELEASED_BY_CI",nullable=true,length=7)
	public Calendar getReleasedByCi(){
		return releasedByCi;
	}
	public void setReleasedByCi(Calendar releasedByCi) throws java.sql.SQLException{
		if(isSame(releasedByCi, getReleasedByCi()))return;
		Calendar oldValue = getReleasedByCi();
		this.releasedByCi=releasedByCi;
		setProperty("RELEASED_BY_CI", releasedByCi, oldValue);
	}
	@Column(name="HOURS",nullable=true,length=9)
	public int getHours(){
		return hours;
	}
	public void setHours(int hours) throws java.sql.SQLException{
		if(isSame(hours, getHours()))return;
		int oldValue = getHours();
		this.hours=hours;
		setProperty("HOURS", hours, oldValue);
	}
	@Column(name="PROTECTION_ENG",nullable=true,length=255)
	public String getProtectionEng(){
		return protectionEng;
	}
	public void setProtectionEng(String protectionEng) throws java.sql.SQLException{
		if(isSame(protectionEng, getProtectionEng()))return;
		String oldValue = getProtectionEng();
		this.protectionEng=protectionEng;
		setProperty("PROTECTION_ENG", protectionEng, oldValue);
	}
	@Column(name="TECH_PLANNER",nullable=true,length=255)
	public String getTechPlanner(){
		return techPlanner;
	}
	public void setTechPlanner(String techPlanner) throws java.sql.SQLException{
		if(isSame(techPlanner, getTechPlanner()))return;
		String oldValue = getTechPlanner();
		this.techPlanner=techPlanner;
		setProperty("TECH_PLANNER", techPlanner, oldValue);
	}
	@Column(name="COST_ESTIMATE",nullable=true,length=9)
	public double getCostEstimate(){
		return costEstimate;
	}
	public void setCostEstimate(double costEstimate) throws java.sql.SQLException{
		if(isSame(costEstimate, getCostEstimate()))return;
		double oldValue = getCostEstimate();
		this.costEstimate=costEstimate;
		setProperty("COST_ESTIMATE", costEstimate, oldValue);
	}
	@Column(name="FIELD_ENGINEER_ID",nullable=true,length=9)
	public int getFieldEngineerId(){
		return fieldEngineerId;
	}
	public void setFieldEngineerId(int fieldEngineerId) throws java.sql.SQLException{
		if(isSame(fieldEngineerId, getFieldEngineerId()))return;
		int oldValue = getFieldEngineerId();
		this.fieldEngineerId=fieldEngineerId;
		setProperty("FIELD_ENGINEER_ID", fieldEngineerId, oldValue);
		fieldEngineer=null;
	}
	@Column(name="GC_MANAGER",nullable=true,length=255)
	public String getGcManager(){
		return gcManager;
	}
	public void setGcManager(String gcManager) throws java.sql.SQLException{
		if(isSame(gcManager, getGcManager()))return;
		String oldValue = getGcManager();
		this.gcManager=gcManager;
		setProperty("GC_MANAGER", gcManager, oldValue);
	}
	@Column(name="NOTES",nullable=true,length=4000)
	public String getNotes(){
		return notes;
	}
	public void setNotes(String notes) throws java.sql.SQLException{
		if(isSame(notes, getNotes()))return;
		String oldValue = getNotes();
		this.notes=notes;
		setProperty("NOTES", notes, oldValue);
	}
	@Column(name="STEP_TYPE_ID",nullable=true,length=9)
	public int getStepTypeId(){
		return stepTypeId;
	}
	public void setStepTypeId(int stepTypeId) throws java.sql.SQLException{
		if(isSame(stepTypeId, getStepTypeId()))return;
		int oldValue = getStepTypeId();
		this.stepTypeId=stepTypeId;
		setProperty("STEP_TYPE_ID", stepTypeId, oldValue);
		stepType=null;
	}
	@Column(name="RELEASED_DATE",nullable=true,length=7)
	public Calendar getReleasedDate(){
		return releasedDate;
	}
	public void setReleasedDate(Calendar releasedDate) throws java.sql.SQLException{
		if(isSame(releasedDate, getReleasedDate()))return;
		Calendar oldValue = getReleasedDate();
		this.releasedDate=releasedDate;
		setProperty("RELEASED_DATE", releasedDate, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=255)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_INT1",nullable=true,length=9)
	public int getAltInt1(){
		return altInt1;
	}
	public void setAltInt1(int altInt1) throws java.sql.SQLException{
		if(isSame(altInt1, getAltInt1()))return;
		int oldValue = getAltInt1();
		this.altInt1=altInt1;
		setProperty("ALT_INT1", altInt1, oldValue);
	}
	public GiStudy getGiStudy()throws java.sql.SQLException{
		if(giStudy==null)
			giStudy=GiStudy.getInstance(getStudyId());
		return giStudy;
	}
	public void setGiStudy(GiStudy giStudy)throws java.sql.SQLException{
		setStudyId(giStudy==null?0:giStudy.getId());
		this.giStudy=giStudy;
	}
	public User getFieldEngineer()throws java.sql.SQLException{
		if(fieldEngineer==null)
			fieldEngineer=User.getInstance(getFieldEngineerId());
		return fieldEngineer;
	}
	public void setFieldEngineer(User fieldEngineer)throws java.sql.SQLException{
		setFieldEngineerId(fieldEngineer==null?0:fieldEngineer.getUsernameId());
		this.fieldEngineer=fieldEngineer;
	}
	public LookUp getStepType()throws java.sql.SQLException{
		if(stepType==null)
			stepType=LookUp.getInstance(getStepTypeId());
		return stepType;
	}
	public void setStepType(LookUp stepType)throws java.sql.SQLException{
		setStepTypeId(stepType==null?0:stepType.getId());
		this.stepType=stepType;
	}
	public GiStep copy()throws java.sql.SQLException{
		GiStep cp = new GiStep((GiStep)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(GiStepDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(GiStepDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getStudyId(),o.getStudyId())) diffs.add("STUDY_ID");
		if(!isSame(getSapNum(),o.getSapNum())) diffs.add("SAP_NUM");
		if(!isSame(getDueDate(),o.getDueDate())) diffs.add("DUE_DATE");
		if(!isSame(getCompleteDate(),o.getCompleteDate())) diffs.add("COMPLETE_DATE");
		if(!isSame(getLeadDepartment(),o.getLeadDepartment())) diffs.add("LEAD_DEPARTMENT");
		if(!isSame(getExecutedDate(),o.getExecutedDate())) diffs.add("EXECUTED_DATE");
		if(!isSame(getReleasedByCi(),o.getReleasedByCi())) diffs.add("RELEASED_BY_CI");
		if(!isSame(getHours(),o.getHours())) diffs.add("HOURS");
		if(!isSame(getProtectionEng(),o.getProtectionEng())) diffs.add("PROTECTION_ENG");
		if(!isSame(getTechPlanner(),o.getTechPlanner())) diffs.add("TECH_PLANNER");
		if(!isSame(getCostEstimate(),o.getCostEstimate())) diffs.add("COST_ESTIMATE");
		if(!isSame(getFieldEngineerId(),o.getFieldEngineerId())) diffs.add("FIELD_ENGINEER_ID");
		if(!isSame(getGcManager(),o.getGcManager())) diffs.add("GC_MANAGER");
		if(!isSame(getNotes(),o.getNotes())) diffs.add("NOTES");
		if(!isSame(getStepTypeId(),o.getStepTypeId())) diffs.add("STEP_TYPE_ID");
		if(!isSame(getReleasedDate(),o.getReleasedDate())) diffs.add("RELEASED_DATE");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltInt1(),o.getAltInt1())) diffs.add("ALT_INT1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
