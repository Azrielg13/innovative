package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;

import com.sce.esp.object.dao.DataAccessObject;
import com.sce.esp.util.Calculate;

public abstract class AbstractTask<R extends AbstractResource> extends DataAccessObject {
	public enum DurationType{Hours,WorkHours,Days,WorkDays,Weeks,Months,Years};
	public AbstractTask(){}
	public AbstractTask(AbstractTask<?> at){
		super(at);
	}
	public abstract String getName() throws SQLException;
	public abstract void setName(String name)throws SQLException;
	public abstract String getDescription() throws SQLException;
	public abstract void setDescription(String desc)throws SQLException;
	public abstract double getPercentComp();
	public abstract void setParentId(int id) throws SQLException;
	public abstract double getShift()throws SQLException;
	public abstract void setShift(double shift)throws SQLException;
	public abstract double getEstDuration()throws SQLException;
	public abstract Collection<? extends AbstractTask<R>> getChildTasks() throws SQLException;
	protected Calendar getFirstPassStartDate() throws SQLException {
		Calendar cal = null;
		AbstractRelation last = getLastPred();
		if(last!=null){
			cal = (Calendar)last.getStartDate().clone();
			if(last.getRelationType()==AbstractRelation.FINISH_TO_START || last.getRelationType()==AbstractRelation.START_TO_START)
			cal.add(Calendar.DATE, (int)getShift());
		}
		return cal;
	}
	public Calendar getStartDate() throws SQLException {
		Calendar cal = getFirstPassStartDate();
		for(AbstractTask<?> ct:getChildTasks()){
			Calendar csd = ct.getFirstPassStartDate(); 
			if(csd!=null && (cal==null || csd.before(cal)))
				cal = csd;
		}
		//If we were unable to find a StartDate then we shall use our parent's
		if(cal==null){
			AbstractTask<?> parent = getParent();
			if(parent!=null){
				cal = (Calendar)parent.getStartDate().clone();
				cal.add(Calendar.DATE, (int)getShift());
			}
		}
		//If start date is still null, use today's date
		if(cal==null){
			cal = Calendar.getInstance();
			cal.add(Calendar.DATE, (int)getShift());
		}
		return cal;
	}
	public void setStartDate(Calendar date) throws SQLException{
		setShift((date.getTimeInMillis()-getStartDate().getTimeInMillis())/Calculate.ONE_DAY+getShift());
	}
	public Calendar getEndDate() throws SQLException {
		Calendar cal = (Calendar)getStartDate().clone();
		cal.add(Calendar.DATE, (int)getEstDuration());
		for(AbstractTask<?> ct:getChildTasks()){
			Calendar ced = ct.getEndDate(); 
			if(ced.after(cal))
				cal = ced;
		}
		return cal;
	}
	public void setEndDate(Calendar date) throws SQLException{
		setEstDuration((date.getTimeInMillis()-getStartDate().getTimeInMillis())/Calculate.ONE_DAY);
	}
	public double getDuration() throws SQLException{
		return (getEndDate().getTimeInMillis()-getStartDate().getTimeInMillis())/Calculate.ONE_DAY;
	}
	public double getDuration(DurationType dt) throws SQLException{
		switch(dt){
			case Hours: return getDuration()*24;
			case WorkHours: return getDuration(DurationType.WorkDays)*8;
			case Days: return getDuration();
			case WorkDays: int d=(int)getDuration(); return d/7*5+d%7;
			case Weeks: return getDuration()/7;
			case Months: return getDuration()/365.25*12;
			case Years: return getDuration()/365.25;
		}
		return -1;
	}
	public abstract void setEstDuration(double d)throws SQLException;
	public void setEstDuration(double d, DurationType dt) throws SQLException{
		switch(dt){
			case Hours: setEstDuration(d/24);
			case WorkHours:setEstDuration(d/8,DurationType.WorkDays);
			case Days: setEstDuration(d);
			case WorkDays: int d2=(int)d; setEstDuration(d2/5*7+d2%5);
			case Weeks: setEstDuration(d*7);
			case Months: setEstDuration(d*365.25/12);
			case Years: setEstDuration(d*365.25);
		}
	}
	public abstract AbstractTask<R> getParent()throws SQLException;
	public abstract Collection<? extends AbstractTask<?>> getPredTasks()throws SQLException;
	public abstract Collection<? extends AbstractRelation> getPreds()throws SQLException;
	public abstract Collection<? extends AbstractRelation> getSuccs()throws SQLException;
	public AbstractRelation getLastPred() throws SQLException{
		AbstractRelation last=null;
		for(AbstractRelation ar:getPreds())
			if(last==null || last.getStartDate().before(ar.getStartDate()))
				last = ar;
		return last;
	}
	public String toString(){
		try {
			return getName();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return super.toString();
	}
	public abstract int getId();
	public abstract AbstractRelation addPred(AbstractTask<?> task, int relation)throws SQLException;
	public boolean isCritical() throws SQLException{
		return getFloat()==0;
	}
	public double getFloat() throws SQLException{
		return (getLateFinish().getTimeInMillis()-getEndDate().getTimeInMillis())/Calculate.ONE_DAY;
	}
	public Calendar getLateFinish() throws SQLException{
		Calendar lf = null;
		for(AbstractRelation ar:getSuccs())
			if(lf==null || lf.after(ar.getLateFinish()))
				lf = ar.getLateFinish();
		if(lf==null)
			lf = getEndDate();
		return lf;
	}
	public Calendar getLateStart() throws SQLException{
		Calendar ls = (Calendar)getLateFinish().clone();
		ls.add(Calendar.DATE, (int)-getDuration());
		return ls;
	}
	
	public abstract TaskType getTaskType() throws java.sql.SQLException;
	public abstract void setTaskType(TaskType tt) throws java.sql.SQLException;
	public abstract Schedulable getSchedulable() throws SQLException;
	public abstract void setSchedulable(Schedulable s) throws SQLException;
	public abstract String getDeliverable();
	public abstract void setDeliverable(String s) throws java.sql.SQLException;
	public abstract double getEstEffort();
	public abstract void setEstEffort(double d) throws java.sql.SQLException;
	public abstract String getPerfCrit();
	public abstract void setPerfCrit(String s) throws java.sql.SQLException;
	public abstract void setParent(AbstractTask<R> at) throws java.sql.SQLException;
	public abstract String getData() throws java.sql.SQLException;
	public abstract void setData(String data) throws java.sql.SQLException;
	public abstract Collection<? extends AbstractResource> getResources() throws java.sql.SQLException;
	public abstract AbstractResource getNewResource();
	public abstract void addResource(R ar) throws SQLException;
	
}

	
