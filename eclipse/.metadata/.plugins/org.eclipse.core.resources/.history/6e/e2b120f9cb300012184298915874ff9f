package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;

import javax.persistence.Cache;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.TaskDAO;
import com.sce.esp.object.jpa.ESPCache;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.util.db.PDBConnection;
@Entity
@Table(schema="MDI",name="MDIS88_TASK")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Task o WHERE o.TASK_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Task o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Task o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByTask", query="SELECT o FROM Task o WHERE o.PARENT_TASK_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByParentTaskSubTaskType", query="SELECT o FROM Task o WHERE o.PARENT_TASK_ID=?1 AND o.SUB_TASK_TYPE_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED

})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIS88_TASK o WHERE o.TASK_ID=?"),//AUTO-GENERATED
})
public abstract class Task extends TaskDAO implements Comparable<Object>, Serializable{
	private static final long serialVersionUID = 1L;
	public static final int TYPE_GATE = 0;
	public static final int TYPE_STAGE = 1;
	public static final int TYPE_LICENSING = 2;
	public static final int TYPE_TEMPLATE = TYPE_LICENSING;
	public static final int TYPE_EHS = 3;
	public static final int TYPE_EXECUTION = 4;
	public static final int TYPE_REVISION = 5;
	public static final int TYPE_TSPOC_MILESTONES = 6;

	
	public Task(){
		super(0);
	}
	
	protected Task(int taskId) {
		super(taskId);
	}

	public abstract Calendar getGateDate(int gateNum) throws SQLException;
	public Task(Task task){
		super(task);
	}
	
	public static Task getInstance(int taskId)throws SQLException{
		return getInstance(taskId, true);
	}
	
	
	
	public static Task getInstance(int taskId, boolean fetch)throws SQLException{
		if(taskId == 0)return null;
		PrimaryKey pk = new PrimaryKey(taskId);
		EntityManager em = EntityManagerHelper.getEntityManager(); 
		Cache c = em.getEntityManagerFactory().getCache();
		if(c!=null){
			if(c.contains(GateTracking.class, pk))
				return em.find(GateTracking.class, pk);
			if(c.contains(ScheduleTracking.class, pk))
				return em.find(ScheduleTracking.class, pk);
		}
		Task task=null;
		if(fetch){
			PreparedStatement ps = PDBConnection.getInstance().getConnection().prepareStatement("SELECT MILESTONE FROM MDIS88_TASK WHERE task_id=?");
			ps.setInt(1,taskId);
			ResultSet rs = ps.executeQuery();
			if(rs.next())
				task = getInstance(taskId, fetch, rs.getBoolean("MILESTONE"));
			rs.close();
			ps.close();
		}
		return task;
	}
	
	public static Task getInstance(int taskId, boolean fetch, boolean milestone)throws SQLException{
		if(isNull(taskId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk;
		if(!milestone)
			pk = new PrimaryKey(ScheduleTracking.getInstanceByTaskId(taskId).getScheduleTrackingId());
		else
			pk = new PrimaryKey(taskId);
//		EspLogger.debug(null, "does em.getEntityManagerFactory().getCache() contain sched = "+(em.getEntityManagerFactory().getCache().contains(milestone?GateTracking.class:ScheduleTracking.class, pk)));
		if(fetch || em.getEntityManagerFactory().getCache() != null && em.getEntityManagerFactory().getCache().contains(milestone?GateTracking.class:ScheduleTracking.class, pk)) {
//			EspLogger.debug(null, "em.find() = "+em.find(milestone?GateTracking.class:ScheduleTracking.class, pk));
			return em.find(milestone?GateTracking.class:ScheduleTracking.class, pk);
		}
		return null;
	}

	public static Task getInstanceByParentTaskSubTaskTypeId(int parentTaskId, int subTaskTypeId) throws SQLException {
		for(Task task:getNamedCollection("findByParentTaskSubTaskType", parentTaskId ,subTaskTypeId))
			return task;
		return null;
	}
	
	public void insert() throws SQLException{
		try {
			ESPCache cache = (ESPCache) EntityManagerHelper.getEntityManagerFactory().getCache();
			cache.persist(this, Task.class, Task.class.getAnnotation(Table.class).name());
		} catch (SQLException e) {
			throw e;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/*
	 * @see com.sce.esp.object.dao.DataAccessObject#toString()
	 */
	public String toString(){
		return getTaskName();
	}

	public abstract Calendar getStartDate() throws SQLException;
	public abstract Calendar getEndDate() throws SQLException;
	public abstract Collection<ScheduleTracking> getChildren(int taskType) throws SQLException;
	public abstract Collection<GateTracking> getGateChildren(int taskType) throws SQLException;
	public abstract Collection<ScheduleTracking> getScheduleTrackingChildren() throws SQLException;
	
	public Collection<GateTracking> getGateTrackingChildren()
			throws SQLException {
		return null;
	}

}
