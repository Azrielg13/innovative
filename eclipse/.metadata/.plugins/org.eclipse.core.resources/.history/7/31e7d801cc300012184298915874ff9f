package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.ScopeType;
import com.sce.esp.object.model.UnitCostBreakDown;
import com.sce.esp.object.model.UnitCostDetail;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class UnitCostBreakDownDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,SCOPE_TYPE_ID,EFF_DATE,ACTION_ID,TERRAIN_ID,POPULATION_ID};
	public final static int ID_LIMIT = 9;
	public final static int SCOPETYPEID_LIMIT = 9;
	public final static int EFFDATE_LIMIT = 9;
	public final static int ACTIONID_LIMIT = 9;
	public final static int TERRAINID_LIMIT = 9;
	public final static int POPULATIONID_LIMIT = 9;
	private int id;
	private int scopeTypeId;
	private int effDate;
	private int actionId;
	private int terrainId;
	private int populationId;
	private Collection<UnitCostDetail> unitCostDetails;
	private ScopeType scopeType;
	private LookUp action;
	private LookUp terrain;
	private LookUp population;
	public static UnitCostBreakDown getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static UnitCostBreakDown getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		UnitCostBreakDown o = null;
		if(cache != null && cache.contains(UnitCostBreakDown.class, pk))
			o = em.find(UnitCostBreakDown.class, pk);
		if(o==null && getAICache().contains(UnitCostBreakDown.class, pk))
			o = getAICache().find(UnitCostBreakDown.class, pk);
		if(o==null && fetch)
			o = em.find(UnitCostBreakDown.class, pk);
		if(o==null && fetch && UnitCostBreakDown.class.getAnnotation(AutoInsertable.class) != null){
			o = new UnitCostBreakDown(id);
			getAICache().cache(UnitCostBreakDown.class, o);
		}
		return o;
	}
	public static Collection<UnitCostBreakDown> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<UnitCostBreakDown> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<UnitCostBreakDown> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM UnitCostBreakDown o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<UnitCostBreakDown> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<UnitCostBreakDown> tq = em.createQuery(jpql,UnitCostBreakDown.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<UnitCostBreakDown> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<UnitCostBreakDown> tq = em.createNamedQuery(name,UnitCostBreakDown.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public UnitCostBreakDownDAO(){}
	public UnitCostBreakDownDAO(int id){
		this.id=id;
	}
	public UnitCostBreakDownDAO(UnitCostBreakDownDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(UnitCostBreakDownDAO orig){
		this.scopeTypeId=orig.getScopeTypeId();
		this.effDate=orig.getEffDate();
		this.actionId=orig.getActionId();
		this.terrainId=orig.getTerrainId();
		this.populationId=orig.getPopulationId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIU20_SEQ",sequenceName="MDIU20_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="SCOPE_TYPE_ID",nullable=false,length=9)
	public int getScopeTypeId(){
		return scopeTypeId;
	}
	public void setScopeTypeId(int scopeTypeId) throws java.sql.SQLException{
		if(isSame(scopeTypeId, getScopeTypeId()))return;
		int oldValue = getScopeTypeId();
		this.scopeTypeId=scopeTypeId;
		setProperty("SCOPE_TYPE_ID", scopeTypeId, oldValue);
		scopeType=null;
	}
	@Column(name="EFF_DATE",nullable=false,length=9)
	public int getEffDate(){
		return effDate;
	}
	public void setEffDate(int effDate) throws java.sql.SQLException{
		if(isSame(effDate, getEffDate()))return;
		int oldValue = getEffDate();
		this.effDate=effDate;
		setProperty("EFF_DATE", effDate, oldValue);
	}
	@Column(name="ACTION_ID",nullable=false,length=9)
	public int getActionId(){
		return actionId;
	}
	public void setActionId(int actionId) throws java.sql.SQLException{
		if(isSame(actionId, getActionId()))return;
		int oldValue = getActionId();
		this.actionId=actionId;
		setProperty("ACTION_ID", actionId, oldValue);
		action=null;
	}
	@Column(name="TERRAIN_ID",nullable=false,length=9)
	public int getTerrainId(){
		return terrainId;
	}
	public void setTerrainId(int terrainId) throws java.sql.SQLException{
		if(isSame(terrainId, getTerrainId()))return;
		int oldValue = getTerrainId();
		this.terrainId=terrainId;
		setProperty("TERRAIN_ID", terrainId, oldValue);
		terrain=null;
	}
	@Column(name="POPULATION_ID",nullable=false,length=9)
	public int getPopulationId(){
		return populationId;
	}
	public void setPopulationId(int populationId) throws java.sql.SQLException{
		if(isSame(populationId, getPopulationId()))return;
		int oldValue = getPopulationId();
		this.populationId=populationId;
		setProperty("POPULATION_ID", populationId, oldValue);
		population=null;
	}
	public ScopeType getScopeType()throws java.sql.SQLException{
		if(scopeType==null)
			scopeType=ScopeType.getInstance(getScopeTypeId());
		return scopeType;
	}
	public void setScopeType(ScopeType scopeType)throws java.sql.SQLException{
		setScopeTypeId(scopeType==null?0:scopeType.getScopeTypeId());
		this.scopeType=scopeType;
	}
	public LookUp getAction()throws java.sql.SQLException{
		if(action==null)
			action=LookUp.getInstance(getActionId());
		return action;
	}
	public void setAction(LookUp action)throws java.sql.SQLException{
		setActionId(action==null?0:action.getId());
		this.action=action;
	}
	public LookUp getTerrain()throws java.sql.SQLException{
		if(terrain==null)
			terrain=LookUp.getInstance(getTerrainId());
		return terrain;
	}
	public void setTerrain(LookUp terrain)throws java.sql.SQLException{
		setTerrainId(terrain==null?0:terrain.getId());
		this.terrain=terrain;
	}
	public LookUp getPopulation()throws java.sql.SQLException{
		if(population==null)
			population=LookUp.getInstance(getPopulationId());
		return population;
	}
	public void setPopulation(LookUp population)throws java.sql.SQLException{
		setPopulationId(population==null?0:population.getId());
		this.population=population;
	}
	public Collection<UnitCostDetail> getUnitCostDetails()throws java.sql.SQLException{
		if(isNewInstance() || unitCostDetails != null){
			if(unitCostDetails == null)
				unitCostDetails = new TreeSet<UnitCostDetail>();
			return unitCostDetails;
		}
		return UnitCostDetail.getNamedCollection("findByUnitCostBreakDown",getId());
	}
	public void addUnitCostDetail(UnitCostDetail unitCostDetail)throws java.sql.SQLException{
		unitCostDetail.setUnitCostBreakDown((UnitCostBreakDown)this);
		if(isNewInstance() || unitCostDetails != null)
			getUnitCostDetails().add(unitCostDetail);
		else
			unitCostDetail.insert();
	}
	public void removeUnitCostDetail(UnitCostDetail unitCostDetail)throws java.sql.SQLException{
		if(isNewInstance() || unitCostDetails != null)
			getUnitCostDetails().remove(unitCostDetail);
		else
			unitCostDetail.delete();
	}
	public UnitCostBreakDown copy()throws java.sql.SQLException{
		UnitCostBreakDown cp = new UnitCostBreakDown((UnitCostBreakDown)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(UnitCostBreakDownDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(UnitCostDetail child:getUnitCostDetails())
			cp.addUnitCostDetail(child.copy());
	}
	public Vector<String> getDifference(UnitCostBreakDownDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getScopeTypeId(),o.getScopeTypeId())) diffs.add("SCOPE_TYPE_ID");
		if(!isSame(getEffDate(),o.getEffDate())) diffs.add("EFF_DATE");
		if(!isSame(getActionId(),o.getActionId())) diffs.add("ACTION_ID");
		if(!isSame(getTerrainId(),o.getTerrainId())) diffs.add("TERRAIN_ID");
		if(!isSame(getPopulationId(),o.getPopulationId())) diffs.add("POPULATION_ID");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(unitCostDetails != null){
			for(UnitCostDetail unitCostDetail:getUnitCostDetails()){
				if(unitCostDetail.isNewInstance())
					unitCostDetail.setUnitCostBreakDown((UnitCostBreakDown)this);
				unitCostDetail.insert();
			}
			unitCostDetails = null;
		}
	}
}
