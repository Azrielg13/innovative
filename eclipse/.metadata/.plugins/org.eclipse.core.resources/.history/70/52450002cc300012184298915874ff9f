package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Portfolio;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PortfolioDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PORTFOLIO_ID};
	public static enum PROPERTY{PORTFOLIO_ID,PORTFOLIO_NAME,FINAL_DATE,PORTFOLIO_TYPE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PORTFOLIOID_LIMIT = 9;
	public final static int PORTFOLIONAME_LIMIT = 128;
	public final static int FINALDATE_LIMIT = 7;
	public final static int PORTFOLIOTYPE_LIMIT = 2;
	private int portfolioId;
	private String portfolioName;
	private Calendar finalDate;
	private int portfolioType;
	public static Portfolio getInstance(int portfolioId)throws java.sql.SQLException{
		return getInstance(portfolioId, true);
	}
	public static Portfolio getInstance(int portfolioId, boolean fetch)throws java.sql.SQLException{
		if(isNull(portfolioId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(portfolioId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Portfolio o = null;
		if(cache != null && cache.contains(Portfolio.class, pk))
			o = em.find(Portfolio.class, pk);
		if(o==null && getAICache().contains(Portfolio.class, pk))
			o = getAICache().find(Portfolio.class, pk);
		if(o==null && fetch)
			o = em.find(Portfolio.class, pk);
		if(o==null && fetch && Portfolio.class.getAnnotation(AutoInsertable.class) != null){
			o = new Portfolio(portfolioId);
			getAICache().cache(Portfolio.class, o);
		}
		return o;
	}
	public static Collection<Portfolio> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Portfolio> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Portfolio> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Portfolio o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public static Collection<Portfolio> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Portfolio> tq = em.createQuery(jpql,Portfolio.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public static Collection<Portfolio> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Portfolio> tq = em.createNamedQuery(name,Portfolio.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PortfolioDAO(){}
	public PortfolioDAO(int portfolioId){
		this.portfolioId=portfolioId;
	}
	public PortfolioDAO(PortfolioDAO orig){
		super(orig);
		this.portfolioName=orig.getPortfolioName();
		this.finalDate=orig.getFinalDate();
		this.portfolioType=orig.getPortfolioType();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{portfolioId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS00_SEQ",sequenceName="MDIS00_SEQ")
	@Column(name="PORTFOLIO_ID",nullable=false,length=9)
	public int getPortfolioId(){
		return portfolioId;
	}
	public void setPortfolioId(int portfolioId) throws java.sql.SQLException{
		if(isSame(portfolioId, getPortfolioId()))return;
		int oldValue = getPortfolioId();
		this.portfolioId=portfolioId;
		setProperty("PORTFOLIO_ID", portfolioId, oldValue);
	}
	@Column(name="PORTFOLIO_NAME",nullable=false,length=128)
	public String getPortfolioName(){
		return portfolioName;
	}
	public void setPortfolioName(String portfolioName) throws java.sql.SQLException{
		if(isSame(portfolioName, getPortfolioName()))return;
		String oldValue = getPortfolioName();
		this.portfolioName=portfolioName;
		setProperty("PORTFOLIO_NAME", portfolioName, oldValue);
	}
	@Column(name="FINAL_DATE",nullable=true,length=7)
	public Calendar getFinalDate(){
		return finalDate;
	}
	public void setFinalDate(Calendar finalDate) throws java.sql.SQLException{
		if(isSame(finalDate, getFinalDate()))return;
		Calendar oldValue = getFinalDate();
		this.finalDate=finalDate;
		setProperty("FINAL_DATE", finalDate, oldValue);
	}
	@Column(name="PORTFOLIO_TYPE",nullable=true,length=2)
	public int getPortfolioType(){
		return portfolioType;
	}
	public void setPortfolioType(int portfolioType) throws java.sql.SQLException{
		if(isSame(portfolioType, getPortfolioType()))return;
		int oldValue = getPortfolioType();
		this.portfolioType=portfolioType;
		setProperty("PORTFOLIO_TYPE", portfolioType, oldValue);
	}
	public Portfolio copy()throws java.sql.SQLException{
		Portfolio cp = new Portfolio((Portfolio)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PortfolioDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PortfolioDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPortfolioId(),o.getPortfolioId())) diffs.add("PORTFOLIO_ID");
		if(!isSame(getPortfolioName(),o.getPortfolioName())) diffs.add("PORTFOLIO_NAME");
		if(!isSame(getFinalDate(),o.getFinalDate())) diffs.add("FINAL_DATE");
		if(!isSame(getPortfolioType(),o.getPortfolioType())) diffs.add("PORTFOLIO_TYPE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
