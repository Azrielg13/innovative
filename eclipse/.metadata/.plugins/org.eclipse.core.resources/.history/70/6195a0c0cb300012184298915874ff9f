/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;

import com.jidesoft.swing.JideButton;
import com.jidesoft.swing.NullLabel;
import com.jidesoft.swing.NullPanel;
import com.sce.esp.dialog.ESPDialog;
import com.sce.esp.dialog.ErrorDialog;
import com.sce.esp.object.model.BlobFile;
import com.sce.esp.object.model.User;
import com.sce.esp.util.Calculate;
import com.sce.esp.util.IconsFactory;

/**
 * Constructs the file objects button operation panel
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public abstract class BlobFilePanel extends JPanel implements ActionListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1816526471400503158L;
	private BlobFile file;
	private int userRole;
	private JideButton openButton, removeButton;

	public BlobFilePanel(BlobFile file, int userRole) {
		this.file = file;
		this.userRole = userRole;
		setLayout(new BorderLayout());
		setBorder(BorderFactory.createEmptyBorder(2, 2, 3, 2));
		add(createTextPanel());
		add(createControlPanel(), BorderLayout.AFTER_LINE_ENDS);
		setBackground(UIManager.getColor("Table.selectionBackground"));
		setForeground(UIManager.getColor("Table.selectionForeground"));
	}

	private JComponent createTextPanel() {
		NullPanel panel = new NullPanel(new GridLayout(4, 1, 5, 0));
		panel.add(new NullLabel(file.getFileName(), IconsFactory
				.getImageIcon(file.getFileIconType()), JLabel.LEADING));
		panel.add(new NullPanel());
		return panel;
	}

	private JComponent createControlPanel() {
		NullPanel panel = new NullPanel(new GridLayout(2, 2, 5, 0));
		panel.add(new NullLabel("Size", NullLabel.TRAILING));
		panel.add(new NullLabel(Calculate.round(file.getFileSize() / 1000, 1)
				+ " KB", NullLabel.TRAILING));

		openButton = new JideButton("Open",
				IconsFactory.getImageIcon(IconsFactory.Frame.OPEN_FILE));
		openButton.setBorderPainted(true);
		// openButton.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder(
		// new PartialLineBorder(Color.gray, 1, true), "",
		// TitledBorder.TRAILING, TitledBorder.ABOVE_TOP),
		// BorderFactory.createEmptyBorder(6, 4, 4, 4)));

		openButton.setButtonStyle(JideButton.HYPERLINK_STYLE);

		openButton.addActionListener(this);
		panel.add(openButton);

		removeButton = new JideButton("Remove",
				IconsFactory.getImageIcon(IconsFactory.Frame.REMOVE_FILE));
		openButton.setBorderPainted(true);
		removeButton.setButtonStyle(JideButton.HYPERLINK_STYLE);

		try {
			removeButton
					.setEnabled(file.isEditable()
							&& User.getActiveUser().getUserRole().getLevel() <= userRole);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		removeButton.addActionListener(this);
		panel.add(removeButton);
		return panel;
	}

	public abstract void refreshAttachments();

	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == openButton) {
			if (file != null) {
				try {
					file.writeBLOBToFile();
				} catch (Exception e1) {
					e1.printStackTrace();
					ErrorDialog.showError(this, "Open Error", e1);
				}
			}
		} else if (e.getSource() == removeButton) {
			int result = ESPDialog.showConfirmDialog(null,
					"Are you sure you want to delete this file?",
					"Delete Confirmation", JOptionPane.OK_CANCEL_OPTION);
			switch (result) {
				case 0 :
					try {
						file.delete();
//						file.refreshParents();
						refreshAttachments();
					} catch (Exception e1) {
						e1.printStackTrace();
					}
					break;
				case 1 : // no
					break;
			}
		}
	}
}