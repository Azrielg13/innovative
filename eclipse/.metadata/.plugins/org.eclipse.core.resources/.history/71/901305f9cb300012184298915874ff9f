package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Hashtable;

import com.sce.esp.util.AgObserver;

public class AgYearObserver extends AgObserver {
	
	private Hashtable<String, Boolean> observerMap = new Hashtable<String, Boolean>();
	private AgYear agYear;
	private static Hashtable<String,AgYearObserver> hash = new Hashtable<String,AgYearObserver>();
	private static boolean fetch=true;
	private boolean forceUpdate=false;
	private double _c=0, _d=0, _e=0, _f=0, _g=0, _h=0, _i=0, _j=0;
	
	public static AgYearObserver getInstance(AgYear ao) throws SQLException{
		String key = MDIObject.getHashKey(new Object[]{ao });
		AgYearObserver o = hash.get(key);
		if(o == null && fetch){
			o = new AgYearObserver(ao);
			hash.put(key,o);
		}
		return o;
	}
	
	private AgYearObserver(AgYear agYear){
		this.agYear=agYear;
		this.agYear.addObserver(this);
		makeDirty();
	}
	
	private void makeDirty() {
		observerMap.put("_c", isDirty);	
		observerMap.put("_d", isDirty);	
		observerMap.put("_e", isDirty);	
		observerMap.put("_f", isDirty);		
		observerMap.put("_g", isDirty);	
		observerMap.put("_h", isDirty);		
		observerMap.put("_cnt", isDirty);	
	}
	
	public double getABankGrowthTotal() throws SQLException {
		if(forceUpdate || observerMap.get("_c")){
			_c = 0.0;
			for(int y=agYear.getYear(); y>agYear.getPlanyear()-1; y--)
				_c += agYear.getAgObject().getYear(agYear.getSimId(), y).getABankGrowth();
			observerMap.put("_c", !isDirty);
		}
		return _c;
	}
	
	public double getTotalTransfers() throws SQLException {
		if(forceUpdate || observerMap.get("_d")) {
			_d = 0.0;
			double lastProjLoad=0;
			if(agYear.getYear() < agYear.getPlanyear())
				if(agYear.getAgObject().getPrevInstance()!=null)
					lastProjLoad = agYear.getAgObject().getPrevInstance().getYear(agYear.getSimId(), agYear.getYear()-1).getProjLoad(); 
			else
				lastProjLoad = agYear.getAgObject().getYear(agYear.getSimId(), agYear.getYear()-1).getProjLoad();
			_d = agYear.getProjLoad()-agYear.getGrowth()-lastProjLoad;
		}
		return _d;
	}
	
	public double getTotalVarReq() throws SQLException {
		if(forceUpdate || observerMap.get("_e")) {
			_e = 0.0;
			for(Abank abank : agYear.getAgObject().getAbanks(agYear.getSimId(), SubFilter.ADS_SUB))
				_e += abank.getYear(agYear.getSimId(), agYear.getYear()).getTotalVarReq();
		}
		return _e;
	}
	
	public double getTotalVarReserve() throws SQLException {
		if(forceUpdate || observerMap.get("_f")) {
			_f = 0.0;
			for(Abank abank : agYear.getAgObject().getAbanks(agYear.getSimId(), SubFilter.ADS_SUB))
				_f += abank.getYear(agYear.getSimId(), agYear.getYear()).getTotalVarReserve();
		}
		return _f;
	}
	
	public double getTotalVarAdd() throws SQLException {
		if(forceUpdate || observerMap.get("_g")) {
			_g = 0.0;
			for(Abank abank : agYear.getAgObject().getAbanks(agYear.getSimId(), SubFilter.ADS_SUB))
				_g += abank.getYear(agYear.getSimId(), agYear.getYear()).getKvarAdd();
		}
		return _g;
	}
	
	public double getTotalVarSupply() throws SQLException {
		if(forceUpdate || observerMap.get("_h")) {
			_h = 0.0;
			for(Abank abank : agYear.getAgObject().getAbanks(agYear.getSimId(), SubFilter.ADS_SUB))
				_h += abank.getYear(agYear.getSimId(), agYear.getYear()).getTotalVarSupply();
		}
		return _h;
	}
	
	public double getTotalDeltaBypassGen() throws SQLException {
		if(forceUpdate || observerMap.get("_i")) {
			_i = 0.0;
			for(Abank abank : agYear.getAgObject().getAbanks(agYear.getSimId(), SubFilter.ADS_SUB))
				_i += abank.getYear(agYear.getSimId(), agYear.getYear()).getDeltaBypassGen();
		}
		return _i;
	}
	
	public double getTotalDeltaDepGen() throws SQLException {
		if(forceUpdate || observerMap.get("_j")) {
			_j = 0.0;
			for(Abank abank : agYear.getAgObject().getAbanks(agYear.getSimId(), SubFilter.ADS_SUB))
				_j += abank.getYear(agYear.getSimId(), agYear.getYear()).getDeltaDepGen();
		}
		return _j;
	}
}
