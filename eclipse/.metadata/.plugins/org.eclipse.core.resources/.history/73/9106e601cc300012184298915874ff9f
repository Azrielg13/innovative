package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.BlobFile;
import com.sce.esp.object.model.Issue;
import com.sce.esp.object.model.IssueFile;
import com.sce.esp.object.model.ProjFile;

import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;

import oracle.sql.BLOB;
public abstract class IssueFileDAO extends BlobFile{
	public static enum KEY_PROPERTY{FILE_ID};
	public static enum PROPERTY{FILE_ID,ISSUE_ID,FILE_NAME,FILE_SIZE,BLOB_FILE};
	public final static int FILEID_LIMIT = 9;
	public final static int ISSUEID_LIMIT = 9;
	public final static int FILENAME_LIMIT = 64;
	public final static int FILESIZE_LIMIT = 9;
	public final static int BLOBFILE_LIMIT = 4000;
	private int fileId;
	private int issueId;
	private String fileName;
	private int fileSize;
	private BLOB blobFile;
	private Issue issue;
	private IssueFile issueFile;
	public static IssueFile getInstance(int fileId)throws java.sql.SQLException{
		return getInstance(fileId, true);
	}
	public static IssueFile getInstance(int fileId, boolean fetch)throws java.sql.SQLException{
		if(isNull(fileId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(fileId);
		Cache cache = em.getEntityManagerFactory().getCache();
		IssueFile o = null;
		if(cache != null && cache.contains(IssueFile.class, pk))
			o = em.find(IssueFile.class, pk);
		if(o==null && getAICache().contains(IssueFile.class, pk))
			o = getAICache().find(IssueFile.class, pk);
		if(o==null && fetch)
			o = em.find(IssueFile.class, pk);
		if(o==null && fetch && IssueFile.class.getAnnotation(AutoInsertable.class) != null){
			o = new IssueFile(fileId);
			getAICache().cache(IssueFile.class, o);
		}
		return o;
	}
	public static Collection<IssueFile> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<IssueFile> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<IssueFile> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM IssueFile o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<IssueFile> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<IssueFile> tq = em.createQuery(jpql,IssueFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<IssueFile> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<IssueFile> tq = em.createNamedQuery(name,IssueFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public IssueFileDAO(){}
	public IssueFileDAO(int fileId){
		this.fileId=fileId;
	}
	public IssueFileDAO(IssueFileDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public IssueFile getIssueFile()throws java.sql.SQLException{
		if(issueFile==null)
			issueFile=IssueFile.getInstance(getFileId());
		return issueFile;
	}
	
	public void copyFrom(IssueFileDAO orig){
		this.issueId=orig.getIssueId();
		this.fileName=orig.getFileName();
		this.fileSize=orig.getFileSize();
		this.blobFile=orig.getBlobFile();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{fileId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDI011_SEQ",sequenceName="MDI011_SEQ")
	@Column(name="FILE_ID",nullable=false,length=9)
	public int getFileId(){
		return fileId;
	}
	public void setFileId(int fileId) throws java.sql.SQLException{
		if(isSame(fileId, getFileId()))return;
		int oldValue = getFileId();
		this.fileId=fileId;
		setProperty("FILE_ID", fileId, oldValue);
	}
	@Column(name="ISSUE_ID",nullable=false,length=9)
	public int getIssueId(){
		return issueId;
	}
	public void setIssueId(int issueId) throws java.sql.SQLException{
		if(isSame(issueId, getIssueId()))return;
		int oldValue = getIssueId();
		this.issueId=issueId;
		setProperty("ISSUE_ID", issueId, oldValue);
		issue=null;
	}
	@Column(name="FILE_NAME",nullable=false,length=64)
	public String getFileName(){
		return fileName;
	}
	public void setFileName(String fileName) throws java.sql.SQLException{
		if(isSame(fileName, getFileName()))return;
		String oldValue = getFileName();
		this.fileName=fileName;
		setProperty("FILE_NAME", fileName, oldValue);
	}
	@Column(name="FILE_SIZE",nullable=false,length=9)
	public int getFileSize(){
		return fileSize;
	}
	public void setFileSize(int fileSize) throws java.sql.SQLException{
		if(isSame(fileSize, getFileSize()))return;
		int oldValue = getFileSize();
		this.fileSize=fileSize;
		setProperty("FILE_SIZE", fileSize, oldValue);
	}
	@Column(name="BLOB_FILE",nullable=true,length=4000)
	public BLOB getBlobFile(){
		return blobFile;
	}
	public void setBlobFile(BLOB blobFile) throws java.sql.SQLException{
		if(isSame(blobFile, getBlobFile()))return;
		BLOB oldValue = getBlobFile();
		this.blobFile=blobFile;
		setProperty("BLOB_FILE", blobFile, oldValue);
	}
	public Issue getIssue()throws java.sql.SQLException{
		if(issue==null)
			issue=Issue.getInstance(getIssueId());
		return issue;
	}
	public void setIssue(Issue issue)throws java.sql.SQLException{
		setIssueId(issue==null?0:issue.getIssueId());
		this.issue=issue;
	}
	public IssueFile copy()throws java.sql.SQLException{
		IssueFile cp = new IssueFile((IssueFile)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(IssueFileDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(IssueFileDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getFileId(),o.getFileId())) diffs.add("FILE_ID");
		if(!isSame(getIssueId(),o.getIssueId())) diffs.add("ISSUE_ID");
		if(!isSame(getFileName(),o.getFileName())) diffs.add("FILE_NAME");
		if(!isSame(getFileSize(),o.getFileSize())) diffs.add("FILE_SIZE");
		if(!isSame(getBlobFile(),o.getBlobFile())) diffs.add("BLOB_FILE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
