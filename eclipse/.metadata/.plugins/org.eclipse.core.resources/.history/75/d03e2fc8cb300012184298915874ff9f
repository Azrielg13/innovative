package com.sce.esp.dialog;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Calendar;
import java.sql.SQLException;
import java.util.Locale;

import javax.swing.BorderFactory;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.UIManager;

import com.sce.esp.log.PrintScreenPanel;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.model.BlobFile;
import com.sce.esp.object.model.Issue;
import com.sce.esp.object.model.IssueFile;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.User;
import com.sce.esp.util.BugSubmittal;
import com.sce.esp.util.ESPProperties;
import com.sce.esp.util.FormatText;
import com.sce.esp.util.LotusNotification;
import com.sce.esp.util.SwingHelper;

/**
 * <p>Description: Class for displaying errors with the included stack trace.</p>
 *
 * @author Frank M. Gonzales
 * @version 1.0
 */
public class ErrorDialog extends SmartDialog{
	/**
	 * 
	 */
	private static final long serialVersionUID = 7555398249852468080L;
	static Color BACKGROUND_COLOR = UIManager.getColor("OptionPane.background");
	static Font MESSAGE_FONT = UIManager.getFont("OptionPane.messageFont");
	static Font BUTTON_FONT = UIManager.getFont("OptionPane.font");
	static Font LABEL_FONT = UIManager.getFont("Label.font");
	static Insets INSETS = new Insets(6, 6, 5, 5);
	private static JTextArea detailTextArea;
	private JPanel detailPane;
	private JButton detailBtn;
	private static int issue_number;

	public static final String MESSAGE3 = "\n\nClick \"Send\" to send us a notification so we can fix it\nor click \"OK\" to ignore.";

	private DetailButtonListener dblistener = new DetailButtonListener();
	private static BugSubmittal bs = new BugSubmittal();


	private ErrorDialog(Dialog owner, String title) {
		super(owner, title, true);
	}

	private ErrorDialog(Frame owner, String title) {
		super(owner, title, true);
	}
	private static ErrorDialog newInstance(Component parentComponent,
			String title,
			Object message,
			Object icon,
			Object details) {

		ErrorDialog dialog;      
		Window window = getWindowForComponent(parentComponent);

		if (window instanceof Frame) {
			dialog = new ErrorDialog((Frame) window, title);
		} else {
			dialog = new ErrorDialog((Dialog) window, title);
		}
		Container contentPane = dialog.getContentPane();
		contentPane.setLayout(new GridBagLayout());
		Component iconComponent = getIcon(icon);

		if (iconComponent != null) {
			contentPane.add(iconComponent, createIconGBC());
		}

		JPanel msgPane = new JPanel();
		contentPane.add(msgPane, createMessageGBC());

		addButtons(dialog);
		addMessage(msgPane, message, dialog);
		addDetails(details, dialog, contentPane);

		dialog.pack();
		return dialog;
	}

	private static void addDetails(final Object details, final ErrorDialog aDialog, final Container aContentPane) {
		JPanel detailPane = new JPanel();

		detailPane.setLayout(new BorderLayout());
		if (details instanceof Component) {
			detailPane.add((Component) details, BorderLayout.CENTER);
		} else {
			JScrollPane scrollPane = new JScrollPane();
			detailPane.add(scrollPane, BorderLayout.CENTER);
			JTextArea dtt = new JTextArea(details.toString());
			dtt.setEditable(false);
			dtt.setTabSize(4);
			scrollPane.setViewport(new DetailViewport());
			scrollPane.setViewportView(dtt);
			detailTextArea = dtt;
		}

		Dimension dsize = detailPane.getSize();
		dsize.height = 150;
		detailPane.setSize(dsize);
		detailPane.invalidate();

		aDialog.detailPane = detailPane;
		aContentPane.add(detailPane, createDetailsGBC());
		aDialog.dblistener.update(false);
	}

	private static void addMessage(final JPanel aMsgPane, final Object message, final ErrorDialog aDialog) {
		aMsgPane.setLayout(new BorderLayout());
		if (message instanceof Component) {
			aMsgPane.add((Component) message);
		} else {
			String msg = message.toString();
			JTextArea ta = new JTextArea(msg);
			Font font = getMessageFont(aDialog);
			if (font != null) {
				ta.setFont(font);
			}
			ta.setEditable(false);
			ta.setBackground(BACKGROUND_COLOR);

			Dimension tapref = ta.getPreferredSize();
			int width = (int) tapref.getWidth();

			if (width > 250) {
				if (width < 250) {
					width = 250;
				} else if (width > 500) {
					width = 500;
				}
			}
			ta.setSize(width, Integer.MAX_VALUE);
			ta.setLineWrap(true);
			ta.setWrapStyleWord(true);
			aMsgPane.add(ta, BorderLayout.CENTER);
			ta.invalidate();
		}
	}

	private static void addButtons(final ErrorDialog aDialog) {
		final JPanel auxBtnPane = new JPanel();
		JPanel btnPane = new JPanel();
		aDialog.add(auxBtnPane, createButtonGBC());
		auxBtnPane.setLayout(new BorderLayout());
		auxBtnPane.add(btnPane, BorderLayout.NORTH);

		btnPane.setBorder(BorderFactory.createEmptyBorder(0, 0, 5, 0));
		GridLayout btnLayout = new GridLayout(0, 1, 5, 5);
		btnPane.setLayout(btnLayout);

		JButton ok = createOKButton(aDialog.getLocale());
		ok.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				aDialog.dispose();
			}
		});
		btnPane.add(ok);
		JButton send = new JButton("Send"); 
		send.addActionListener(new ActionListener() { 
			public void actionPerformed(ActionEvent e) {
				aDialog.dispose();
				Issue issue = new Issue();
				try {
					issue.setTypeId(LookUp.ISSUE_SYSTEM_ERROR);
					issue.setApplicationId(LookUp.ISSUE_MDI_APP);
					issue.setIssueSummary("Error");
					issue.setDetails(detailTextArea.getText());
					issue.setIssuer(User.getActiveUser());
					issue.setStatusId(LookUp.ISSUE_NEW_STATUS);
					issue.setParentId(-1);
					issue.insert();
					issue_number = issue.getIssueId();
				}
				catch (SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				bs.setSubject("ERROR # "+FormatText.NOTIFICATION.format(Calendar.getInstance().getTime()));
				bs.setApp("ERROR");	        
				bs.setUser(User.getActiveUser().toString());	//use when tester runs tools 
				bs.setTitle("ERROR");
				bs.setType("ERROR");
				bs.setDescription(detailTextArea.getText());	
				new LotusNotification(bs);
				
				for(File file:bs.getFileList()){
					File binaryFile = file;
					long flength = binaryFile.length();
					//If the file is less than 2MB allow upload
					if(flength<BlobFile.MAX_SIZE){						
						//Customize
						try {
							FileInputStream fis = new FileInputStream(binaryFile);
							byte[] bytes = new byte[(int)flength];
							fis.read(bytes);
							IssueFile issue_file = new IssueFile(); 
							issue_file.setIssueId(issue_number);
							issue_file.setInputBytes(bytes);
							issue_file.setFileName(binaryFile.getName());	
							issue_file.insert();
						} catch (Exception e1) {

							e1.printStackTrace();
							SwingHelper.showError(null,"Data Base Error",e1,true);
						}
					}
				}
			}
		});

		btnPane.add(send);  
		btnPane.add(new PrintScreenPanel(bs));		// call to attach print screen
		JButton dbtn = new JButton();
		auxBtnPane.add(dbtn, BorderLayout.SOUTH);
		aDialog.detailBtn = dbtn;
		dbtn.addActionListener(aDialog.dblistener);
	}

	private static JButton createOKButton(final Locale aLocale) {
		JButton jb = new JButton(UIManager.get("OptionPane.okButtonText",
				aLocale).toString());
		jb.setMnemonic(getMnemonic("OptionPane.okButtonMnemonic", aLocale));
		return jb;
	}

	private static int getMnemonic(final String key, final Locale l) {
		String value = (String) UIManager.get(key, l);

		if (value == null) {
			return 0;
		}
		try {
			return Integer.parseInt(value);
		} catch (NumberFormatException nfe) {
		}
		return 0;
	}

	private static GridBagConstraints createIconGBC() {
		return createGridBagConstraints(0, 0, 1, 1, 0.0, 0.0,
				GridBagConstraints.NORTHWEST, GridBagConstraints.NONE);
	}

	private static GridBagConstraints createMessageGBC() {
		return createGridBagConstraints(1, 0, 1, 1, 1.0, 0.001,
				GridBagConstraints.NORTHWEST, GridBagConstraints.NONE);
	}

	private static GridBagConstraints createButtonGBC() {
		return createGridBagConstraints(2, 0, 1, 1, 0.0, 0.0,
				GridBagConstraints.NORTHEAST, GridBagConstraints.VERTICAL);
	}

	private static GridBagConstraints createDetailsGBC() {
		return createGridBagConstraints(0, 1, 3, 1, 1.0, 1.0,
				GridBagConstraints.NORTHWEST, GridBagConstraints.BOTH);
	}


	private static Font getMessageFont(final Component aOwner) {
		Font font = MESSAGE_FONT;
		if (font == null) {
			font = LABEL_FONT;
		}
		if (font == null) {
			font = aOwner.getFont();
		}
		return font;
	}

	private static GridBagConstraints createGridBagConstraints(final int gridx,
			final int gridy, final int gridWidth, final int gridHeight,
			final double weightx, final double weighty, final int anchor,
			final int fill) {
		//
		return new GridBagConstraints(gridx, gridy, gridWidth, gridHeight,
				weightx, weighty, anchor, fill, INSETS, 0, 0);
	}

	private static Component getIcon(final Object aIcon) {
		Component iconComponent;
		if (aIcon == null) {
			iconComponent = null;
		} else if (aIcon instanceof Component) {
			iconComponent = (Component) aIcon;
		} else {
			JLabel iconLabel;
			if (aIcon instanceof Icon) {
				iconLabel = new JLabel((Icon) aIcon);
			} else {
				iconLabel = new JLabel(aIcon.toString());
			}
			iconLabel.setBackground(BACKGROUND_COLOR);
			iconComponent = iconLabel;
		}

		return iconComponent;
	}

	/**
	 * @param aParent
	 * @param aTitle
	 * @param aThrowable
	 */
	public static void showError(final Component aParent, final String aTitle, final Throwable aThrowable) {
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw);

		aThrowable.printStackTrace(pw);
//		String message = aThrowable.getMessage();
//		if (message == null || message.equalsIgnoreCase("")) {
			String message = aThrowable.toString();
//		}

		String espTool = null;
//		if(ESPProperties.getInstance().getAppInstance().toUpperCase().equals("MDI"))
//			espTool = "MDI";
//		else if(ESPProperties.getInstance().getAppInstance().toUpperCase().equals("IWP"))
//			espTool = "IWP";
//		else if(ESPProperties.getInstance().getAppInstance().toUpperCase().equals("PSI"))
//			espTool = "PSI";
//		else if(ESPProperties.getInstance().getAppInstance().toUpperCase().equals("LGP"))
//			espTool = "LGP";
//		else if(ESPProperties.getInstance().getAppInstance().toUpperCase().equals("HST"))
//			espTool = "HST";
//		else if(ESPProperties.getInstance().getAppInstance().toUpperCase().equals("PSP"))
//			espTool = "PSI";

		message =  "Error: " + message;
		String MESSAGE1 = "OOPS! There was an error on " + espTool + ".\n\n";
		
		ErrorDialog  ed = newInstance(aParent, aTitle, MESSAGE1 + message + MESSAGE3, UIManager.getIcon("OptionPane.errorIcon"), sw.toString());

		ed.setVisible(true);
		ed.dispose();
	}

	private static Window getWindowForComponent(final Component aComponent) {
		if (aComponent == null) {
			return JOptionPane.getRootFrame();
		}

		if (aComponent instanceof Frame || aComponent instanceof Dialog) {
			return (Window) aComponent;
		}
		return ErrorDialog.getWindowForComponent(aComponent.getParent());
	}

	private class DetailButtonListener implements ActionListener {
		boolean shown = false;

		public void actionPerformed(ActionEvent evt) {
			update(!shown);
		}

		void update(boolean show) {
			String label = show ? "Details <<" : "Details >>";
			detailBtn.setText(label);
			detailPane.setVisible(show);
			if (show == shown) {
				return;
			}
			this.shown = show;
			pack();
		}
	}

	private static class DetailViewport extends JViewport {
		/**
		 * 
		 */
		private static final long serialVersionUID = -9161340612234496148L;

		public Dimension getPreferredSize() {
			Dimension d = super.getPreferredSize();
			d.height = 150;
			d.width = 250;
			return d;
		}
	}
	
	public static void main(String[] args) {
		
		try {
			EntityManagerHelper.init(ESPProperties.getInstance().getGusDbUrl(), "suwannn", "edison");
			Exception err = new Exception("I am TESTing this submit an error feature");
			ErrorDialog.showError(null, "Open Error", err);
//			SwingHelper.showError(null, "Title", err, true);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
}