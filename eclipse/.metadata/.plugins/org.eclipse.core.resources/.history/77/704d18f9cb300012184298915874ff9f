package com.sce.esp.object.model;

import java.sql.SQLException;
import java.sql.Time;
import java.util.Calendar;

public class DuctDaily extends DailyPeak{
	private Calendar date;
	private Time peakTime;
	private Duct d;
	private double temp;
	private int load;
	
	public DuctDaily(Calendar date, Time peakTime, Duct d, double temp, int load){
		this.date=(Calendar)date.clone();
		this.peakTime=peakTime;
		this.d = d;
		this.temp = temp;
		this.load = load;
	}
	
	public Calendar getDate(){
		return date;
	}
	
	public void setDate(Calendar date){
		this.date=(Calendar)date.clone();
	}
	
	public Time getPeakTime(){
		return peakTime;
	}
	
	public void setPeakTime(Time peakTime){
		this.peakTime=peakTime;
	}
	
	public Duct getDuct(){
		return d;
	}
	
	public void setDuct(Duct d){
		this.d=d;
	}
	
	public double getTemp(){
		return temp;
	}
	
	public void setTemp(double temp){
		this.temp=temp;
	}
	
	public double getLoad(){
		return load;
	}
	
	public void setLoad(int load){
		this.load=load;
	}

	/**
	 * @return a <code>Bbank</code> object.
	 * @throws SQLException 
	 */
	public Bbank getBbank() throws SQLException {		
		return Bbank.getInstance(d.getPlanyear(), getDuct().getDuctBank().getBbankSubId());
	}	
	
	public String toString() {
		return d.toString();
	}

	@Override
	public double getCoinFactor() {
		return 0;
	}

	public String getDocNote() {
		try {
			return getDuct().getCkt().getDailyPeak(getDate()).getDocNote();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public int getGenAdj() {
		try {
			return getDuct().getCkt().getDailyPeak(getDate()).getGenAdj();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}

	@Override
	public String getIDCol() {
		return null;
	}

	@Override
	public int getId() {
		return 0;
	}

	public LoadServingEntity getLSE() throws SQLException {
		return getDuct().getCkt();
	}

	public String getNote() {
		try {
			return getDuct().getCkt().getDailyPeak(getDate()).getNote();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public int getPeakAdj() {
		return 0;
	}

	@Override
	public Calendar getPeakDate() {
		return null;
	}

	@Override
	public int getPeakValue() {
		return 0;
	}

	@Override
	public int getPlanyear() {
		return getDuct().getPlanyear();
	}

	@Override
	public double getVarVal() {
		return 0;
	}

	@Override
	public void setCoinFactor(double coinFactor) throws SQLException {
		
		
	}

	@Override
	public void setGenAdj(int genAdj) throws SQLException {
		getDuct().getCkt().getDailyPeak(getDate()).setGenAdj(genAdj);
		
	}

	public void setNote(String note) throws SQLException {
		getDuct().getCkt().getDailyPeak(getDate()).setNote(note);
	}
	
	public void setDocNote(String note) throws SQLException {
		getDuct().getCkt().getDailyPeak(getDate()).setDocNote(note);
	}

	public void setPeakAdj(int peakAdj) throws SQLException {
		getDuct().getCkt().getDailyPeak(getDate()).setPeakAdj(peakAdj);
	}

	@Override
	public String getHashKey() {
		return null;
	}

	public int getPeakA() {
		return 0;
	}

	public int getPeakB(){
		return 0;
	}

	public int getPeakC()  {
		return 0;
	}

	@Override
	public boolean isRetrieved() {
		return false;
	}

	@Override
	public void setPeakA(int peak) throws SQLException {
	}

	@Override
	public void setPeakB(int peak) throws SQLException {
	}

	@Override
	public void setPeakC(int peak) throws SQLException {
	}

	@Override
	public void setRetrieved(boolean retrieved) throws SQLException {
	}

	@Override
	public int getAbnormal() throws SQLException {
		return 0;
	}

	@Override
	public void setAbnormal(int index) throws SQLException {
	}

	@Override
	public AutomatedEquipment getAE() throws SQLException {
		return getLSE();
	}
}