package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostType;
import com.sce.esp.object.model.SceProjElemCost;
import com.sce.esp.object.model.SceProjElemLabor;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SceProjElemLaborDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,SPEC_ID,COST_TYPE_ID,HOURS,CONT_FACTOR,DIFFICULTY_FACTOR,PERCENT_EXPENSE};
	public final static int ID_LIMIT = 9;
	public final static int SPECID_LIMIT = 9;
	public final static int COSTTYPEID_LIMIT = 9;
	public final static int HOURS_LIMIT = 24;
	public final static int CONTFACTOR_LIMIT = 24;
	public final static int DIFFICULTYFACTOR_LIMIT = 24;
	public final static int PERCENTEXPENSE_LIMIT = 24;
	private int id;
	private int specId;
	private int costTypeId;
	private double hours;
	private double contFactor;
	private double difficultyFactor = 1;
	private double percentExpense;
	private SceProjElemCost sceProjElemCost;
	private CostType costType;
	public static SceProjElemLabor getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static SceProjElemLabor getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjElemLabor o = null;
		if(cache != null && cache.contains(SceProjElemLabor.class, pk))
			o = em.find(SceProjElemLabor.class, pk);
		if(o==null && getAICache().contains(SceProjElemLabor.class, pk))
			o = getAICache().find(SceProjElemLabor.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjElemLabor.class, pk);
		if(o==null && fetch && SceProjElemLabor.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjElemLabor(id);
			getAICache().cache(SceProjElemLabor.class, o);
		}
		return o;
	}
	public static Collection<SceProjElemLabor> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjElemLabor> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjElemLabor> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjElemLabor o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjElemLabor> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjElemLabor> tq = em.createQuery(jpql,SceProjElemLabor.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjElemLabor> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjElemLabor> tq = em.createNamedQuery(name,SceProjElemLabor.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjElemLaborDAO(){}
	public SceProjElemLaborDAO(int id){
		this.id=id;
	}
	public SceProjElemLaborDAO(SceProjElemLaborDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SceProjElemLaborDAO orig){
		this.specId=orig.getSpecId();
		this.costTypeId=orig.getCostTypeId();
		this.hours=orig.getHours();
		this.contFactor=orig.getContFactor();
		this.difficultyFactor=orig.getDifficultyFactor();
		this.percentExpense=orig.getPercentExpense();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIU40_SEQ",sequenceName="MDIU40_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="SPEC_ID",nullable=true,length=9)
	public int getSpecId(){
		return specId;
	}
	public void setSpecId(int specId) throws java.sql.SQLException{
		if(isSame(specId, getSpecId()))return;
		int oldValue = getSpecId();
		this.specId=specId;
		setProperty("SPEC_ID", specId, oldValue);
		sceProjElemCost=null;
	}
	@Column(name="COST_TYPE_ID",nullable=true,length=9)
	public int getCostTypeId(){
		return costTypeId;
	}
	public void setCostTypeId(int costTypeId) throws java.sql.SQLException{
		if(isSame(costTypeId, getCostTypeId()))return;
		int oldValue = getCostTypeId();
		this.costTypeId=costTypeId;
		setProperty("COST_TYPE_ID", costTypeId, oldValue);
		costType=null;
	}
	@Column(name="HOURS",nullable=true,length=24)
	public double getHours(){
		return hours;
	}
	public void setHours(double hours) throws java.sql.SQLException{
		if(isSame(hours, getHours()))return;
		double oldValue = getHours();
		this.hours=hours;
		setProperty("HOURS", hours, oldValue);
	}
	@Column(name="CONT_FACTOR",nullable=true,length=24)
	public double getContFactor(){
		return contFactor;
	}
	public void setContFactor(double contFactor) throws java.sql.SQLException{
		if(isSame(contFactor, getContFactor()))return;
		double oldValue = getContFactor();
		this.contFactor=contFactor;
		setProperty("CONT_FACTOR", contFactor, oldValue);
	}
	@Column(name="DIFFICULTY_FACTOR",nullable=true,length=24)
	public double getDifficultyFactor(){
		return difficultyFactor;
	}
	public void setDifficultyFactor(double difficultyFactor) throws java.sql.SQLException{
		if(isSame(difficultyFactor, getDifficultyFactor()))return;
		double oldValue = getDifficultyFactor();
		this.difficultyFactor=difficultyFactor;
		setProperty("DIFFICULTY_FACTOR", difficultyFactor, oldValue);
	}
	@Column(name="PERCENT_EXPENSE",nullable=true,length=24)
	public double getPercentExpense(){
		return percentExpense;
	}
	public void setPercentExpense(double percentExpense) throws java.sql.SQLException{
		if(isSame(percentExpense, getPercentExpense()))return;
		double oldValue = getPercentExpense();
		this.percentExpense=percentExpense;
		setProperty("PERCENT_EXPENSE", percentExpense, oldValue);
	}
	public SceProjElemCost getSceProjElemCost()throws java.sql.SQLException{
		if(sceProjElemCost==null)
			sceProjElemCost=SceProjElemCost.getInstance(getSpecId());
		return sceProjElemCost;
	}
	public void setSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		setSpecId(sceProjElemCost==null?0:sceProjElemCost.getCostId());
		this.sceProjElemCost=sceProjElemCost;
	}
	public CostType getCostType()throws java.sql.SQLException{
		if(costType==null)
			costType=CostType.getInstance(getCostTypeId());
		return costType;
	}
	public void setCostType(CostType costType)throws java.sql.SQLException{
		setCostTypeId(costType==null?0:costType.getId());
		this.costType=costType;
	}
	public SceProjElemLabor copy()throws java.sql.SQLException{
		SceProjElemLabor cp = new SceProjElemLabor((SceProjElemLabor)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjElemLaborDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SceProjElemLaborDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getSpecId(),o.getSpecId())) diffs.add("SPEC_ID");
		if(!isSame(getCostTypeId(),o.getCostTypeId())) diffs.add("COST_TYPE_ID");
		if(!isSame(getHours(),o.getHours())) diffs.add("HOURS");
		if(!isSame(getContFactor(),o.getContFactor())) diffs.add("CONT_FACTOR");
		if(!isSame(getDifficultyFactor(),o.getDifficultyFactor())) diffs.add("DIFFICULTY_FACTOR");
		if(!isSame(getPercentExpense(),o.getPercentExpense())) diffs.add("PERCENT_EXPENSE");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(sceProjElemCost != null && sceProjElemCost.isNewInstance())
				sceProjElemCost.insert();
		if(costType != null && costType.isNewInstance())
				costType.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
