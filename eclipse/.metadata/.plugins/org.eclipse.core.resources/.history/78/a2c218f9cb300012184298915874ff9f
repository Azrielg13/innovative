package com.sce.esp.object.model;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.List;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.GiAppDAO;
@Entity
@Table(schema="MDI",name="MDIZ99_GI_APP")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM GiApp o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM GiApp o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM GiApp o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIZ99_GI_APP o WHERE o.ID=?"),//AUTO-GENERATED
})
public class GiApp extends GiAppDAO{
	
	public GiApp(){
	}
	public GiApp(int id){
		super(id);
	}
	public GiApp(GiApp orig){
		super(orig);
	}
	
	//TODO -- Needs to take get NEM's, but return as a single record
	public Collection<GiApp> getGenAheadInQueue() {
		List<GiApp> eList = new ArrayList<GiApp>();
		String [] madParams = new String[] {"CO_TYPE_ID","FAC_ID"};
		try {
			if(getCoTypeId() == CoType.CIRCUIT){
				List<GiApp> all = (List<GiApp>) GiApp.getCollection(madParams, getCoTypeId(), getFacId());
				for(GiApp gi: all) {
					if(gi.getGiStudy()!=null && gi.getGiStudy().getQueueDate() != null
							&& gi.getGiStudy().getQueueDate().getTime().before(getGiStudy().getQueueDate().getTime()))
						eList.add(gi);
				}
			} else if(getCoTypeId() == CoType.BBANK) {
				Bbank b = Bbank.getInstance(Department.getActivePlanYear(), getFacId());
				for(GiApp gi: (List<GiApp>) GiApp.getCollection(madParams, CoType.BBANK, getFacId())) {
					if(gi.getGiStudy()!=null && gi.getGiStudy().getQueueDate() != null
							&& gi.getGiStudy().getQueueDate().getTime().before(getGiStudy().getQueueDate().getTime()))
						eList.add(gi);
				}
				for(Ckt ckt: b.getCkts()) {
					List<GiApp> all = (List<GiApp>) GiApp.getCollection(madParams, CoType.CIRCUIT, ckt.getId());
					for(GiApp gi: all) {
						if(gi.getGiStudy()!=null && gi.getGiStudy().getQueueDate() != null
								&& gi.getGiStudy().getQueueDate().getTime().before(getGiStudy().getQueueDate().getTime()))
							eList.add(gi);
					}
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		return eList;
	}
	public Ckt getCkt() {
		try {
		if(CoType.CIRCUIT == getCoTypeId())
			return Ckt.getInstance(Department.getActivePlanYear(), getFacId());
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	public Sub getSub() {
		try {
			if(CoType.CIRCUIT == getCoTypeId())
				return getCkt().getBbank();
			else if(CoType.BBANK == getCoTypeId())
				return Bbank.getInstance(Department.getActivePlanYear(), getFacId());
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	public Sys getSys() {
		int simId = 0;
		try {
			if(CoType.CIRCUIT == getCoTypeId())
				return getCkt().getYear(simId, Department.getActivePlanYear()).getSys();
			else if(CoType.BBANK == getCoTypeId())
				return getSub().getYear(simId, 2012).getSys();
		} catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static Collection<GiApp> getDownstreamApps(int cotype, int facid) {
		List<GiApp> eList = new ArrayList<GiApp>();
		String [] madParams = new String[] {"CO_TYPE_ID","FAC_ID"};
		try {
			if(cotype == CoType.CIRCUIT){
				List<GiApp> all = (List<GiApp>) GiApp.getCollection(madParams, cotype, facid);
				eList.addAll(all);
			} else if(cotype == CoType.BBANK) {
				Bbank b = Bbank.getInstance(Department.getActivePlanYear(), facid);
				eList.addAll(GiApp.getCollection(madParams, CoType.BBANK, facid));
				for(Ckt ckt: b.getCkts()) {
					eList.addAll(getDownstreamApps(CoType.CIRCUIT, ckt.getId()));
				}
			} else if(cotype == CoType.SYSTEM) {
				Sys s = Sys.getInstance(Department.getActivePlanYear(), facid);
				for(Bbank bbank: s.getBbanks(0)) {
					eList.addAll(getDownstreamApps(CoType.BBANK, bbank.getId()));
				}
			}
		}catch(Exception e) {
			e.printStackTrace();
		}
		return eList;
	}
}
