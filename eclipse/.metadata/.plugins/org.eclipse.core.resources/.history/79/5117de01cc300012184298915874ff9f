//keep
package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;

import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;

import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CoType;
import com.sce.esp.object.model.CostAllocation;
import com.sce.esp.object.model.CostLoaderRate;
import com.sce.esp.object.model.CostSheetOH;
import com.sce.esp.object.model.CostStage;
import com.sce.esp.object.model.ProjCostRate;
import com.sce.esp.object.model.SapWbs;
import com.sce.esp.object.model.SceElem;
import com.sce.esp.object.model.SceProjElemCost;
import com.sce.esp.object.model.SceProjElemCostYear;
import com.sce.esp.object.model.SceProjElemLabor;
import com.sce.esp.object.model.SceProjElemPriority;
import com.sce.esp.object.model.SceProjRev;
import com.sce.esp.object.model.ScopeItem;
import com.sce.esp.object.model.SubQbr;
import com.sce.esp.object.model.Task;
import com.sce.esp.object.model.User;
public abstract class SceProjElemCostDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{COST_ID};
	public static enum PROPERTY{COST_ID,SCE_PROJ_REV_ID,SCE_ELEM_ID,TITLE,SCOPE,USE_CALC,PWEE_ID,WO,SAP_ORDER_NUM,SAP_WBS_ID,SAP_WBS_SEQ,PROPOSED_OD,APPROVED_OD,PROPOSED_OD_OFFSET,APPROVED_OD_OFFSET,OD_NOTE,NOTE,FERC_FUNDING,ESTIMATE_BY,SENT_TS,RECEIVED_TS,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_VARCHAR1,ALT_VARCHAR2,ALT_VARCHAR3,ALT_DATE1,ALT_DATE2,ALT_DATE3,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,IN_SERVICE_DATE,COMP_BY_USER_ID,COMP_DATE,COMP_NOTE,CO_TYPE_ID,FACILITY_ID,ENABLED,COST_STAGE_ID,SAP_WBS_C,SAP_WBS_W,SAP_NOTIFICATION,SHARED_COST_NUM,SUB_QBR_ID,USE_DEFAULT_SCOPE,TASK_ID,USER_CONT_OVERRIDE,CWIP,ABANDONED,ROE,ROE_ADDER,COST_SHEET_OH_KEY_ID};
	public final static int COSTID_LIMIT = 9;
	public final static int SCEPROJREVID_LIMIT = 9;
	public final static int SCEELEMID_LIMIT = 9;
	public final static int TITLE_LIMIT = 64;
	public final static int SCOPE_LIMIT = 3072;
	public final static int USECALC_LIMIT = 1;
	public final static int PWEEID_LIMIT = 32;
	public final static int WO_LIMIT = 32;
	public final static int SAPORDERNUM_LIMIT = 32;
	public final static int SAPWBSID_LIMIT = 9;
	public final static int SAPWBSSEQ_LIMIT = 9;
	public final static int PROPOSEDOD_LIMIT = 7;
	public final static int APPROVEDOD_LIMIT = 7;
	public final static int PROPOSEDODOFFSET_LIMIT = 9;
	public final static int APPROVEDODOFFSET_LIMIT = 9;
	public final static int ODNOTE_LIMIT = 512;
	public final static int NOTE_LIMIT = 1024;
	public final static int FERCFUNDING_LIMIT = 24;
	public final static int ESTIMATEBY_LIMIT = 256;
	public final static int SENTTS_LIMIT = 7;
	public final static int RECEIVEDTS_LIMIT = 7;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTDATE2_LIMIT = 7;
	public final static int ALTDATE3_LIMIT = 7;
	public final static int INSERVICEDATE_LIMIT = 7;
	public final static int COMPBYUSERID_LIMIT = 9;
	public final static int COMPDATE_LIMIT = 7;
	public final static int COMPNOTE_LIMIT = 512;
	public final static int COTYPEID_LIMIT = 9;
	public final static int FACILITYID_LIMIT = 9;
	public final static int ENABLED_LIMIT = 1;
	public final static int COSTSTAGEID_LIMIT = 9;
	public final static int SAPWBSC_LIMIT = 50;
	public final static int SAPWBSW_LIMIT = 50;
	public final static int SAPNOTIFICATION_LIMIT = 128;
	public final static int SHAREDCOSTNUM_LIMIT = 10;
	public final static int SUBQBRID_LIMIT = 9;
	public final static int TASKID_LIMIT = 9;
	public final static int USEDEFAULTSCOPE_LIMIT = 1;
	public final static int USERCONTOVERRIDE_LIMIT = 24;
	public final static int COSTSHEETOHKEYID_LIMIT = 9;
	public final static int CWIP_LIMIT = 1;
	public final static int ABANDONED_LIMIT = 1;
	public final static int ROE_LIMIT = 1;
	public final static int ROEADDER_LIMIT = 4;
	private int costId;
	private int sceProjRevId;
	private int sceElemId;
	private String title;
	private String scope;
	private boolean useCalc = true;
	private String pweeId;
	private String wo;
	private String sapOrderNum;
	private int sapWbsId;
	private int sapWbsSeq;
	private Calendar proposedOd;
	private Calendar approvedOd;
	private int proposedOdOffset;
	private int approvedOdOffset;
	private String odNote;
	private String note;
	private double fercFunding;
	private String estimateBy;
	private Calendar sentTs;
	private Calendar receivedTs;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private String altVarchar1;
	private String altVarchar2;
	private String altVarchar3;
	private Calendar altDate1;
	private Calendar altDate2;
	private Calendar altDate3;
	private Calendar inServiceDate;
	private int compByUserId;
	private Calendar compDate;
	private String compNote;
	private int coTypeId;
	private int facilityId;
	private boolean enabled = true;
	private int costStageId;
	private String sapWbsC;
	private String sapWbsW;
	private String sapNotification;
	private long sharedCostNum;
	private int subQbrId;
	private int taskId;
	private boolean useDefaultScope = true;
	private double userContOverride;
	private int costSheetOhKeyId;
	private boolean cwip;
	private boolean abandoned;
	private boolean roe;
	private String roeAdder;

	private Collection<SceProjElemCostYear> sceProjElemCostYears;
	private Collection<CostAllocation> costAllocations;
	private Collection<SceProjElemPriority> sceProjElemPrioritys;
	private Collection<ScopeItem> scopeItems;
	private Collection<ProjCostRate> projCostRates;
	private Collection<SceProjElemLabor> sceProjElemLabors;
	private Collection<CostLoaderRate> costLoaderRates;
	private SceProjRev sceProjRev;
	private SceElem sceElem;
	private CostStage costStage;
	private SubQbr subQbr;
	private Task task;
	private CostSheetOH costSheetOH;
	private SapWbs sapWbs;
	private User user;
	private CoType coType;
	public static SceProjElemCost getInstance(int costId)throws java.sql.SQLException{
		return getInstance(costId, true);
	}
	public static SceProjElemCost getInstance(int costId, boolean fetch)throws java.sql.SQLException{
		if(isNull(costId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(costId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjElemCost o = null;
		if(cache != null && cache.contains(SceProjElemCost.class, pk))
			o = em.find(SceProjElemCost.class, pk);
		if(o==null && getAICache().contains(SceProjElemCost.class, pk))
			o = getAICache().find(SceProjElemCost.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjElemCost.class, pk);
		if(o==null && fetch && SceProjElemCost.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjElemCost(costId);
			getAICache().cache(SceProjElemCost.class, o);
		}
		return o;
	}
	public static Collection<SceProjElemCost> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjElemCost> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjElemCost> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjElemCost o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjElemCost> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjElemCost> tq = em.createQuery(jpql,SceProjElemCost.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjElemCost> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjElemCost> tq = em.createNamedQuery(name,SceProjElemCost.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjElemCostDAO(){}
	public SceProjElemCostDAO(int costId){
		this.costId=costId;
	}
	public SceProjElemCostDAO(SceProjElemCostDAO orig){
		super(orig);
		
		copyFrom(orig);
	}
	public void copyFrom(SceProjElemCostDAO orig){
		this.sceProjRevId=orig.getSceProjRevId();
		this.sceElemId=orig.getSceElemId();
		this.title=orig.getTitle();
		this.scope=orig.getScope();
		this.useCalc=orig.isUseCalc();
		this.pweeId=orig.getPweeId();
		this.wo=orig.getWo();
		this.sapOrderNum=orig.getSapOrderNum();
		this.sapWbsId=orig.getSapWbsId();
		this.sapWbsSeq=orig.getSapWbsSeq();
		this.proposedOd=orig.getProposedOd();
		this.approvedOd=orig.getApprovedOd();
		this.proposedOdOffset=orig.getProposedOdOffset();
		this.approvedOdOffset=orig.getApprovedOdOffset();
		this.odNote=orig.getOdNote();
		this.note=orig.getNote();
		this.fercFunding=orig.getFercFunding();
		this.estimateBy=orig.getEstimateBy();
		this.sentTs=orig.getSentTs();
		this.receivedTs=orig.getReceivedTs();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altVarchar1=orig.getAltVarchar1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altDate1=orig.getAltDate1();
		this.altDate2=orig.getAltDate2();
		this.altDate3=orig.getAltDate3();
		this.inServiceDate=orig.getInServiceDate();
		this.compByUserId=orig.getCompByUserId();
		this.compDate=orig.getCompDate();
		this.compNote=orig.getCompNote();
		this.coTypeId=orig.getCoTypeId();
		this.facilityId=orig.getFacilityId();
		this.enabled=orig.isEnabled();
		this.costStageId=orig.getCostStageId();
		this.sapWbsC=orig.getSapWbsC();
		this.sapWbsW=orig.getSapWbsW();
		this.sapNotification=orig.getSapNotification();
		this.sharedCostNum=orig.getSharedCostNum();
		this.subQbrId=orig.getSubQbrId();
		this.taskId=orig.getTaskId();
		this.useDefaultScope=orig.isUseDefaultScope();
		this.userContOverride=orig.getUserContOverride();
		this.costSheetOhKeyId=orig.getCostSheetOhKeyId();
		this.cwip=orig.isCwip();
		this.abandoned=orig.isAbandoned();
		this.roe=orig.isRoe();
		this.roeAdder=orig.getRoeAdder();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{costId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS80_SEQ",sequenceName="MDIS80_SEQ")
	@Column(name="COST_ID",nullable=false,length=9)
	public int getCostId(){
		return costId;
	}
	public void setCostId(int costId) throws java.sql.SQLException{
		if(isSame(costId, getCostId()))return;
		int oldValue = getCostId();
		this.costId=costId;
		setProperty("COST_ID", costId, oldValue);
	}
	@Column(name="SCE_PROJ_REV_ID",nullable=false,length=9)
	public int getSceProjRevId(){
		return sceProjRevId;
	}
	public void setSceProjRevId(int sceProjRevId) throws java.sql.SQLException{
		if(isSame(sceProjRevId, getSceProjRevId()))return;
		int oldValue = getSceProjRevId();
		this.sceProjRevId=sceProjRevId;
		setProperty("SCE_PROJ_REV_ID", sceProjRevId, oldValue);
		sceProjRev=null;
	}
	@Column(name="SCE_ELEM_ID",nullable=false,length=9)
	public int getSceElemId(){
		return sceElemId;
	}
	public void setSceElemId(int sceElemId) throws java.sql.SQLException{
		if(isSame(sceElemId, getSceElemId()))return;
		int oldValue = getSceElemId();
		this.sceElemId=sceElemId;
		setProperty("SCE_ELEM_ID", sceElemId, oldValue);
		sceElem=null;
	}
	@Column(name="TITLE",nullable=true,length=64)
	public String getTitle(){
		return title;
	}
	public void setTitle(String title) throws java.sql.SQLException{
		if(isSame(title, getTitle()))return;
		String oldValue = getTitle();
		this.title=title;
		setProperty("TITLE", title, oldValue);
	}
	@Column(name="SCOPE",nullable=true,length=3072)
	public String getScope(){
		return scope;
	}
	public void setScope(String scope) throws java.sql.SQLException{
		if(isSame(scope, getScope()))return;
		String oldValue = getScope();
		this.scope=scope;
		setProperty("SCOPE", scope, oldValue);
	}
	@Column(name="USE_CALC",nullable=true,length=1)
	public boolean isUseCalc(){
		return useCalc;
	}
	public void setUseCalc(boolean useCalc) throws java.sql.SQLException{
		if(isSame(useCalc, isUseCalc()))return;
		boolean oldValue = isUseCalc();
		this.useCalc=useCalc;
		setProperty("USE_CALC", useCalc, oldValue);
	}
	@Column(name="PWEE_ID",nullable=true,length=32)
	public String getPweeId(){
		return pweeId;
	}
	public void setPweeId(String pweeId) throws java.sql.SQLException{
		if(isSame(pweeId, getPweeId()))return;
		String oldValue = getPweeId();
		this.pweeId=pweeId;
		setProperty("PWEE_ID", pweeId, oldValue);
	}
	@Column(name="WO",nullable=true,length=32)
	public String getWo(){
		return wo;
	}
	public void setWo(String wo) throws java.sql.SQLException{
		if(isSame(wo, getWo()))return;
		String oldValue = getWo();
		this.wo=wo;
		setProperty("WO", wo, oldValue);
	}
	@Column(name="SAP_ORDER_NUM",nullable=true,length=32)
	public String getSapOrderNum(){
		return sapOrderNum;
	}
	public void setSapOrderNum(String sapOrderNum) throws java.sql.SQLException{
		if(isSame(sapOrderNum, getSapOrderNum()))return;
		String oldValue = getSapOrderNum();
		this.sapOrderNum=sapOrderNum;
		setProperty("SAP_ORDER_NUM", sapOrderNum, oldValue);
	}
	@Column(name="SAP_WBS_ID",nullable=true,length=9)
	public int getSapWbsId(){
		return sapWbsId;
	}
	public void setSapWbsId(int sapWbsId) throws java.sql.SQLException{
		if(isSame(sapWbsId, getSapWbsId()))return;
		int oldValue = getSapWbsId();
		this.sapWbsId=sapWbsId;
		setProperty("SAP_WBS_ID", sapWbsId, oldValue);
		sapWbs=null;
	}
	@Column(name="SAP_WBS_SEQ",nullable=true,length=9)
	public int getSapWbsSeq(){
		return sapWbsSeq;
	}
	public void setSapWbsSeq(int sapWbsSeq) throws java.sql.SQLException{
		if(isSame(sapWbsSeq, getSapWbsSeq()))return;
		int oldValue = getSapWbsSeq();
		this.sapWbsSeq=sapWbsSeq;
		setProperty("SAP_WBS_SEQ", sapWbsSeq, oldValue);
	}
	@Column(name="PROPOSED_OD",nullable=true,length=7)
	public Calendar getProposedOd(){
		return proposedOd;
	}
	public void setProposedOd(Calendar proposedOd) throws java.sql.SQLException{
		if(isSame(proposedOd, getProposedOd()))return;
		Calendar oldValue = getProposedOd();
		this.proposedOd=proposedOd;
		setProperty("PROPOSED_OD", proposedOd, oldValue);
	}
	@Column(name="APPROVED_OD",nullable=true,length=7)
	public Calendar getApprovedOd(){
		return approvedOd;
	}
	public void setApprovedOd(Calendar approvedOd) throws java.sql.SQLException{
		if(isSame(approvedOd, getApprovedOd()))return;
		Calendar oldValue = getApprovedOd();
		this.approvedOd=approvedOd;
		setProperty("APPROVED_OD", approvedOd, oldValue);
	}
	@Column(name="PROPOSED_OD_OFFSET",nullable=true,length=9)
	public int getProposedOdOffset(){
		return proposedOdOffset;
	}
	public void setProposedOdOffset(int proposedOdOffset) throws java.sql.SQLException{
		if(isSame(proposedOdOffset, getProposedOdOffset()))return;
		int oldValue = getProposedOdOffset();
		this.proposedOdOffset=proposedOdOffset;
		setProperty("PROPOSED_OD_OFFSET", proposedOdOffset, oldValue);
	}
	@Column(name="APPROVED_OD_OFFSET",nullable=true,length=9)
	public int getApprovedOdOffset(){
		return approvedOdOffset;
	}
	public void setApprovedOdOffset(int approvedOdOffset) throws java.sql.SQLException{
		if(isSame(approvedOdOffset, getApprovedOdOffset()))return;
		int oldValue = getApprovedOdOffset();
		this.approvedOdOffset=approvedOdOffset;
		setProperty("APPROVED_OD_OFFSET", approvedOdOffset, oldValue);
	}
	@Column(name="OD_NOTE",nullable=true,length=512)
	public String getOdNote(){
		return odNote;
	}
	public void setOdNote(String odNote) throws java.sql.SQLException{
		if(isSame(odNote, getOdNote()))return;
		String oldValue = getOdNote();
		this.odNote=odNote;
		setProperty("OD_NOTE", odNote, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=1024)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="FERC_FUNDING",nullable=true,length=24)
	public double getFercFunding(){
		return fercFunding;
	}
	public void setFercFunding(double fercFunding) throws java.sql.SQLException{
		if(isSame(fercFunding, getFercFunding()))return;
		double oldValue = getFercFunding();
		this.fercFunding=fercFunding;
		setProperty("FERC_FUNDING", fercFunding, oldValue);
	}
	@Column(name="ESTIMATE_BY",nullable=true,length=256)
	public String getEstimateBy(){
		return estimateBy;
	}
	public void setEstimateBy(String estimateBy) throws java.sql.SQLException{
		if(isSame(estimateBy, getEstimateBy()))return;
		String oldValue = getEstimateBy();
		this.estimateBy=estimateBy;
		setProperty("ESTIMATE_BY", estimateBy, oldValue);
	}
	@Column(name="SENT_TS",nullable=true,length=7)
	public Calendar getSentTs(){
		return sentTs;
	}
	public void setSentTs(Calendar sentTs) throws java.sql.SQLException{
		if(isSame(sentTs, getSentTs()))return;
		Calendar oldValue = getSentTs();
		this.sentTs=sentTs;
		setProperty("SENT_TS", sentTs, oldValue);
	}
	@Column(name="RECEIVED_TS",nullable=true,length=7)
	public Calendar getReceivedTs(){
		return receivedTs;
	}
	public void setReceivedTs(Calendar receivedTs) throws java.sql.SQLException{
		if(isSame(receivedTs, getReceivedTs()))return;
		Calendar oldValue = getReceivedTs();
		this.receivedTs=receivedTs;
		setProperty("RECEIVED_TS", receivedTs, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_DATE2",nullable=true,length=7)
	public Calendar getAltDate2(){
		return altDate2;
	}
	public void setAltDate2(Calendar altDate2) throws java.sql.SQLException{
		if(isSame(altDate2, getAltDate2()))return;
		Calendar oldValue = getAltDate2();
		this.altDate2=altDate2;
		setProperty("ALT_DATE2", altDate2, oldValue);
	}
	@Column(name="ALT_DATE3",nullable=true,length=7)
	public Calendar getAltDate3(){
		return altDate3;
	}
	public void setAltDate3(Calendar altDate3) throws java.sql.SQLException{
		if(isSame(altDate3, getAltDate3()))return;
		Calendar oldValue = getAltDate3();
		this.altDate3=altDate3;
		setProperty("ALT_DATE3", altDate3, oldValue);
	}
	@Column(name="IN_SERVICE_DATE",nullable=true,length=7)
	public Calendar getInServiceDate(){
		return inServiceDate;
	}
	public void setInServiceDate(Calendar inServiceDate) throws java.sql.SQLException{
		if(isSame(inServiceDate, getInServiceDate()))return;
		Calendar oldValue = getInServiceDate();
		this.inServiceDate=inServiceDate;
		setProperty("IN_SERVICE_DATE", inServiceDate, oldValue);
	}
	@Column(name="COMP_BY_USER_ID",nullable=true,length=9)
	public int getCompByUserId(){
		return compByUserId;
	}
	public void setCompByUserId(int compByUserId) throws java.sql.SQLException{
		if(isSame(compByUserId, getCompByUserId()))return;
		int oldValue = getCompByUserId();
		this.compByUserId=compByUserId;
		setProperty("COMP_BY_USER_ID", compByUserId, oldValue);
		user=null;
	}
	@Column(name="COMP_DATE",nullable=true,length=7)
	public Calendar getCompDate(){
		return compDate;
	}
	public void setCompDate(Calendar compDate) throws java.sql.SQLException{
		if(isSame(compDate, getCompDate()))return;
		Calendar oldValue = getCompDate();
		this.compDate=compDate;
		setProperty("COMP_DATE", compDate, oldValue);
	}
	@Column(name="COMP_NOTE",nullable=true,length=512)
	public String getCompNote(){
		return compNote;
	}
	public void setCompNote(String compNote) throws java.sql.SQLException{
		if(isSame(compNote, getCompNote()))return;
		String oldValue = getCompNote();
		this.compNote=compNote;
		setProperty("COMP_NOTE", compNote, oldValue);
	}
	@Column(name="CO_TYPE_ID",nullable=true,length=9)
	public int getCoTypeId(){
		return coTypeId;
	}
	public void setCoTypeId(int coTypeId) throws java.sql.SQLException{
		if(isSame(coTypeId, getCoTypeId()))return;
		int oldValue = getCoTypeId();
		this.coTypeId=coTypeId;
		setProperty("CO_TYPE_ID", coTypeId, oldValue);
		coType=null;
	}
	@Column(name="FACILITY_ID",nullable=true,length=9)
	public int getFacilityId(){
		return facilityId;
	}
	public void setFacilityId(int facilityId) throws java.sql.SQLException{
		if(isSame(facilityId, getFacilityId()))return;
		int oldValue = getFacilityId();
		this.facilityId=facilityId;
		setProperty("FACILITY_ID", facilityId, oldValue);
	}
	@Column(name="ENABLED",nullable=true,length=1)
	public boolean isEnabled(){
		return enabled;
	}
	public void setEnabled(boolean enabled) throws java.sql.SQLException{
		if(isSame(enabled, isEnabled()))return;
		boolean oldValue = isEnabled();
		this.enabled=enabled;
		setProperty("ENABLED", enabled, oldValue);
	}
	@Column(name="COST_STAGE_ID",nullable=true,length=9)
	public int getCostStageId(){
		return costStageId;
	}
	public void setCostStageId(int costStageId) throws java.sql.SQLException{
		if(isSame(costStageId, getCostStageId()))return;
		int oldValue = getCostStageId();
		this.costStageId=costStageId;
		setProperty("COST_STAGE_ID", costStageId, oldValue);
		costStage=null;
	}
	@Column(name="SAP_WBS_C",nullable=true,length=50)
	public String getSapWbsC(){
		return sapWbsC;
	}
	public void setSapWbsC(String sapWbsC) throws java.sql.SQLException{
		if(isSame(sapWbsC, getSapWbsC()))return;
		String oldValue = getSapWbsC();
		this.sapWbsC=sapWbsC;
		setProperty("SAP_WBS_C", sapWbsC, oldValue);
	}
	@Column(name="SAP_WBS_W",nullable=true,length=50)
	public String getSapWbsW(){
		return sapWbsW;
	}
	public void setSapWbsW(String sapWbsW) throws java.sql.SQLException{
		if(isSame(sapWbsW, getSapWbsW()))return;
		String oldValue = getSapWbsW();
		this.sapWbsW=sapWbsW;
		setProperty("SAP_WBS_W", sapWbsW, oldValue);
	}
	@Column(name="SAP_NOTIFICATION",nullable=true,length=128)
	public String getSapNotification(){
		return sapNotification;
	}
	public void setSapNotification(String sapNotification) throws java.sql.SQLException{
		if(isSame(sapNotification, getSapNotification()))return;
		String oldValue = getSapNotification();
		this.sapNotification=sapNotification;
		setProperty("SAP_NOTIFICATION", sapNotification, oldValue);
	}
	@Column(name="SHARED_COST_NUM",nullable=true,length=10)
	public long getSharedCostNum(){
		return sharedCostNum;
	}
	public void setSharedCostNum(long sharedCostNum) throws java.sql.SQLException{
		if(isSame(sharedCostNum, getSharedCostNum()))return;
		long oldValue = getSharedCostNum();
		this.sharedCostNum=sharedCostNum;
		setProperty("SHARED_COST_NUM", sharedCostNum, oldValue);
	}
	@Column(name="SUB_QBR_ID",nullable=true,length=9)
	public int getSubQbrId(){
		return subQbrId;
	}
	public void setSubQbrId(int subQbrId) throws java.sql.SQLException{
		if(isSame(subQbrId, getSubQbrId()))return;
		int oldValue = getSubQbrId();
		this.subQbrId=subQbrId;
		setProperty("SUB_QBR_ID", subQbrId, oldValue);
		subQbr=null;
	}
	@Column(name="TASK_ID",nullable=true,length=9)
	public int getTaskId(){
		return taskId;
	}
	public void setTaskId(int taskId) throws java.sql.SQLException{
		if(isSame(taskId, getTaskId()))return;
		int oldValue = getTaskId();
		this.taskId=taskId;
		setProperty("TASK_ID", taskId, oldValue);
		task=null;
	}
	@Column(name="USE_DEFAULT_SCOPE",nullable=true,length=1)
	public boolean isUseDefaultScope(){
		return useDefaultScope;
	}
	public void setUseDefaultScope(boolean useDefaultScope) throws java.sql.SQLException{
		if(isSame(useDefaultScope, isUseDefaultScope()))return;
		boolean oldValue = isUseDefaultScope();
		this.useDefaultScope=useDefaultScope;
		setProperty("USE_DEFAULT_SCOPE", useDefaultScope, oldValue);
	}
	@Column(name="USER_CONT_OVERRIDE",nullable=true,length=24)
	public double getUserContOverride(){
		return userContOverride;
	}
	public void setUserContOverride(double userContOverride) throws java.sql.SQLException{
		if(isSame(userContOverride, getUserContOverride()))return;
		double oldValue = getUserContOverride();
		this.userContOverride=userContOverride;
		setProperty("USER_CONT_OVERRIDE", userContOverride, oldValue);
	}
	@Column(name="COST_SHEET_OH_KEY_ID",nullable=true,length=9)
	public int getCostSheetOhKeyId(){
		return costSheetOhKeyId;
	}
	@Column(name="CWIP",nullable=true,length=1)
	public boolean isCwip(){
		return cwip;
	}
	public void setCwip(boolean cwip) throws java.sql.SQLException{
		if(isSame(cwip, isCwip()))return;
		boolean oldValue = isCwip();
		this.cwip=cwip;
		setProperty("CWIP", cwip, oldValue);
	}
	@Column(name="ABANDONED",nullable=true,length=1)
	public boolean isAbandoned(){
		return abandoned;
	}
	public void setAbandoned(boolean abandoned) throws java.sql.SQLException{
		if(isSame(abandoned, isAbandoned()))return;
		boolean oldValue = isAbandoned();
		this.abandoned=abandoned;
		setProperty("ABANDONED", abandoned, oldValue);
	}
	@Column(name="ROE",nullable=true,length=1)
	public boolean isRoe(){
		return roe;
	}
	public void setRoe(boolean roe) throws java.sql.SQLException{
		if(isSame(roe, isRoe()))return;
		boolean oldValue = isRoe();
		this.roe=roe;
		setProperty("ROE", roe, oldValue);
	}
	@Column(name="ROE_ADDER",nullable=true,length=4)
	public String getRoeAdder(){
		return roeAdder;
	}
	public void setRoeAdder(String roeAdder) throws java.sql.SQLException{
		if(isSame(roeAdder, getRoeAdder()))return;
		String oldValue = getRoeAdder();
		this.roeAdder=roeAdder;
		setProperty("ROE_ADDER", roeAdder, oldValue);
	}
	public void setCostSheetOhKeyId(int costSheetOhKeyId) throws java.sql.SQLException{
		if(isSame(costSheetOhKeyId, getCostSheetOhKeyId()))return;
		int oldValue = getCostSheetOhKeyId();
		this.costSheetOhKeyId=costSheetOhKeyId;
		setProperty("COST_SHEET_OH_KEY_ID", costSheetOhKeyId, oldValue);
		costSheetOH=null;
	}
	public SceProjRev getSceProjRev()throws java.sql.SQLException{
		if(sceProjRev==null)
			sceProjRev=SceProjRev.getInstance(getSceProjRevId());
		return sceProjRev;
	}
	public void setSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		setSceProjRevId(sceProjRev==null?0:sceProjRev.getSceProjRevId());
		this.sceProjRev=sceProjRev;
	}
	public SceElem getSceElem()throws java.sql.SQLException{
		if(sceElem==null)
			sceElem=SceElem.getInstance(getSceElemId());
		return sceElem;
	}
	public void setSceElem(SceElem sceElem)throws java.sql.SQLException{
		setSceElemId(sceElem==null?0:sceElem.getSceElemId());
		this.sceElem=sceElem;
	}
	public CostStage getCostStage()throws java.sql.SQLException{
		if(costStage==null)
			costStage=CostStage.getInstance(getCostStageId());
		return costStage;
	}
	public void setCostStage(CostStage costStage)throws java.sql.SQLException{
		setCostStageId(costStage==null?0:costStage.getCostStageId());
		this.costStage=costStage;
	}
	public SubQbr getSubQbr()throws java.sql.SQLException{
		if(subQbr==null)
			subQbr=SubQbr.getInstance(getSubQbrId());
		return subQbr;
	}
	public void setSubQbr(SubQbr subQbr)throws java.sql.SQLException{
		setSubQbrId(subQbr==null?0:subQbr.getSubQbrId());
		this.subQbr=subQbr;
	}
	public Task getTask()throws java.sql.SQLException{
		if(task==null)
			task=Task.getInstance(getTaskId());
		return task;
	}
	public void setTask(Task task)throws java.sql.SQLException{
		setTaskId(task==null?0:task.getTaskId());
		this.task=task;
	}
	public CostSheetOH getCostSheetOH()throws java.sql.SQLException{
		if(costSheetOH==null)
			costSheetOH=CostSheetOH.getInstance(getCostSheetOhKeyId());
		return costSheetOH;
	}
	public void setCostSheetOH(CostSheetOH costSheetOH)throws java.sql.SQLException{
		setCostSheetOhKeyId(costSheetOH==null?0:costSheetOH.getId());
		this.costSheetOH=costSheetOH;
	}
	public SapWbs getSapWbs()throws java.sql.SQLException{
		if(sapWbs==null)
			sapWbs=SapWbs.getInstance(getSapWbsId());
		return sapWbs;
	}
	public void setSapWbs(SapWbs sapWbs)throws java.sql.SQLException{
		setSapWbsId(sapWbs==null?0:sapWbs.getSapWbsId());
		this.sapWbs=sapWbs;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getCompByUserId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setCompByUserId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public CoType getCoType()throws java.sql.SQLException{
		if(coType==null)
			coType=CoType.getInstance(getCoTypeId());
		return coType;
	}
	public void setCoType(CoType coType)throws java.sql.SQLException{
		setCoTypeId(coType==null?0:coType.getCoTypeId());
		this.coType=coType;
	}
	public Collection<SceProjElemCostYear> getSceProjElemCostYears()throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemCostYears != null){
			if(sceProjElemCostYears == null)
				sceProjElemCostYears = new TreeSet<SceProjElemCostYear>();
			return sceProjElemCostYears;
		}
		return SceProjElemCostYear.getNamedCollection("findBySceProjElemCost",getCostId());
	}
	public void addSceProjElemCostYear(SceProjElemCostYear sceProjElemCostYear)throws java.sql.SQLException{
		sceProjElemCostYear.setSceProjElemCost((SceProjElemCost)this);
		if(isNewInstance() || sceProjElemCostYears != null)
			getSceProjElemCostYears().add(sceProjElemCostYear);
		else
			sceProjElemCostYear.insert();
	}
	public void removeSceProjElemCostYear(SceProjElemCostYear sceProjElemCostYear)throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemCostYears != null)
			getSceProjElemCostYears().remove(sceProjElemCostYear);
		else
			sceProjElemCostYear.delete();
	}
	public Collection<CostAllocation> getCostAllocations()throws java.sql.SQLException{
		if(isNewInstance() || costAllocations != null){
			if(costAllocations == null)
				costAllocations = new TreeSet<CostAllocation>();
			return costAllocations;
		}
		return CostAllocation.getNamedCollection("findBySceProjElemCost",getCostId());
	}
	public void addCostAllocation(CostAllocation costAllocation)throws java.sql.SQLException{
		costAllocation.setSceProjElemCost((SceProjElemCost)this);
		if(isNewInstance() || costAllocations != null)
			getCostAllocations().add(costAllocation);
		else
			costAllocation.insert();
	}
	public void removeCostAllocation(CostAllocation costAllocation)throws java.sql.SQLException{
		if(isNewInstance() || costAllocations != null)
			getCostAllocations().remove(costAllocation);
		else
			costAllocation.delete();
	}
	public Collection<SceProjElemPriority> getSceProjElemPrioritys()throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemPrioritys != null){
			if(sceProjElemPrioritys == null)
				sceProjElemPrioritys = new TreeSet<SceProjElemPriority>();
			return sceProjElemPrioritys;
		}
		return SceProjElemPriority.getNamedCollection("findBySceProjElemCost",getCostId());
	}
	public void addSceProjElemPriority(SceProjElemPriority sceProjElemPriority)throws java.sql.SQLException{
		sceProjElemPriority.setSceProjElemCost((SceProjElemCost)this);
		if(isNewInstance() || sceProjElemPrioritys != null)
			getSceProjElemPrioritys().add(sceProjElemPriority);
		else
			sceProjElemPriority.insert();
	}
	public void removeSceProjElemPriority(SceProjElemPriority sceProjElemPriority)throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemPrioritys != null)
			getSceProjElemPrioritys().remove(sceProjElemPriority);
		else
			sceProjElemPriority.delete();
	}
	public Collection<ScopeItem> getScopeItems()throws java.sql.SQLException{
		if(isNewInstance() || scopeItems != null){
			if(scopeItems == null)
				scopeItems = new TreeSet<ScopeItem>();
			return scopeItems;
		}
		return ScopeItem.getNamedCollection("findBySceProjElemCost",getCostId());
	}
	public void addScopeItem(ScopeItem scopeItem)throws java.sql.SQLException{
		scopeItem.setSceProjElemCost((SceProjElemCost)this);
		if(isNewInstance() || scopeItems != null)
			getScopeItems().add(scopeItem);
		else
			scopeItem.insert();
	}
	public void removeScopeItem(ScopeItem scopeItem)throws java.sql.SQLException{
		if(isNewInstance() || scopeItems != null)
			getScopeItems().remove(scopeItem);
		else
			scopeItem.delete();
	}
	public Collection<ProjCostRate> getProjCostRates()throws java.sql.SQLException{
		if(isNewInstance() || projCostRates != null){
			if(projCostRates == null)
				projCostRates = new TreeSet<ProjCostRate>();
			return projCostRates;
		}
		return ProjCostRate.getNamedCollection("findBySceProjElemCost",getCostId());
	}
	public void addProjCostRate(ProjCostRate projCostRate)throws java.sql.SQLException{
		projCostRate.setSceProjElemCost((SceProjElemCost)this);
		if(isNewInstance() || projCostRates != null)
			getProjCostRates().add(projCostRate);
		else
			projCostRate.insert();
	}
	public void removeProjCostRate(ProjCostRate projCostRate)throws java.sql.SQLException{
		if(isNewInstance() || projCostRates != null)
			getProjCostRates().remove(projCostRate);
		else
			projCostRate.delete();
	}
	public Collection<SceProjElemLabor> getSceProjElemLabors()throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemLabors != null){
			if(sceProjElemLabors == null)
				sceProjElemLabors = new TreeSet<SceProjElemLabor>();
			return sceProjElemLabors;
		}
		return SceProjElemLabor.getNamedCollection("findBySceProjElemCost",getCostId());
	}
	public void addSceProjElemLabor(SceProjElemLabor sceProjElemLabor)throws java.sql.SQLException{
		sceProjElemLabor.setSceProjElemCost((SceProjElemCost)this);
		if(isNewInstance() || sceProjElemLabors != null)
			getSceProjElemLabors().add(sceProjElemLabor);
		else
			sceProjElemLabor.insert();
	}
	public void removeSceProjElemLabor(SceProjElemLabor sceProjElemLabor)throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemLabors != null)
			getSceProjElemLabors().remove(sceProjElemLabor);
		else
			sceProjElemLabor.delete();
	}
	public Collection<CostLoaderRate> getCostLoaderRates()throws java.sql.SQLException{
		if(isNewInstance() || costLoaderRates != null){
			if(costLoaderRates == null)
				costLoaderRates = new TreeSet<CostLoaderRate>();
			return costLoaderRates;
		}
		return CostLoaderRate.getNamedCollection("findBySceProjElemCost",getCostId());
	}
	public void addCostLoaderRate(CostLoaderRate costLoaderRate)throws java.sql.SQLException{
		costLoaderRate.setSceProjElemCost((SceProjElemCost)this);
		if(isNewInstance() || costLoaderRates != null)
			getCostLoaderRates().add(costLoaderRate);
		else
			costLoaderRate.insert();
	}
	public void removeCostLoaderRate(CostLoaderRate costLoaderRate)throws java.sql.SQLException{
		if(isNewInstance() || costLoaderRates != null)
			getCostLoaderRates().remove(costLoaderRate);
		else
			costLoaderRate.delete();
	}
	public SceProjElemCost copy()throws java.sql.SQLException{
		SceProjElemCost cp = new SceProjElemCost((SceProjElemCost)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjElemCostDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(SceProjElemCostYear child:getSceProjElemCostYears())
			cp.addSceProjElemCostYear(child.copy());
		for(CostAllocation child:getCostAllocations())
			cp.addCostAllocation(child.copy());
		for(SceProjElemPriority child:getSceProjElemPrioritys())
			cp.addSceProjElemPriority(child.copy());
		for(ScopeItem child:getScopeItems())
			cp.addScopeItem(child.copy());
		for(ProjCostRate child:getProjCostRates())
			cp.addProjCostRate(child.copy());
		for(SceProjElemLabor child:getSceProjElemLabors())
			cp.addSceProjElemLabor(child.copy());
		for(CostLoaderRate child:getCostLoaderRates())
			cp.addCostLoaderRate(child.copy());
	}
	public Vector<String> getDifference(SceProjElemCostDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getCostId(),o.getCostId())) diffs.add("COST_ID");
		if(!isSame(getSceProjRevId(),o.getSceProjRevId())) diffs.add("SCE_PROJ_REV_ID");
		if(!isSame(getSceElemId(),o.getSceElemId())) diffs.add("SCE_ELEM_ID");
		if(!isSame(getTitle(),o.getTitle())) diffs.add("TITLE");
		if(!isSame(getScope(),o.getScope())) diffs.add("SCOPE");
		if(!isSame(isUseCalc(),o.isUseCalc())) diffs.add("USE_CALC");
		if(!isSame(getPweeId(),o.getPweeId())) diffs.add("PWEE_ID");
		if(!isSame(getWo(),o.getWo())) diffs.add("WO");
		if(!isSame(getSapOrderNum(),o.getSapOrderNum())) diffs.add("SAP_ORDER_NUM");
		if(!isSame(getSapWbsId(),o.getSapWbsId())) diffs.add("SAP_WBS_ID");
		if(!isSame(getSapWbsSeq(),o.getSapWbsSeq())) diffs.add("SAP_WBS_SEQ");
		if(!isSame(getProposedOd(),o.getProposedOd())) diffs.add("PROPOSED_OD");
		if(!isSame(getApprovedOd(),o.getApprovedOd())) diffs.add("APPROVED_OD");
		if(!isSame(getProposedOdOffset(),o.getProposedOdOffset())) diffs.add("PROPOSED_OD_OFFSET");
		if(!isSame(getApprovedOdOffset(),o.getApprovedOdOffset())) diffs.add("APPROVED_OD_OFFSET");
		if(!isSame(getOdNote(),o.getOdNote())) diffs.add("OD_NOTE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getFercFunding(),o.getFercFunding())) diffs.add("FERC_FUNDING");
		if(!isSame(getEstimateBy(),o.getEstimateBy())) diffs.add("ESTIMATE_BY");
		if(!isSame(getSentTs(),o.getSentTs())) diffs.add("SENT_TS");
		if(!isSame(getReceivedTs(),o.getReceivedTs())) diffs.add("RECEIVED_TS");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltDate2(),o.getAltDate2())) diffs.add("ALT_DATE2");
		if(!isSame(getAltDate3(),o.getAltDate3())) diffs.add("ALT_DATE3");
		if(!isSame(getInServiceDate(),o.getInServiceDate())) diffs.add("IN_SERVICE_DATE");
		if(!isSame(getCompByUserId(),o.getCompByUserId())) diffs.add("COMP_BY_USER_ID");
		if(!isSame(getCompDate(),o.getCompDate())) diffs.add("COMP_DATE");
		if(!isSame(getCompNote(),o.getCompNote())) diffs.add("COMP_NOTE");
		if(!isSame(getCoTypeId(),o.getCoTypeId())) diffs.add("CO_TYPE_ID");
		if(!isSame(getFacilityId(),o.getFacilityId())) diffs.add("FACILITY_ID");
		if(!isSame(isEnabled(),o.isEnabled())) diffs.add("ENABLED");
		if(!isSame(getCostStageId(),o.getCostStageId())) diffs.add("COST_STAGE_ID");
		if(!isSame(getSapWbsC(),o.getSapWbsC())) diffs.add("SAP_WBS_C");
		if(!isSame(getSapWbsW(),o.getSapWbsW())) diffs.add("SAP_WBS_W");
		if(!isSame(getSapNotification(),o.getSapNotification())) diffs.add("SAP_NOTIFICATION");
		if(!isSame(getSharedCostNum(),o.getSharedCostNum())) diffs.add("SHARED_COST_NUM");
		if(!isSame(getSubQbrId(),o.getSubQbrId())) diffs.add("SUB_QBR_ID");
		if(!isSame(getTaskId(),o.getTaskId())) diffs.add("TASK_ID");
		if(!isSame(isUseDefaultScope(),o.isUseDefaultScope())) diffs.add("USE_DEFAULT_SCOPE");
		if(!isSame(getUserContOverride(),o.getUserContOverride())) diffs.add("USER_CONT_OVERRIDE");
		if(!isSame(getCostSheetOhKeyId(),o.getCostSheetOhKeyId())) diffs.add("COST_SHEET_OH_KEY_ID");
		if(!isSame(isCwip(),o.isCwip())) diffs.add("CWIP");
		if(!isSame(isAbandoned(),o.isAbandoned())) diffs.add("ABANDONED");
		if(!isSame(isRoe(),o.isRoe())) diffs.add("ROE");
		if(!isSame(getRoeAdder(),o.getRoeAdder())) diffs.add("ROE_ADDER");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(sceProjRev != null && sceProjRev.isNewInstance())
				sceProjRev.insert();
		if(sceElem != null && sceElem.isNewInstance())
				sceElem.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(sceProjElemCostYears != null){
			for(SceProjElemCostYear sceProjElemCostYear:getSceProjElemCostYears())
				sceProjElemCostYear.setSceProjElemCost((SceProjElemCost)this);
		}
		if(costAllocations != null){
			for(CostAllocation costAllocation:getCostAllocations())
				costAllocation.setSceProjElemCost((SceProjElemCost)this);
		}
		if(sceProjElemPrioritys != null){
			for(SceProjElemPriority sceProjElemPriority:getSceProjElemPrioritys())
				sceProjElemPriority.setSceProjElemCost((SceProjElemCost)this);
		}
		if(scopeItems != null){
			for(ScopeItem scopeItem:getScopeItems())
				scopeItem.setSceProjElemCost((SceProjElemCost)this);
		}
		if(projCostRates != null){
			for(ProjCostRate projCostRate:getProjCostRates())
				projCostRate.setSceProjElemCost((SceProjElemCost)this);
		}
		if(sceProjElemLabors != null){
			for(SceProjElemLabor sceProjElemLabor:getSceProjElemLabors())
				sceProjElemLabor.setSceProjElemCost((SceProjElemCost)this);
		}
		if(costLoaderRates != null){
			for(CostLoaderRate costLoaderRate:getCostLoaderRates())
				costLoaderRate.setSceProjElemCost((SceProjElemCost)this);
		}
		if(sceProjElemCostYears != null){
			for(SceProjElemCostYear sceProjElemCostYear:getSceProjElemCostYears())
				if(sceProjElemCostYear.isNewInstance())
					sceProjElemCostYear.insert();
			sceProjElemCostYears = null;
		}
		if(costAllocations != null){
			for(CostAllocation costAllocation:getCostAllocations())
				if(costAllocation.isNewInstance())
					costAllocation.insert();
			costAllocations = null;
		}
		if(sceProjElemPrioritys != null){
			for(SceProjElemPriority sceProjElemPriority:getSceProjElemPrioritys())
				if(sceProjElemPriority.isNewInstance())
					sceProjElemPriority.insert();
			sceProjElemPrioritys = null;
		}
		if(scopeItems != null){
			for(ScopeItem scopeItem:getScopeItems())
				if(scopeItem.isNewInstance())
					scopeItem.insert();
			scopeItems = null;
		}
		if(projCostRates != null){
			for(ProjCostRate projCostRate:getProjCostRates())
				if(projCostRate.isNewInstance())
					projCostRate.insert();
			projCostRates = null;
		}
		if(sceProjElemLabors != null){
			for(SceProjElemLabor sceProjElemLabor:getSceProjElemLabors())
				if(sceProjElemLabor.isNewInstance())
					sceProjElemLabor.insert();
			sceProjElemLabors = null;
		}
		if(costLoaderRates != null){
			for(CostLoaderRate costLoaderRate:getCostLoaderRates())
				if(costLoaderRate.isNewInstance())
					costLoaderRate.insert();
			costLoaderRates = null;
		}
	}
}
