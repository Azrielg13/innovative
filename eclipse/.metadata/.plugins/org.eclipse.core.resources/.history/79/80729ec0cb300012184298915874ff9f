/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionListener;

import javax.swing.BorderFactory;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import com.jidesoft.combobox.AbstractComboBox;
import com.jidesoft.combobox.PopupPanel;

/**
 * The Class MDIStringArrayComboBox.
 * 
 * @author Distribution Staff Engineering
 */
public class ESPStringArrayComboBox extends AbstractComboBox {

	/**
	 * 
	 */
	private static final long serialVersionUID = 4564858076146901966L;
	/** The editable. */
	private boolean editable;

	/**
	 * The Constructor.
	 */
	public ESPStringArrayComboBox() {
		this(true);
	}

	/**
	 * The Constructor.
	 * 
	 * @param editable
	 *            the editable
	 */
	public ESPStringArrayComboBox(boolean editable) {
		super(DIALOG);
		this.editable = editable;
		initComponent();
		((StringArrayEditorComponent) getEditor()).setEditable(editable);
		if (!editable)
			((StringArrayEditorComponent) getEditor())
					.setBackgroundColor(ESPTableCellRenderer.NO_EDIT);
	}

	/**
	 * Creates the editor component.
	 * 
	 * @return the editor component
	 */
	public EditorComponent createEditorComponent() {
		return new StringArrayEditorComponent();
	}

	/**
	 * Creates the popup component.
	 * 
	 * @return the popup panel
	 */
	public PopupPanel createPopupComponent() {
		StringArrayPopupPanel sapp = new StringArrayPopupPanel();
		sapp.setEditable(editable);
		if (!editable)
			sapp.setBackgroundColor(ESPTableCellRenderer.NO_EDIT);
		return sapp;
	}

	/**
	 * Sets the array.
	 * 
	 * @param array
	 *            the array
	 */
	public void setArray(String[] array) {
		setSelectedItem(array);
	}

	/**
	 * Gets the array.
	 * 
	 * @return the array
	 */
	public String[] getArray() {
		Object item = getSelectedItem();
		if (item == null)
			return null;
		if (item.getClass().isArray())
			return (String[]) item;
		return new String[0];
	}

	/**
	 * The Class StringArrayEditorComponent.
	 */
	private class StringArrayEditorComponent extends EditorComponent {

		/**
		 * 
		 */
		private static final long serialVersionUID = -7725794237479337948L;
		/** The _text area. */
		private JTextArea _textArea = new JTextArea();

		/**
		 * The Constructor.
		 */
		public StringArrayEditorComponent() {
			super(String.class);
			setLayout(new BorderLayout(2, 2));
			add(_textArea, BorderLayout.CENTER);
		}

		/**
		 * Convert element to string.
		 * 
		 * @param arg0
		 *            the arg0
		 * 
		 * @return the string
		 */
		@Override
		protected String convertElementToString(Object arg0) {
			return super.convertElementToString(arg0);
		}

		/**
		 * Convert string to element.
		 * 
		 * @param arg0
		 *            the arg0
		 * 
		 * @return the object
		 */
		@Override
		protected Object convertStringToElement(String arg0) {
			return super.convertStringToElement(arg0);
		}

		/**
		 * Gets the text.
		 * 
		 * @return the text
		 */
		@Override
		public String getText() {
			return _textArea.getText();
		}

		/**
		 * Checks if is editable.
		 * 
		 * @return true, if is editable
		 */
		@Override
		public boolean isEditable() {
			return _textArea.isEditable();
		}

		/**
		 * Sets the editable.
		 * 
		 * @param arg0
		 *            the arg0
		 */
		@Override
		public void setEditable(boolean arg0) {
			_textArea.setEditable(arg0);
		}

		/**
		 * Sets the background color.
		 * 
		 * @param color
		 *            the color
		 */
		public void setBackgroundColor(Color color) {
			_textArea.setBackground(color);
		}

		/**
		 * Sets the item.
		 * 
		 * @param item
		 *            the item
		 */
		@Override
		public void setItem(Object item) {
			String[] str = (String[]) item;
			StringBuffer buf = new StringBuffer();
			if (str != null) {
				for (int i = 0; i < str.length; i++) {
					if (i > 0)
						buf.append("\n");
					buf.append(str[i]);
				}
			}
			_textArea.setText(buf.toString());
		}

		/**
		 * Gets the item.
		 * 
		 * @return the item
		 */
		@Override
		public Object getItem() {
			return _textArea.getText().split("\n");
		}

		/**
		 * Sets the text.
		 * 
		 * @param arg0
		 *            the arg0
		 */
		@Override
		public void setText(String arg0) {
			_textArea.setText(arg0);
		}

		/**
		 * Adds the action listener.
		 * 
		 * @param l
		 *            the l
		 */
		public void addActionListener(ActionListener l) {

		}

		/**
		 * Gets the editor component.
		 * 
		 * @return the editor component
		 */
		public Component getEditorComponent() {
			return _textArea;
		}

		/**
		 * Removes the action listener.
		 * 
		 * @param l
		 *            the l
		 */
		public void removeActionListener(ActionListener l) {
		}

		/**
		 * Select all.
		 */
		public void selectAll() {
		}

	}

	/**
	 * The Class StringArrayPopupPanel.
	 */
	private class StringArrayPopupPanel extends PopupPanel {

		/**
		 * 
		 */
		private static final long serialVersionUID = -6995615618751583197L;
		/** The _text area. */
		JTextArea _textArea = new JTextArea();

		/**
		 * The Constructor.
		 */
		public StringArrayPopupPanel() {
			_textArea.setLineWrap(true);
			_textArea.setWrapStyleWord(true);
			JScrollPane scrollPane = new JScrollPane(_textArea);
			scrollPane
					.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			scrollPane.setAutoscrolls(true);
			scrollPane.setPreferredSize(new Dimension(300, 200));
			setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
			setLayout(new BorderLayout());
			add(scrollPane, BorderLayout.CENTER);
			setTitle("Edit...");
		}

		/**
		 * Gets the selected object.
		 * 
		 * @return the selected object
		 */
		@Override
		public Object getSelectedObject() {
			String text = _textArea.getText();
			String[] array = text.split("\n");
			return array;
		}

		/**
		 * Sets the selected object.
		 * 
		 * @param selected
		 *            the selected
		 */
		@Override
		public void setSelectedObject(Object selected) {
			if (selected.getClass().isArray()) {
				String[] list = (String[]) selected;
				StringBuffer buf = new StringBuffer();
				for (int i = 0; i < list.length; i++) {
					if (i > 0)
						buf.append("\n");
					buf.append(list[i]);
				}
				_textArea.setText(buf.toString());
			}
		}

		/**
		 * Sets the editable.
		 * 
		 * @param arg0
		 *            the arg0
		 */
		public void setEditable(boolean arg0) {
			_textArea.setEditable(arg0);
		}

		/**
		 * Sets the background color.
		 * 
		 * @param color
		 *            the color
		 */
		public void setBackgroundColor(Color color) {
			_textArea.setBackground(color);
		}
	}
}
