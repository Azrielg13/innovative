package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.DescriptiveType;
import com.sce.esp.object.model.ScopeType;
import com.sce.esp.object.model.ScopeTypeDescriptive;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ScopeTypeDescriptiveDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCOPE_TYPE_ID,DESC_TYPE_ID};
	public static enum PROPERTY{SCOPE_TYPE_ID,DESC_TYPE_ID,APPLICABLE,USER_EDITABLE,DEFAULT_VALUE,NOTE};
	public final static int SCOPETYPEID_LIMIT = 9;
	public final static int DESCTYPEID_LIMIT = 9;
	public final static int APPLICABLE_LIMIT = 1;
	public final static int USEREDITABLE_LIMIT = 1;
	public final static int DEFAULTVALUE_LIMIT = 64;
	public final static int NOTE_LIMIT = 512;
	private int scopeTypeId;
	private int descTypeId;
	private boolean applicable = true;
	private boolean userEditable;
	private String defaultValue;
	private String note;
	private ScopeType scopeType;
	private DescriptiveType descriptiveType;
	public static ScopeTypeDescriptive getInstance(int scopeTypeId, int descTypeId)throws java.sql.SQLException{
		return getInstance(scopeTypeId, descTypeId, true);
	}
	public static ScopeTypeDescriptive getInstance(int scopeTypeId, int descTypeId, boolean fetch)throws java.sql.SQLException{
		if(isNull(scopeTypeId, descTypeId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scopeTypeId, descTypeId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ScopeTypeDescriptive o = null;
		if(cache != null && cache.contains(ScopeTypeDescriptive.class, pk))
			o = em.find(ScopeTypeDescriptive.class, pk);
		if(o==null && getAICache().contains(ScopeTypeDescriptive.class, pk))
			o = getAICache().find(ScopeTypeDescriptive.class, pk);
		if(o==null && fetch)
			o = em.find(ScopeTypeDescriptive.class, pk);
		if(o==null && fetch && ScopeTypeDescriptive.class.getAnnotation(AutoInsertable.class) != null){
			o = new ScopeTypeDescriptive(scopeTypeId, descTypeId);
			getAICache().cache(ScopeTypeDescriptive.class, o);
		}
		return o;
	}
	public static Collection<ScopeTypeDescriptive> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ScopeTypeDescriptive> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ScopeTypeDescriptive> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ScopeTypeDescriptive o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ScopeTypeDescriptive> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeTypeDescriptive> tq = em.createQuery(jpql,ScopeTypeDescriptive.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ScopeTypeDescriptive> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeTypeDescriptive> tq = em.createNamedQuery(name,ScopeTypeDescriptive.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ScopeTypeDescriptiveDAO(){}
	public ScopeTypeDescriptiveDAO(int scopeTypeId, int descTypeId){
		this.scopeTypeId=scopeTypeId;
		this.descTypeId=descTypeId;
	}
	public ScopeTypeDescriptiveDAO(ScopeTypeDescriptiveDAO orig){
		super(orig);
		this.scopeTypeId=orig.getScopeTypeId();
		this.descTypeId=orig.getDescTypeId();
		copyFrom(orig);
	}
	public void copyFrom(ScopeTypeDescriptiveDAO orig){
		this.applicable=orig.isApplicable();
		this.userEditable=orig.isUserEditable();
		this.defaultValue=orig.getDefaultValue();
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scopeTypeId, descTypeId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="SCOPE_TYPE_ID",nullable=false,length=9)
	public int getScopeTypeId(){
		return scopeTypeId;
	}
	public void setScopeTypeId(int scopeTypeId) throws java.sql.SQLException{
		if(isSame(scopeTypeId, getScopeTypeId()))return;
		int oldValue = getScopeTypeId();
		this.scopeTypeId=scopeTypeId;
		setProperty("SCOPE_TYPE_ID", scopeTypeId, oldValue);
		scopeType=null;
	}
	@Id
	@Column(name="DESC_TYPE_ID",nullable=false,length=9)
	public int getDescTypeId(){
		return descTypeId;
	}
	public void setDescTypeId(int descTypeId) throws java.sql.SQLException{
		if(isSame(descTypeId, getDescTypeId()))return;
		int oldValue = getDescTypeId();
		this.descTypeId=descTypeId;
		setProperty("DESC_TYPE_ID", descTypeId, oldValue);
		descriptiveType=null;
	}
	@Column(name="APPLICABLE",nullable=true,length=1)
	public boolean isApplicable(){
		return applicable;
	}
	public void setApplicable(boolean applicable) throws java.sql.SQLException{
		if(isSame(applicable, isApplicable()))return;
		boolean oldValue = isApplicable();
		this.applicable=applicable;
		setProperty("APPLICABLE", applicable, oldValue);
	}
	@Column(name="USER_EDITABLE",nullable=true,length=1)
	public boolean isUserEditable(){
		return userEditable;
	}
	public void setUserEditable(boolean userEditable) throws java.sql.SQLException{
		if(isSame(userEditable, isUserEditable()))return;
		boolean oldValue = isUserEditable();
		this.userEditable=userEditable;
		setProperty("USER_EDITABLE", userEditable, oldValue);
	}
	@Column(name="DEFAULT_VALUE",nullable=true,length=64)
	public String getDefaultValue(){
		return defaultValue;
	}
	public void setDefaultValue(String defaultValue) throws java.sql.SQLException{
		if(isSame(defaultValue, getDefaultValue()))return;
		String oldValue = getDefaultValue();
		this.defaultValue=defaultValue;
		setProperty("DEFAULT_VALUE", defaultValue, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public ScopeType getScopeType()throws java.sql.SQLException{
		if(scopeType==null)
			scopeType=ScopeType.getInstance(getScopeTypeId());
		return scopeType;
	}
	public void setScopeType(ScopeType scopeType)throws java.sql.SQLException{
		setScopeTypeId(scopeType==null?0:scopeType.getScopeTypeId());
		this.scopeType=scopeType;
	}
	public DescriptiveType getDescriptiveType()throws java.sql.SQLException{
		if(descriptiveType==null)
			descriptiveType=DescriptiveType.getInstance(getDescTypeId());
		return descriptiveType;
	}
	public void setDescriptiveType(DescriptiveType descriptiveType)throws java.sql.SQLException{
		setDescTypeId(descriptiveType==null?0:descriptiveType.getId());
		this.descriptiveType=descriptiveType;
	}
	public ScopeTypeDescriptive copy()throws java.sql.SQLException{
		ScopeTypeDescriptive cp = new ScopeTypeDescriptive((ScopeTypeDescriptive)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ScopeTypeDescriptiveDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ScopeTypeDescriptiveDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScopeTypeId(),o.getScopeTypeId())) diffs.add("SCOPE_TYPE_ID");
		if(!isSame(getDescTypeId(),o.getDescTypeId())) diffs.add("DESC_TYPE_ID");
		if(!isSame(isApplicable(),o.isApplicable())) diffs.add("APPLICABLE");
		if(!isSame(isUserEditable(),o.isUserEditable())) diffs.add("USER_EDITABLE");
		if(!isSame(getDefaultValue(),o.getDefaultValue())) diffs.add("DEFAULT_VALUE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(scopeType != null && scopeType.isNewInstance())
				scopeType.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
