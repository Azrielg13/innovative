package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.CommitteeTrackingDAO;
@Entity
@Table(schema="MDI",name="MDIT15_COMMITTEE_TRACKING")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM CommitteeTracking o WHERE o.COMMITTEE_TRACKING_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM CommitteeTracking o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM CommitteeTracking o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByCommittee", query="SELECT o FROM CommitteeTracking o WHERE o.COMMITTEE_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySceProjRev", query="SELECT o FROM CommitteeTracking o WHERE o.SCE_PROJ_REV_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIT15_COMMITTEE_TRACKING o WHERE o.COMMITTEE_TRACKING_ID=?"),//AUTO-GENERATED
})
public class CommitteeTracking extends CommitteeTrackingDAO implements Serializable{

	private static final long serialVersionUID = -8419803421635486707L;
	public static int NO_DECISION = 0; 	
	public static int APPROVED = 1; 
	public static int DENIED = 2;
	public static String[] RESOLUTION = {"","Approved","Denied"};
	public static final String ALWAYS_FIELDS = "EXPECTED_DATE,RESOLUTION_TS,RESOLUTION,APPROVER_USER_ID,RESOLUTION_NOTE,INSERT_TS,DELETED_TS";

	public CommitteeTracking(){
		super(0);
	}
	public CommitteeTracking(int committeeTrackingId) {
		super(committeeTrackingId);
	}
	public CommitteeTracking(SceProjRev rev, int committeeId) throws SQLException{
		super(0);
		setSceProjRev(rev);
		setCommitteeId(committeeId);
	}
	public CommitteeTracking(CommitteeTracking orig) {
		super(orig);
	}
	
	public String getResolutionName(){
		return RESOLUTION[getResolution()];
	}
	
	public void setResolutionByName(String name) throws SQLException {
		if(name.equals(RESOLUTION[APPROVED]))
			setResolution(APPROVED);
		else if(name.equals(RESOLUTION[DENIED]))
			setResolution(DENIED);
		else setResolution(0);
	}
	
	public User getApprover() throws SQLException{
		return getUser(); 
	}
	
	public void setApprover(User approver) throws SQLException{
		setUser(approver);
	}

	public int getPlanyear() {
		return 0;
	}
	
	public String toString() {
		try {
			return "" + getCommittee();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return super.toString();
	}
	public CommitteeTracking getPrevApprovedInstance() throws SQLException{
//		SceProjRev rev = getSceProjRev().getPrevRev();
//		while(rev != null){
//			for(CommitteeTracking ct:rev.getCommitteeTrackings())
//				if(ct.getCommitteeId() == getCommitteeId() && ct.getResolutionTs() != null)
//					return ct;
//			rev = rev.getPrevRev();
//		}
		return null;
	}
	public Calendar getLastApproved() throws SQLException {
		CommitteeTracking ct = getPrevApprovedInstance();
		if(ct != null)
			return ct.getResolutionTs();
		return null;
	}
	
	public String getLastResolutionName() throws SQLException {
		CommitteeTracking ct = getPrevApprovedInstance();
		if(ct != null)
			return ct.getResolutionName();
		return null;
	}
	
	public Calendar getSubmitDate() throws SQLException {
		return getExpectedDate();
	}
	
	public void setSubmitDate(Calendar cal) throws SQLException {
		setExpectedDate(cal);
	}
	
	public Calendar getResolutionTs() {
		if(getResolution()==0)
			return null;
		return super.getResolutionTs();
	}
	
	public String getStatus() throws SQLException {
		
		if(getResolution()!=0 && getResolutionTs()!=null){
			return getResolutionName();
		}else if(getSubmitDate()!=null)
			return "Submitted";
		return null;
	}

	public boolean isEditable(int simId, String field) throws SQLException{
		if(isNewInstance()) return true;
		if(getSceProjRev() != null){
			if(ALWAYS_FIELDS.contains(field))return getSceProjRev().isAlwaysEditable(simId);
		}else
			return true;
		throw new SQLException("Unknown Field: "+field);
	}
}
