package com.dd4.common.tools;

import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;

import org.jdom.Element;

public class UMLAttribute {
	private UMLClass umlClass;
	private String name;
	private String formerName;
	private String type;
	private String size;
	private String def;
	private boolean nullable;
	private boolean id;
	private String sequence;
	private String desc;
	public UMLAttribute(UMLClass umlClass, String name){
		setUmlClass(umlClass);
		setName(name);
	}
	public UMLAttribute(UMLClass umlClass, Element e){
		setUmlClass(umlClass);
		setName(e.getAttributeValue("name"));
		setFormerName(e.getAttributeValue("formername"));
		setType(e.getAttributeValue("type"));
		setSize(e.getAttributeValue("size"));
		setDefault(e.getAttributeValue("default"));
		setNullable(e.getAttributeValue("nullable")==null || e.getAttributeValue("nullable").equals("true"));
		setId(e.getAttributeValue("id")!=null && e.getAttributeValue("id").equals("true"));
		setSequence(e.getAttributeValue("sequence"));
		setDesc(e.getText());
	}
	public static int getDefaultSize(String type){
		switch(type.toLowerCase()){
			case "double": return 24;
			case "int": return 9;
			case "long": return 18;
			case "short": return 5;
			case "boolean": return 1;
			case "calendar": return 7;
			case "time": return 7;
			case "blob":
			case "clob": return 4000;
		}
		return 0;
	}
	public UMLClass getUmlClass() {
		return umlClass;
	}
	public void setUmlClass(UMLClass umlClass) {
		this.umlClass = umlClass;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		setFormerName(getName());
		this.name = name;
	}
	public String getFormerName() {
		return formerName;
	}
	public void setFormerName(String formerName) {
		this.formerName = formerName;
	}
	public String getDBName(){
		return getName().toUpperCase().replaceAll(" ", "_");
	}
	public String getDBFormerName(){
		if(getFormerName()==null) return null;
		return getFormerName().toUpperCase().replaceAll(" ", "_");
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public String getDBType(){
		String dbType="";
		if(getType().equalsIgnoreCase("String"))
			dbType="VARCHAR2";
		else if(getType().equalsIgnoreCase("double"))
			dbType="FLOAT";
		else if(getType().equalsIgnoreCase("int") || getType().equalsIgnoreCase("long"))
			dbType="NUMBER";
		else if(getType().equalsIgnoreCase("boolean"))
			dbType="NUMBER";
		else if(getType().equalsIgnoreCase("Calendar") || getType().equalsIgnoreCase("Time"))
			dbType="DATE";
		else if(getType().equalsIgnoreCase("BLOB"))
			dbType="BLOB";
		else if(getType().equalsIgnoreCase("CLOB"))
			dbType="CLOB";
		else
			dbType="UNKNOWN";
		return dbType;
	}
	public String getDBTypeDeclare(){
		String dbType="";
		if(getType().equalsIgnoreCase("String"))
			dbType="VARCHAR2("+getSize()+")";
		else if(getType().equalsIgnoreCase("double"))
			dbType="FLOAT(24)";
		else if(getType().equalsIgnoreCase("int") || getType().equalsIgnoreCase("long"))
			dbType="NUMBER("+getSize()+")";
		else if(getType().equalsIgnoreCase("boolean"))
			dbType="NUMBER(1)";
		else if(getType().equalsIgnoreCase("Calendar") || getType().equalsIgnoreCase("Time"))
			dbType="DATE";
		else if(getType().equalsIgnoreCase("BLOB"))
			dbType="BLOB";
		else if(getType().equalsIgnoreCase("CLOB"))
			dbType="CLOB";
		else
			dbType="UNKNOWN("+getSize()+")";
		return dbType;
	}
	public String getSize() {
		return size;
	}
	public void setSize(String size) {
		this.size = size;
	}
	public String getDefault(){
		return def;
	}
	public void setDefault(String def){
		this.def = def;
	}
	public String getDim(){
		if(getType().equals("String"))
			return "'";
		return "";
	}
	public String getDefaultWDim(){
		if(def==null)
			return def;
		return getDim()+def+getDim();
	}
	public boolean isNullable() {
		return nullable;
	}
	public void setNullable(boolean nullable) {
		this.nullable = nullable;
	}
	public boolean isId() {
		return id;
	}
	public void setId(boolean id) {
		this.id = id;
	}
	public String getSequence() {
		return sequence;
	}
	public void setSequence(String sequence) {
		this.sequence = sequence;
	}
	public String getDesc() {
		return desc;
	}
	public void setDesc(String desc) {
		this.desc = desc;
	}
	public String toString(){
		return getName();
	}
	public Element getXMLElement() {
		Element e = new Element("ATTRIBUTE");
		e.setAttribute("name", getName());
		e.setAttribute("type",getType());
		e.setAttribute("size",""+getSize());
		if(getDefault()!=null)
			e.setAttribute("default",getDefault());
		e.setAttribute("nullable",isNullable()?"true":"false");
		e.setAttribute("id",isId()?"true":"false");
		if(getSequence()!=null)
			e.setAttribute("sequence",getSequence());
		e.setText(getDesc());
		return e;
	}
	public String getDBCreation() {
		String out = getDBName();
		out += " "+getDBTypeDeclare();
		if(getDefault()!=null)
			out+=" DEFAULT "+getDefaultWDim();
		if(!isNullable())
			out+=" NOT NULL";
		return out;
	}
	public String getDBChange(DatabaseMetaData dbmd, String schema) throws SQLException {
		String headCmd="",out="";
		ResultSet rs = dbmd.getColumns(null, schema, umlClass.getDBTable(), getDBName());
		if(rs.next()){
			if(!rs.getString("TYPE_NAME").equals(getDBType()) || !rs.getString("COLUMN_SIZE").equals(getSize()))
				out += " "+getDBTypeDeclare();
			String def = rs.getString("COLUMN_DEF");
			if(!(""+def).trim().equals(""+getDefaultWDim()))
				out += " DEFAULT "+getDefaultWDim();
			if(out.length()>0)
				out = " MODIFY "+getDBName()+out;
		}
		else{
			ResultSet rs2=null;
			if(getDBFormerName()!=null)
				rs2 = dbmd.getColumns(null, schema, umlClass.getDBTable(), getDBFormerName());
			if(rs2 != null && rs2.next()){
				headCmd = "ALTER TABLE "+schema+"."+umlClass.getDBTable()+" RENAME COLUMN "+getDBFormerName()+" TO "+getDBName()+";\n";
				if(!rs2.getString("TYPE_NAME").equals(getDBType()) || !rs2.getString("COLUMN_SIZE").equals(getSize()))
					out += " "+getDBTypeDeclare();
				String def = rs2.getString("COLUMN_DEF");
				if(!(""+def).trim().equals(""+getDefaultWDim()))
					out += " DEFAULT "+getDefaultWDim();
				if(out.length()>0)
					out = " MODIFY "+getDBName()+out;
			}
			else
				out = " ADD "+getDBCreation();
			if(rs2!=null) rs2.close();
		}
		rs.close();
		if(out.length()>0)
			out = "ALTER TABLE "+schema+"."+umlClass.getDBTable()+out+";\n";
		return headCmd+out;
	}
}
