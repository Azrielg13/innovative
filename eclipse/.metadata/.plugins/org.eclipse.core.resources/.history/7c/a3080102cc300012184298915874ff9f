package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.BlobFile;
import com.sce.esp.object.model.FileCat;
import com.sce.esp.object.model.ProjFile;
import com.sce.esp.object.model.ProjRevFile;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ProjFileDAO extends BlobFile{
	public static enum KEY_PROPERTY{FILE_ID};
	public static enum PROPERTY{FILE_ID,FILE_NAME,FILE_DESC,FILE_SIZE,FILE_CAT_ID,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int FILEID_LIMIT = 9;
	public final static int FILENAME_LIMIT = 64;
	public final static int FILEDESC_LIMIT = 512;
	public final static int FILESIZE_LIMIT = 9;
	public final static int FILECATID_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int fileId;
	private String fileName;
	private String fileDesc;
	private int fileSize;
	private int fileCatId;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Collection<ProjRevFile> projRevFiles;
	private FileCat fileCat;
	public static ProjFile getInstance(int fileId)throws java.sql.SQLException{
		return getInstance(fileId, true);
	}
	public static ProjFile getInstance(int fileId, boolean fetch)throws java.sql.SQLException{
		if(isNull(fileId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(fileId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProjFile o = null;
		if(cache != null && cache.contains(ProjFile.class, pk))
			o = em.find(ProjFile.class, pk);
		if(o==null && getAICache().contains(ProjFile.class, pk))
			o = getAICache().find(ProjFile.class, pk);
		if(o==null && fetch)
			o = em.find(ProjFile.class, pk);
		if(o==null && fetch && ProjFile.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProjFile(fileId);
			getAICache().cache(ProjFile.class, o);
		}
		return o;
	}
	public static Collection<ProjFile> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProjFile> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProjFile> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProjFile o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProjFile> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjFile> tq = em.createQuery(jpql,ProjFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProjFile> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjFile> tq = em.createNamedQuery(name,ProjFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProjFileDAO(){}
	public ProjFileDAO(int fileId){
		this.fileId=fileId;
	}
	public ProjFileDAO(ProjFileDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ProjFileDAO orig){
		this.fileName=orig.getFileName();
		this.fileDesc=orig.getFileDesc();
		this.fileSize=orig.getFileSize();
		this.fileCatId=orig.getFileCatId();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{fileId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS45_SEQ",sequenceName="MDIS45_SEQ")
	@Column(name="FILE_ID",nullable=false,length=9)
	public int getFileId(){
		return fileId;
	}
	public void setFileId(int fileId) throws java.sql.SQLException{
		if(isSame(fileId, getFileId()))return;
		int oldValue = getFileId();
		this.fileId=fileId;
		setProperty("FILE_ID", fileId, oldValue);
	}
	@Column(name="FILE_NAME",nullable=false,length=64)
	public String getFileName(){
		return fileName;
	}
	public void setFileName(String fileName) throws java.sql.SQLException{
		if(isSame(fileName, getFileName()))return;
		String oldValue = getFileName();
		this.fileName=fileName;
		setProperty("FILE_NAME", fileName, oldValue);
	}
	@Column(name="FILE_DESC",nullable=true,length=512)
	public String getFileDesc(){
		return fileDesc;
	}
	public void setFileDesc(String fileDesc) throws java.sql.SQLException{
		if(isSame(fileDesc, getFileDesc()))return;
		String oldValue = getFileDesc();
		this.fileDesc=fileDesc;
		setProperty("FILE_DESC", fileDesc, oldValue);
	}
	@Column(name="FILE_SIZE",nullable=true,length=9)
	public int getFileSize(){
		return fileSize;
	}
	public void setFileSize(int fileSize) throws java.sql.SQLException{
		if(isSame(fileSize, getFileSize()))return;
		int oldValue = getFileSize();
		this.fileSize=fileSize;
		setProperty("FILE_SIZE", fileSize, oldValue);
	}
	@Column(name="FILE_CAT_ID",nullable=true,length=9)
	public int getFileCatId(){
		return fileCatId;
	}
	public void setFileCatId(int fileCatId) throws java.sql.SQLException{
		if(isSame(fileCatId, getFileCatId()))return;
		int oldValue = getFileCatId();
		this.fileCatId=fileCatId;
		setProperty("FILE_CAT_ID", fileCatId, oldValue);
		fileCat=null;
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public FileCat getFileCat()throws java.sql.SQLException{
		if(fileCat==null)
			fileCat=FileCat.getInstance(getFileCatId());
		return fileCat;
	}
	public void setFileCat(FileCat fileCat)throws java.sql.SQLException{
		setFileCatId(fileCat==null?0:fileCat.getFileCatId());
		this.fileCat=fileCat;
	}
	public Collection<ProjRevFile> getProjRevFiles()throws java.sql.SQLException{
		if(isNewInstance() || projRevFiles != null){
			if(projRevFiles == null)
				projRevFiles = new TreeSet<ProjRevFile>();
			return projRevFiles;
		}
		return ProjRevFile.getNamedCollection("findByProjFile",getFileId());
	}
	public void addProjRevFile(ProjRevFile projRevFile)throws java.sql.SQLException{
		projRevFile.setProjFile((ProjFile)this);
		if(isNewInstance() || projRevFiles != null)
			getProjRevFiles().add(projRevFile);
		else
			projRevFile.insert();
	}
	public void removeProjRevFile(ProjRevFile projRevFile)throws java.sql.SQLException{
		if(isNewInstance() || projRevFiles != null)
			getProjRevFiles().remove(projRevFile);
		else
			projRevFile.delete();
	}
	public ProjFile copy()throws java.sql.SQLException{
		ProjFile cp = new ProjFile((ProjFile)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProjFileDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(ProjRevFile child:getProjRevFiles())
			cp.addProjRevFile(child.copy());
	}
	public Vector<String> getDifference(ProjFileDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getFileId(),o.getFileId())) diffs.add("FILE_ID");
		if(!isSame(getFileName(),o.getFileName())) diffs.add("FILE_NAME");
		if(!isSame(getFileDesc(),o.getFileDesc())) diffs.add("FILE_DESC");
		if(!isSame(getFileSize(),o.getFileSize())) diffs.add("FILE_SIZE");
		if(!isSame(getFileCatId(),o.getFileCatId())) diffs.add("FILE_CAT_ID");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(projRevFiles != null){
			for(ProjRevFile projRevFile:getProjRevFiles()){
				if(projRevFile.isNewInstance())
					projRevFile.setProjFile((ProjFile)this);
				projRevFile.insert();
			}
			projRevFiles = null;
		}
	}
}
