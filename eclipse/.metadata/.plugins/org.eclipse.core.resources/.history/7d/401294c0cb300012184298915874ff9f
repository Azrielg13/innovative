/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.sql.SQLException;

import javax.swing.DefaultButtonModel;
import javax.swing.ImageIcon;

import com.sce.esp.security.TopFlight;
import com.sce.esp.security.UserRole;

public class DynamicButton extends ESPButton {
	/**
	 * 
	 */
	private static final long serialVersionUID = 7202326209098416323L;
	private Object obj;
	private int userRole;

	/**
	 * 
	 * @param obj
	 *            a <code>PlanableObject</code>
	 * @param icon
	 *            an <code>ImageIcon</code>
	 * @param approvals
	 *            a String array
	 */
	public DynamicButton(Object obj, ImageIcon icon) {
		this(obj, null, icon, UserRole.MDI_R_USER);
	}

	/**
	 * 
	 * @param obj
	 *            a <code>PlanableObject</code>
	 * @param text
	 *            the text
	 * @param approvals
	 *            a String array
	 */
	public DynamicButton(Object obj, String text) {
		this(obj, text, null, UserRole.MDI_R_USER);
	}

	/**
	 * 
	 * @param obj
	 *            a <code>PlanableObject</code>
	 * @param text
	 *            the text
	 * @param icon
	 *            an <code>ImageIcon</code>
	 * @param approvals
	 *            a String array
	 * @param userRole
	 *            the user role comparison
	 */
	public DynamicButton(Object obj, String text, ImageIcon icon) {
		this(obj, text, icon, UserRole.MDI_R_USER);
	}

	public DynamicButton(Object obj, String text, ImageIcon icon, int userRole) {
		super(text, icon);
		this.obj = obj;
		this.userRole = userRole;
		DefaultButtonModel bm = new DefaultButtonModel() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -8345721545785669659L;

			public boolean isEnabled() {
				try {
					return shouldBeEnabled();
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return false;
			}
		};
		setModel(bm);
	}

	public Object getObject() {
		return obj;
	}

	/**
	 * 
	 * @return true based plan year and user role
	 * @throws SQLException
	 */
	public boolean shouldBeEnabled() throws SQLException {
		return getObject() != null && hasPermission();
	}

	public boolean hasPermission() throws SQLException {
		return TopFlight.getInstance().hasAccessRight(userRole);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see java.awt.Component#toString()
	 */
	public String toString() {
		return "-";
	}
}
