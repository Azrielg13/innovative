package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PqCustClass;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PqCustClassDAO extends MDIObject{
	public static enum KEY_PROPERTY{CUST_CLASS_ID};
	public static enum PROPERTY{CUST_CLASS_ID,TITLE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int CUSTCLASSID_LIMIT = 9;
	public final static int TITLE_LIMIT = 32;
	private int custClassId;
	private String title;
	public static PqCustClass getInstance(int custClassId)throws java.sql.SQLException{
		return getInstance(custClassId, true);
	}
	public static PqCustClass getInstance(int custClassId, boolean fetch)throws java.sql.SQLException{
		if(isNull(custClassId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(custClassId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PqCustClass o = null;
		if(cache != null && cache.contains(PqCustClass.class, pk))
			o = em.find(PqCustClass.class, pk);
		if(o==null && getAICache().contains(PqCustClass.class, pk))
			o = getAICache().find(PqCustClass.class, pk);
		if(o==null && fetch)
			o = em.find(PqCustClass.class, pk);
		if(o==null && fetch && PqCustClass.class.getAnnotation(AutoInsertable.class) != null){
			o = new PqCustClass(custClassId);
			getAICache().cache(PqCustClass.class, o);
		}
		return o;
	}
	public static Collection<PqCustClass> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PqCustClass> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PqCustClass> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PqCustClass o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PqCustClass> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqCustClass> tq = em.createQuery(jpql,PqCustClass.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PqCustClass> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqCustClass> tq = em.createNamedQuery(name,PqCustClass.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PqCustClassDAO(){}
	public PqCustClassDAO(int custClassId){
		this.custClassId=custClassId;
	}
	public PqCustClassDAO(PqCustClassDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(PqCustClassDAO orig){
		this.title=orig.getTitle();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{custClassId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDI975_SEQ",sequenceName="MDI975_SEQ")
	@Column(name="CUST_CLASS_ID",nullable=false,length=9)
	public int getCustClassId(){
		return custClassId;
	}
	public void setCustClassId(int custClassId) throws java.sql.SQLException{
		if(isSame(custClassId, getCustClassId()))return;
		int oldValue = getCustClassId();
		this.custClassId=custClassId;
		setProperty("CUST_CLASS_ID", custClassId, oldValue);
	}
	@Column(name="TITLE",nullable=false,length=32)
	public String getTitle(){
		return title;
	}
	public void setTitle(String title) throws java.sql.SQLException{
		if(isSame(title, getTitle()))return;
		String oldValue = getTitle();
		this.title=title;
		setProperty("TITLE", title, oldValue);
	}
	public PqCustClass copy()throws java.sql.SQLException{
		PqCustClass cp = new PqCustClass((PqCustClass)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PqCustClassDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PqCustClassDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getCustClassId(),o.getCustClassId())) diffs.add("CUST_CLASS_ID");
		if(!isSame(getTitle(),o.getTitle())) diffs.add("TITLE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
