/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.javadna;

/**
 * The Class RealTimePoint.
 * 
 * @author Distribution Staff Engineering
 */
public class RealTimePoint {
	
	/** The sz point. */
	private String szPoint;
	
	/** The value. */
	private double value;
	
	/** The time. */
	private String time;
	
	/** The time UTC. */
	private long timeUTC;
	
	/** The status. */
	private String status;
	
	/** The desc. */
	private String desc;
	
	/** The units. */
	private String units;
	
	/**
	 * The Constructor.
	 * 
	 * @param szPoint the sz point
	 */
	public RealTimePoint(String szPoint){
		this.szPoint = szPoint;
	}
	
	/**
	 * 
	 * @param szPoint
	 * @param value
	 * @param time
	 * @param status
	 * @param desc
	 * @param units
	 */
	public RealTimePoint(String szPoint, double value, String time, String status, String desc, String units){
		this.szPoint = szPoint;
		this.value = value;
		this.time = time;
		this.status = status;
		this.desc = desc;
		this.units = units;
	}
	
	/**
	 * Gets the sz point.
	 * 
	 * @return the sz point
	 */
	public String getSzPoint(){
		return szPoint;
	}
	
	/**
	 * Gets the value.
	 * 
	 * @return the value
	 */
	public double getValue(){
		if(value == 0)
			return getRTValue();
		return value;
	}
	
	/**
	 * Gets the time UTC.
	 * 
	 * @return the time UTC
	 */
	public long getTimeUTC(){
		if(timeUTC == 0)
			return getRTTimeUTC();
		return timeUTC;
	}
	
	/**
	 * Gets the status.
	 * 
	 * @return the status
	 */
	public String getStatus(){
		if(status == null)
			return getRTStatus();
		return status;
	}
	
	/**
	 * Gets the desc.
	 * 
	 * @return the desc
	 */
	public String getDesc(){
		if(desc == null)
			return getRTDesc();
		return desc;
	}
	
	/**
	 * Gets the units.
	 * 
	 * @return the units
	 */
	public String getUnits(){
		if(units == null)
			return getRTUnits();
		return units;
	}
	
	/**
	 * Gets the RT value.
	 * 
	 * @return the RT value
	 */
	public double getRTValue(){
		value = JavaDNA.getRTValue(szPoint);
		return value;
	}
	
	/**
	 * Gets the RT time.
	 * 
	 * @return the RT time
	 */
	public String getRTTime(){
		time = JavaDNA.getRTTimeTrim(szPoint);
		return time;
	}
	
	/**
	 * Gets the RT time UTC.
	 * 
	 * @return the RT time UTC
	 */
	public long getRTTimeUTC(){
		timeUTC = JavaDNA.getRTTimeUTC(szPoint); 
		return timeUTC;
	}
	
	/**
	 * Gets the RT status.
	 * 
	 * @return the RT status
	 */
	public String getRTStatus(){
		status = JavaDNA.getRTStatus(szPoint).trim(); 
		return status;
	}
	
	/**
	 * Gets the RT desc.
	 * 
	 * @return the RT desc
	 */
	public String getRTDesc(){
		desc = JavaDNA.getRTDesc(szPoint).trim();
		return desc;
	}
	
	/**
	 * Gets the RT units.
	 * 
	 * @return the RT units
	 */
	public String getRTUnits(){
		units = JavaDNA.getRTUnits(szPoint).trim();
		return units;
	}
}
