package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Customer;
import com.sce.esp.object.model.MDIObject;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CustomerDAO extends MDIObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,CUSTOMER_NAME,CONTACT_NAME,CONTACT_PHONE,CONTACT_EMAIL,ADDRESS,CITY,ZIPCODE,CUSTOMER_ACCT,COMPANY_NAME,ALT_DATE1,ALT_VARCHAR1,ALT_INT1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int ID_LIMIT = 9;
	public final static int CUSTOMERNAME_LIMIT = 255;
	public final static int CONTACTNAME_LIMIT = 255;
	public final static int CONTACTPHONE_LIMIT = 15;
	public final static int CONTACTEMAIL_LIMIT = 255;
	public final static int ADDRESS_LIMIT = 255;
	public final static int CITY_LIMIT = 100;
	public final static int ZIPCODE_LIMIT = 9;
	public final static int CUSTOMERACCT_LIMIT = 128;
	public final static int COMPANYNAME_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTVARCHAR1_LIMIT = 255;
	public final static int ALTINT1_LIMIT = 9;
	private int id;
	private String customerName;
	private String contactName;
	private String contactPhone;
	private String contactEmail;
	private String address;
	private String city;
	private int zipcode;
	private String customerAcct;
	private String companyName;
	private Calendar altDate1;
	private String altVarchar1;
	private int altInt1;
	public static Customer getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static Customer getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		Customer o = null;
		if(cache != null && cache.contains(Customer.class, pk))
			o = em.find(Customer.class, pk);
		if(o==null && getAICache().contains(Customer.class, pk))
			o = getAICache().find(Customer.class, pk);
		if(o==null && fetch)
			o = em.find(Customer.class, pk);
		if(o==null && fetch && Customer.class.getAnnotation(AutoInsertable.class) != null){
			o = new Customer(id);
			getAICache().cache(Customer.class, o);
		}
		return o;
	}
	public static Collection<Customer> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Customer> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Customer> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Customer o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Customer> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Customer> tq = em.createQuery(jpql,Customer.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Customer> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Customer> tq = em.createNamedQuery(name,Customer.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CustomerDAO(){}
	public CustomerDAO(int id){
		this.id=id;
	}
	public CustomerDAO(CustomerDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CustomerDAO orig){
		this.customerName=orig.getCustomerName();
		this.contactName=orig.getContactName();
		this.contactPhone=orig.getContactPhone();
		this.contactEmail=orig.getContactEmail();
		this.address=orig.getAddress();
		this.city=orig.getCity();
		this.zipcode=orig.getZipcode();
		this.customerAcct=orig.getCustomerAcct();
		this.companyName=orig.getCompanyName();
		this.altDate1=orig.getAltDate1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altInt1=orig.getAltInt1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="ZEN005_SEQ",sequenceName="ZEN005_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="CUSTOMER_NAME",nullable=false,length=255)
	public String getCustomerName(){
		return customerName;
	}
	public void setCustomerName(String customerName) throws java.sql.SQLException{
		if(isSame(customerName, getCustomerName()))return;
		String oldValue = getCustomerName();
		this.customerName=customerName;
		setProperty("CUSTOMER_NAME", customerName, oldValue);
	}
	@Column(name="CONTACT_NAME",nullable=true,length=255)
	public String getContactName(){
		return contactName;
	}
	public void setContactName(String contactName) throws java.sql.SQLException{
		if(isSame(contactName, getContactName()))return;
		String oldValue = getContactName();
		this.contactName=contactName;
		setProperty("CONTACT_NAME", contactName, oldValue);
	}
	@Column(name="CONTACT_PHONE",nullable=true,length=15)
	public String getContactPhone(){
		return contactPhone;
	}
	public void setContactPhone(String contactPhone) throws java.sql.SQLException{
		if(isSame(contactPhone, getContactPhone()))return;
		String oldValue = getContactPhone();
		this.contactPhone=contactPhone;
		setProperty("CONTACT_PHONE", contactPhone, oldValue);
	}
	@Column(name="CONTACT_EMAIL",nullable=true,length=255)
	public String getContactEmail(){
		return contactEmail;
	}
	public void setContactEmail(String contactEmail) throws java.sql.SQLException{
		if(isSame(contactEmail, getContactEmail()))return;
		String oldValue = getContactEmail();
		this.contactEmail=contactEmail;
		setProperty("CONTACT_EMAIL", contactEmail, oldValue);
	}
	@Column(name="ADDRESS",nullable=true,length=255)
	public String getAddress(){
		return address;
	}
	public void setAddress(String address) throws java.sql.SQLException{
		if(isSame(address, getAddress()))return;
		String oldValue = getAddress();
		this.address=address;
		setProperty("ADDRESS", address, oldValue);
	}
	@Column(name="CITY",nullable=true,length=100)
	public String getCity(){
		return city;
	}
	public void setCity(String city) throws java.sql.SQLException{
		if(isSame(city, getCity()))return;
		String oldValue = getCity();
		this.city=city;
		setProperty("CITY", city, oldValue);
	}
	@Column(name="ZIPCODE",nullable=true,length=9)
	public int getZipcode(){
		return zipcode;
	}
	public void setZipcode(int zipcode) throws java.sql.SQLException{
		if(isSame(zipcode, getZipcode()))return;
		int oldValue = getZipcode();
		this.zipcode=zipcode;
		setProperty("ZIPCODE", zipcode, oldValue);
	}
	@Column(name="CUSTOMER_ACCT",nullable=true,length=128)
	public String getCustomerAcct(){
		return customerAcct;
	}
	public void setCustomerAcct(String customerAcct) throws java.sql.SQLException{
		if(isSame(customerAcct, getCustomerAcct()))return;
		String oldValue = getCustomerAcct();
		this.customerAcct=customerAcct;
		setProperty("CUSTOMER_ACCT", customerAcct, oldValue);
	}
	@Column(name="COMPANY_NAME",nullable=true,length=256)
	public String getCompanyName(){
		return companyName;
	}
	public void setCompanyName(String companyName) throws java.sql.SQLException{
		if(isSame(companyName, getCompanyName()))return;
		String oldValue = getCompanyName();
		this.companyName=companyName;
		setProperty("COMPANY_NAME", companyName, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=255)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_INT1",nullable=true,length=9)
	public int getAltInt1(){
		return altInt1;
	}
	public void setAltInt1(int altInt1) throws java.sql.SQLException{
		if(isSame(altInt1, getAltInt1()))return;
		int oldValue = getAltInt1();
		this.altInt1=altInt1;
		setProperty("ALT_INT1", altInt1, oldValue);
	}
	public Customer copy()throws java.sql.SQLException{
		Customer cp = new Customer((Customer)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CustomerDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CustomerDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getCustomerName(),o.getCustomerName())) diffs.add("CUSTOMER_NAME");
		if(!isSame(getContactName(),o.getContactName())) diffs.add("CONTACT_NAME");
		if(!isSame(getContactPhone(),o.getContactPhone())) diffs.add("CONTACT_PHONE");
		if(!isSame(getContactEmail(),o.getContactEmail())) diffs.add("CONTACT_EMAIL");
		if(!isSame(getAddress(),o.getAddress())) diffs.add("ADDRESS");
		if(!isSame(getCity(),o.getCity())) diffs.add("CITY");
		if(!isSame(getZipcode(),o.getZipcode())) diffs.add("ZIPCODE");
		if(!isSame(getCustomerAcct(),o.getCustomerAcct())) diffs.add("CUSTOMER_ACCT");
		if(!isSame(getCompanyName(),o.getCompanyName())) diffs.add("COMPANY_NAME");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltInt1(),o.getAltInt1())) diffs.add("ALT_INT1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
