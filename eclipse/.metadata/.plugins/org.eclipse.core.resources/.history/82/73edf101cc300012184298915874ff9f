package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.CktSwt;
import com.sce.esp.object.model.CktTrans;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.SwtProc;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CktTransDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,TRANS_ID};
	public static enum PROPERTY{PLANYEAR,TRANS_ID,PROC_ID,STEP,FROM_CKT_ID,TO_CKT_ID,CSWT_TYPE_ID,CSWT_NUM,CSWT_POS,OSWT_TYPE_ID,OSWT_NUM,OSWT_POS,TRANSFER,ACTUAL_TRANS,TRANS_DATE,NOTE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int TRANSID_LIMIT = 9;
	public final static int PROCID_LIMIT = 9;
	public final static int STEP_LIMIT = 2;
	public final static int FROMCKTID_LIMIT = 9;
	public final static int TOCKTID_LIMIT = 9;
	public final static int CSWTTYPEID_LIMIT = 9;
	public final static int CSWTNUM_LIMIT = 10;
	public final static int CSWTPOS_LIMIT = 20;
	public final static int OSWTTYPEID_LIMIT = 9;
	public final static int OSWTNUM_LIMIT = 10;
	public final static int OSWTPOS_LIMIT = 10;
	public final static int TRANSFER_LIMIT = 24;
	public final static int ACTUALTRANS_LIMIT = 24;
	public final static int TRANSDATE_LIMIT = 7;
	public final static int NOTE_LIMIT = 512;
	private int planyear;
	private int transId;
	private int procId;
	private int step = 1;
	private int fromCktId;
	private int toCktId;
	private int cswtTypeId;
	private String cswtNum;
	private String cswtPos;
	private int oswtTypeId;
	private String oswtNum;
	private String oswtPos;
	private double transfer;
	private double actualTrans;
	private Calendar transDate;
	private String note;
	private Ckt ckt;
	private Ckt ckt2;
	private CktSwt cktSwt;
	private CktSwt cktSwt2;
	private SwtProc swtProc;
	public static CktTrans getInstance(int planyear, int transId)throws java.sql.SQLException{
		return getInstance(planyear, transId, true);
	}
	public static CktTrans getInstance(int planyear, int transId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, transId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, transId);
		Cache cache = em.getEntityManagerFactory().getCache();
		CktTrans o = null;
		if(cache != null && cache.contains(CktTrans.class, pk))
			o = em.find(CktTrans.class, pk);
		if(o==null && getAICache().contains(CktTrans.class, pk))
			o = getAICache().find(CktTrans.class, pk);
		if(o==null && fetch)
			o = em.find(CktTrans.class, pk);
		if(o==null && fetch && CktTrans.class.getAnnotation(AutoInsertable.class) != null){
			o = new CktTrans(planyear, transId);
			getAICache().cache(CktTrans.class, o);
		}
		return o;
	}
	public static Collection<CktTrans> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CktTrans> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CktTrans> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CktTrans o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CktTrans> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktTrans> tq = em.createQuery(jpql,CktTrans.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CktTrans> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktTrans> tq = em.createNamedQuery(name,CktTrans.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CktTransDAO(){}
	public CktTransDAO(int planyear, int transId){
		this.planyear=planyear;
		this.transId=transId;
	}
	public CktTransDAO(CktTransDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(CktTransDAO orig){
		this.procId=orig.getProcId();
		this.step=orig.getStep();
		this.fromCktId=orig.getFromCktId();
		this.toCktId=orig.getToCktId();
		this.cswtTypeId=orig.getCswtTypeId();
		this.cswtNum=orig.getCswtNum();
		this.cswtPos=orig.getCswtPos();
		this.oswtTypeId=orig.getOswtTypeId();
		this.oswtNum=orig.getOswtNum();
		this.oswtPos=orig.getOswtPos();
		this.transfer=orig.getTransfer();
		this.actualTrans=orig.getActualTrans();
		this.transDate=orig.getTransDate();
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, transId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI260_SEQ",sequenceName="MDI260_SEQ")
	@Column(name="TRANS_ID",nullable=false,length=9)
	public int getTransId(){
		return transId;
	}
	public void setTransId(int transId) throws java.sql.SQLException{
		if(isSame(transId, getTransId()))return;
		int oldValue = getTransId();
		this.transId=transId;
		setProperty("TRANS_ID", transId, oldValue);
	}
	@Column(name="PROC_ID",nullable=false,length=9)
	public int getProcId(){
		return procId;
	}
	public void setProcId(int procId) throws java.sql.SQLException{
		if(isSame(procId, getProcId()))return;
		int oldValue = getProcId();
		this.procId=procId;
		setProperty("PROC_ID", procId, oldValue);
		swtProc=null;
	}
	@Column(name="STEP",nullable=false,length=2)
	public int getStep(){
		return step;
	}
	public void setStep(int step) throws java.sql.SQLException{
		if(isSame(step, getStep()))return;
		int oldValue = getStep();
		this.step=step;
		setProperty("STEP", step, oldValue);
	}
	@Column(name="FROM_CKT_ID",nullable=false,length=9)
	public int getFromCktId(){
		return fromCktId;
	}
	public void setFromCktId(int fromCktId) throws java.sql.SQLException{
		if(isSame(fromCktId, getFromCktId()))return;
		int oldValue = getFromCktId();
		this.fromCktId=fromCktId;
		setProperty("FROM_CKT_ID", fromCktId, oldValue);
		ckt=null;
	}
	@Column(name="TO_CKT_ID",nullable=false,length=9)
	public int getToCktId(){
		return toCktId;
	}
	public void setToCktId(int toCktId) throws java.sql.SQLException{
		if(isSame(toCktId, getToCktId()))return;
		int oldValue = getToCktId();
		this.toCktId=toCktId;
		setProperty("TO_CKT_ID", toCktId, oldValue);
		ckt2=null;
	}
	@Column(name="CSWT_TYPE_ID",nullable=true,length=9)
	public int getCswtTypeId(){
		return cswtTypeId;
	}
	public void setCswtTypeId(int cswtTypeId) throws java.sql.SQLException{
		if(isSame(cswtTypeId, getCswtTypeId()))return;
		int oldValue = getCswtTypeId();
		this.cswtTypeId=cswtTypeId;
		setProperty("CSWT_TYPE_ID", cswtTypeId, oldValue);
		cktSwt=null;
	}
	@Column(name="CSWT_NUM",nullable=true,length=10)
	public String getCswtNum(){
		return cswtNum;
	}
	public void setCswtNum(String cswtNum) throws java.sql.SQLException{
		if(isSame(cswtNum, getCswtNum()))return;
		String oldValue = getCswtNum();
		this.cswtNum=cswtNum;
		setProperty("CSWT_NUM", cswtNum, oldValue);
	}
	@Column(name="CSWT_POS",nullable=true,length=20)
	public String getCswtPos(){
		return cswtPos;
	}
	public void setCswtPos(String cswtPos) throws java.sql.SQLException{
		if(isSame(cswtPos, getCswtPos()))return;
		String oldValue = getCswtPos();
		this.cswtPos=cswtPos;
		setProperty("CSWT_POS", cswtPos, oldValue);
	}
	@Column(name="OSWT_TYPE_ID",nullable=true,length=9)
	public int getOswtTypeId(){
		return oswtTypeId;
	}
	public void setOswtTypeId(int oswtTypeId) throws java.sql.SQLException{
		if(isSame(oswtTypeId, getOswtTypeId()))return;
		int oldValue = getOswtTypeId();
		this.oswtTypeId=oswtTypeId;
		setProperty("OSWT_TYPE_ID", oswtTypeId, oldValue);
		cktSwt2=null;
	}
	@Column(name="OSWT_NUM",nullable=true,length=10)
	public String getOswtNum(){
		return oswtNum;
	}
	public void setOswtNum(String oswtNum) throws java.sql.SQLException{
		if(isSame(oswtNum, getOswtNum()))return;
		String oldValue = getOswtNum();
		this.oswtNum=oswtNum;
		setProperty("OSWT_NUM", oswtNum, oldValue);
	}
	@Column(name="OSWT_POS",nullable=true,length=10)
	public String getOswtPos(){
		return oswtPos;
	}
	public void setOswtPos(String oswtPos) throws java.sql.SQLException{
		if(isSame(oswtPos, getOswtPos()))return;
		String oldValue = getOswtPos();
		this.oswtPos=oswtPos;
		setProperty("OSWT_POS", oswtPos, oldValue);
	}
	@Column(name="TRANSFER",nullable=true,length=24)
	public double getTransfer(){
		return transfer;
	}
	public void setTransfer(double transfer) throws java.sql.SQLException{
		if(isSame(transfer, getTransfer()))return;
		double oldValue = getTransfer();
		this.transfer=transfer;
		setProperty("TRANSFER", transfer, oldValue);
	}
	@Column(name="ACTUAL_TRANS",nullable=true,length=24)
	public double getActualTrans(){
		return actualTrans;
	}
	public void setActualTrans(double actualTrans) throws java.sql.SQLException{
		if(isSame(actualTrans, getActualTrans()))return;
		double oldValue = getActualTrans();
		this.actualTrans=actualTrans;
		setProperty("ACTUAL_TRANS", actualTrans, oldValue);
	}
	@Column(name="TRANS_DATE",nullable=true,length=7)
	public Calendar getTransDate(){
		return transDate;
	}
	public void setTransDate(Calendar transDate) throws java.sql.SQLException{
		if(isSame(transDate, getTransDate()))return;
		Calendar oldValue = getTransDate();
		this.transDate=transDate;
		setProperty("TRANS_DATE", transDate, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getFromCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setFromCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public Ckt getCkt2()throws java.sql.SQLException{
		if(ckt2==null)
			ckt2=Ckt.getInstance(getPlanyear(), getToCktId());
		return ckt2;
	}
	public void setCkt2(Ckt ckt2)throws java.sql.SQLException{
		setToCktId(ckt2==null?0:ckt2.getCktId());
		this.ckt2=ckt2;
	}
	public CktSwt getCktSwt()throws java.sql.SQLException{
		if(cktSwt==null)
			cktSwt=CktSwt.getInstance(getPlanyear(), getCswtTypeId());
		return cktSwt;
	}
	public void setCktSwt(CktSwt cktSwt)throws java.sql.SQLException{
		setCswtTypeId(cktSwt==null?0:cktSwt.getSwtTypeId());
		this.cktSwt=cktSwt;
	}
	public CktSwt getCktSwt2()throws java.sql.SQLException{
		if(cktSwt2==null)
			cktSwt2=CktSwt.getInstance(getPlanyear(), getOswtTypeId());
		return cktSwt2;
	}
	public void setCktSwt2(CktSwt cktSwt2)throws java.sql.SQLException{
		setOswtTypeId(cktSwt2==null?0:cktSwt2.getSwtTypeId());
		this.cktSwt2=cktSwt2;
	}
	public SwtProc getSwtProc()throws java.sql.SQLException{
		if(swtProc==null)
			swtProc=SwtProc.getInstance(getPlanyear(), getProcId());
		return swtProc;
	}
	public void setSwtProc(SwtProc swtProc)throws java.sql.SQLException{
		setProcId(swtProc==null?0:swtProc.getProcId());
		this.swtProc=swtProc;
	}
	public CktTrans copy()throws java.sql.SQLException{
		CktTrans cp = new CktTrans((CktTrans)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CktTransDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CktTransDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getTransId(),o.getTransId())) diffs.add("TRANS_ID");
		if(!isSame(getProcId(),o.getProcId())) diffs.add("PROC_ID");
		if(!isSame(getStep(),o.getStep())) diffs.add("STEP");
		if(!isSame(getFromCktId(),o.getFromCktId())) diffs.add("FROM_CKT_ID");
		if(!isSame(getToCktId(),o.getToCktId())) diffs.add("TO_CKT_ID");
		if(!isSame(getCswtTypeId(),o.getCswtTypeId())) diffs.add("CSWT_TYPE_ID");
		if(!isSame(getCswtNum(),o.getCswtNum())) diffs.add("CSWT_NUM");
		if(!isSame(getCswtPos(),o.getCswtPos())) diffs.add("CSWT_POS");
		if(!isSame(getOswtTypeId(),o.getOswtTypeId())) diffs.add("OSWT_TYPE_ID");
		if(!isSame(getOswtNum(),o.getOswtNum())) diffs.add("OSWT_NUM");
		if(!isSame(getOswtPos(),o.getOswtPos())) diffs.add("OSWT_POS");
		if(!isSame(getTransfer(),o.getTransfer())) diffs.add("TRANSFER");
		if(!isSame(getActualTrans(),o.getActualTrans())) diffs.add("ACTUAL_TRANS");
		if(!isSame(getTransDate(),o.getTransDate())) diffs.add("TRANS_DATE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
