package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.dao.ProjContingencyDAO;
import com.sce.esp.util.Calculate;
import com.sce.esp.util.FormatText;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
@Entity
@Table(schema="MDI",name="MDIV80_PROJ_CONTINGENCY")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ProjContingency o WHERE o.PROJ_CONT_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ProjContingency o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ProjContingency o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIV80_PROJ_CONTINGENCY o WHERE o.PROJ_CONT_ID=?"),//AUTO-GENERATED
})
public class ProjContingency extends ProjContingencyDAO{
	public ProjContingency(){
	}
	public ProjContingency(int projContId){
		super(projContId);
	}
	public ProjContingency(ProjContingency orig){
		super(orig);
	}
	public static ProjContingency getBestMatch(SceProjElemCost spec) throws SQLException {
		ProjContingency bm = getBestMatch(spec.getProgram(),spec.getCostStage(),spec.getSceElem(),spec.getRevTs());
		if(bm==null)
			bm = getBestMatch(spec.getProgram(),spec.getCostStage(),null,spec.getRevTs());
		return bm;
	}
	public static ProjContingency getBestMatch(Program prog, CostStage cs, SceElem elem, Calendar effDate) throws SQLException {
		String eId = elem!=null?""+elem.getSceElemId():null;
		return getBestMatch(prog.getProgramId(),cs.getCostStageId(),eId,effDate);
	}
	public static ProjContingency getBestMatch(int pId, int csId, String eId, Calendar effDate) throws SQLException {
		Collection<ProjContingency> collection = getCollection(new String[]{"PROGRAM_ID","COST_STAGE_ID","SCE_ELEM_ID"},pId,csId,eId);
		for(ProjContingency pc:new TreeSet<ProjContingency>(collection))
			if(pc.getEffDate().getTimeInMillis()<effDate.getTimeInMillis()+Calculate.ONE_DAY-1)
				return pc;
		return null;
	}
	public static void setRegCont(Program prog, CostStage cs, SceElem elem, Calendar effDate, double regCont) throws SQLException {
		ProjContingency pc = getBestMatch(prog,cs,elem,effDate);
		if(pc==null){
			pc = new ProjContingency();
			pc.setProgram(prog);
			pc.setCostStage(cs);
			pc.setSceElem(elem);
			pc.setEffDate(effDate);
		}
		else if(!FormatText.formatDate(effDate, FormatText.MYSQL_DATE).equals(FormatText.formatDate(pc.getEffDate(), FormatText.MYSQL_DATE))){
			EspLogger.message(ProjContingency.class, FormatText.formatDate(effDate, FormatText.MYSQL_DATE)+" vs. "+FormatText.formatDate(pc.getEffDate(), FormatText.MYSQL_DATE));
			pc = pc.copy();
			pc.setEffDate(effDate);
		}
		pc.setRegCont(regCont);
		if(pc.isNewInstance())
			pc.insert();
	}
	public static void setMajorCont(Program prog, CostStage cs, SceElem elem, Calendar effDate, double majorCont) throws SQLException {
		ProjContingency pc = getBestMatch(prog,cs,elem,effDate);
		if(pc==null){
			pc = new ProjContingency();
			pc.setProgram(prog);
			pc.setCostStage(cs);
			pc.setSceElem(elem);
			pc.setEffDate(effDate);
		}
		else if(!FormatText.formatDate(effDate, FormatText.MYSQL_DATE).equals(FormatText.formatDate(pc.getEffDate(), FormatText.MYSQL_DATE))){
			EspLogger.message(ProjContingency.class, FormatText.formatDate(effDate, FormatText.MYSQL_DATE)+" vs. "+FormatText.formatDate(pc.getEffDate(), FormatText.MYSQL_DATE));
			pc = pc.copy();
			pc.setEffDate(effDate);
		}
		pc.setMajorCont(majorCont);
		if(pc.isNewInstance())
			pc.insert();
	}
	public int compareTo(Object o){
		if(o instanceof ProjContingency){
			int ret = getEffDate().compareTo(((ProjContingency) o).getEffDate());
			if(ret!=0)
				return -ret;
		}
		return super.compareTo(o);
	}
}
