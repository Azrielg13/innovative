package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PqEquInv;
import com.sce.esp.object.model.PqEquipment;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PqEquInvDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,TOOL_ID};
	public static enum PROPERTY{PLANYEAR,TOOL_ID,EQUIP_ID,SERIAL,QUANTITY,RMA,CALIBRATION_DATE,CALIBRATION_DUE_DATE,VEHICLE_NUM,USERNAME_ID,COMMENTS,ALT_DOUBLE1,ALT_VARCHAR1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int TOOLID_LIMIT = 9;
	public final static int EQUIPID_LIMIT = 9;
	public final static int SERIAL_LIMIT = 20;
	public final static int QUANTITY_LIMIT = 9;
	public final static int RMA_LIMIT = 20;
	public final static int CALIBRATIONDATE_LIMIT = 7;
	public final static int CALIBRATIONDUEDATE_LIMIT = 7;
	public final static int VEHICLENUM_LIMIT = 20;
	public final static int USERNAMEID_LIMIT = 9;
	public final static int COMMENTS_LIMIT = 256;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	private int planyear;
	private int toolId;
	private int equipId;
	private String serial;
	private int quantity;
	private String rma;
	private Calendar calibrationDate;
	private Calendar calibrationDueDate;
	private String vehicleNum;
	private int usernameId;
	private String comments;
	private double altDouble1;
	private String altVarchar1;
	private PqEquipment pqEquipment;
	private User user;
	public static PqEquInv getInstance(int planyear, int toolId)throws java.sql.SQLException{
		return getInstance(planyear, toolId, true);
	}
	public static PqEquInv getInstance(int planyear, int toolId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, toolId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, toolId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PqEquInv o = null;
		if(cache != null && cache.contains(PqEquInv.class, pk))
			o = em.find(PqEquInv.class, pk);
		if(o==null && getAICache().contains(PqEquInv.class, pk))
			o = getAICache().find(PqEquInv.class, pk);
		if(o==null && fetch)
			o = em.find(PqEquInv.class, pk);
		if(o==null && fetch && PqEquInv.class.getAnnotation(AutoInsertable.class) != null){
			o = new PqEquInv(planyear, toolId);
			getAICache().cache(PqEquInv.class, o);
		}
		return o;
	}
	public static Collection<PqEquInv> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PqEquInv> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PqEquInv> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PqEquInv o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PqEquInv> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqEquInv> tq = em.createQuery(jpql,PqEquInv.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PqEquInv> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqEquInv> tq = em.createNamedQuery(name,PqEquInv.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PqEquInvDAO(){}
	public PqEquInvDAO(int planyear, int toolId){
		this.planyear=planyear;
		this.toolId=toolId;
	}
	public PqEquInvDAO(PqEquInvDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(PqEquInvDAO orig){
		this.equipId=orig.getEquipId();
		this.serial=orig.getSerial();
		this.quantity=orig.getQuantity();
		this.rma=orig.getRma();
		this.calibrationDate=orig.getCalibrationDate();
		this.calibrationDueDate=orig.getCalibrationDueDate();
		this.vehicleNum=orig.getVehicleNum();
		this.usernameId=orig.getUsernameId();
		this.comments=orig.getComments();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, toolId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI987_SEQ",sequenceName="MDI987_SEQ")
	@Column(name="TOOL_ID",nullable=false,length=9)
	public int getToolId(){
		return toolId;
	}
	public void setToolId(int toolId) throws java.sql.SQLException{
		if(isSame(toolId, getToolId()))return;
		int oldValue = getToolId();
		this.toolId=toolId;
		setProperty("TOOL_ID", toolId, oldValue);
	}
	@Column(name="EQUIP_ID",nullable=false,length=9)
	public int getEquipId(){
		return equipId;
	}
	public void setEquipId(int equipId) throws java.sql.SQLException{
		if(isSame(equipId, getEquipId()))return;
		int oldValue = getEquipId();
		this.equipId=equipId;
		setProperty("EQUIP_ID", equipId, oldValue);
		pqEquipment=null;
	}
	@Column(name="SERIAL",nullable=true,length=20)
	public String getSerial(){
		return serial;
	}
	public void setSerial(String serial) throws java.sql.SQLException{
		if(isSame(serial, getSerial()))return;
		String oldValue = getSerial();
		this.serial=serial;
		setProperty("SERIAL", serial, oldValue);
	}
	@Column(name="QUANTITY",nullable=true,length=9)
	public int getQuantity(){
		return quantity;
	}
	public void setQuantity(int quantity) throws java.sql.SQLException{
		if(isSame(quantity, getQuantity()))return;
		int oldValue = getQuantity();
		this.quantity=quantity;
		setProperty("QUANTITY", quantity, oldValue);
	}
	@Column(name="RMA",nullable=true,length=20)
	public String getRma(){
		return rma;
	}
	public void setRma(String rma) throws java.sql.SQLException{
		if(isSame(rma, getRma()))return;
		String oldValue = getRma();
		this.rma=rma;
		setProperty("RMA", rma, oldValue);
	}
	@Column(name="CALIBRATION_DATE",nullable=true,length=7)
	public Calendar getCalibrationDate(){
		return calibrationDate;
	}
	public void setCalibrationDate(Calendar calibrationDate) throws java.sql.SQLException{
		if(isSame(calibrationDate, getCalibrationDate()))return;
		Calendar oldValue = getCalibrationDate();
		this.calibrationDate=calibrationDate;
		setProperty("CALIBRATION_DATE", calibrationDate, oldValue);
	}
	@Column(name="CALIBRATION_DUE_DATE",nullable=true,length=7)
	public Calendar getCalibrationDueDate(){
		return calibrationDueDate;
	}
	public void setCalibrationDueDate(Calendar calibrationDueDate) throws java.sql.SQLException{
		if(isSame(calibrationDueDate, getCalibrationDueDate()))return;
		Calendar oldValue = getCalibrationDueDate();
		this.calibrationDueDate=calibrationDueDate;
		setProperty("CALIBRATION_DUE_DATE", calibrationDueDate, oldValue);
	}
	@Column(name="VEHICLE_NUM",nullable=true,length=20)
	public String getVehicleNum(){
		return vehicleNum;
	}
	public void setVehicleNum(String vehicleNum) throws java.sql.SQLException{
		if(isSame(vehicleNum, getVehicleNum()))return;
		String oldValue = getVehicleNum();
		this.vehicleNum=vehicleNum;
		setProperty("VEHICLE_NUM", vehicleNum, oldValue);
	}
	@Column(name="USERNAME_ID",nullable=true,length=9)
	public int getUsernameId(){
		return usernameId;
	}
	public void setUsernameId(int usernameId) throws java.sql.SQLException{
		if(isSame(usernameId, getUsernameId()))return;
		int oldValue = getUsernameId();
		this.usernameId=usernameId;
		setProperty("USERNAME_ID", usernameId, oldValue);
		user=null;
	}
	@Column(name="COMMENTS",nullable=true,length=256)
	public String getComments(){
		return comments;
	}
	public void setComments(String comments) throws java.sql.SQLException{
		if(isSame(comments, getComments()))return;
		String oldValue = getComments();
		this.comments=comments;
		setProperty("COMMENTS", comments, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	public PqEquipment getPqEquipment()throws java.sql.SQLException{
		if(pqEquipment==null)
			pqEquipment=PqEquipment.getInstance(getEquipId());
		return pqEquipment;
	}
	public void setPqEquipment(PqEquipment pqEquipment)throws java.sql.SQLException{
		setEquipId(pqEquipment==null?0:pqEquipment.getEquipId());
		this.pqEquipment=pqEquipment;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getUsernameId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setUsernameId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public PqEquInv copy()throws java.sql.SQLException{
		PqEquInv cp = new PqEquInv((PqEquInv)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PqEquInvDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PqEquInvDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getToolId(),o.getToolId())) diffs.add("TOOL_ID");
		if(!isSame(getEquipId(),o.getEquipId())) diffs.add("EQUIP_ID");
		if(!isSame(getSerial(),o.getSerial())) diffs.add("SERIAL");
		if(!isSame(getQuantity(),o.getQuantity())) diffs.add("QUANTITY");
		if(!isSame(getRma(),o.getRma())) diffs.add("RMA");
		if(!isSame(getCalibrationDate(),o.getCalibrationDate())) diffs.add("CALIBRATION_DATE");
		if(!isSame(getCalibrationDueDate(),o.getCalibrationDueDate())) diffs.add("CALIBRATION_DUE_DATE");
		if(!isSame(getVehicleNum(),o.getVehicleNum())) diffs.add("VEHICLE_NUM");
		if(!isSame(getUsernameId(),o.getUsernameId())) diffs.add("USERNAME_ID");
		if(!isSame(getComments(),o.getComments())) diffs.add("COMMENTS");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
