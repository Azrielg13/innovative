package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.Task;

import java.util.Calendar;
import java.util.Collection;
import java.util.Collections;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class TaskDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{TASK_ID};
	public static enum PROPERTY{TASK_ID,PARENT_TASK_ID,TASK_NAME,TASK_NOTES,TASK_TYPE,DURATION,MILESTONE,TEMPLATE,CRITICAL,EXPECTED_DATE,ACTUAL_DATE,SHIFT,ALT_INT1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,SUB_TASK_TYPE_ID};

	public final static int TASKID_LIMIT = 9;
	public final static int PARENTTASKID_LIMIT = 9;
	public final static int TASKNAME_LIMIT = 128;
	public final static int TASKNOTES_LIMIT = 512;
	public final static int TASKTYPE_LIMIT = 2;
	public final static int DURATION_LIMIT = 9;
	public final static int MILESTONE_LIMIT = 1;
	public final static int TEMPLATE_LIMIT = 1;
	public final static int CRITICAL_LIMIT = 1;
	public final static int EXPECTEDDATE_LIMIT = 7;
	public final static int ACTUALDATE_LIMIT = 7;
	public final static int SHIFT_LIMIT = 9;
	public final static int ALTINT1_LIMIT = 9;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int SUBTASKTYPEID_LIMIT = 9;
	private int taskId=0;

	private int parentTaskId;
	private String taskName;
	private String taskNotes;
	protected int taskType;
	private int duration;
	private boolean milestone;
	private boolean template;
	private boolean critical;
	private Calendar expectedDate;
	private Calendar actualDate;
	private int shift;
	private int altInt1;
	private String altVarchar1;
	private Calendar altDate1;
	private int subTaskTypeId;
	private Collection<Task> childTasks;
	private Task parentTask;
	private LookUp lookUp;


	public static Task getInstance(int taskId)throws java.sql.SQLException{
		return getInstance(taskId, true);
	}
	
	public static Task getInstance(int taskId, boolean fetch)throws java.sql.SQLException{
		if(isNull(taskId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(taskId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Task o = null;
		if(cache != null && cache.contains(Task.class, pk))
			o = em.find(Task.class, pk);
		if(o==null && getAICache().contains(Task.class, pk))
			o = getAICache().find(Task.class, pk);
		if(o==null && fetch)
			o = em.find(Task.class, pk);
//		if(o==null && fetch && Task.class.getAnnotation(AutoInsertable.class) != null){
//			o = new Task(taskId);
//			getAICache().cache(Task.class, o);
//		}
		return o;
	}
	public static Collection<? extends Task> getAll()throws java.sql.SQLException{
		return Collections.synchronizedCollection(getNamedCollection("findAll"));
	}
	public static Collection<? extends Task> getAllActive()throws java.sql.SQLException{
		return Collections.synchronizedCollection(getNamedCollection("findAllActive"));
	}
	public static Collection<? extends Task> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Task o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<? extends Task> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Task> tq = em.createQuery(jpql,Task.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<? extends Task> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Task> tq = em.createNamedQuery(name,Task.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TaskDAO(){}
	
	public TaskDAO(int taskId){
		this.taskId=taskId;
	}
	
	public TaskDAO(TaskDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(TaskDAO orig){
		this.parentTaskId=orig.getParentTaskId();
		this.taskName=orig.getTaskName();
		this.taskNotes=orig.getTaskNotes();
		this.taskType=orig.getTaskType();
		this.duration=orig.getDuration();
		this.milestone=orig.isMilestone();
		this.template=orig.isTemplate();
		this.critical=orig.isCritical();
		this.expectedDate=orig.getExpectedDate();
		this.actualDate=orig.getActualDate();
		this.shift=orig.getShift();
		this.altInt1=orig.getAltInt1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
		this.subTaskTypeId=orig.getSubTaskTypeId();
	}

	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{taskId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS88_SEQ",sequenceName="MDIS88_SEQ")
	@Column(name="TASK_ID",nullable=false,length=9)
	public int getTaskId(){
		return taskId;
	}
	public void setTaskId(int taskId) throws java.sql.SQLException{
		if(isSame(taskId, getTaskId()))return;
		int oldValue = getTaskId();
		this.taskId=taskId;
		setProperty("TASK_ID", taskId, oldValue);
	}
	@Column(name="PARENT_TASK_ID",nullable=true,length=9)
	public int getParentTaskId(){
		return parentTaskId;
	}
	public void setParentTaskId(int parentTaskId) throws java.sql.SQLException{
		if(isSame(parentTaskId, getParentTaskId()))return;
		int oldValue = getParentTaskId();
		this.parentTaskId=parentTaskId;
		setProperty("PARENT_TASK_ID", parentTaskId, oldValue);
		parentTask=null;
	}
	@Column(name="TASK_NAME",nullable=false,length=128)
	public String getTaskName(){
		return taskName;
	}
	public void setTaskName(String taskName) throws java.sql.SQLException{
		if(isSame(taskName, getTaskName()))return;
		String oldValue = getTaskName();
		this.taskName=taskName;
		setProperty("TASK_NAME", taskName, oldValue);
	}
	@Column(name="TASK_NOTES",nullable=true,length=512)
	public String getTaskNotes(){
		return taskNotes;
	}
	public void setTaskNotes(String taskNotes) throws java.sql.SQLException{
		if(isSame(taskNotes, getTaskNotes()))return;
		String oldValue = getTaskNotes();
		this.taskNotes=taskNotes;
		setProperty("TASK_NOTES", taskNotes, oldValue);
	}
	@Column(name="TASK_TYPE",nullable=true,length=2)
	public int getTaskType(){
		return taskType;
	}
	public void setTaskType(int taskType) throws java.sql.SQLException{
		if(isSame(taskType, getTaskType()))return;
		int oldValue = getTaskType();
		this.taskType=taskType;
		setProperty("TASK_TYPE", taskType, oldValue);
	}
	@Column(name="DURATION",nullable=true,length=9)
	public int getDuration(){
		return duration;
	}
	public void setDuration(int duration) throws java.sql.SQLException{
		if(isSame(duration, getDuration()))return;
		int oldValue = getDuration();
		this.duration=duration;
		setProperty("DURATION", duration, oldValue);
	}
	@Column(name="MILESTONE",nullable=true,length=1)
	public boolean isMilestone(){
		return milestone;
	}
	public void setMilestone(boolean milestone) throws java.sql.SQLException{
		if(isSame(milestone, isMilestone()))return;
		boolean oldValue = isMilestone();
		this.milestone=milestone;
		setProperty("MILESTONE", milestone, oldValue);
	}
	@Column(name="TEMPLATE",nullable=true,length=1)
	public boolean isTemplate(){
		return template;
	}
	public void setTemplate(boolean template) throws java.sql.SQLException{
		if(isSame(template, isTemplate()))return;
		boolean oldValue = isTemplate();
		this.template=template;
		setProperty("TEMPLATE", template, oldValue);
	}
	@Column(name="CRITICAL",nullable=true,length=1)
	public boolean isCritical(){
		return critical;
	}
	public void setCritical(boolean critical) throws java.sql.SQLException{
		if(isSame(critical, isCritical()))return;
		boolean oldValue = isCritical();
		this.critical=critical;
		setProperty("CRITICAL", critical, oldValue);
	}
	@Column(name="EXPECTED_DATE",nullable=true,length=7)
	public Calendar getExpectedDate(){
		return expectedDate;
	}
	public void setExpectedDate(Calendar expectedDate) throws java.sql.SQLException{
		if(isSame(expectedDate, getExpectedDate()))return;
		Calendar oldValue = getExpectedDate();
		this.expectedDate=expectedDate;
		setProperty("EXPECTED_DATE", expectedDate, oldValue);
	}
	@Column(name="ACTUAL_DATE",nullable=true,length=7)
	public Calendar getActualDate(){
		return actualDate;
	}
	public void setActualDate(Calendar actualDate) throws java.sql.SQLException{
		if(isSame(actualDate, getActualDate()))return;
		Calendar oldValue = getActualDate();
		this.actualDate=actualDate;
		setProperty("ACTUAL_DATE", actualDate, oldValue);
	}
	@Column(name="SHIFT",nullable=true,length=9)
	public int getShift(){
		return shift;
	}
	public void setShift(int shift) throws java.sql.SQLException{
		if(isSame(shift, getShift()))return;
		int oldValue = getShift();
		this.shift=shift;
		setProperty("SHIFT", shift, oldValue);
	}
	@Column(name="ALT_INT1",nullable=true,length=9)
	public int getAltInt1(){
		return altInt1;
	}
	public void setAltInt1(int altInt1) throws java.sql.SQLException{
		if(isSame(altInt1, getAltInt1()))return;
		int oldValue = getAltInt1();
		this.altInt1=altInt1;
		setProperty("ALT_INT1", altInt1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}

	@Column(name="SUB_TASK_TYPE_ID",nullable=true,length=9)
	public int getSubTaskTypeId(){
		return subTaskTypeId;
	}

	public void setSubTaskTypeId(int subTaskTypeId) throws java.sql.SQLException{
		if(isSame(subTaskTypeId, getSubTaskTypeId()))return;
		int oldValue = getSubTaskTypeId();
		this.subTaskTypeId=subTaskTypeId;
		setProperty("SUB_TASK_TYPE_ID", subTaskTypeId, oldValue);
		lookUp=null;
	}


	public LookUp getLookUp()throws java.sql.SQLException{
		if(lookUp==null)
			lookUp=LookUp.getInstance(getSubTaskTypeId());
		return lookUp;
	}

	public void setLookUp(LookUp lookUp)throws java.sql.SQLException{
		setSubTaskTypeId(lookUp==null?0:lookUp.getId());
		this.lookUp=lookUp;
	}
	public Task getParent()throws java.sql.SQLException{
		if(getParentTaskId()!=0){
			if(parentTask==null)
				parentTask=Task.getInstance(getParentTaskId());
			return parentTask;
			}
		return null;
	}
	
	
	public void setParentTask(Task parentTask)throws java.sql.SQLException{
		setParentTaskId(parentTask==null?0:parentTask.getTaskId());
		this.parentTask=parentTask;
	}
	public Collection<Task> getChildTasks()throws java.sql.SQLException{
		if(isNewInstance() || childTasks != null){
			if(childTasks == null)
				childTasks = new TreeSet<Task>();
			return childTasks;
		}//FIXME
		Collection<Task> t = (Collection<Task>) Task.getNamedCollection("findByTask",getTaskId());
		return t;
	}

	public void addTask(Task task)throws java.sql.SQLException{
		task.setParentTask((Task)this);
		if(isNewInstance() || childTasks != null)
			getChildTasks().add(task);
		else
			task.insert();
	}
	
	public void removeTask(Task task)throws java.sql.SQLException{
		if(isNewInstance() || childTasks != null)
			getChildTasks().remove(task);
		else
			task.delete();
	}
	public abstract Task copy()throws java.sql.SQLException;
//	{
//		Task cp = new Task((Task)this);
//		copyChildrenTo(cp);
//		return cp;
//	}
	public void copyChildrenTo(TaskDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(Task child:getChildTasks())
			cp.addTask(child.copy());
	}
	public Vector<String> getDifference(TaskDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getTaskId(),o.getTaskId())) diffs.add("TASK_ID");
		if(!isSame(getParentTaskId(),o.getParentTaskId())) diffs.add("PARENT_TASK_ID");
		if(!isSame(getTaskName(),o.getTaskName())) diffs.add("TASK_NAME");
		if(!isSame(getTaskNotes(),o.getTaskNotes())) diffs.add("TASK_NOTES");
		if(!isSame(getTaskType(),o.getTaskType())) diffs.add("TASK_TYPE");
		if(!isSame(getDuration(),o.getDuration())) diffs.add("DURATION");
		if(!isSame(isMilestone(),o.isMilestone())) diffs.add("MILESTONE");
		if(!isSame(isTemplate(),o.isTemplate())) diffs.add("TEMPLATE");
		if(!isSame(isCritical(),o.isCritical())) diffs.add("CRITICAL");
		if(!isSame(getExpectedDate(),o.getExpectedDate())) diffs.add("EXPECTED_DATE");
		if(!isSame(getActualDate(),o.getActualDate())) diffs.add("ACTUAL_DATE");
		if(!isSame(getShift(),o.getShift())) diffs.add("SHIFT");
		if(!isSame(getAltInt1(),o.getAltInt1())) diffs.add("ALT_INT1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getSubTaskTypeId(),o.getSubTaskTypeId())) diffs.add("SUB_TASK_TYPE_ID");

		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(childTasks != null){
			for(Task task:getChildTasks()){
				if(task.isNewInstance())
					task.setParentTask((Task)this);
				task.insert();
			}
			childTasks = null;
		}
	}


}
