package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.LgProj;
import com.sce.esp.object.model.LgProjDriver;
import com.sce.esp.object.model.SceProjDriver;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class LgProjDriverDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{LG_PROJ_DRIVER_ID};
	public static enum PROPERTY{PLANYEAR,LG_PROJ_DRIVER_ID,SCE_PROJ_DRIVER_ID,LG_PROJ_ID,ALT_VARCHAR1,ALT_DOUBLE1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int LGPROJDRIVERID_LIMIT = 9;
	public final static int SCEPROJDRIVERID_LIMIT = 9;
	public final static int LGPROJID_LIMIT = 9;
	public final static int ALTVARCHAR1_LIMIT = 1024;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDATE1_LIMIT = 7;
	private int planyear;
	private int lgProjDriverId;
	private int sceProjDriverId;
	private int lgProjId;
	private String altVarchar1;
	private double altDouble1;
	private Calendar altDate1;
	private Department department;
	private LgProj lgProj;
	private SceProjDriver sceProjDriver;
	public static LgProjDriver getInstance(int lgProjDriverId)throws java.sql.SQLException{
		return getInstance(lgProjDriverId, true);
	}
	public static LgProjDriver getInstance(int lgProjDriverId, boolean fetch)throws java.sql.SQLException{
		if(isNull(lgProjDriverId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(lgProjDriverId);
		Cache cache = em.getEntityManagerFactory().getCache();
		LgProjDriver o = null;
		if(cache != null && cache.contains(LgProjDriver.class, pk))
			o = em.find(LgProjDriver.class, pk);
		if(o==null && getAICache().contains(LgProjDriver.class, pk))
			o = getAICache().find(LgProjDriver.class, pk);
		if(o==null && fetch)
			o = em.find(LgProjDriver.class, pk);
		if(o==null && fetch && LgProjDriver.class.getAnnotation(AutoInsertable.class) != null){
			o = new LgProjDriver(lgProjDriverId);
			getAICache().cache(LgProjDriver.class, o);
		}
		return o;
	}
	public static Collection<LgProjDriver> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<LgProjDriver> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<LgProjDriver> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM LgProjDriver o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<LgProjDriver> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<LgProjDriver> tq = em.createQuery(jpql,LgProjDriver.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<LgProjDriver> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<LgProjDriver> tq = em.createNamedQuery(name,LgProjDriver.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public LgProjDriverDAO(){}
	public LgProjDriverDAO(int lgProjDriverId){
		this.lgProjDriverId=lgProjDriverId;
	}
	public LgProjDriverDAO(LgProjDriverDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(LgProjDriverDAO orig){
		this.planyear=orig.getPlanyear();
		this.sceProjDriverId=orig.getSceProjDriverId();
		this.lgProjId=orig.getLgProjId();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDouble1=orig.getAltDouble1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{lgProjDriverId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDIT60_SEQ",sequenceName="MDIT60_SEQ")
	@Column(name="LG_PROJ_DRIVER_ID",nullable=false,length=9)
	public int getLgProjDriverId(){
		return lgProjDriverId;
	}
	public void setLgProjDriverId(int lgProjDriverId) throws java.sql.SQLException{
		if(isSame(lgProjDriverId, getLgProjDriverId()))return;
		int oldValue = getLgProjDriverId();
		this.lgProjDriverId=lgProjDriverId;
		setProperty("LG_PROJ_DRIVER_ID", lgProjDriverId, oldValue);
	}
	@Column(name="SCE_PROJ_DRIVER_ID",nullable=false,length=9)
	public int getSceProjDriverId(){
		return sceProjDriverId;
	}
	public void setSceProjDriverId(int sceProjDriverId) throws java.sql.SQLException{
		if(isSame(sceProjDriverId, getSceProjDriverId()))return;
		int oldValue = getSceProjDriverId();
		this.sceProjDriverId=sceProjDriverId;
		setProperty("SCE_PROJ_DRIVER_ID", sceProjDriverId, oldValue);
		sceProjDriver=null;
	}
	@Column(name="LG_PROJ_ID",nullable=false,length=9)
	public int getLgProjId(){
		return lgProjId;
	}
	public void setLgProjId(int lgProjId) throws java.sql.SQLException{
		if(isSame(lgProjId, getLgProjId()))return;
		int oldValue = getLgProjId();
		this.lgProjId=lgProjId;
		setProperty("LG_PROJ_ID", lgProjId, oldValue);
		lgProj=null;
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=1024)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public LgProj getLgProj()throws java.sql.SQLException{
		if(lgProj==null)
			lgProj=LgProj.getInstance(getPlanyear(), getLgProjId());
		return lgProj;
	}
	public void setLgProj(LgProj lgProj)throws java.sql.SQLException{
		setLgProjId(lgProj==null?0:lgProj.getLgProjId());
		this.lgProj=lgProj;
	}
	public SceProjDriver getSceProjDriver()throws java.sql.SQLException{
		if(sceProjDriver==null)
			sceProjDriver=SceProjDriver.getInstance(getSceProjDriverId());
		return sceProjDriver;
	}
	public void setSceProjDriver(SceProjDriver sceProjDriver)throws java.sql.SQLException{
		setSceProjDriverId(sceProjDriver==null?0:sceProjDriver.getSceProjDriverId());
		this.sceProjDriver=sceProjDriver;
	}
	public LgProjDriver copy()throws java.sql.SQLException{
		LgProjDriver cp = new LgProjDriver((LgProjDriver)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(LgProjDriverDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(LgProjDriverDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getLgProjDriverId(),o.getLgProjDriverId())) diffs.add("LG_PROJ_DRIVER_ID");
		if(!isSame(getSceProjDriverId(),o.getSceProjDriverId())) diffs.add("SCE_PROJ_DRIVER_ID");
		if(!isSame(getLgProjId(),o.getLgProjId())) diffs.add("LG_PROJ_ID");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
