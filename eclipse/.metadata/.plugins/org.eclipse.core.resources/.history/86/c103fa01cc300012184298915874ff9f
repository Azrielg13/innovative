package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.TrackingDefault;
import com.sce.esp.object.model.TrackingDepDefault;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class TrackingDefaultDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{T_ID};
	public static enum PROPERTY{T_ID,NAME,DESCRIPTION,TARGET_WORK_DAYS,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1};
	public final static int TID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 512;
	public final static int TARGETWORKDAYS_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int tId;
	private String name;
	private String description;
	private int targetWorkDays;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Collection<TrackingDepDefault> trackingDepDefaults;
	private Collection<TrackingDepDefault> trackingDepDefaults2;
	public static TrackingDefault getInstance(int tId)throws java.sql.SQLException{
		return getInstance(tId, true);
	}
	public static TrackingDefault getInstance(int tId, boolean fetch)throws java.sql.SQLException{
		if(isNull(tId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(tId);
		Cache cache = em.getEntityManagerFactory().getCache();
		TrackingDefault o = null;
		if(cache != null && cache.contains(TrackingDefault.class, pk))
			o = em.find(TrackingDefault.class, pk);
		if(o==null && getAICache().contains(TrackingDefault.class, pk))
			o = getAICache().find(TrackingDefault.class, pk);
		if(o==null && fetch)
			o = em.find(TrackingDefault.class, pk);
		if(o==null && fetch && TrackingDefault.class.getAnnotation(AutoInsertable.class) != null){
			o = new TrackingDefault(tId);
			getAICache().cache(TrackingDefault.class, o);
		}
		return o;
	}
	public static Collection<TrackingDefault> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<TrackingDefault> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<TrackingDefault> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM TrackingDefault o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<TrackingDefault> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TrackingDefault> tq = em.createQuery(jpql,TrackingDefault.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<TrackingDefault> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TrackingDefault> tq = em.createNamedQuery(name,TrackingDefault.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TrackingDefaultDAO(){}
	public TrackingDefaultDAO(int tId){
		this.tId=tId;
	}
	public TrackingDefaultDAO(TrackingDefaultDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(TrackingDefaultDAO orig){
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.targetWorkDays=orig.getTargetWorkDays();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{tId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS10_SEQ",sequenceName="MDIS10_SEQ")
	@Column(name="T_ID",nullable=false,length=9)
	public int getTId(){
		return tId;
	}
	public void setTId(int tId) throws java.sql.SQLException{
		if(isSame(tId, getTId()))return;
		int oldValue = getTId();
		this.tId=tId;
		setProperty("T_ID", tId, oldValue);
	}
	@Column(name="NAME",nullable=true,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=512)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="TARGET_WORK_DAYS",nullable=true,length=9)
	public int getTargetWorkDays(){
		return targetWorkDays;
	}
	public void setTargetWorkDays(int targetWorkDays) throws java.sql.SQLException{
		if(isSame(targetWorkDays, getTargetWorkDays()))return;
		int oldValue = getTargetWorkDays();
		this.targetWorkDays=targetWorkDays;
		setProperty("TARGET_WORK_DAYS", targetWorkDays, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Collection<TrackingDepDefault> getTrackingDepDefaults()throws java.sql.SQLException{
		if(isNewInstance() || trackingDepDefaults != null){
			if(trackingDepDefaults == null)
				trackingDepDefaults = new TreeSet<TrackingDepDefault>();
			return trackingDepDefaults;
		}
		return TrackingDepDefault.getNamedCollection("findByTrackingDefault",getTId());
	}
	public void addTrackingDepDefault(TrackingDepDefault trackingDepDefault)throws java.sql.SQLException{
		trackingDepDefault.setTrackingDefault((TrackingDefault)this);
		if(isNewInstance() || trackingDepDefaults != null)
			getTrackingDepDefaults().add(trackingDepDefault);
		else
			trackingDepDefault.insert();
	}
	public void removeTrackingDepDefault(TrackingDepDefault trackingDepDefault)throws java.sql.SQLException{
		if(isNewInstance() || trackingDepDefaults != null)
			getTrackingDepDefaults().remove(trackingDepDefault);
		else
			trackingDepDefault.delete();
	}
	public Collection<TrackingDepDefault> getTrackingDepDefaults2()throws java.sql.SQLException{
		if(isNewInstance() || trackingDepDefaults2 != null){
			if(trackingDepDefaults2 == null)
				trackingDepDefaults2 = new TreeSet<TrackingDepDefault>();
			return trackingDepDefaults2;
		}
		return TrackingDepDefault.getNamedCollection("findByTrackingDefault2",getTId());
	}
	public void addTrackingDepDefault2(TrackingDepDefault trackingDepDefault2)throws java.sql.SQLException{
		trackingDepDefault2.setTrackingDefault((TrackingDefault)this);
		if(isNewInstance() || trackingDepDefaults2 != null)
			getTrackingDepDefaults2().add(trackingDepDefault2);
		else
			trackingDepDefault2.insert();
	}
	public void removeTrackingDepDefault2(TrackingDepDefault trackingDepDefault2)throws java.sql.SQLException{
		if(isNewInstance() || trackingDepDefaults2 != null)
			getTrackingDepDefaults2().remove(trackingDepDefault2);
		else
			trackingDepDefault2.delete();
	}
	public TrackingDefault copy()throws java.sql.SQLException{
		TrackingDefault cp = new TrackingDefault((TrackingDefault)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TrackingDefaultDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(TrackingDepDefault child:getTrackingDepDefaults())
			cp.addTrackingDepDefault(child.copy());
		for(TrackingDepDefault child:getTrackingDepDefaults2())
			cp.addTrackingDepDefault2(child.copy());
	}
	public Vector<String> getDifference(TrackingDefaultDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getTId(),o.getTId())) diffs.add("T_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getTargetWorkDays(),o.getTargetWorkDays())) diffs.add("TARGET_WORK_DAYS");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(trackingDepDefaults != null){
			for(TrackingDepDefault trackingDepDefault:getTrackingDepDefaults()){
				if(trackingDepDefault.isNewInstance())
					trackingDepDefault.setTrackingDefault((TrackingDefault)this);
				trackingDepDefault.insert();
			}
			trackingDepDefaults = null;
		}
		if(trackingDepDefaults2 != null){
			for(TrackingDepDefault trackingDepDefault2:getTrackingDepDefaults2()){
				if(trackingDepDefault2.isNewInstance())
					trackingDepDefault2.setTrackingDefault((TrackingDefault)this);
				trackingDepDefault2.insert();
			}
			trackingDepDefaults2 = null;
		}
	}
}
