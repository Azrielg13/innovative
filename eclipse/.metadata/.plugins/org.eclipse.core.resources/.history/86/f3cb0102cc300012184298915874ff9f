package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.SceProjRev;
import com.sce.esp.object.model.SceProjTracking;
import com.sce.esp.object.model.SceProjTrackingDep;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SceProjTrackingDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PROJ_T_ID};
	public static enum PROPERTY{PROJ_T_ID,SCE_PROJ_REV_ID,T_ID,NAME,DESCRIPTION,START_TS,TARGET_WORK_DAYS,COMPLETE_TS,SCHEDULE_BUILT,SCHEDULE_APP,OFFSET_REQ,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PROJTID_LIMIT = 9;
	public final static int SCEPROJREVID_LIMIT = 9;
	public final static int TID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 256;
	public final static int STARTTS_LIMIT = 7;
	public final static int TARGETWORKDAYS_LIMIT = 9;
	public final static int COMPLETETS_LIMIT = 7;
	public final static int SCHEDULEBUILT_LIMIT = 1;
	public final static int SCHEDULEAPP_LIMIT = 1;
	public final static int OFFSETREQ_LIMIT = 1;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int projTId;
	private int sceProjRevId;
	private int tId;
	private String name;
	private String description;
	private Calendar startTs;
	private int targetWorkDays;
	private Calendar completeTs;
	private boolean scheduleBuilt;
	private boolean scheduleApp;
	private boolean offsetReq;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Collection<SceProjTrackingDep> sceProjTrackingDeps;
	private Collection<SceProjTrackingDep> sceProjTrackingDeps2;
	private SceProjRev sceProjRev;
	public static SceProjTracking getInstance(int projTId)throws java.sql.SQLException{
		return getInstance(projTId, true);
	}
	public static SceProjTracking getInstance(int projTId, boolean fetch)throws java.sql.SQLException{
		if(isNull(projTId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(projTId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjTracking o = null;
		if(cache != null && cache.contains(SceProjTracking.class, pk))
			o = em.find(SceProjTracking.class, pk);
		if(o==null && getAICache().contains(SceProjTracking.class, pk))
			o = getAICache().find(SceProjTracking.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjTracking.class, pk);
		if(o==null && fetch && SceProjTracking.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjTracking(projTId);
			getAICache().cache(SceProjTracking.class, o);
		}
		return o;
	}
	public static Collection<SceProjTracking> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjTracking> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjTracking> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjTracking o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjTracking> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjTracking> tq = em.createQuery(jpql,SceProjTracking.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjTracking> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjTracking> tq = em.createNamedQuery(name,SceProjTracking.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjTrackingDAO(){}
	public SceProjTrackingDAO(int projTId){
		this.projTId=projTId;
	}
	public SceProjTrackingDAO(SceProjTrackingDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SceProjTrackingDAO orig){
		this.sceProjRevId=orig.getSceProjRevId();
		this.tId=orig.getTId();
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.startTs=orig.getStartTs();
		this.targetWorkDays=orig.getTargetWorkDays();
		this.completeTs=orig.getCompleteTs();
		this.scheduleBuilt=orig.isScheduleBuilt();
		this.scheduleApp=orig.isScheduleApp();
		this.offsetReq=orig.isOffsetReq();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{projTId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS90_SEQ",sequenceName="MDIS90_SEQ")
	@Column(name="PROJ_T_ID",nullable=false,length=9)
	public int getProjTId(){
		return projTId;
	}
	public void setProjTId(int projTId) throws java.sql.SQLException{
		if(isSame(projTId, getProjTId()))return;
		int oldValue = getProjTId();
		this.projTId=projTId;
		setProperty("PROJ_T_ID", projTId, oldValue);
	}
	@Column(name="SCE_PROJ_REV_ID",nullable=false,length=9)
	public int getSceProjRevId(){
		return sceProjRevId;
	}
	public void setSceProjRevId(int sceProjRevId) throws java.sql.SQLException{
		if(isSame(sceProjRevId, getSceProjRevId()))return;
		int oldValue = getSceProjRevId();
		this.sceProjRevId=sceProjRevId;
		setProperty("SCE_PROJ_REV_ID", sceProjRevId, oldValue);
		sceProjRev=null;
	}
	@Column(name="T_ID",nullable=false,length=9)
	public int getTId(){
		return tId;
	}
	public void setTId(int tId) throws java.sql.SQLException{
		if(isSame(tId, getTId()))return;
		int oldValue = getTId();
		this.tId=tId;
		setProperty("T_ID", tId, oldValue);
	}
	@Column(name="NAME",nullable=true,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="START_TS",nullable=true,length=7)
	public Calendar getStartTs(){
		return startTs;
	}
	public void setStartTs(Calendar startTs) throws java.sql.SQLException{
		if(isSame(startTs, getStartTs()))return;
		Calendar oldValue = getStartTs();
		this.startTs=startTs;
		setProperty("START_TS", startTs, oldValue);
	}
	@Column(name="TARGET_WORK_DAYS",nullable=true,length=9)
	public int getTargetWorkDays(){
		return targetWorkDays;
	}
	public void setTargetWorkDays(int targetWorkDays) throws java.sql.SQLException{
		if(isSame(targetWorkDays, getTargetWorkDays()))return;
		int oldValue = getTargetWorkDays();
		this.targetWorkDays=targetWorkDays;
		setProperty("TARGET_WORK_DAYS", targetWorkDays, oldValue);
	}
	@Column(name="COMPLETE_TS",nullable=true,length=7)
	public Calendar getCompleteTs(){
		return completeTs;
	}
	public void setCompleteTs(Calendar completeTs) throws java.sql.SQLException{
		if(isSame(completeTs, getCompleteTs()))return;
		Calendar oldValue = getCompleteTs();
		this.completeTs=completeTs;
		setProperty("COMPLETE_TS", completeTs, oldValue);
	}
	@Column(name="SCHEDULE_BUILT",nullable=true,length=1)
	public boolean isScheduleBuilt(){
		return scheduleBuilt;
	}
	public void setScheduleBuilt(boolean scheduleBuilt) throws java.sql.SQLException{
		if(isSame(scheduleBuilt, isScheduleBuilt()))return;
		boolean oldValue = isScheduleBuilt();
		this.scheduleBuilt=scheduleBuilt;
		setProperty("SCHEDULE_BUILT", scheduleBuilt, oldValue);
	}
	@Column(name="SCHEDULE_APP",nullable=true,length=1)
	public boolean isScheduleApp(){
		return scheduleApp;
	}
	public void setScheduleApp(boolean scheduleApp) throws java.sql.SQLException{
		if(isSame(scheduleApp, isScheduleApp()))return;
		boolean oldValue = isScheduleApp();
		this.scheduleApp=scheduleApp;
		setProperty("SCHEDULE_APP", scheduleApp, oldValue);
	}
	@Column(name="OFFSET_REQ",nullable=true,length=1)
	public boolean isOffsetReq(){
		return offsetReq;
	}
	public void setOffsetReq(boolean offsetReq) throws java.sql.SQLException{
		if(isSame(offsetReq, isOffsetReq()))return;
		boolean oldValue = isOffsetReq();
		this.offsetReq=offsetReq;
		setProperty("OFFSET_REQ", offsetReq, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public SceProjRev getSceProjRev()throws java.sql.SQLException{
		if(sceProjRev==null)
			sceProjRev=SceProjRev.getInstance(getSceProjRevId());
		return sceProjRev;
	}
	public void setSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		setSceProjRevId(sceProjRev==null?0:sceProjRev.getSceProjRevId());
		this.sceProjRev=sceProjRev;
	}
	public Collection<SceProjTrackingDep> getSceProjTrackingDeps()throws java.sql.SQLException{
		if(isNewInstance() || sceProjTrackingDeps != null){
			if(sceProjTrackingDeps == null)
				sceProjTrackingDeps = new TreeSet<SceProjTrackingDep>();
			return sceProjTrackingDeps;
		}
		return SceProjTrackingDep.getNamedCollection("findBySceProjTracking",getProjTId());
	}
	public void addSceProjTrackingDep(SceProjTrackingDep sceProjTrackingDep)throws java.sql.SQLException{
		sceProjTrackingDep.setSceProjTracking((SceProjTracking)this);
		if(isNewInstance() || sceProjTrackingDeps != null)
			getSceProjTrackingDeps().add(sceProjTrackingDep);
		else
			sceProjTrackingDep.insert();
	}
	public void removeSceProjTrackingDep(SceProjTrackingDep sceProjTrackingDep)throws java.sql.SQLException{
		if(isNewInstance() || sceProjTrackingDeps != null)
			getSceProjTrackingDeps().remove(sceProjTrackingDep);
		else
			sceProjTrackingDep.delete();
	}
	public Collection<SceProjTrackingDep> getSceProjTrackingDeps2()throws java.sql.SQLException{
		if(isNewInstance() || sceProjTrackingDeps2 != null){
			if(sceProjTrackingDeps2 == null)
				sceProjTrackingDeps2 = new TreeSet<SceProjTrackingDep>();
			return sceProjTrackingDeps2;
		}
		return SceProjTrackingDep.getNamedCollection("findBySceProjTracking2",getProjTId());
	}
	public void addSceProjTrackingDep2(SceProjTrackingDep sceProjTrackingDep2)throws java.sql.SQLException{
		sceProjTrackingDep2.setSceProjTracking((SceProjTracking)this);
		if(isNewInstance() || sceProjTrackingDeps2 != null)
			getSceProjTrackingDeps2().add(sceProjTrackingDep2);
		else
			sceProjTrackingDep2.insert();
	}
	public void removeSceProjTrackingDep2(SceProjTrackingDep sceProjTrackingDep2)throws java.sql.SQLException{
		if(isNewInstance() || sceProjTrackingDeps2 != null)
			getSceProjTrackingDeps2().remove(sceProjTrackingDep2);
		else
			sceProjTrackingDep2.delete();
	}
	public SceProjTracking copy()throws java.sql.SQLException{
		SceProjTracking cp = new SceProjTracking((SceProjTracking)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjTrackingDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(SceProjTrackingDep child:getSceProjTrackingDeps())
			cp.addSceProjTrackingDep(child.copy());
		for(SceProjTrackingDep child:getSceProjTrackingDeps2())
			cp.addSceProjTrackingDep(child.copy());
	}
	public Vector<String> getDifference(SceProjTrackingDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getProjTId(),o.getProjTId())) diffs.add("PROJ_T_ID");
		if(!isSame(getSceProjRevId(),o.getSceProjRevId())) diffs.add("SCE_PROJ_REV_ID");
		if(!isSame(getTId(),o.getTId())) diffs.add("T_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getStartTs(),o.getStartTs())) diffs.add("START_TS");
		if(!isSame(getTargetWorkDays(),o.getTargetWorkDays())) diffs.add("TARGET_WORK_DAYS");
		if(!isSame(getCompleteTs(),o.getCompleteTs())) diffs.add("COMPLETE_TS");
		if(!isSame(isScheduleBuilt(),o.isScheduleBuilt())) diffs.add("SCHEDULE_BUILT");
		if(!isSame(isScheduleApp(),o.isScheduleApp())) diffs.add("SCHEDULE_APP");
		if(!isSame(isOffsetReq(),o.isOffsetReq())) diffs.add("OFFSET_REQ");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(sceProjTrackingDeps != null){
			for(SceProjTrackingDep sceProjTrackingDep:getSceProjTrackingDeps()){
				if(sceProjTrackingDep.isNewInstance())
					sceProjTrackingDep.setSceProjTracking((SceProjTracking)this);
				sceProjTrackingDep.insert();
			}
			sceProjTrackingDeps = null;
		}
		if(sceProjTrackingDeps2 != null){
			for(SceProjTrackingDep sceProjTrackingDep2:getSceProjTrackingDeps2()){
				if(sceProjTrackingDep2.isNewInstance())
					sceProjTrackingDep2.setSceProjTracking((SceProjTracking)this);
				sceProjTrackingDep2.insert();
			}
			sceProjTrackingDeps2 = null;
		}
	}
}
