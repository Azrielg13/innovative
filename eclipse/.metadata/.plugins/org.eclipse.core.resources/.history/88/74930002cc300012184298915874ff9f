package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PqEquipment;
import com.sce.esp.object.model.PqTroubleLog;
import com.sce.esp.object.model.PqUseEquip;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class PqUseEquipDAO extends MDIObject{
	public static enum KEY_PROPERTY{PQ_ID,EQUIP_ID,EQUIP_SERIAL};
	public static enum PROPERTY{PQ_ID,EQUIP_ID,EQUIP_SERIAL,NOTE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PQID_LIMIT = 9;
	public final static int EQUIPID_LIMIT = 9;
	public final static int EQUIPSERIAL_LIMIT = 50;
	public final static int NOTE_LIMIT = 256;
	private int pqId;
	private int equipId;
	private String equipSerial;
	private String note;
	private PqEquipment pqEquipment;
	private PqTroubleLog pqTroubleLog;
	public static PqUseEquip getInstance(int pqId, int equipId, String equipSerial)throws java.sql.SQLException{
		return getInstance(pqId, equipId, equipSerial, true);
	}
	public static PqUseEquip getInstance(int pqId, int equipId, String equipSerial, boolean fetch)throws java.sql.SQLException{
		if(isNull(pqId, equipId, equipSerial))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(pqId, equipId, equipSerial);
		Cache cache = em.getEntityManagerFactory().getCache();
		PqUseEquip o = null;
		if(cache != null && cache.contains(PqUseEquip.class, pk))
			o = em.find(PqUseEquip.class, pk);
		if(o==null && getAICache().contains(PqUseEquip.class, pk))
			o = getAICache().find(PqUseEquip.class, pk);
		if(o==null && fetch)
			o = em.find(PqUseEquip.class, pk);
		if(o==null && fetch && PqUseEquip.class.getAnnotation(AutoInsertable.class) != null){
			o = new PqUseEquip(pqId, equipId, equipSerial);
			getAICache().cache(PqUseEquip.class, o);
		}
		return o;
	}
	public static Collection<PqUseEquip> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PqUseEquip> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PqUseEquip> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PqUseEquip o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PqUseEquip> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqUseEquip> tq = em.createQuery(jpql,PqUseEquip.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PqUseEquip> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqUseEquip> tq = em.createNamedQuery(name,PqUseEquip.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PqUseEquipDAO(){}
	public PqUseEquipDAO(int pqId, int equipId, String equipSerial){
		this.pqId=pqId;
		this.equipId=equipId;
		this.equipSerial=equipSerial;
	}
	public PqUseEquipDAO(PqUseEquipDAO orig){
		super(orig);
		this.pqId=orig.getPqId();
		this.equipId=orig.getEquipId();
		this.equipSerial=orig.getEquipSerial();
		copyFrom(orig);
	}
	public void copyFrom(PqUseEquipDAO orig){
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{pqId, equipId, equipSerial};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PQ_ID",nullable=false,length=9)
	public int getPqId(){
		return pqId;
	}
	public void setPqId(int pqId) throws java.sql.SQLException{
		if(isSame(pqId, getPqId()))return;
		int oldValue = getPqId();
		this.pqId=pqId;
		setProperty("PQ_ID", pqId, oldValue);
		pqTroubleLog=null;
	}
	@Id
	@Column(name="EQUIP_ID",nullable=false,length=9)
	public int getEquipId(){
		return equipId;
	}
	public void setEquipId(int equipId) throws java.sql.SQLException{
		if(isSame(equipId, getEquipId()))return;
		int oldValue = getEquipId();
		this.equipId=equipId;
		setProperty("EQUIP_ID", equipId, oldValue);
		pqEquipment=null;
	}
	@Id
	@Column(name="EQUIP_SERIAL",nullable=false,length=50)
	public String getEquipSerial(){
		return equipSerial;
	}
	public void setEquipSerial(String equipSerial) throws java.sql.SQLException{
		if(isSame(equipSerial, getEquipSerial()))return;
		String oldValue = getEquipSerial();
		this.equipSerial=equipSerial;
		setProperty("EQUIP_SERIAL", equipSerial, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public PqEquipment getPqEquipment()throws java.sql.SQLException{
		if(pqEquipment==null)
			pqEquipment=PqEquipment.getInstance(getEquipId());
		return pqEquipment;
	}
	public void setPqEquipment(PqEquipment pqEquipment)throws java.sql.SQLException{
		setEquipId(pqEquipment==null?0:pqEquipment.getEquipId());
		this.pqEquipment=pqEquipment;
	}
	public PqTroubleLog getPqTroubleLog()throws java.sql.SQLException{
		if(pqTroubleLog==null)
			pqTroubleLog=PqTroubleLog.getInstance(getPqId());
		return pqTroubleLog;
	}
	public void setPqTroubleLog(PqTroubleLog pqTroubleLog)throws java.sql.SQLException{
		setPqId(pqTroubleLog==null?0:pqTroubleLog.getPqId());
		this.pqTroubleLog=pqTroubleLog;
	}
	public PqUseEquip copy()throws java.sql.SQLException{
		PqUseEquip cp = new PqUseEquip((PqUseEquip)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PqUseEquipDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PqUseEquipDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPqId(),o.getPqId())) diffs.add("PQ_ID");
		if(!isSame(getEquipId(),o.getEquipId())) diffs.add("EQUIP_ID");
		if(!isSame(getEquipSerial(),o.getEquipSerial())) diffs.add("EQUIP_SERIAL");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
