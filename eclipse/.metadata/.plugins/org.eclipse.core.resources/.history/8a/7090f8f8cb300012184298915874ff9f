/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.CktTransDAO;
@Entity
@Table(schema="MDI",name="MDI260_CKT_TRANS")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM CktTrans o WHERE o.PLANYEAR=?1 AND o.TRANS_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM CktTrans o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM CktTrans o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByCkt", query="SELECT o FROM CktTrans o WHERE o.PLANYEAR=?1 AND o.FROM_CKT_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByCkt2", query="SELECT o FROM CktTrans o WHERE o.PLANYEAR=?1 AND o.TO_CKT_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySwtProc", query="SELECT o FROM CktTrans o WHERE o.PLANYEAR=?1 AND o.PROC_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI260_CKT_TRANS o WHERE o.PLANYEAR=? AND o.TRANS_ID=?"),//AUTO-GENERATED
	@NamedNativeQuery(name = "findByCkt_FETCH", query="SELECT o.* FROM MDI260_CKT_TRANS o INNER JOIN MDI255_SWT_PROC SP ON o.planyear=sp.planyear and o.proc_id=sp.proc_id WHERE o.PLANYEAR=? AND o.FROM_CKT_ID=? AND o.DELETED_TS IS NULL AND sp.DELETED_TS IS NULL"),
	@NamedNativeQuery(name = "findByCkt2_FETCH", query="SELECT o.* FROM MDI260_CKT_TRANS o INNER JOIN MDI255_SWT_PROC SP ON o.planyear=sp.planyear and o.proc_id=sp.proc_id WHERE o.PLANYEAR=? AND o.TO_CKT_ID=? AND o.DELETED_TS IS NULL AND sp.DELETED_TS IS NULL"),
})
public class CktTrans extends CktTransDAO implements Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 8448357208053009582L;
	/**
	 * The Constructor.
	 * 
	 * @param transId the trans id
	 * @param planyear the planyear
	 * @param simId 	 * @param planyear the planyear
	 */
	public CktTrans(){
	}
	public CktTrans(int planyear, int transId){
		super(planyear,transId);
	}
	
	/**
	 * The Constructor.
	 * 
	 * @param simId the sim id
	 * @param planyear the planyear
	 */
	public CktTrans(int planyear) {
		super(planyear,0);
	}
	
	public CktTrans(CktTrans cktTrans) {
		super(cktTrans);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.MDIObject#compareTo(java.lang.Object)
	 */
	public int compareTo(Object o) {
		if(o instanceof CktTrans){
			CktTrans c2 = (CktTrans)o;
			if((getStep())<(c2.getStep()))
				return -1;
			else if(getStep()>c2.getStep())
				return 1;
		}
		return super.compareTo(o);
	}
	public CktSwt getCswtType()throws SQLException{
		return getCktSwt();
	}
	public CktSwt getOswtType()throws SQLException{
		return getCktSwt2();
	}
	public Ckt getFromCkt() throws SQLException{
		return getCkt();
	}
	public Ckt getToCkt() throws SQLException{
		return getCkt2();
	}	
}
