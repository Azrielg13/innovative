package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.TaskNotify;
import com.sce.esp.object.model.TaskResource;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class TaskNotifyDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,TASK_RES_ID,NOTIFIED_DATE,NOTIFIER_USER_ID,STATUS_ID,MESSAGE};
	public final static int ID_LIMIT = 9;
	public final static int TASKRESID_LIMIT = 9;
	public final static int NOTIFIEDDATE_LIMIT = 7;
	public final static int NOTIFIERUSERID_LIMIT = 9;
	public final static int STATUSID_LIMIT = 9;
	public final static int MESSAGE_LIMIT = 128;
	private int id;
	private int taskResId;
	private Calendar notifiedDate;
	private int notifierUserId;
	private int statusId;
	private String message;
	private TaskResource taskResource;
	private User notifier;
	private LookUp status;
	public static TaskNotify getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static TaskNotify getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		TaskNotify o = null;
		if(cache != null && cache.contains(TaskNotify.class, pk))
			o = em.find(TaskNotify.class, pk);
		if(o==null && getAICache().contains(TaskNotify.class, pk))
			o = getAICache().find(TaskNotify.class, pk);
		if(o==null && fetch)
			o = em.find(TaskNotify.class, pk);
		if(o==null && fetch && TaskNotify.class.getAnnotation(AutoInsertable.class) != null){
			o = new TaskNotify(id);
			getAICache().cache(TaskNotify.class, o);
		}
		return o;
	}
	public static Collection<TaskNotify> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<TaskNotify> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<TaskNotify> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM TaskNotify o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<TaskNotify> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TaskNotify> tq = em.createQuery(jpql,TaskNotify.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<TaskNotify> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TaskNotify> tq = em.createNamedQuery(name,TaskNotify.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TaskNotifyDAO(){}
	public TaskNotifyDAO(int id){
		this.id=id;
	}
	public TaskNotifyDAO(TaskNotifyDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(TaskNotifyDAO orig){
		this.taskResId=orig.getTaskResId();
		this.notifiedDate=orig.getNotifiedDate();
		this.notifierUserId=orig.getNotifierUserId();
		this.statusId=orig.getStatusId();
		this.message=orig.getMessage();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT04_SEQ",sequenceName="MDIT04_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="TASK_RES_ID",nullable=false,length=9)
	public int getTaskResId(){
		return taskResId;
	}
	public void setTaskResId(int taskResId) throws java.sql.SQLException{
		if(isSame(taskResId, getTaskResId()))return;
		int oldValue = getTaskResId();
		this.taskResId=taskResId;
		setProperty("TASK_RES_ID", taskResId, oldValue);
		taskResource=null;
	}
	@Column(name="NOTIFIED_DATE",nullable=true,length=7)
	public Calendar getNotifiedDate(){
		return notifiedDate;
	}
	public void setNotifiedDate(Calendar notifiedDate) throws java.sql.SQLException{
		if(isSame(notifiedDate, getNotifiedDate()))return;
		Calendar oldValue = getNotifiedDate();
		this.notifiedDate=notifiedDate;
		setProperty("NOTIFIED_DATE", notifiedDate, oldValue);
	}
	@Column(name="NOTIFIER_USER_ID",nullable=true,length=9)
	public int getNotifierUserId(){
		return notifierUserId;
	}
	public void setNotifierUserId(int notifierUserId) throws java.sql.SQLException{
		if(isSame(notifierUserId, getNotifierUserId()))return;
		int oldValue = getNotifierUserId();
		this.notifierUserId=notifierUserId;
		setProperty("NOTIFIER_USER_ID", notifierUserId, oldValue);
		notifier=null;
	}
	@Column(name="STATUS_ID",nullable=true,length=9)
	public int getStatusId(){
		return statusId;
	}
	public void setStatusId(int statusId) throws java.sql.SQLException{
		if(isSame(statusId, getStatusId()))return;
		int oldValue = getStatusId();
		this.statusId=statusId;
		setProperty("STATUS_ID", statusId, oldValue);
		status=null;
	}
	@Column(name="MESSAGE",nullable=true,length=128)
	public String getMessage(){
		return message;
	}
	public void setMessage(String message) throws java.sql.SQLException{
		if(isSame(message, getMessage()))return;
		String oldValue = getMessage();
		this.message=message;
		setProperty("MESSAGE", message, oldValue);
	}
	public TaskResource getTaskResource()throws java.sql.SQLException{
		if(taskResource==null)
			taskResource=TaskResource.getInstance(getTaskResId());
		return taskResource;
	}
	public void setTaskResource(TaskResource taskResource)throws java.sql.SQLException{
		setTaskResId(taskResource==null?0:taskResource.getId());
		this.taskResource=taskResource;
	}
	public User getNotifier()throws java.sql.SQLException{
		if(notifier==null)
			notifier=User.getInstance(getNotifierUserId());
		return notifier;
	}
	public void setNotifier(User notifier)throws java.sql.SQLException{
		setNotifierUserId(notifier==null?0:notifier.getUsernameId());
		this.notifier=notifier;
	}
	public LookUp getStatus()throws java.sql.SQLException{
		if(status==null)
			status=LookUp.getInstance(getStatusId());
		return status;
	}
	public void setStatus(LookUp status)throws java.sql.SQLException{
		setStatusId(status==null?0:status.getId());
		this.status=status;
	}
	public TaskNotify copy()throws java.sql.SQLException{
		TaskNotify cp = new TaskNotify((TaskNotify)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TaskNotifyDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(TaskNotifyDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getTaskResId(),o.getTaskResId())) diffs.add("TASK_RES_ID");
		if(!isSame(getNotifiedDate(),o.getNotifiedDate())) diffs.add("NOTIFIED_DATE");
		if(!isSame(getNotifierUserId(),o.getNotifierUserId())) diffs.add("NOTIFIER_USER_ID");
		if(!isSame(getStatusId(),o.getStatusId())) diffs.add("STATUS_ID");
		if(!isSame(getMessage(),o.getMessage())) diffs.add("MESSAGE");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(taskResource != null && taskResource.isNewInstance())
				taskResource.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
