package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.District;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Pif;
import com.sce.esp.object.model.PifBudgetCat;
import com.sce.esp.object.model.PifCompRisk;
import com.sce.esp.object.model.PifCrewType;
import com.sce.esp.object.model.PifCustType;
import com.sce.esp.object.model.PifGwCat;
import com.sce.esp.object.model.PifMajorCustType;
import com.sce.esp.object.model.PifProjDriver;
import com.sce.esp.object.model.PifWo;
import com.sce.esp.object.model.PifWoImpact;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PifWoDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,WO_ID};
	public static enum PROPERTY{PLANYEAR,WO_ID,PIF_ID,LOC,DISTRICT_ID,WO,AI,PROP_OP_DATE,SCOPE_PREP,SCOPE_TO_TP,SCOPE_FROM_TP,WO_APP,REL_TO_CONSTR,COMPLETED,PM,DR,DESCRIPTION,NOTE,PLANNING_COST,SCE_GROSS,DPI_MANDAYS,DPI_LABOR,DPI_A_MATERIAL,DPI_B_MATERIAL,DPI_CONTRACT,DPI_CONTINGENCY,ELEC_BID,COST_PLUS,MATERIAL,ADD_CONTINGENCY,ALT_DOUBLE_A,ALT_DOUBLE_B,ALT_DOUBLE_C,ALT_DATE_A,ALT_DATE_B,ALT_DATE_C,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,SAP_NUM,CAPITAL,O_AND_M,OTHER_CUST_TYPE,OTHER_BI,OTHER_PROJ_DRIVER,OTHER_MAJOR_CUST_TYPE,PIF_BUDGET_CAT_ID,PIF_COMP_RISK_ID,PIF_CREW_TYPE_ID,PIF_FINANCE_CONFIRM_ID,PIF_PROJ_DRIVER_ID,PIF_CUST_TYPE_ID,PIF_MAJOR_CUST_TYPE_ID,PIF_GW_CAT_ID,DISTRICT_SPONSOR,ALT_DOUBLE_D,ALT_DOUBLE_E,ALT_DOUBLE_F,ALT_VARCHAR1,ALT_VARCHAR2,ALT_VARCHAR3,ALT_DOUBLE_H,ALT_DOUBLE_I,ALT_VARCHAR4,ALT_VARCHAR5};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int WOID_LIMIT = 9;
	public final static int PIFID_LIMIT = 9;
	public final static int LOC_LIMIT = 2;
	public final static int DISTRICTID_LIMIT = 9;
	public final static int WO_LIMIT = 4;
	public final static int AI_LIMIT = 5;
	public final static int PROPOPDATE_LIMIT = 7;
	public final static int SCOPEPREP_LIMIT = 7;
	public final static int SCOPETOTP_LIMIT = 7;
	public final static int SCOPEFROMTP_LIMIT = 7;
	public final static int WOAPP_LIMIT = 7;
	public final static int RELTOCONSTR_LIMIT = 7;
	public final static int COMPLETED_LIMIT = 7;
	public final static int PM_LIMIT = 64;
	public final static int DR_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 1024;
	public final static int NOTE_LIMIT = 512;
	public final static int PLANNINGCOST_LIMIT = 9;
	public final static int SCEGROSS_LIMIT = 9;
	public final static int DPIMANDAYS_LIMIT = 24;
	public final static int DPILABOR_LIMIT = 24;
	public final static int DPIAMATERIAL_LIMIT = 24;
	public final static int DPIBMATERIAL_LIMIT = 24;
	public final static int DPICONTRACT_LIMIT = 24;
	public final static int DPICONTINGENCY_LIMIT = 24;
	public final static int ELECBID_LIMIT = 24;
	public final static int COSTPLUS_LIMIT = 24;
	public final static int MATERIAL_LIMIT = 24;
	public final static int ADDCONTINGENCY_LIMIT = 24;
	public final static int ALTDOUBLEA_LIMIT = 24;
	public final static int ALTDOUBLEB_LIMIT = 24;
	public final static int ALTDOUBLEC_LIMIT = 24;
	public final static int ALTDATEA_LIMIT = 7;
	public final static int ALTDATEB_LIMIT = 7;
	public final static int ALTDATEC_LIMIT = 7;
	public final static int SAPNUM_LIMIT = 32;
	public final static int CAPITAL_LIMIT = 9;
	public final static int OANDM_LIMIT = 9;
	public final static int OTHERCUSTTYPE_LIMIT = 256;
	public final static int OTHERBI_LIMIT = 256;
	public final static int OTHERPROJDRIVER_LIMIT = 256;
	public final static int OTHERMAJORCUSTTYPE_LIMIT = 256;
	public final static int PIFBUDGETCATID_LIMIT = 9;
	public final static int PIFCOMPRISKID_LIMIT = 9;
	public final static int PIFCREWTYPEID_LIMIT = 9;
	public final static int PIFFINANCECONFIRMID_LIMIT = 1;
	public final static int PIFPROJDRIVERID_LIMIT = 9;
	public final static int PIFCUSTTYPEID_LIMIT = 9;
	public final static int PIFMAJORCUSTTYPEID_LIMIT = 9;
	public final static int PIFGWCATID_LIMIT = 9;
	public final static int DISTRICTSPONSOR_LIMIT = 64;
	public final static int ALTDOUBLED_LIMIT = 126;
	public final static int ALTDOUBLEE_LIMIT = 126;
	public final static int ALTDOUBLEF_LIMIT = 126;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTDOUBLEH_LIMIT = 126;
	public final static int ALTDOUBLEI_LIMIT = 126;
	public final static int ALTVARCHAR4_LIMIT = 256;
	public final static int ALTVARCHAR5_LIMIT = 256;
	private int planyear;
	private int woId;
	private int pifId;
	private String loc;
	private int districtId;
	private String wo;
	private String ai;
	private Calendar propOpDate;
	private Calendar scopePrep;
	private Calendar scopeToTp;
	private Calendar scopeFromTp;
	private Calendar woApp;
	private Calendar relToConstr;
	private Calendar completed;
	private String pm;
	private String dr;
	private String description;
	private String note;
	private int planningCost;
	private int sceGross;
	private double dpiMandays;
	private double dpiLabor;
	private double dpiAMaterial;
	private double dpiBMaterial;
	private double dpiContract;
	private double dpiContingency;
	private double elecBid;
	private double costPlus;
	private double material;
	private double addContingency;
	private double altDoubleA;
	private double altDoubleB;
	private double altDoubleC;
	private Calendar altDateA;
	private Calendar altDateB;
	private Calendar altDateC;
	private String sapNum;
	private int capital;
	private int oAndM;
	private String otherCustType;
	private String otherBi;
	private String otherProjDriver;
	private String otherMajorCustType;
	private int pifBudgetCatId;
	private int pifCompRiskId;
	private int pifCrewTypeId;
	private boolean pifFinanceConfirmId;
	private int pifProjDriverId;
	private int pifCustTypeId;
	private int pifMajorCustTypeId;
	private int pifGwCatId;
	private String districtSponsor;
	private double altDoubleD;
	private double altDoubleE;
	private double altDoubleF;
	private String altVarchar1;
	private String altVarchar2;
	private String altVarchar3;
	private double altDoubleH;
	private double altDoubleI;
	private String altVarchar4;
	private String altVarchar5;
	private Collection<PifWoImpact> pifWoImpacts;
	private District district;
	private Pif pif;
	private PifBudgetCat pifBudgetCat;
	private PifCompRisk pifCompRisk;
	private PifCrewType pifCrewType;
	private PifCustType pifCustType;
	private PifGwCat pifGwCat;
	private PifMajorCustType pifMajorCustType;
	private PifProjDriver pifProjDriver;
	public static PifWo getInstance(int planyear, int woId)throws java.sql.SQLException{
		return getInstance(planyear, woId, true);
	}
	public static PifWo getInstance(int planyear, int woId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, woId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, woId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifWo o = null;
		if(cache != null && cache.contains(PifWo.class, pk))
			o = em.find(PifWo.class, pk);
		if(o==null && getAICache().contains(PifWo.class, pk))
			o = getAICache().find(PifWo.class, pk);
		if(o==null && fetch)
			o = em.find(PifWo.class, pk);
		if(o==null && fetch && PifWo.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifWo(planyear, woId);
			getAICache().cache(PifWo.class, o);
		}
		return o;
	}
	public static Collection<PifWo> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifWo> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifWo> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifWo o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifWo> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifWo> tq = em.createQuery(jpql,PifWo.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifWo> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifWo> tq = em.createNamedQuery(name,PifWo.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifWoDAO(){}
	public PifWoDAO(int planyear, int woId){
		this.planyear=planyear;
		this.woId=woId;
	}
	public PifWoDAO(PifWoDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(PifWoDAO orig){
		this.pifId=orig.getPifId();
		this.loc=orig.getLoc();
		this.districtId=orig.getDistrictId();
		this.wo=orig.getWo();
		this.ai=orig.getAi();
		this.propOpDate=orig.getPropOpDate();
		this.scopePrep=orig.getScopePrep();
		this.scopeToTp=orig.getScopeToTp();
		this.scopeFromTp=orig.getScopeFromTp();
		this.woApp=orig.getWoApp();
		this.relToConstr=orig.getRelToConstr();
		this.completed=orig.getCompleted();
		this.pm=orig.getPm();
		this.dr=orig.getDr();
		this.description=orig.getDescription();
		this.note=orig.getNote();
		this.planningCost=orig.getPlanningCost();
		this.sceGross=orig.getSceGross();
		this.dpiMandays=orig.getDpiMandays();
		this.dpiLabor=orig.getDpiLabor();
		this.dpiAMaterial=orig.getDpiAMaterial();
		this.dpiBMaterial=orig.getDpiBMaterial();
		this.dpiContract=orig.getDpiContract();
		this.dpiContingency=orig.getDpiContingency();
		this.elecBid=orig.getElecBid();
		this.costPlus=orig.getCostPlus();
		this.material=orig.getMaterial();
		this.addContingency=orig.getAddContingency();
		this.altDoubleA=orig.getAltDoubleA();
		this.altDoubleB=orig.getAltDoubleB();
		this.altDoubleC=orig.getAltDoubleC();
		this.altDateA=orig.getAltDateA();
		this.altDateB=orig.getAltDateB();
		this.altDateC=orig.getAltDateC();
		this.sapNum=orig.getSapNum();
		this.capital=orig.getCapital();
		this.oAndM=orig.getOAndM();
		this.otherCustType=orig.getOtherCustType();
		this.otherBi=orig.getOtherBi();
		this.otherProjDriver=orig.getOtherProjDriver();
		this.otherMajorCustType=orig.getOtherMajorCustType();
		this.pifBudgetCatId=orig.getPifBudgetCatId();
		this.pifCompRiskId=orig.getPifCompRiskId();
		this.pifCrewTypeId=orig.getPifCrewTypeId();
		this.pifFinanceConfirmId=orig.isPifFinanceConfirmId();
		this.pifProjDriverId=orig.getPifProjDriverId();
		this.pifCustTypeId=orig.getPifCustTypeId();
		this.pifMajorCustTypeId=orig.getPifMajorCustTypeId();
		this.pifGwCatId=orig.getPifGwCatId();
		this.districtSponsor=orig.getDistrictSponsor();
		this.altDoubleD=orig.getAltDoubleD();
		this.altDoubleE=orig.getAltDoubleE();
		this.altDoubleF=orig.getAltDoubleF();
		this.altVarchar1=orig.getAltVarchar1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altDoubleH=orig.getAltDoubleH();
		this.altDoubleI=orig.getAltDoubleI();
		this.altVarchar4=orig.getAltVarchar4();
		this.altVarchar5=orig.getAltVarchar5();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, woId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI680_SEQ",sequenceName="MDI680_SEQ")
	@Column(name="WO_ID",nullable=false,length=9)
	public int getWoId(){
		return woId;
	}
	public void setWoId(int woId) throws java.sql.SQLException{
		if(isSame(woId, getWoId()))return;
		int oldValue = getWoId();
		this.woId=woId;
		setProperty("WO_ID", woId, oldValue);
	}
	@Column(name="PIF_ID",nullable=false,length=9)
	public int getPifId(){
		return pifId;
	}
	public void setPifId(int pifId) throws java.sql.SQLException{
		if(isSame(pifId, getPifId()))return;
		int oldValue = getPifId();
		this.pifId=pifId;
		setProperty("PIF_ID", pifId, oldValue);
		pif=null;
	}
	@Column(name="LOC",nullable=true,length=2)
	public String getLoc(){
		return loc;
	}
	public void setLoc(String loc) throws java.sql.SQLException{
		if(isSame(loc, getLoc()))return;
		String oldValue = getLoc();
		this.loc=loc;
		setProperty("LOC", loc, oldValue);
	}
	@Column(name="DISTRICT_ID",nullable=true,length=9)
	public int getDistrictId(){
		return districtId;
	}
	public void setDistrictId(int districtId) throws java.sql.SQLException{
		if(isSame(districtId, getDistrictId()))return;
		int oldValue = getDistrictId();
		this.districtId=districtId;
		setProperty("DISTRICT_ID", districtId, oldValue);
		district=null;
	}
	@Column(name="WO",nullable=true,length=4)
	public String getWo(){
		return wo;
	}
	public void setWo(String wo) throws java.sql.SQLException{
		if(isSame(wo, getWo()))return;
		String oldValue = getWo();
		this.wo=wo;
		setProperty("WO", wo, oldValue);
	}
	@Column(name="AI",nullable=true,length=5)
	public String getAi(){
		return ai;
	}
	public void setAi(String ai) throws java.sql.SQLException{
		if(isSame(ai, getAi()))return;
		String oldValue = getAi();
		this.ai=ai;
		setProperty("AI", ai, oldValue);
	}
	@Column(name="PROP_OP_DATE",nullable=true,length=7)
	public Calendar getPropOpDate(){
		return propOpDate;
	}
	public void setPropOpDate(Calendar propOpDate) throws java.sql.SQLException{
		if(isSame(propOpDate, getPropOpDate()))return;
		Calendar oldValue = getPropOpDate();
		this.propOpDate=propOpDate;
		setProperty("PROP_OP_DATE", propOpDate, oldValue);
	}
	@Column(name="SCOPE_PREP",nullable=true,length=7)
	public Calendar getScopePrep(){
		return scopePrep;
	}
	public void setScopePrep(Calendar scopePrep) throws java.sql.SQLException{
		if(isSame(scopePrep, getScopePrep()))return;
		Calendar oldValue = getScopePrep();
		this.scopePrep=scopePrep;
		setProperty("SCOPE_PREP", scopePrep, oldValue);
	}
	@Column(name="SCOPE_TO_TP",nullable=true,length=7)
	public Calendar getScopeToTp(){
		return scopeToTp;
	}
	public void setScopeToTp(Calendar scopeToTp) throws java.sql.SQLException{
		if(isSame(scopeToTp, getScopeToTp()))return;
		Calendar oldValue = getScopeToTp();
		this.scopeToTp=scopeToTp;
		setProperty("SCOPE_TO_TP", scopeToTp, oldValue);
	}
	@Column(name="SCOPE_FROM_TP",nullable=true,length=7)
	public Calendar getScopeFromTp(){
		return scopeFromTp;
	}
	public void setScopeFromTp(Calendar scopeFromTp) throws java.sql.SQLException{
		if(isSame(scopeFromTp, getScopeFromTp()))return;
		Calendar oldValue = getScopeFromTp();
		this.scopeFromTp=scopeFromTp;
		setProperty("SCOPE_FROM_TP", scopeFromTp, oldValue);
	}
	@Column(name="WO_APP",nullable=true,length=7)
	public Calendar getWoApp(){
		return woApp;
	}
	public void setWoApp(Calendar woApp) throws java.sql.SQLException{
		if(isSame(woApp, getWoApp()))return;
		Calendar oldValue = getWoApp();
		this.woApp=woApp;
		setProperty("WO_APP", woApp, oldValue);
	}
	@Column(name="REL_TO_CONSTR",nullable=true,length=7)
	public Calendar getRelToConstr(){
		return relToConstr;
	}
	public void setRelToConstr(Calendar relToConstr) throws java.sql.SQLException{
		if(isSame(relToConstr, getRelToConstr()))return;
		Calendar oldValue = getRelToConstr();
		this.relToConstr=relToConstr;
		setProperty("REL_TO_CONSTR", relToConstr, oldValue);
	}
	@Column(name="COMPLETED",nullable=true,length=7)
	public Calendar getCompleted(){
		return completed;
	}
	public void setCompleted(Calendar completed) throws java.sql.SQLException{
		if(isSame(completed, getCompleted()))return;
		Calendar oldValue = getCompleted();
		this.completed=completed;
		setProperty("COMPLETED", completed, oldValue);
	}
	@Column(name="PM",nullable=true,length=64)
	public String getPm(){
		return pm;
	}
	public void setPm(String pm) throws java.sql.SQLException{
		if(isSame(pm, getPm()))return;
		String oldValue = getPm();
		this.pm=pm;
		setProperty("PM", pm, oldValue);
	}
	@Column(name="DR",nullable=true,length=64)
	public String getDr(){
		return dr;
	}
	public void setDr(String dr) throws java.sql.SQLException{
		if(isSame(dr, getDr()))return;
		String oldValue = getDr();
		this.dr=dr;
		setProperty("DR", dr, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=1024)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="PLANNING_COST",nullable=true,length=9)
	public int getPlanningCost(){
		return planningCost;
	}
	public void setPlanningCost(int planningCost) throws java.sql.SQLException{
		if(isSame(planningCost, getPlanningCost()))return;
		int oldValue = getPlanningCost();
		this.planningCost=planningCost;
		setProperty("PLANNING_COST", planningCost, oldValue);
	}
	@Column(name="SCE_GROSS",nullable=true,length=9)
	public int getSceGross(){
		return sceGross;
	}
	public void setSceGross(int sceGross) throws java.sql.SQLException{
		if(isSame(sceGross, getSceGross()))return;
		int oldValue = getSceGross();
		this.sceGross=sceGross;
		setProperty("SCE_GROSS", sceGross, oldValue);
	}
	@Column(name="DPI_MANDAYS",nullable=true,length=24)
	public double getDpiMandays(){
		return dpiMandays;
	}
	public void setDpiMandays(double dpiMandays) throws java.sql.SQLException{
		if(isSame(dpiMandays, getDpiMandays()))return;
		double oldValue = getDpiMandays();
		this.dpiMandays=dpiMandays;
		setProperty("DPI_MANDAYS", dpiMandays, oldValue);
	}
	@Column(name="DPI_LABOR",nullable=true,length=24)
	public double getDpiLabor(){
		return dpiLabor;
	}
	public void setDpiLabor(double dpiLabor) throws java.sql.SQLException{
		if(isSame(dpiLabor, getDpiLabor()))return;
		double oldValue = getDpiLabor();
		this.dpiLabor=dpiLabor;
		setProperty("DPI_LABOR", dpiLabor, oldValue);
	}
	@Column(name="DPI_A_MATERIAL",nullable=true,length=24)
	public double getDpiAMaterial(){
		return dpiAMaterial;
	}
	public void setDpiAMaterial(double dpiAMaterial) throws java.sql.SQLException{
		if(isSame(dpiAMaterial, getDpiAMaterial()))return;
		double oldValue = getDpiAMaterial();
		this.dpiAMaterial=dpiAMaterial;
		setProperty("DPI_A_MATERIAL", dpiAMaterial, oldValue);
	}
	@Column(name="DPI_B_MATERIAL",nullable=true,length=24)
	public double getDpiBMaterial(){
		return dpiBMaterial;
	}
	public void setDpiBMaterial(double dpiBMaterial) throws java.sql.SQLException{
		if(isSame(dpiBMaterial, getDpiBMaterial()))return;
		double oldValue = getDpiBMaterial();
		this.dpiBMaterial=dpiBMaterial;
		setProperty("DPI_B_MATERIAL", dpiBMaterial, oldValue);
	}
	@Column(name="DPI_CONTRACT",nullable=true,length=24)
	public double getDpiContract(){
		return dpiContract;
	}
	public void setDpiContract(double dpiContract) throws java.sql.SQLException{
		if(isSame(dpiContract, getDpiContract()))return;
		double oldValue = getDpiContract();
		this.dpiContract=dpiContract;
		setProperty("DPI_CONTRACT", dpiContract, oldValue);
	}
	@Column(name="DPI_CONTINGENCY",nullable=true,length=24)
	public double getDpiContingency(){
		return dpiContingency;
	}
	public void setDpiContingency(double dpiContingency) throws java.sql.SQLException{
		if(isSame(dpiContingency, getDpiContingency()))return;
		double oldValue = getDpiContingency();
		this.dpiContingency=dpiContingency;
		setProperty("DPI_CONTINGENCY", dpiContingency, oldValue);
	}
	@Column(name="ELEC_BID",nullable=true,length=24)
	public double getElecBid(){
		return elecBid;
	}
	public void setElecBid(double elecBid) throws java.sql.SQLException{
		if(isSame(elecBid, getElecBid()))return;
		double oldValue = getElecBid();
		this.elecBid=elecBid;
		setProperty("ELEC_BID", elecBid, oldValue);
	}
	@Column(name="COST_PLUS",nullable=true,length=24)
	public double getCostPlus(){
		return costPlus;
	}
	public void setCostPlus(double costPlus) throws java.sql.SQLException{
		if(isSame(costPlus, getCostPlus()))return;
		double oldValue = getCostPlus();
		this.costPlus=costPlus;
		setProperty("COST_PLUS", costPlus, oldValue);
	}
	@Column(name="MATERIAL",nullable=true,length=24)
	public double getMaterial(){
		return material;
	}
	public void setMaterial(double material) throws java.sql.SQLException{
		if(isSame(material, getMaterial()))return;
		double oldValue = getMaterial();
		this.material=material;
		setProperty("MATERIAL", material, oldValue);
	}
	@Column(name="ADD_CONTINGENCY",nullable=true,length=24)
	public double getAddContingency(){
		return addContingency;
	}
	public void setAddContingency(double addContingency) throws java.sql.SQLException{
		if(isSame(addContingency, getAddContingency()))return;
		double oldValue = getAddContingency();
		this.addContingency=addContingency;
		setProperty("ADD_CONTINGENCY", addContingency, oldValue);
	}
	@Column(name="ALT_DOUBLE_A",nullable=true,length=24)
	public double getAltDoubleA(){
		return altDoubleA;
	}
	public void setAltDoubleA(double altDoubleA) throws java.sql.SQLException{
		if(isSame(altDoubleA, getAltDoubleA()))return;
		double oldValue = getAltDoubleA();
		this.altDoubleA=altDoubleA;
		setProperty("ALT_DOUBLE_A", altDoubleA, oldValue);
	}
	@Column(name="ALT_DOUBLE_B",nullable=true,length=24)
	public double getAltDoubleB(){
		return altDoubleB;
	}
	public void setAltDoubleB(double altDoubleB) throws java.sql.SQLException{
		if(isSame(altDoubleB, getAltDoubleB()))return;
		double oldValue = getAltDoubleB();
		this.altDoubleB=altDoubleB;
		setProperty("ALT_DOUBLE_B", altDoubleB, oldValue);
	}
	@Column(name="ALT_DOUBLE_C",nullable=true,length=24)
	public double getAltDoubleC(){
		return altDoubleC;
	}
	public void setAltDoubleC(double altDoubleC) throws java.sql.SQLException{
		if(isSame(altDoubleC, getAltDoubleC()))return;
		double oldValue = getAltDoubleC();
		this.altDoubleC=altDoubleC;
		setProperty("ALT_DOUBLE_C", altDoubleC, oldValue);
	}
	@Column(name="ALT_DATE_A",nullable=true,length=7)
	public Calendar getAltDateA(){
		return altDateA;
	}
	public void setAltDateA(Calendar altDateA) throws java.sql.SQLException{
		if(isSame(altDateA, getAltDateA()))return;
		Calendar oldValue = getAltDateA();
		this.altDateA=altDateA;
		setProperty("ALT_DATE_A", altDateA, oldValue);
	}
	@Column(name="ALT_DATE_B",nullable=true,length=7)
	public Calendar getAltDateB(){
		return altDateB;
	}
	public void setAltDateB(Calendar altDateB) throws java.sql.SQLException{
		if(isSame(altDateB, getAltDateB()))return;
		Calendar oldValue = getAltDateB();
		this.altDateB=altDateB;
		setProperty("ALT_DATE_B", altDateB, oldValue);
	}
	@Column(name="ALT_DATE_C",nullable=true,length=7)
	public Calendar getAltDateC(){
		return altDateC;
	}
	public void setAltDateC(Calendar altDateC) throws java.sql.SQLException{
		if(isSame(altDateC, getAltDateC()))return;
		Calendar oldValue = getAltDateC();
		this.altDateC=altDateC;
		setProperty("ALT_DATE_C", altDateC, oldValue);
	}
	@Column(name="SAP_NUM",nullable=true,length=32)
	public String getSapNum(){
		return sapNum;
	}
	public void setSapNum(String sapNum) throws java.sql.SQLException{
		if(isSame(sapNum, getSapNum()))return;
		String oldValue = getSapNum();
		this.sapNum=sapNum;
		setProperty("SAP_NUM", sapNum, oldValue);
	}
	@Column(name="CAPITAL",nullable=true,length=9)
	public int getCapital(){
		return capital;
	}
	public void setCapital(int capital) throws java.sql.SQLException{
		if(isSame(capital, getCapital()))return;
		int oldValue = getCapital();
		this.capital=capital;
		setProperty("CAPITAL", capital, oldValue);
	}
	@Column(name="O_AND_M",nullable=true,length=9)
	public int getOAndM(){
		return oAndM;
	}
	public void setOAndM(int oAndM) throws java.sql.SQLException{
		if(isSame(oAndM, getOAndM()))return;
		int oldValue = getOAndM();
		this.oAndM=oAndM;
		setProperty("O_AND_M", oAndM, oldValue);
	}
	@Column(name="OTHER_CUST_TYPE",nullable=true,length=256)
	public String getOtherCustType(){
		return otherCustType;
	}
	public void setOtherCustType(String otherCustType) throws java.sql.SQLException{
		if(isSame(otherCustType, getOtherCustType()))return;
		String oldValue = getOtherCustType();
		this.otherCustType=otherCustType;
		setProperty("OTHER_CUST_TYPE", otherCustType, oldValue);
	}
	@Column(name="OTHER_BI",nullable=true,length=256)
	public String getOtherBi(){
		return otherBi;
	}
	public void setOtherBi(String otherBi) throws java.sql.SQLException{
		if(isSame(otherBi, getOtherBi()))return;
		String oldValue = getOtherBi();
		this.otherBi=otherBi;
		setProperty("OTHER_BI", otherBi, oldValue);
	}
	@Column(name="OTHER_PROJ_DRIVER",nullable=true,length=256)
	public String getOtherProjDriver(){
		return otherProjDriver;
	}
	public void setOtherProjDriver(String otherProjDriver) throws java.sql.SQLException{
		if(isSame(otherProjDriver, getOtherProjDriver()))return;
		String oldValue = getOtherProjDriver();
		this.otherProjDriver=otherProjDriver;
		setProperty("OTHER_PROJ_DRIVER", otherProjDriver, oldValue);
	}
	@Column(name="OTHER_MAJOR_CUST_TYPE",nullable=true,length=256)
	public String getOtherMajorCustType(){
		return otherMajorCustType;
	}
	public void setOtherMajorCustType(String otherMajorCustType) throws java.sql.SQLException{
		if(isSame(otherMajorCustType, getOtherMajorCustType()))return;
		String oldValue = getOtherMajorCustType();
		this.otherMajorCustType=otherMajorCustType;
		setProperty("OTHER_MAJOR_CUST_TYPE", otherMajorCustType, oldValue);
	}
	@Column(name="PIF_BUDGET_CAT_ID",nullable=true,length=9)
	public int getPifBudgetCatId(){
		return pifBudgetCatId;
	}
	public void setPifBudgetCatId(int pifBudgetCatId) throws java.sql.SQLException{
		if(isSame(pifBudgetCatId, getPifBudgetCatId()))return;
		int oldValue = getPifBudgetCatId();
		this.pifBudgetCatId=pifBudgetCatId;
		setProperty("PIF_BUDGET_CAT_ID", pifBudgetCatId, oldValue);
		pifBudgetCat=null;
	}
	@Column(name="PIF_COMP_RISK_ID",nullable=true,length=9)
	public int getPifCompRiskId(){
		return pifCompRiskId;
	}
	public void setPifCompRiskId(int pifCompRiskId) throws java.sql.SQLException{
		if(isSame(pifCompRiskId, getPifCompRiskId()))return;
		int oldValue = getPifCompRiskId();
		this.pifCompRiskId=pifCompRiskId;
		setProperty("PIF_COMP_RISK_ID", pifCompRiskId, oldValue);
		pifCompRisk=null;
	}
	@Column(name="PIF_CREW_TYPE_ID",nullable=true,length=9)
	public int getPifCrewTypeId(){
		return pifCrewTypeId;
	}
	public void setPifCrewTypeId(int pifCrewTypeId) throws java.sql.SQLException{
		if(isSame(pifCrewTypeId, getPifCrewTypeId()))return;
		int oldValue = getPifCrewTypeId();
		this.pifCrewTypeId=pifCrewTypeId;
		setProperty("PIF_CREW_TYPE_ID", pifCrewTypeId, oldValue);
		pifCrewType=null;
	}
	@Column(name="PIF_FINANCE_CONFIRM_ID",nullable=true,length=1)
	public boolean isPifFinanceConfirmId(){
		return pifFinanceConfirmId;
	}
	public void setPifFinanceConfirmId(boolean pifFinanceConfirmId) throws java.sql.SQLException{
		if(isSame(pifFinanceConfirmId, isPifFinanceConfirmId()))return;
		boolean oldValue = isPifFinanceConfirmId();
		this.pifFinanceConfirmId=pifFinanceConfirmId;
		setProperty("PIF_FINANCE_CONFIRM_ID", pifFinanceConfirmId, oldValue);
	}
	@Column(name="PIF_PROJ_DRIVER_ID",nullable=true,length=9)
	public int getPifProjDriverId(){
		return pifProjDriverId;
	}
	public void setPifProjDriverId(int pifProjDriverId) throws java.sql.SQLException{
		if(isSame(pifProjDriverId, getPifProjDriverId()))return;
		int oldValue = getPifProjDriverId();
		this.pifProjDriverId=pifProjDriverId;
		setProperty("PIF_PROJ_DRIVER_ID", pifProjDriverId, oldValue);
		pifProjDriver=null;
	}
	@Column(name="PIF_CUST_TYPE_ID",nullable=true,length=9)
	public int getPifCustTypeId(){
		return pifCustTypeId;
	}
	public void setPifCustTypeId(int pifCustTypeId) throws java.sql.SQLException{
		if(isSame(pifCustTypeId, getPifCustTypeId()))return;
		int oldValue = getPifCustTypeId();
		this.pifCustTypeId=pifCustTypeId;
		setProperty("PIF_CUST_TYPE_ID", pifCustTypeId, oldValue);
		pifCustType=null;
	}
	@Column(name="PIF_MAJOR_CUST_TYPE_ID",nullable=true,length=9)
	public int getPifMajorCustTypeId(){
		return pifMajorCustTypeId;
	}
	public void setPifMajorCustTypeId(int pifMajorCustTypeId) throws java.sql.SQLException{
		if(isSame(pifMajorCustTypeId, getPifMajorCustTypeId()))return;
		int oldValue = getPifMajorCustTypeId();
		this.pifMajorCustTypeId=pifMajorCustTypeId;
		setProperty("PIF_MAJOR_CUST_TYPE_ID", pifMajorCustTypeId, oldValue);
		pifMajorCustType=null;
	}
	@Column(name="PIF_GW_CAT_ID",nullable=true,length=9)
	public int getPifGwCatId(){
		return pifGwCatId;
	}
	public void setPifGwCatId(int pifGwCatId) throws java.sql.SQLException{
		if(isSame(pifGwCatId, getPifGwCatId()))return;
		int oldValue = getPifGwCatId();
		this.pifGwCatId=pifGwCatId;
		setProperty("PIF_GW_CAT_ID", pifGwCatId, oldValue);
		pifGwCat=null;
	}
	@Column(name="DISTRICT_SPONSOR",nullable=true,length=64)
	public String getDistrictSponsor(){
		return districtSponsor;
	}
	public void setDistrictSponsor(String districtSponsor) throws java.sql.SQLException{
		if(isSame(districtSponsor, getDistrictSponsor()))return;
		String oldValue = getDistrictSponsor();
		this.districtSponsor=districtSponsor;
		setProperty("DISTRICT_SPONSOR", districtSponsor, oldValue);
	}
	@Column(name="ALT_DOUBLE_D",nullable=true,length=126)
	public double getAltDoubleD(){
		return altDoubleD;
	}
	public void setAltDoubleD(double altDoubleD) throws java.sql.SQLException{
		if(isSame(altDoubleD, getAltDoubleD()))return;
		double oldValue = getAltDoubleD();
		this.altDoubleD=altDoubleD;
		setProperty("ALT_DOUBLE_D", altDoubleD, oldValue);
	}
	@Column(name="ALT_DOUBLE_E",nullable=true,length=126)
	public double getAltDoubleE(){
		return altDoubleE;
	}
	public void setAltDoubleE(double altDoubleE) throws java.sql.SQLException{
		if(isSame(altDoubleE, getAltDoubleE()))return;
		double oldValue = getAltDoubleE();
		this.altDoubleE=altDoubleE;
		setProperty("ALT_DOUBLE_E", altDoubleE, oldValue);
	}
	@Column(name="ALT_DOUBLE_F",nullable=true,length=126)
	public double getAltDoubleF(){
		return altDoubleF;
	}
	public void setAltDoubleF(double altDoubleF) throws java.sql.SQLException{
		if(isSame(altDoubleF, getAltDoubleF()))return;
		double oldValue = getAltDoubleF();
		this.altDoubleF=altDoubleF;
		setProperty("ALT_DOUBLE_F", altDoubleF, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_DOUBLE_H",nullable=true,length=126)
	public double getAltDoubleH(){
		return altDoubleH;
	}
	public void setAltDoubleH(double altDoubleH) throws java.sql.SQLException{
		if(isSame(altDoubleH, getAltDoubleH()))return;
		double oldValue = getAltDoubleH();
		this.altDoubleH=altDoubleH;
		setProperty("ALT_DOUBLE_H", altDoubleH, oldValue);
	}
	@Column(name="ALT_DOUBLE_I",nullable=true,length=126)
	public double getAltDoubleI(){
		return altDoubleI;
	}
	public void setAltDoubleI(double altDoubleI) throws java.sql.SQLException{
		if(isSame(altDoubleI, getAltDoubleI()))return;
		double oldValue = getAltDoubleI();
		this.altDoubleI=altDoubleI;
		setProperty("ALT_DOUBLE_I", altDoubleI, oldValue);
	}
	@Column(name="ALT_VARCHAR4",nullable=true,length=256)
	public String getAltVarchar4(){
		return altVarchar4;
	}
	public void setAltVarchar4(String altVarchar4) throws java.sql.SQLException{
		if(isSame(altVarchar4, getAltVarchar4()))return;
		String oldValue = getAltVarchar4();
		this.altVarchar4=altVarchar4;
		setProperty("ALT_VARCHAR4", altVarchar4, oldValue);
	}
	@Column(name="ALT_VARCHAR5",nullable=true,length=256)
	public String getAltVarchar5(){
		return altVarchar5;
	}
	public void setAltVarchar5(String altVarchar5) throws java.sql.SQLException{
		if(isSame(altVarchar5, getAltVarchar5()))return;
		String oldValue = getAltVarchar5();
		this.altVarchar5=altVarchar5;
		setProperty("ALT_VARCHAR5", altVarchar5, oldValue);
	}
	public District getDistrict()throws java.sql.SQLException{
		if(district==null)
			district=District.getInstance(getPlanyear(), getDistrictId());
		return district;
	}
	public void setDistrict(District district)throws java.sql.SQLException{
		setDistrictId(district==null?0:district.getDistrictId());
		this.district=district;
	}
	public Pif getPif()throws java.sql.SQLException{
		if(pif==null)
			pif=Pif.getInstance(getPlanyear(), getPifId());
		return pif;
	}
	public void setPif(Pif pif)throws java.sql.SQLException{
		setPifId(pif==null?0:pif.getPifId());
		this.pif=pif;
	}
	public PifBudgetCat getPifBudgetCat()throws java.sql.SQLException{
		if(pifBudgetCat==null)
			pifBudgetCat=PifBudgetCat.getInstance(getPlanyear(), getPifBudgetCatId());
		return pifBudgetCat;
	}
	public void setPifBudgetCat(PifBudgetCat pifBudgetCat)throws java.sql.SQLException{
		setPifBudgetCatId(pifBudgetCat==null?0:pifBudgetCat.getPifBudgetCatId());
		this.pifBudgetCat=pifBudgetCat;
	}
	public PifCompRisk getPifCompRisk()throws java.sql.SQLException{
		if(pifCompRisk==null)
			pifCompRisk=PifCompRisk.getInstance(getPlanyear(), getPifCompRiskId());
		return pifCompRisk;
	}
	public void setPifCompRisk(PifCompRisk pifCompRisk)throws java.sql.SQLException{
		setPifCompRiskId(pifCompRisk==null?0:pifCompRisk.getPifCompRiskId());
		this.pifCompRisk=pifCompRisk;
	}
	public PifCrewType getPifCrewType()throws java.sql.SQLException{
		if(pifCrewType==null)
			pifCrewType=PifCrewType.getInstance(getPlanyear(), getPifCrewTypeId());
		return pifCrewType;
	}
	public void setPifCrewType(PifCrewType pifCrewType)throws java.sql.SQLException{
		setPifCrewTypeId(pifCrewType==null?0:pifCrewType.getPifCrewTypeId());
		this.pifCrewType=pifCrewType;
	}
	public PifCustType getPifCustType()throws java.sql.SQLException{
		if(pifCustType==null)
			pifCustType=PifCustType.getInstance(getPlanyear(), getPifCustTypeId());
		return pifCustType;
	}
	public void setPifCustType(PifCustType pifCustType)throws java.sql.SQLException{
		setPifCustTypeId(pifCustType==null?0:pifCustType.getPifCustTypeId());
		this.pifCustType=pifCustType;
	}
	public PifGwCat getPifGwCat()throws java.sql.SQLException{
		if(pifGwCat==null)
			pifGwCat=PifGwCat.getInstance(getPlanyear(), getPifGwCatId());
		return pifGwCat;
	}
	public void setPifGwCat(PifGwCat pifGwCat)throws java.sql.SQLException{
		setPifGwCatId(pifGwCat==null?0:pifGwCat.getPifGwCatId());
		this.pifGwCat=pifGwCat;
	}
	public PifMajorCustType getPifMajorCustType()throws java.sql.SQLException{
		if(pifMajorCustType==null)
			pifMajorCustType=PifMajorCustType.getInstance(getPlanyear(), getPifMajorCustTypeId());
		return pifMajorCustType;
	}
	public void setPifMajorCustType(PifMajorCustType pifMajorCustType)throws java.sql.SQLException{
		setPifMajorCustTypeId(pifMajorCustType==null?0:pifMajorCustType.getPifMajorCustTypeId());
		this.pifMajorCustType=pifMajorCustType;
	}
	public PifProjDriver getPifProjDriver()throws java.sql.SQLException{
		if(pifProjDriver==null)
			pifProjDriver=PifProjDriver.getInstance(getPlanyear(), getPifProjDriverId());
		return pifProjDriver;
	}
	public void setPifProjDriver(PifProjDriver pifProjDriver)throws java.sql.SQLException{
		setPifProjDriverId(pifProjDriver==null?0:pifProjDriver.getPifProjDriverId());
		this.pifProjDriver=pifProjDriver;
	}
	public Collection<PifWoImpact> getPifWoImpacts()throws java.sql.SQLException{
		if(isNewInstance() || pifWoImpacts != null){
			if(pifWoImpacts == null)
				pifWoImpacts = new TreeSet<PifWoImpact>();
			return pifWoImpacts;
		}
		return PifWoImpact.getNamedCollection("findByPifWo",getPlanyear(), getWoId());
	}
	public void addPifWoImpact(PifWoImpact pifWoImpact)throws java.sql.SQLException{
		pifWoImpact.setPifWo((PifWo)this);
		if(isNewInstance() || pifWoImpacts != null)
			getPifWoImpacts().add(pifWoImpact);
		else
			pifWoImpact.insert();
	}
	public void removePifWoImpact(PifWoImpact pifWoImpact)throws java.sql.SQLException{
		if(isNewInstance() || pifWoImpacts != null)
			getPifWoImpacts().remove(pifWoImpact);
		else
			pifWoImpact.delete();
	}
	public PifWo copy()throws java.sql.SQLException{
		PifWo cp = new PifWo((PifWo)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifWoDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(PifWoImpact child:getPifWoImpacts())
			cp.addPifWoImpact(child.copy());
	}
	public Vector<String> getDifference(PifWoDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getWoId(),o.getWoId())) diffs.add("WO_ID");
		if(!isSame(getPifId(),o.getPifId())) diffs.add("PIF_ID");
		if(!isSame(getLoc(),o.getLoc())) diffs.add("LOC");
		if(!isSame(getDistrictId(),o.getDistrictId())) diffs.add("DISTRICT_ID");
		if(!isSame(getWo(),o.getWo())) diffs.add("WO");
		if(!isSame(getAi(),o.getAi())) diffs.add("AI");
		if(!isSame(getPropOpDate(),o.getPropOpDate())) diffs.add("PROP_OP_DATE");
		if(!isSame(getScopePrep(),o.getScopePrep())) diffs.add("SCOPE_PREP");
		if(!isSame(getScopeToTp(),o.getScopeToTp())) diffs.add("SCOPE_TO_TP");
		if(!isSame(getScopeFromTp(),o.getScopeFromTp())) diffs.add("SCOPE_FROM_TP");
		if(!isSame(getWoApp(),o.getWoApp())) diffs.add("WO_APP");
		if(!isSame(getRelToConstr(),o.getRelToConstr())) diffs.add("REL_TO_CONSTR");
		if(!isSame(getCompleted(),o.getCompleted())) diffs.add("COMPLETED");
		if(!isSame(getPm(),o.getPm())) diffs.add("PM");
		if(!isSame(getDr(),o.getDr())) diffs.add("DR");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getPlanningCost(),o.getPlanningCost())) diffs.add("PLANNING_COST");
		if(!isSame(getSceGross(),o.getSceGross())) diffs.add("SCE_GROSS");
		if(!isSame(getDpiMandays(),o.getDpiMandays())) diffs.add("DPI_MANDAYS");
		if(!isSame(getDpiLabor(),o.getDpiLabor())) diffs.add("DPI_LABOR");
		if(!isSame(getDpiAMaterial(),o.getDpiAMaterial())) diffs.add("DPI_A_MATERIAL");
		if(!isSame(getDpiBMaterial(),o.getDpiBMaterial())) diffs.add("DPI_B_MATERIAL");
		if(!isSame(getDpiContract(),o.getDpiContract())) diffs.add("DPI_CONTRACT");
		if(!isSame(getDpiContingency(),o.getDpiContingency())) diffs.add("DPI_CONTINGENCY");
		if(!isSame(getElecBid(),o.getElecBid())) diffs.add("ELEC_BID");
		if(!isSame(getCostPlus(),o.getCostPlus())) diffs.add("COST_PLUS");
		if(!isSame(getMaterial(),o.getMaterial())) diffs.add("MATERIAL");
		if(!isSame(getAddContingency(),o.getAddContingency())) diffs.add("ADD_CONTINGENCY");
		if(!isSame(getAltDoubleA(),o.getAltDoubleA())) diffs.add("ALT_DOUBLE_A");
		if(!isSame(getAltDoubleB(),o.getAltDoubleB())) diffs.add("ALT_DOUBLE_B");
		if(!isSame(getAltDoubleC(),o.getAltDoubleC())) diffs.add("ALT_DOUBLE_C");
		if(!isSame(getAltDateA(),o.getAltDateA())) diffs.add("ALT_DATE_A");
		if(!isSame(getAltDateB(),o.getAltDateB())) diffs.add("ALT_DATE_B");
		if(!isSame(getAltDateC(),o.getAltDateC())) diffs.add("ALT_DATE_C");
		if(!isSame(getSapNum(),o.getSapNum())) diffs.add("SAP_NUM");
		if(!isSame(getCapital(),o.getCapital())) diffs.add("CAPITAL");
		if(!isSame(getOAndM(),o.getOAndM())) diffs.add("O_AND_M");
		if(!isSame(getOtherCustType(),o.getOtherCustType())) diffs.add("OTHER_CUST_TYPE");
		if(!isSame(getOtherBi(),o.getOtherBi())) diffs.add("OTHER_BI");
		if(!isSame(getOtherProjDriver(),o.getOtherProjDriver())) diffs.add("OTHER_PROJ_DRIVER");
		if(!isSame(getOtherMajorCustType(),o.getOtherMajorCustType())) diffs.add("OTHER_MAJOR_CUST_TYPE");
		if(!isSame(getPifBudgetCatId(),o.getPifBudgetCatId())) diffs.add("PIF_BUDGET_CAT_ID");
		if(!isSame(getPifCompRiskId(),o.getPifCompRiskId())) diffs.add("PIF_COMP_RISK_ID");
		if(!isSame(getPifCrewTypeId(),o.getPifCrewTypeId())) diffs.add("PIF_CREW_TYPE_ID");
		if(!isSame(isPifFinanceConfirmId(),o.isPifFinanceConfirmId())) diffs.add("PIF_FINANCE_CONFIRM_ID");
		if(!isSame(getPifProjDriverId(),o.getPifProjDriverId())) diffs.add("PIF_PROJ_DRIVER_ID");
		if(!isSame(getPifCustTypeId(),o.getPifCustTypeId())) diffs.add("PIF_CUST_TYPE_ID");
		if(!isSame(getPifMajorCustTypeId(),o.getPifMajorCustTypeId())) diffs.add("PIF_MAJOR_CUST_TYPE_ID");
		if(!isSame(getPifGwCatId(),o.getPifGwCatId())) diffs.add("PIF_GW_CAT_ID");
		if(!isSame(getDistrictSponsor(),o.getDistrictSponsor())) diffs.add("DISTRICT_SPONSOR");
		if(!isSame(getAltDoubleD(),o.getAltDoubleD())) diffs.add("ALT_DOUBLE_D");
		if(!isSame(getAltDoubleE(),o.getAltDoubleE())) diffs.add("ALT_DOUBLE_E");
		if(!isSame(getAltDoubleF(),o.getAltDoubleF())) diffs.add("ALT_DOUBLE_F");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltDoubleH(),o.getAltDoubleH())) diffs.add("ALT_DOUBLE_H");
		if(!isSame(getAltDoubleI(),o.getAltDoubleI())) diffs.add("ALT_DOUBLE_I");
		if(!isSame(getAltVarchar4(),o.getAltVarchar4())) diffs.add("ALT_VARCHAR4");
		if(!isSame(getAltVarchar5(),o.getAltVarchar5())) diffs.add("ALT_VARCHAR5");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(pifWoImpacts != null){
			for(PifWoImpact pifWoImpact:getPifWoImpacts()){
				if(pifWoImpact.isNewInstance())
					pifWoImpact.setPifWo((PifWo)this);
				pifWoImpact.insert();
			}
			pifWoImpacts = null;
		}
	}
}
