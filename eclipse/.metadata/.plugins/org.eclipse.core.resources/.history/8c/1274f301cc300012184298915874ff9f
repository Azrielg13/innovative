package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.GiApp;
import com.sce.esp.object.model.GiAppEquip;
import com.sce.esp.object.model.GiEquipment;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class GiAppEquipDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,APP_ID,EQUIP_ID,QUANTITY};
	public final static int ID_LIMIT = 9;
	public final static int APPID_LIMIT = 9;
	public final static int EQUIPID_LIMIT = 9;
	public final static int QUANTITY_LIMIT = 9;
	private int id;
	private int appId;
	private int equipId;
	private int quantity;
	private GiEquipment giEquipment;
	private GiApp giApp;
	public static GiAppEquip getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static GiAppEquip getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		GiAppEquip o = null;
		if(cache != null && cache.contains(GiAppEquip.class, pk))
			o = em.find(GiAppEquip.class, pk);
		if(o==null && getAICache().contains(GiAppEquip.class, pk))
			o = getAICache().find(GiAppEquip.class, pk);
		if(o==null && fetch)
			o = em.find(GiAppEquip.class, pk);
		if(o==null && fetch && GiAppEquip.class.getAnnotation(AutoInsertable.class) != null){
			o = new GiAppEquip(id);
			getAICache().cache(GiAppEquip.class, o);
		}
		return o;
	}
	public static Collection<GiAppEquip> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<GiAppEquip> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<GiAppEquip> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM GiAppEquip o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<GiAppEquip> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<GiAppEquip> tq = em.createQuery(jpql,GiAppEquip.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<GiAppEquip> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<GiAppEquip> tq = em.createNamedQuery(name,GiAppEquip.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public GiAppEquipDAO(){}
	public GiAppEquipDAO(int id){
		this.id=id;
	}
	public GiAppEquipDAO(GiAppEquipDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(GiAppEquipDAO orig){
		this.appId=orig.getAppId();
		this.equipId=orig.getEquipId();
		this.quantity=orig.getQuantity();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIZ31_SEQ",sequenceName="MDIZ31_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="APP_ID",nullable=true,length=9)
	public int getAppId(){
		return appId;
	}
	public void setAppId(int appId) throws java.sql.SQLException{
		if(isSame(appId, getAppId()))return;
		int oldValue = getAppId();
		this.appId=appId;
		setProperty("APP_ID", appId, oldValue);
		giApp=null;
	}
	@Column(name="EQUIP_ID",nullable=true,length=9)
	public int getEquipId(){
		return equipId;
	}
	public void setEquipId(int equipId) throws java.sql.SQLException{
		if(isSame(equipId, getEquipId()))return;
		int oldValue = getEquipId();
		this.equipId=equipId;
		setProperty("EQUIP_ID", equipId, oldValue);
		giEquipment=null;
	}
	@Column(name="QUANTITY",nullable=true,length=9)
	public int getQuantity(){
		return quantity;
	}
	public void setQuantity(int quantity) throws java.sql.SQLException{
		if(isSame(quantity, getQuantity()))return;
		int oldValue = getQuantity();
		this.quantity=quantity;
		setProperty("QUANTITY", quantity, oldValue);
	}
	public GiEquipment getGiEquipment()throws java.sql.SQLException{
		if(giEquipment==null)
			giEquipment=GiEquipment.getInstance(getEquipId());
		return giEquipment;
	}
	public void setGiEquipment(GiEquipment giEquipment)throws java.sql.SQLException{
		setEquipId(giEquipment==null?0:giEquipment.getId());
		this.giEquipment=giEquipment;
	}
	public GiApp getGiApp()throws java.sql.SQLException{
		if(giApp==null)
			giApp=GiApp.getInstance(getAppId());
		return giApp;
	}
	public void setGiApp(GiApp giApp)throws java.sql.SQLException{
		setAppId(giApp==null?0:giApp.getId());
		this.giApp=giApp;
	}
	public GiAppEquip copy()throws java.sql.SQLException{
		GiAppEquip cp = new GiAppEquip((GiAppEquip)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(GiAppEquipDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(GiAppEquipDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getAppId(),o.getAppId())) diffs.add("APP_ID");
		if(!isSame(getEquipId(),o.getEquipId())) diffs.add("EQUIP_ID");
		if(!isSame(getQuantity(),o.getQuantity())) diffs.add("QUANTITY");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
