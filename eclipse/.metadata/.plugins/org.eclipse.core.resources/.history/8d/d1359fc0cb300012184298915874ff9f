/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.util.WeakHashMap;

import com.jidesoft.swing.StyleRange;

/**
 * A class to represent a data row.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0d
 */
public abstract class AbstractDataRow extends ESPExpandableRow {
	
	protected CRecordCache cache;
	protected CStyleCache sCache;
	protected CEditableCache eCache;
	
	/**
	 * Gets the MVA value at the specified column.
	 * 
	 * @param col
	 *            the col
	 * 
	 * @return the MVA value at
	 */
	public abstract double getMVAValueAt(int col);
	
	public class CRecordCache extends WeakHashMap<Integer,Object> {
		public void expungeStaleEntries() {
			cache.entrySet().clear();
        }
	}
	
	public class CStyleCache extends WeakHashMap<Integer,StyleRange> {
	}
	
	public class CEditableCache extends WeakHashMap<Integer,Object> {
	}
	
	protected void invalidateRecordCache(){
//			SwingUtilities.invokeLater(new Runnable(){
//				public void run() {
//					if(cache!=null){
//						EspLogger.warning(this, "resetting cache");
//						cache.expungeStaleEntries();
//						cache.clear();
//					}
//				}
//			});
		
	}
	
	protected void invalidateEditableCache(){
		if(eCache!=null)
			eCache.clear();
	}
	
	protected void invalidateStyleCache(){
		if(sCache!=null)
			sCache.clear();
	}
}
