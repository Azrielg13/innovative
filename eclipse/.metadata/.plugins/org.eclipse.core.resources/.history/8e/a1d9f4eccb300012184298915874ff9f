/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.jortho;

import java.io.InputStream;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;


/**
 * This class parse the XML file from a dump of the Wiktionary.
 * 
 * @author Volker Berlin
 */
public class Parser extends DefaultHandler{

    
    private final BookGenerator generator;
    
    private final int NONE  = 0;
    private final int TITLE = 1;
    private final int TEXT = 2;
    
    
    private int currentTag;
    private final StringBuilder data = new StringBuilder();
    private String word;
    private String text;
    
    Parser(BookGenerator generator, InputStream stream) throws Exception{
        this.generator = generator;
        
        System.setProperty("entityExpansionLimit", "100000000");
        InputSource input = new InputSource(stream); 
        SAXParserFactory spf = SAXParserFactory.newInstance();
        SAXParser sp = spf.newSAXParser();
        ParserAdapter pa = new ParserAdapter(sp.getParser());
        pa.setContentHandler(this);
        pa.parse(input);
    }
    
    
    @Override
    public void characters(char[] ch, int start, int length) throws SAXException {
        switch(currentTag){
            case TITLE:
            case TEXT:
                data.append( ch, start, length );
                break;
        }
    }

    
    
    @Override
    public void startElement(String namespaceURI, String localName, String qName, Attributes atts) throws SAXException {
        data.setLength( 0 );
        if("title".equals(localName)){
            currentTag = TITLE;
        }else
        if("text".equals(localName)){
            currentTag = TEXT;
        }
    }
    
    
    @Override
    public void endElement(String namespaceURI, String localName, String qName) throws SAXException {
        switch(currentTag){
            case TITLE:
                word = data.toString();
                if(!generator.isValidWord(word)){
                    word = null;
                }
                break;
            case TEXT:
                text = data.toString();
                break;
            default:
                if("page".equals(localName)){
                    if(word != null){
                        try{
                            generator.getBook().incTitleCount();
                            if(generator.isValidLanguage(word, text)){
                                generator.getBook().incLanguageTitleCount();
                                generator.addWord(word);
                            }
                        }catch(Throwable th){
                            th.printStackTrace();
                        }
                    }
                }
        }
        currentTag = NONE;
    }

}
