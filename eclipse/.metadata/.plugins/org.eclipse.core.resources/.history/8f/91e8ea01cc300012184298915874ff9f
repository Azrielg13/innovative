package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostSheetOH;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.OverheadKey;
import com.sce.esp.object.model.OverheadLoaderRate;
import com.sce.esp.object.model.SceElem;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CostSheetOHDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,COST_SHEET_ID,OVERHEAD_KEY_ID,SCE_ELEM_ID};
	public final static int ID_LIMIT = 9;
	public final static int COSTSHEETID_LIMIT = 9;
	public final static int OVERHEADKEYID_LIMIT = 9;
	public final static int SCEELEMID_LIMIT = 9;
	private int id;
	private int costSheetId;
	private int overheadKeyId;
	private int sceElemId;
	private Collection<OverheadLoaderRate> overheadLoaderRates;
	private LookUp costSheet;
	private OverheadKey overheadKey;
	private SceElem sceElem;
	public static CostSheetOH getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static CostSheetOH getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		CostSheetOH o = null;
		if(cache != null && cache.contains(CostSheetOH.class, pk))
			o = em.find(CostSheetOH.class, pk);
		if(o==null && getAICache().contains(CostSheetOH.class, pk))
			o = getAICache().find(CostSheetOH.class, pk);
		if(o==null && fetch)
			o = em.find(CostSheetOH.class, pk);
		if(o==null && fetch && CostSheetOH.class.getAnnotation(AutoInsertable.class) != null){
			o = new CostSheetOH(id);
			getAICache().cache(CostSheetOH.class, o);
		}
		return o;
	}
	public static Collection<CostSheetOH> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CostSheetOH> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CostSheetOH> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CostSheetOH o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CostSheetOH> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostSheetOH> tq = em.createQuery(jpql,CostSheetOH.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CostSheetOH> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostSheetOH> tq = em.createNamedQuery(name,CostSheetOH.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CostSheetOHDAO(){}
	public CostSheetOHDAO(int id){
		this.id=id;
	}
	public CostSheetOHDAO(CostSheetOHDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CostSheetOHDAO orig){
		this.costSheetId=orig.getCostSheetId();
		this.overheadKeyId=orig.getOverheadKeyId();
		this.sceElemId=orig.getSceElemId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIU73_SEQ",sequenceName="MDIU73_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="COST_SHEET_ID",nullable=false,length=9)
	public int getCostSheetId(){
		return costSheetId;
	}
	public void setCostSheetId(int costSheetId) throws java.sql.SQLException{
		if(isSame(costSheetId, getCostSheetId()))return;
		int oldValue = getCostSheetId();
		this.costSheetId=costSheetId;
		setProperty("COST_SHEET_ID", costSheetId, oldValue);
		costSheet=null;
	}
	@Column(name="OVERHEAD_KEY_ID",nullable=false,length=9)
	public int getOverheadKeyId(){
		return overheadKeyId;
	}
	public void setOverheadKeyId(int overheadKeyId) throws java.sql.SQLException{
		if(isSame(overheadKeyId, getOverheadKeyId()))return;
		int oldValue = getOverheadKeyId();
		this.overheadKeyId=overheadKeyId;
		setProperty("OVERHEAD_KEY_ID", overheadKeyId, oldValue);
		overheadKey=null;
	}
	@Column(name="SCE_ELEM_ID",nullable=true,length=9)
	public int getSceElemId(){
		return sceElemId;
	}
	public void setSceElemId(int sceElemId) throws java.sql.SQLException{
		if(isSame(sceElemId, getSceElemId()))return;
		int oldValue = getSceElemId();
		this.sceElemId=sceElemId;
		setProperty("SCE_ELEM_ID", sceElemId, oldValue);
		sceElem=null;
	}
	public LookUp getCostSheet()throws java.sql.SQLException{
		if(costSheet==null)
			costSheet=LookUp.getInstance(getCostSheetId());
		return costSheet;
	}
	public void setCostSheet(LookUp costSheet)throws java.sql.SQLException{
		setCostSheetId(costSheet==null?0:costSheet.getId());
		this.costSheet=costSheet;
	}
	public OverheadKey getOverheadKey()throws java.sql.SQLException{
		if(overheadKey==null)
			overheadKey=OverheadKey.getInstance(getOverheadKeyId());
		return overheadKey;
	}
	public void setOverheadKey(OverheadKey overheadKey)throws java.sql.SQLException{
		setOverheadKeyId(overheadKey==null?0:overheadKey.getId());
		this.overheadKey=overheadKey;
	}
	public SceElem getSceElem()throws java.sql.SQLException{
		if(sceElem==null)
			sceElem=SceElem.getInstance(getSceElemId());
		return sceElem;
	}
	public void setSceElem(SceElem sceElem)throws java.sql.SQLException{
		setSceElemId(sceElem==null?0:sceElem.getSceElemId());
		this.sceElem=sceElem;
	}
	public Collection<OverheadLoaderRate> getOverheadLoaderRates()throws java.sql.SQLException{
		if(isNewInstance() || overheadLoaderRates != null){
			if(overheadLoaderRates == null)
				overheadLoaderRates = new TreeSet<OverheadLoaderRate>();
			return overheadLoaderRates;
		}
		return OverheadLoaderRate.getNamedCollection("findByCostSheetOH",getId());
	}
	public void addOverheadLoaderRate(OverheadLoaderRate overheadLoaderRate)throws java.sql.SQLException{
		overheadLoaderRate.setCostSheetOH((CostSheetOH)this);
		if(isNewInstance() || overheadLoaderRates != null)
			getOverheadLoaderRates().add(overheadLoaderRate);
		else
			overheadLoaderRate.insert();
	}
	public void removeOverheadLoaderRate(OverheadLoaderRate overheadLoaderRate)throws java.sql.SQLException{
		if(isNewInstance() || overheadLoaderRates != null)
			getOverheadLoaderRates().remove(overheadLoaderRate);
		else
			overheadLoaderRate.delete();
	}
	public CostSheetOH copy()throws java.sql.SQLException{
		CostSheetOH cp = new CostSheetOH((CostSheetOH)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CostSheetOHDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(OverheadLoaderRate child:getOverheadLoaderRates())
			cp.addOverheadLoaderRate(child.copy());
	}
	public Vector<String> getDifference(CostSheetOHDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getCostSheetId(),o.getCostSheetId())) diffs.add("COST_SHEET_ID");
		if(!isSame(getOverheadKeyId(),o.getOverheadKeyId())) diffs.add("OVERHEAD_KEY_ID");
		if(!isSame(getSceElemId(),o.getSceElemId())) diffs.add("SCE_ELEM_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(overheadKey != null && overheadKey.isNewInstance())
				overheadKey.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(overheadLoaderRates != null){
			for(OverheadLoaderRate overheadLoaderRate:getOverheadLoaderRates())
				overheadLoaderRate.setCostSheetOH((CostSheetOH)this);
		}
		if(overheadLoaderRates != null){
			for(OverheadLoaderRate overheadLoaderRate:getOverheadLoaderRates())
				if(overheadLoaderRate.isNewInstance())
					overheadLoaderRate.insert();
			overheadLoaderRates = null;
		}
	}
}
