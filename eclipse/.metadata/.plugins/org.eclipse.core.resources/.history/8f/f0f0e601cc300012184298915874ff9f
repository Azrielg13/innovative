package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CprPlant;
import com.sce.esp.object.model.CprPrime;
import com.sce.esp.object.model.CprPrimeAcct;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CprPrimeDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,CPR_PLANT_ID,CPR_PRIME_ACCT_ID,PRIME};
	public final static int ID_LIMIT = 9;
	public final static int CPRPLANTID_LIMIT = 9;
	public final static int CPRPRIMEACCTID_LIMIT = 9;
	public final static int PRIME_LIMIT = 5;
	private int id;
	private int cprPlantId;
	private int cprPrimeAcctId;
	private String prime;
	private CprPlant cprPlant;
	private CprPrimeAcct cprPrimeAcct;
	public static CprPrime getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static CprPrime getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		CprPrime o = null;
		if(cache != null && cache.contains(CprPrime.class, pk))
			o = em.find(CprPrime.class, pk);
		if(o==null && getAICache().contains(CprPrime.class, pk))
			o = getAICache().find(CprPrime.class, pk);
		if(o==null && fetch)
			o = em.find(CprPrime.class, pk);
		if(o==null && fetch && CprPrime.class.getAnnotation(AutoInsertable.class) != null){
			o = new CprPrime(id);
			getAICache().cache(CprPrime.class, o);
		}
		return o;
	}
	public static Collection<CprPrime> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CprPrime> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CprPrime> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CprPrime o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CprPrime> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CprPrime> tq = em.createQuery(jpql,CprPrime.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CprPrime> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CprPrime> tq = em.createNamedQuery(name,CprPrime.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CprPrimeDAO(){}
	public CprPrimeDAO(int id){
		this.id=id;
	}
	public CprPrimeDAO(CprPrimeDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CprPrimeDAO orig){
		this.cprPlantId=orig.getCprPlantId();
		this.cprPrimeAcctId=orig.getCprPrimeAcctId();
		this.prime=orig.getPrime();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDISC4_SEQ",sequenceName="MDISC4_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="CPR_PLANT_ID",nullable=false,length=9)
	public int getCprPlantId(){
		return cprPlantId;
	}
	public void setCprPlantId(int cprPlantId) throws java.sql.SQLException{
		if(isSame(cprPlantId, getCprPlantId()))return;
		int oldValue = getCprPlantId();
		this.cprPlantId=cprPlantId;
		setProperty("CPR_PLANT_ID", cprPlantId, oldValue);
		cprPlant=null;
	}
	@Column(name="CPR_PRIME_ACCT_ID",nullable=false,length=9)
	public int getCprPrimeAcctId(){
		return cprPrimeAcctId;
	}
	public void setCprPrimeAcctId(int cprPrimeAcctId) throws java.sql.SQLException{
		if(isSame(cprPrimeAcctId, getCprPrimeAcctId()))return;
		int oldValue = getCprPrimeAcctId();
		this.cprPrimeAcctId=cprPrimeAcctId;
		setProperty("CPR_PRIME_ACCT_ID", cprPrimeAcctId, oldValue);
		cprPrimeAcct=null;
	}
	@Column(name="PRIME",nullable=false,length=5)
	public String getPrime(){
		return prime;
	}
	public void setPrime(String prime) throws java.sql.SQLException{
		if(isSame(prime, getPrime()))return;
		String oldValue = getPrime();
		this.prime=prime;
		setProperty("PRIME", prime, oldValue);
	}
	public CprPlant getCprPlant()throws java.sql.SQLException{
		if(cprPlant==null)
			cprPlant=CprPlant.getInstance(getCprPlantId());
		return cprPlant;
	}
	public void setCprPlant(CprPlant cprPlant)throws java.sql.SQLException{
		setCprPlantId(cprPlant==null?0:cprPlant.getId());
		this.cprPlant=cprPlant;
	}
	public CprPrimeAcct getCprPrimeAcct()throws java.sql.SQLException{
		if(cprPrimeAcct==null)
			cprPrimeAcct=CprPrimeAcct.getInstance(getCprPrimeAcctId());
		return cprPrimeAcct;
	}
	public void setCprPrimeAcct(CprPrimeAcct cprPrimeAcct)throws java.sql.SQLException{
		setCprPrimeAcctId(cprPrimeAcct==null?0:cprPrimeAcct.getId());
		this.cprPrimeAcct=cprPrimeAcct;
	}
	public CprPrime copy()throws java.sql.SQLException{
		CprPrime cp = new CprPrime((CprPrime)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CprPrimeDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CprPrimeDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getCprPlantId(),o.getCprPlantId())) diffs.add("CPR_PLANT_ID");
		if(!isSame(getCprPrimeAcctId(),o.getCprPrimeAcctId())) diffs.add("CPR_PRIME_ACCT_ID");
		if(!isSame(getPrime(),o.getPrime())) diffs.add("PRIME");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(cprPlant != null && cprPlant.isNewInstance())
				cprPlant.insert();
		if(cprPrimeAcct != null && cprPrimeAcct.isNewInstance())
				cprPrimeAcct.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
