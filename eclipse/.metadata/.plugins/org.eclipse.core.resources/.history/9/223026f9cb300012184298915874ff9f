package com.sce.esp.object.model; 

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.dao.ScopeItemDAO;
import com.sce.esp.util.Calculate;
@Entity
@Table(schema="MDI",name="MDISX3_SCOPE_ITEM_V")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ScopeItem o WHERE o.SCOPE_ITEM_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ScopeItem o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ScopeItem o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByScopeType", query="SELECT o FROM ScopeItem o WHERE o.SCOPE_TYPE_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySceProjElemCost", query="SELECT o FROM ScopeItem o WHERE o.COST_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByParent", query="SELECT o FROM ScopeItem o WHERE o.PARENT_SI_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByModelingItem", query="SELECT o FROM ScopeItem o WHERE o.MODELING_CO_TYPE_ID=?1 AND o.MODELING_ITEM_ID=?2"),
	@NamedQuery(name = "findByFacility", query="SELECT o FROM ScopeItem o WHERE o.CO_TYPE_ID=?1 AND o.FACILITY_ID=?2"),
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDISX3_SCOPE_ITEM o WHERE o.SCOPE_ITEM_ID=?"),//AUTO-GENERATED
})
public class ScopeItem extends ScopeItemDAO implements CostObject, Serializable{

	private static final long serialVersionUID = -5093461765871203758L;
	private ModelingObject modelingObject;
	private FacilityObject facilityObject;

	private static int tempId = 0;

	public synchronized static int getTempId(){
		return --tempId;
	}

	public final static String INFO_FIELDS = "TITLE,PO_TYPE,LEAD_TIME,DESCRIPTION";
	public final static String BSS_FIELDS = "COST_ID,MODELING_ITEM_ID,QUANTITY,DELETE_TS";

	public ScopeItem() throws SQLException {
		super((int)Math.round(Math.random()*Integer.MAX_VALUE));
		setTitle("Auto Generated");
		setUseDefaultScope(true);
	}
	public ScopeItem(int scopeItemId) throws SQLException {
		super(scopeItemId);
		setTitle("Auto Generated");
		setUseDefaultScope(true);
	}

	// Copied pattern to solve SceProjElemCost copy issue - HiK	
	public ScopeItem(ScopeItem scopeItem){
		super(scopeItem);
		try {
			setScopeItemId(getTempId());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	public ModelingObject getModelingObject(int planyear) throws SQLException {
		if(modelingObject != null && modelingObject.isNewInstance())
			return modelingObject;
		if(getScopeType()!=null && getScopeType().getModelingCoTypeId() != 0 && getScopeType().getModelingCoTypeId() < 13)
			return CoType.getInstance(getScopeType().getModelingCoTypeId()).getModelingObject(planyear,getSimId(),getModelingItemId());
		return null;
	}
	public Calendar getModelDate() throws SQLException {
		if(getSceProjElemCost()==null)
			return null;
		return getSceProjElemCost().getModelDate();
	}

	public String getScope() throws SQLException{
		String desc = getDescription();
		if(desc==null || desc.length()==0)
			desc = getScopeType().getDescription();
		return desc;
	}
	public CostStage getCostStage() throws SQLException {
		return getSceProjElemCost().getCostStage();
	}
	public void setCostStage(CostStage stage) throws SQLException {
	}

	/**
	 * Always returns false, no more unit costs for Scope Items
	 * @return boolean FALSE (always)
	 * @throws SQLException
	 */
	public boolean isUseUnitCost() throws SQLException {
		return isUseCalc();
	}
	public double getFercFunding() throws SQLException {
		return 0;
	}
	public void setCost(int year, int cost) throws SQLException {
		getScopeItemCostYear(year).setCost(cost);
	}
	public void setFercFunding(double ferc) throws SQLException {

	}
	public void setScope(String description) throws SQLException {
		setDescription(description);
	}
	public ScopeItemCostYear getScopeItemCostYear(int year) throws SQLException {
		return ScopeItemCostYear.getInstance(getScopeItemId(), year);
	}
	public double getVoltageKv() throws SQLException{
		FacilityObject fo = getFacilityObject(Department.getActivePlanYear());
		if(fo != null)
			return isHighSide()?fo.getPrimaryKv():fo.getSecondaryKv();
			return 0;
	}
	public Calendar getUnitCostBasisDate() throws SQLException{
		SceProjElemCost spec = getSceProjElemCost();
		if(spec != null){
			SceProjRev rev = spec.getSceProjRev();
			if(rev != null)
				return rev.getRevTs();
			return spec.getInsertTs();
		}
		return getInsertTs();
	}
	public int getCost(int year)throws SQLException{
		if(isUseUnitCost())
			return getScopeType().getCost(getVoltageKv(), getUnitCostBasisDate(), getSceProjElemCost().getSceProjRev().getProgram(),  getSceProjElemCost().getSceElem(), getCalendarYear(), getQuantity(), year);
		for(ScopeItemCostYear sicy:getScopeItemCostYears())
			if(sicy.getYear() == year)
				return sicy.getCost();
		return 0;
	}
	public int getPriorCost()throws SQLException{
		int prior=0;
		int curYear = Calendar.getInstance().get(Calendar.YEAR);
		if(isUseUnitCost()){
			prior += getScopeType().getPriorCost(getVoltageKv(), getUnitCostBasisDate(), getSceProjElemCost().getSceProjRev().getProgram(), getSceProjElemCost().getSceElem(), getCalendarYear(), getQuantity());
		}else
			for(ScopeItemCostYear pecy:getScopeItemCostYears())
				if(pecy.getYear() < curYear)
					prior += pecy.getCost();
		return prior;
	}

	public int getSubTotalCost()throws SQLException{
		int total=0;
		if(!isEnabledBl())
			return getPriorCost();
		if(isUseUnitCost())
			total += getScopeType().getTotalCost(getVoltageKv(), getUnitCostBasisDate(), getSceProjElemCost().getSceProjRev().getProgram(), getSceProjElemCost().getSceElem(), getCalendarYear(), getQuantity());
		else
			for(ScopeItemCostYear pecy:getScopeItemCostYears())
				total += pecy.getCost();
		return total;
	}

	public int getCalendarYear() throws SQLException{
		return getSceProjElemCost().getCalendarYear();
	}

	public int getPeakYear(int planyear) throws SQLException{
		return getSceProjElemCost().getPeakYear(planyear);
	}

	public int getFiscalYear() throws SQLException{
		return getSceProjElemCost().getFiscalYear();
	}

	/**
	 * Determines if this scope item is Active and the PEC is ActiveBl
	 * @return boolean
	 * @throws SQLException 
	 */
	public boolean isEnabledBl() throws SQLException{
		return isEnabled() && getSceProjElemCost() != null && getSceProjElemCost().isEnabledBl();
	}

	/**
	 * Returns the quantity, handles getModelingObjects
	 * @return The quantity
	 * @throws SQLException 
	 */
	public double getQuantityBl(int planyear) throws SQLException{
		if(getScopeType()!=null){
			if(getModelingObject(planyear)!=null && getScopeType().getModelingCoTypeId() == CoType.SUB_VAR)
				return ((SubVar)getModelingObject(planyear)).getKvar()/1000.0;					
			else if(getModelingObject(planyear)!=null && getScopeType().getModelingCoTypeId() == CoType.TRANSFORMER)
				return ((Xfmr)getModelingObject(planyear)).getNameplate();
			//			else if(getScopeType().getModelingCoTypeId() == CoType.CIRCUIT)
			//			return 0;

			else if(getScopeType().getModelingCoTypeId() == CoType.PLL_BANK
					|| getScopeType().getModelingCoTypeId() == CoType.ELL_BANK
					|| getScopeType().getModelingCoTypeId() == CoType.PLL_SUB
					|| getScopeType().getModelingCoTypeId() == CoType.ELL_SUB
					|| getScopeType().getModelingCoTypeId() == CoType.N1_BBANK){
				return Calculate.round(getQuantity(), 2);
			}
		}
		return getQuantity();
	}
	public void setScopeTypeId(int scopeTypeId) throws SQLException{
		super.setScopeTypeId(scopeTypeId);
		ScopeType st = ScopeType.getInstance(scopeTypeId);
		if(st != null){
			if(st.getDefaultQuantity() != 0)
				setQuantity(st.getDefaultQuantity());
			setHighSide(st.getInstallationOption()==ScopeType.HIGH_SIDE_ONLY);
		}
	}
	public String toString(){
		return getTitle();
	}
	public FacilityObject getFacilityObject(int planyear) throws SQLException{
		if(facilityObject != null && facilityObject.isNewInstance())
			return facilityObject;
		if(getCoTypeId() != 0)
			return CoType.getInstance(getCoTypeId()).getFacilityObject(planyear,getSimId(),getFacilityId());
		if(getSceProjElemCost() == null)
			return null;
		return getSceProjElemCost().getFacilityObject(planyear);
	}

	public void setFacilityObject(FacilityObject fo) throws SQLException {
		if(fo==null){
			setCoTypeId(0);
			setFacilityId(0);
		}else{
			setCoTypeId(fo.getCoTypeId());
			setFacilityId(fo.getId());
			if(fo.isNewInstance())
				facilityObject = fo;
		}
	}
	public boolean isInService() throws SQLException {
		return getSceProjElemCost().isInService() && isEnabledBl();
	}
	public SortedSet<ScopeItem> getHeadSet(int planyear) throws SQLException{
		return new TreeSet<ScopeItem>(((Bank)getFacilityObject(planyear)).getScopeItems2()).headSet(this);
	}
	public ScopeItem getPriorScopeItem(int planyear, int simId) throws SQLException{
		if(getFacilityObject(planyear) instanceof Bank){
			SortedSet<ScopeItem> headSet = getHeadSet(planyear);
			if(headSet.size() > 0){
				if(headSet.last().isActiveBl(planyear,simId))
					return headSet.last();
				return headSet.last().getPriorScopeItem(planyear,simId);
			}
		}
		return null;
	}

	public double getSubPLLFactorPre(int planyear, int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getSubPLLFactorPost(planyear,simId);
		return 0;
	}
	public double getSubPLLFactorPost(int planyear,int simId) throws SQLException {
		double pll = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.PLL_SUB)
			pll = getQuantity()/100.0;
		if(pll != -1)
			return pll;
		return getSubPLLFactorPre(planyear,simId);
	}

	public double getSubELLFactorPre(int planyear,int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getSubELLFactorPost(planyear,simId);
		return 0;
	}
	public double getSubELLFactorPost(int planyear,int simId) throws SQLException {
		double ell = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.ELL_SUB)
			ell = getQuantity()/100.0;
		if(ell != -1)
			return ell;
		return getSubELLFactorPre(planyear,simId);
	}

	public double getBBankN1FactorPre(int planyear,int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getBBankN1FactorPost(planyear,simId);
		return 0;
	}
	public double getBBankN1FactorPost(int planyear,int simId) throws SQLException {
		double ell = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.N1_BBANK)
			ell = getQuantity()/100.0;
		if(ell != -1)
			return ell;
		return getBBankN1FactorPre(planyear,simId);
	}

	public double getBankPLLFactorPre(int planyear,int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getBankPLLFactorPost(planyear,simId);
		return 0;
	}
	public double getBankPLLFactorPost(int planyear,int simId) throws SQLException {
		double pll = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.PLL_BANK)
			pll = getQuantity()/100.0;
		if(pll != -1)
			return pll;
		return getBankPLLFactorPre(planyear,simId);
	}


	public double getBankELLFactorPre(int planyear,int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getBankELLFactorPost(planyear,simId);
		return 0;
	}
	public double getBankELLFactorPost(int planyear,int simId) throws SQLException {
		double ell = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.ELL_BANK)
			ell = getQuantity()/100.0;
		if(ell != -1)
			return ell;
		return getBankELLFactorPre(planyear,simId);
	}

	//=======================================================
	// Transformer Functions
	//=======================================================

	/*
	 * 
	 */
	public TreeSet<Xfmr> getXfmrsPre(int planyear,int simId)throws SQLException{
		return getXfmrsPre(planyear,simId,null);
	}
	public TreeSet<Xfmr> getXfmrsPre(int planyear,int simId,Collection<SceProjElemCost> without)throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getXfmrsPost(planyear,simId,without);
		return new TreeSet<Xfmr>();
	}
	public TreeSet<Xfmr> getXfmrsAdd(int planyear)throws SQLException{
		TreeSet<Xfmr> xfmrs = new TreeSet<Xfmr>();
		if(getQuantity() > 0 && getModelingObject(planyear) instanceof Xfmr)
			xfmrs.add((Xfmr)getModelingObject(planyear));
		return xfmrs;
	}
	public TreeSet<Xfmr> getXfmrsRem(int planyear)throws SQLException{
		TreeSet<Xfmr> xmfrs = new TreeSet<Xfmr>();
		if(getQuantity() < 0 && getModelingObject(planyear) instanceof Xfmr)
			xmfrs.add((Xfmr)getModelingObject(planyear));
		return xmfrs;
	}
	public TreeSet<Xfmr> getXfmrsPost(int planyear,int simId) throws SQLException{
		return getXfmrsPost(planyear,simId,null);
	}
	public TreeSet<Xfmr> getXfmrsPost(int planyear,int simId,Collection<SceProjElemCost> without)throws SQLException{
		TreeSet<Xfmr> xfmrs = getXfmrsPre(planyear,simId,without);
		if(without == null || !without.contains(getSceProjElemCost())){
			xfmrs.addAll(getXfmrsAdd(planyear));
			xfmrs.removeAll(getXfmrsRem(planyear));
		}
		return xfmrs;
	}

	public double getNameplatePre(int planyear, int simId)throws SQLException{
		double capAdd = 0;
		for(Xfmr xfmr:getXfmrsPre(planyear,simId))
			capAdd += xfmr.getNameplate();
		return capAdd;
	}
	public double getNameplateAdd(int planyear) throws SQLException{
		double capAdd = 0;
		for(Xfmr xfmr:getXfmrsAdd(planyear))
			capAdd += xfmr.getNameplate();
		return capAdd;
	}
	public double getNameplateRem(int planyear) throws SQLException{
		double capAdd = 0;
		for(Xfmr xfmr:getXfmrsRem(planyear))
			capAdd += xfmr.getNameplate();
		return capAdd;
	}
	public double getNameplatePost(int planyear, int simId)throws SQLException{
		double capAdd = 0;
		for(Xfmr xfmr:getXfmrsPost(planyear,simId))
			capAdd += xfmr.getNameplate();
		return capAdd;
	}


	public double getBankNameplatePre(int planyear,int simId)throws SQLException{
		return getNameplatePre(planyear,simId);
	}
	public double getBankNameplateAdd(int planyear) throws SQLException{
		return getNameplateAdd(planyear);
	}
	public double getBankNameplateRem(int planyear) throws SQLException{
		return getNameplateRem(planyear);
	}
	public double getBankNameplatePost(int planyear, int simId)throws SQLException{
		return getNameplatePost(planyear,simId);
	}
	public double getBankNameplateDelta(int planyear)throws SQLException{
		return getBankNameplateAdd(planyear) - getBankNameplateRem(planyear);
	}
	public double getNameplateDelta(int planyear)throws SQLException{
		return getNameplateAdd(planyear) - getNameplateRem(planyear);
	}

	public boolean isInService(Calendar asOf) throws SQLException {
		if(getModelDate() == null)
			return false;
		return getModelDate().getTimeInMillis() < asOf.getTimeInMillis()+Calculate.ONE_DAY;
	}

	/**
	 * Whats this mean?
	 * @param planyear
	 * @param simId
	 * @return
	 * @throws SQLException
	 */
	public boolean isActiveBl(int planyear, int simId) throws SQLException{
		return isEnabledBl() && getSceProjElemCost() != null && getSceProjElemCost().isActiveBl(planyear,simId);
	}
	public void setModelingObject(ModelingObject mo) throws SQLException {
		if(mo == null)
			setModelingItemId(0);
		else{
			setModelingItemId(mo.getId());
			if(getQuantity() == -1)
				setFacilityObject(mo.getFacilityInstalledAt(getSimId()));
			if(mo.isNewInstance())
				modelingObject = mo;
		}
	}
	public int compareTo(Object o){
		if(o instanceof ScopeItem){
			ScopeItem si = (ScopeItem)o;
			try{
				if(getModelDate() != null && si.getModelDate() != null){
					if(getModelDate().getTimeInMillis() < si.getModelDate().getTimeInMillis())
						return -1;
					if(getModelDate().getTimeInMillis() > si.getModelDate().getTimeInMillis())
						return 1;
				}
			}
			catch(Exception e){
				e.printStackTrace();
			}
		}
		return super.compareTo(o);
	}
	public int getSimId()throws SQLException{
		if(getSceProjElemCost() != null)
			return getSceProjElemCost().getSimId();
		return 0;
	}
	public void insert() throws SQLException{
		if(getSceProjElemCost().getCostStage().getCostType()!=CostStage.Type.Proposed.ordinal())
			throw new SQLException("Scope Items can only be added to proposed costs");
		if(facilityObject != null){
			if(facilityObject.isNewInstance())
				facilityObject.insert();
			setFacilityId(facilityObject.getId());
			facilityObject = null;
		}
		if(modelingObject != null){
			if(modelingObject.isNewInstance()){
				if(modelingObject instanceof Xfmr)
					((Xfmr)modelingObject).setBankId(getFacilityId());
				modelingObject.insert();
			}
			setModelingItemId(modelingObject.getId());
			modelingObject = null;
		}
		setScopeItemId(0); //Get rid of our temp ScopeItemId
		super.insert();
	}
	public String getStageTitle() throws SQLException {
		return getTitle();
	}

	private String siSummaryKey;

	/**
	 * Used for distinguishing summary type scope items
	 * 
	 * @param string hash entry derived from: temp.getScopeType().getHashKey()+pec.getCoType().getHashKey()+pec.getFacilityId()
	 */
	public void setScopeSummaryIdentifier(String siSummaryKey) {
		this.siSummaryKey=siSummaryKey;
	}
	/**
	 * Returns a key derived from the following methods:
	 * temp.getScopeType().getHashKey()+pec.getCoType().getHashKey()+pec.getFacilityId()
	 * @return scope item summary key
	 */
	public String  getScopeSummaryIdentifier() {
		return siSummaryKey;
	}

	public boolean isHighSide(){
		try {
			return super.isHighSide() || getScopeType()!=null && getScopeType().getInstallationOption()==ScopeType.HIGH_SIDE_ONLY;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return super.isHighSide();
	}

	public boolean isEditable(int simId, String field) throws SQLException{
		if(isNewInstance())return true;
		if(getSceProjElemCost()!=null && getSceProjElemCost().getSceProjRev() != null){
			if(INFO_FIELDS.contains(field))return getSceProjElemCost().getSceProjRev().isInfoEditable(simId);
			if(BSS_FIELDS.contains(field))return getSceProjElemCost().getSceProjRev().isBSSEditable(simId);
		}
		else
			return true;
		throw new SQLException("Unknown Field: "+field);
	}
	public String getScopeDesc() throws SQLException{
		if(isUseDefaultScope() || getDescription()==null || getDescription().length()==0)
			return getScopeType().getDescription();
		return getDescription();
	}
	public TreeSet<Integer> getYearsWithCost() throws SQLException {
		TreeSet<Integer> years = new TreeSet<Integer>();
		int year = getSceProjElemCost().getCalendarYear();
		if(isUseUnitCost()){
			ScopeUnitCost suc = getScopeType().getScopeUnitCost(((Sub)getSceProjElemCost().getFacilityObject(getSceProjElemCost().getSceProjRev().getPlanYear())).getSecondaryKv(), getSceProjElemCost().getSceProjRev().getRevTs());
			if(suc != null)
				for(ScopeUnitCostYear sucy : suc.getScopeUnitCostYears())
					years.add(year+sucy.getYearOffset());
		}
		else
			for(ScopeItemCostYear sicy : getScopeItemCostYears())
				years.add(sicy.getYear());
		return years;
	}
	public int getModelingCoTypeId() throws SQLException{
		return getScopeType().getModelingCoTypeId();
	}
	public void setModelingCoTypeId(int mco) throws SQLException{
	}
	public void setProperty(String prop, Object newValue, Object oldValue) throws SQLException{
		super.setProperty(prop, newValue, oldValue);
		SceProjElemCost spec = SceProjElemCost.getInstance(getCostId(), false);
		if(spec!=null)
			spec.setProperty(null, null, null);
	}
	public double getContFactor() throws SQLException{
		SceProjElemCost spec = getSceProjElemCost();
		if(spec!=null)
			return spec.getContFactor();
		return 0;
	}
	public int getContAmount() throws SQLException{
		return (int)Math.round((getSubTotalCost()-getPriorCost())*getContFactor());
	}
	public int getTotalCost() throws SQLException{
		return getSubTotalCost()+getContAmount();
	}
	public double getKV() throws SQLException{
		SceProjElemCost spec = getSceProjElemCost();
		if(spec!=null){
			FacilityObject fo = getFacilityObject(spec.getPlanyear());
			if(fo!=null)
				return (isHighSide())?fo.getPrimaryKv():fo.getSecondaryKv();
		}
		return 0;
	}
	
	public void addDefaultDLUs()throws java.sql.SQLException{
		for(DefaultPart dp:DefaultPart.getCollection(new String[]{"PARENT_ST_ID","ACTION_ID","DELETED_TS"}, getScopeType().getScopeTypeId(),getActionId(),null)){
			if(dp.getKv()==0 || dp.getKv()==getKV()){
				ScopeType st = dp.getScopeType();
				ScopeItem si = new ScopeItem();
				si.setScopeType(st);
				si.setTitle(st.getTitle());
				si.setActionId(getActionId());
				si.setTerrainId(getTerrainId());
				si.setPopulationId(getPopulationId());
				si.setQuantity(getQuantity()*dp.getPerUnitQty());
				addScopeItem(si);
				si.addDefaultDLUs();
			}
		}
	}

	@Override
	public SceElem getSceElem() throws SQLException {
		return getSceProjElemCost().getSceElem();
	}

	public SceProjElemCost getSceProjElemCost()throws java.sql.SQLException{
		SceProjElemCost spec = super.getSceProjElemCost();
		if(spec!=null)
			return spec;
		ScopeItem parent = getParent();
		if(parent!=null)
			return parent.getSceProjElemCost();
		return null;
	}
	
	public DescriptiveUnit getDescriptiveUnit(DescriptiveType dt) throws SQLException{
		DescriptiveUnit du = (DescriptiveUnit) getCachedValue("getDescriptiveUnit", dt);
		if(du==null){
			for(DescriptiveUnit du2:getDescriptiveUnits()){
				if(du2.getDescTypeId()==dt.getId()){
					du = du2;
					break;
				}
			}
			if(du==null){
				du = new DescriptiveUnit();
				du.setDescriptiveType(dt);
				du.setScopeItem(this);
			}
			setCachedValue(du,"getDescriptiveUnit", dt);
		}
		return du;
	}

}
