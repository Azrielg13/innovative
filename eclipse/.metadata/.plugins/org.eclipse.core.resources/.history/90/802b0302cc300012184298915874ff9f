package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.TestQuestion;
import com.sce.esp.object.model.TestScript;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class TestQuestionDAO extends MDIObject{
	public static enum KEY_PROPERTY{SCRIPT_ID,QUESTION_ID};
	public static enum PROPERTY{SCRIPT_ID,QUESTION_ID,QUESTION_NAME,QUESTION_DESCRIPTION,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SCRIPTID_LIMIT = 9;
	public final static int QUESTIONID_LIMIT = 4;
	public final static int QUESTIONNAME_LIMIT = 768;
	public final static int QUESTIONDESCRIPTION_LIMIT = 512;
	private int scriptId;
	private int questionId;
	private String questionName;
	private String questionDescription;
	private TestScript testScript;
	public static TestQuestion getInstance(int scriptId, int questionId)throws java.sql.SQLException{
		return getInstance(scriptId, questionId, true);
	}
	public static TestQuestion getInstance(int scriptId, int questionId, boolean fetch)throws java.sql.SQLException{
		if(isNull(scriptId, questionId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scriptId, questionId);
		Cache cache = em.getEntityManagerFactory().getCache();
		TestQuestion o = null;
		if(cache != null && cache.contains(TestQuestion.class, pk))
			o = em.find(TestQuestion.class, pk);
		if(o==null && getAICache().contains(TestQuestion.class, pk))
			o = getAICache().find(TestQuestion.class, pk);
		if(o==null && fetch)
			o = em.find(TestQuestion.class, pk);
		if(o==null && fetch && TestQuestion.class.getAnnotation(AutoInsertable.class) != null){
			o = new TestQuestion(scriptId, questionId);
			getAICache().cache(TestQuestion.class, o);
		}
		return o;
	}
	public static Collection<TestQuestion> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<TestQuestion> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<TestQuestion> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM TestQuestion o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<TestQuestion> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TestQuestion> tq = em.createQuery(jpql,TestQuestion.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<TestQuestion> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TestQuestion> tq = em.createNamedQuery(name,TestQuestion.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TestQuestionDAO(){}
	public TestQuestionDAO(int scriptId, int questionId){
		this.scriptId=scriptId;
		this.questionId=questionId;
	}
	public TestQuestionDAO(TestQuestionDAO orig){
		super(orig);
		this.scriptId=orig.getScriptId();
		this.questionId=orig.getQuestionId();
		copyFrom(orig);
	}
	public void copyFrom(TestQuestionDAO orig){
		this.questionName=orig.getQuestionName();
		this.questionDescription=orig.getQuestionDescription();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scriptId, questionId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="SCRIPT_ID",nullable=false,length=9)
	public int getScriptId(){
		return scriptId;
	}
	public void setScriptId(int scriptId) throws java.sql.SQLException{
		if(isSame(scriptId, getScriptId()))return;
		int oldValue = getScriptId();
		this.scriptId=scriptId;
		setProperty("SCRIPT_ID", scriptId, oldValue);
		testScript=null;
	}
	@Id
	@Column(name="QUESTION_ID",nullable=false,length=4)
	public int getQuestionId(){
		return questionId;
	}
	public void setQuestionId(int questionId) throws java.sql.SQLException{
		if(isSame(questionId, getQuestionId()))return;
		int oldValue = getQuestionId();
		this.questionId=questionId;
		setProperty("QUESTION_ID", questionId, oldValue);
	}
	@Column(name="QUESTION_NAME",nullable=true,length=768)
	public String getQuestionName(){
		return questionName;
	}
	public void setQuestionName(String questionName) throws java.sql.SQLException{
		if(isSame(questionName, getQuestionName()))return;
		String oldValue = getQuestionName();
		this.questionName=questionName;
		setProperty("QUESTION_NAME", questionName, oldValue);
	}
	@Column(name="QUESTION_DESCRIPTION",nullable=true,length=512)
	public String getQuestionDescription(){
		return questionDescription;
	}
	public void setQuestionDescription(String questionDescription) throws java.sql.SQLException{
		if(isSame(questionDescription, getQuestionDescription()))return;
		String oldValue = getQuestionDescription();
		this.questionDescription=questionDescription;
		setProperty("QUESTION_DESCRIPTION", questionDescription, oldValue);
	}
	public TestScript getTestScript()throws java.sql.SQLException{
		if(testScript==null)
			testScript=TestScript.getInstance(getScriptId());
		return testScript;
	}
	public void setTestScript(TestScript testScript)throws java.sql.SQLException{
		setScriptId(testScript==null?0:testScript.getScriptId());
		this.testScript=testScript;
	}
	public TestQuestion copy()throws java.sql.SQLException{
		TestQuestion cp = new TestQuestion((TestQuestion)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TestQuestionDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(TestQuestionDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScriptId(),o.getScriptId())) diffs.add("SCRIPT_ID");
		if(!isSame(getQuestionId(),o.getQuestionId())) diffs.add("QUESTION_ID");
		if(!isSame(getQuestionName(),o.getQuestionName())) diffs.add("QUESTION_NAME");
		if(!isSame(getQuestionDescription(),o.getQuestionDescription())) diffs.add("QUESTION_DESCRIPTION");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
