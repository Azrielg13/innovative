/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableModel;

import org.jfree.ui.ExtensionFileFilter;

import com.jidesoft.grid.AutoFilterTableHeader;
import com.jidesoft.grid.FilterableTreeTableModel;
import com.jidesoft.grid.HierarchicalTableModel;
import com.jidesoft.grid.QuickTableFilterField;
import com.jidesoft.grid.TableModelWrapperUtils;
import com.jidesoft.grid.TableUtils;
import com.jidesoft.hssf.HssfTableScrollPaneUtils;
import com.jidesoft.swing.JideBorderLayout;
import com.jidesoft.swing.JideButton;
import com.jidesoft.swing.JideScrollPane;
import com.sce.esp.dialog.ESPDialog;
import com.sce.esp.util.IconsFactory;
import com.sce.esp.util.StringNoEdit;
import com.sce.esp.util.ui.HelpBrowser;

public class ESPHierarchicalTablePanel extends JPanel implements ActionListener {


	/** The cmd expand all. */
	private JideButton cmdExpandAll;

	/** The cmd collapse all. */
	private JideButton cmdCollapseAll;

	/** The EXPAN d_ NONE. */
	public static int EXPAND_NONE = 0;

	/** The EXPAN d_ FIRST. */
	public static int EXPAND_FIRST = 1;

	/** The EXPAN d_ ALL. */
	public static int EXPAND_ALL = 2;

	/** The EXPAND. */
	private static ImageIcon EXPAND = (IconsFactory
			.getImageIcon(IconsFactory.Tree.TABLE_EXPAND));

	/** The COLLAPSE. */
	private static ImageIcon COLLAPSE = (IconsFactory
			.getImageIcon(IconsFactory.Tree.TABLE_COLLAPSE));

	/** The print button. */
	public JideButton cmdHelp, printButton, clearFilterButton;

	/** The top right panel. */
	private JPanel bottomPanel, topLeftPanel, topMidPanel, topRightPanel;

	/** The top panel. */
	protected JPanel topPanel;

	/** The title. */
	private String title;

	public QuickTableFilterField filterField;

	private AutoFilterTableHeader mainFilterHeader;

	private ESPHierarchicalTable table;

	private String wikiPage;

	/** The HELP. */
	private static ImageIcon HELP = (IconsFactory.getScaledImageIcon(IconsFactory.Frame.HELP, 16));

	/**
	 * 
	 * @param _title
	 *            wiki title
	 * @param _isHyperlink
	 *            true if tree table
	 * @param userLevel
	 *            database role
	 */
	public ESPHierarchicalTablePanel(String wikiPage, String _title,
			boolean _isHyperlink, int userLevel) {
		try {

			this.wikiPage = wikiPage;

			if (title == "")
				title = "MDI.Tasks";
			else
				title = _title;

			setLayout(new BorderLayout());

			table = new ESPHierarchicalTable(userLevel);

			mainFilterHeader = new AutoFilterTableHeader(table);

			mainFilterHeader.setAutoFilterEnabled(true);
			mainFilterHeader.setUseNativeHeaderRenderer(true);
			mainFilterHeader.setShowFilterName(false);
			mainFilterHeader.setShowFilterIcon(false);
			
			table.setTableHeader(mainFilterHeader);
			table.setClearSelectionOnTableDataChanges(false);

			ESPTableColumnChooser.install(table);
			add(new JideScrollPane(table), BorderLayout.CENTER);

			cmdExpandAll = new JideButton(EXPAND);
			cmdExpandAll.setToolTipText("Expand All");
			cmdExpandAll.setFocusPainted(false);
			cmdExpandAll.addActionListener(this);
			cmdCollapseAll = new JideButton(COLLAPSE);
			cmdCollapseAll.setToolTipText("Collapse All");
			cmdCollapseAll.setFocusPainted(false);
			cmdCollapseAll.addActionListener(this);

			cmdHelp = new JideButton(HELP);
			cmdHelp.setToolTipText("Help");
			cmdHelp.setFocusPainted(false);
			cmdHelp.addActionListener(this);

			/* Print button creates JFreeReport instance */
			printButton = new JideButton("");
			printButton.setName("print button");
			printButton.setIcon(IconsFactory.getScaledImageIcon( IconsFactory.Form.PRINT, 16));
			printButton.setToolTipText("Print Table");
			printButton.setFocusPainted(false);
			printButton.addActionListener(this);

			clearFilterButton = new JideButton("");
			clearFilterButton.setName("Clear Filter");
			clearFilterButton.setIcon(IconsFactory.getScaledImageIcon( IconsFactory.Frame.ERASER, 16));
			clearFilterButton.setToolTipText("Clear Filters");
			clearFilterButton.setFocusPainted(false);
			clearFilterButton.addActionListener(this);

			filterField = new QuickTableFilterField();
			filterField.setPreferredSize(new Dimension(100, 20));

			/* Top panel container */
			topPanel = createTopPanel();
			topPanel.setLayout(new JideBorderLayout());

			/* First add the print and help button */
			topLeftPanel = new JPanel(new FlowLayout());
			topLeftPanel.setOpaque(false);

			topLeftPanel.add(cmdExpandAll);
			topLeftPanel.add(cmdCollapseAll);
			topLeftPanel.add(clearFilterButton);
			topLeftPanel.add(printButton);
			topLeftPanel.add(cmdHelp);
			topLeftPanel.add(filterField);

			/* Create an empty centered panel */
			topMidPanel = new JPanel(new FlowLayout());
			topMidPanel.setOpaque(false);

			/* Create an empty right aligned panel */
			topRightPanel = new JPanel(new FlowLayout());
			topRightPanel.setOpaque(false);

			/* Add the section panel to the top panel */
			topPanel.add(topLeftPanel, JideBorderLayout.WEST);
			topPanel.add(topMidPanel, JideBorderLayout.CENTER);
			topPanel.add(topRightPanel, JideBorderLayout.EAST);

			/* Create the bottom panel */
			// PLEASE NOTE: if you make this a border layout, you cannot add
			// multiple components to it RAR
			bottomPanel = new JPanel(new FlowLayout());

			/* Add the top and bottom panels */
			add(topPanel, JideBorderLayout.NORTH);
			add(bottomPanel, JideBorderLayout.SOUTH);

		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public JPanel createTopPanel() {
		return new ColorPanel() {
			public Color getColor() {
				return getPanelColor();
			}
		};
	}

	public Color getPanelColor() {
		return null;// BME ESP not working
	}

	public void setModel(TableModel model) {
		table.setModel(model);
		setQuickFilterModel();
		autoResize();
	}

	public TableModel getActualTableModel() {
		return TableModelWrapperUtils.getActualTableModel(table.getModel());
	}

	/**
	 * Gets the model.
	 * 
	 * @return the <code>SortableTableModel</code>.
	 */
	public HierarchicalTableModel getHierarchicalTableModel() {
		return (HierarchicalTableModel) TableModelWrapperUtils
				.getActualTableModel(table.getModel(),
						HierarchicalTableModel.class);
	}

	/**
	 * Auto resize.
	 */
	public void autoResize() {
		if (table != null) {
			for (int i = 0; i < table.getColumnCount(); i++) {
				if (table.getColumnClass(i) == String.class
						|| table.getColumnClass(i) == StringNoEdit.class) {
					table.getColumn(table.getColumnName(i)).setPreferredWidth(
							200);
				} else {
					TableUtils.autoResizeColumn(table, i);
				}
			}
		}
	}

	public void setQuickFilterModel() {

		filterField.setTableModel(getHierarchicalTable().getModel());

		int colCount = getHierarchicalTable().getColumnCount();

		int[] searchCols = new int[colCount];
		for (int i = 0; i < colCount; i++)
			searchCols[i] = i;
		filterField.setColumnIndices(searchCols);

		getHierarchicalTable().setModel(new FilterableTreeTableModel(filterField.getDisplayTableModel()));
	}

	/**
	 * Gets the table scroll pane.
	 * 
	 * @return the <code>TableScrollPane</code>.
	 */
	public ESPHierarchicalTable getHierarchicalTable() {
		return table;
	}

	/**
	 * Gets the top panel.
	 * 
	 * @return the <code>JPanel</code>.
	 */
	public JPanel getTopPanel() {
		return topPanel;
	}

	/**
	 * Gets the bottom panel.
	 * 
	 * @return the <code>JPanel</code>.
	 */
	public JPanel getBottomPanel() {
		return bottomPanel;
	}

	public void setBottomPanelVisible(boolean isVis) {
		bottomPanel.setVisible(isVis);
	}

	public void setTopPanelVisible(boolean isVis) {
		topPanel.setVisible(isVis);
	}

	/**
	 * Gets the top mid panel.
	 * 
	 * @return the <code>JPanel</code>.
	 */
	public JPanel getTopMidPanel() {
		return topMidPanel;
	}

	/**
	 * Gets the top right panel.
	 * 
	 * @return the <code>JPanel</code>.
	 */
	public JPanel getTopRightPanel() {
		return topRightPanel;
	}

	/**
	 * Gets the top left panel.
	 * 
	 * @return the <code>JPanel</code>.
	 */
	public JPanel getTopLeftPanel() {
		return topLeftPanel;
	}

	public String getWiki() {
		return wikiPage;
	}

	/**
	 * Returns the selected row for <code>MouseListener<code>
	 * assignments.
	 * 
	 * @return the selected row <code>Integer<code>
	 */
	public int getSelectedRow() {
		int selectedRow = getHierarchicalTable().getSelectedRow();// .getRowHeaderTable().getSelectedRow();
		TableModel tm0 = getHierarchicalTable().getModel();
		int act0 = TableModelWrapperUtils.getActualRowAt(tm0, selectedRow);
		return act0;
	}

	private String _lastDirectory = ".";
	
	public void actionPerformed(ActionEvent ae) {
		if (ae.getSource() == cmdHelp) {
			showHelp();
		}// JFreeReport instantiation
		else if (ae.getSource() == printButton) {
			//showPrintResults();
			JFileChooser chooser = new JFileChooser() {
				@Override
				protected JDialog createDialog(Component parent) throws HeadlessException {
					JDialog dialog = super.createDialog(parent);
					dialog.setTitle("Export the content to an Excel file");
					return dialog;
				}
			};
			FileFilter filter1 = new ExtensionFileFilter("xls", "xls");
			chooser.setFileFilter(filter1);
			
			chooser.setCurrentDirectory(new File(_lastDirectory));
			int result = chooser.showDialog(null, "Export");
			if (result == JFileChooser.APPROVE_OPTION) {
				_lastDirectory = chooser.getCurrentDirectory().getAbsolutePath();
				try {
					File f = chooser.getSelectedFile();
					HssfTableScrollPaneUtils.export(table.getTableScrollPane(), f.getAbsolutePath()+".xls", wikiPage, false);
					ESPDialog.showMessageDialog(this, "Export Complete!!!");
				}
				catch (IOException ex) {
					ex.printStackTrace();
				}
			}
//			if (getHierarchicalTable().getRowCount() > 0) {
//				new ModelFinder(this).execute(); ////													
//			} else
//				ESPDialog.showMessageDialog(null,
//						"There are no rows to print.", "Print Error",
//						JOptionPane.ERROR_MESSAGE);
		} else if (ae.getSource() == clearFilterButton) {

			// Must be in this order BJS

			mainFilterHeader.clearFilters();
			mainFilterHeader.getFilterableTableModel().refresh();
			filterField.setSearchingText("");

			this.repaint();

		} else if (ae.getSource() == cmdExpandAll) {
			table.expandAllRows();
			autoResize();

		} else if (ae.getSource() == cmdCollapseAll)
			table.collapseAllRows();
	}

	public void showHelp() {
		try {
			HelpBrowser.getInstance(wikiPage);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
