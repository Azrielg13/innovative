package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CprPlant;
import com.sce.esp.object.model.PartType;
import com.sce.esp.object.model.PartTypeCpr;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PartTypeCprDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,PART_TYPE_ID,CPR_PLANT_ID};
	public final static int ID_LIMIT = 9;
	public final static int PARTTYPEID_LIMIT = 9;
	public final static int CPRPLANTID_LIMIT = 9;
	private int id;
	private int partTypeId;
	private int cprPlantId;
	private PartType partType;
	private CprPlant cprPlant;
	public static PartTypeCpr getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static PartTypeCpr getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		PartTypeCpr o = null;
		if(cache != null && cache.contains(PartTypeCpr.class, pk))
			o = em.find(PartTypeCpr.class, pk);
		if(o==null && getAICache().contains(PartTypeCpr.class, pk))
			o = getAICache().find(PartTypeCpr.class, pk);
		if(o==null && fetch)
			o = em.find(PartTypeCpr.class, pk);
		if(o==null && fetch && PartTypeCpr.class.getAnnotation(AutoInsertable.class) != null){
			o = new PartTypeCpr(id);
			getAICache().cache(PartTypeCpr.class, o);
		}
		return o;
	}
	public static Collection<PartTypeCpr> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PartTypeCpr> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PartTypeCpr> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PartTypeCpr o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PartTypeCpr> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PartTypeCpr> tq = em.createQuery(jpql,PartTypeCpr.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PartTypeCpr> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PartTypeCpr> tq = em.createNamedQuery(name,PartTypeCpr.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PartTypeCprDAO(){}
	public PartTypeCprDAO(int id){
		this.id=id;
	}
	public PartTypeCprDAO(PartTypeCprDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(PartTypeCprDAO orig){
		this.partTypeId=orig.getPartTypeId();
		this.cprPlantId=orig.getCprPlantId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDISX7_SEQ",sequenceName="MDISX7_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="PART_TYPE_ID",nullable=false,length=9)
	public int getPartTypeId(){
		return partTypeId;
	}
	public void setPartTypeId(int partTypeId) throws java.sql.SQLException{
		if(isSame(partTypeId, getPartTypeId()))return;
		int oldValue = getPartTypeId();
		this.partTypeId=partTypeId;
		setProperty("PART_TYPE_ID", partTypeId, oldValue);
		partType=null;
	}
	@Column(name="CPR_PLANT_ID",nullable=false,length=9)
	public int getCprPlantId(){
		return cprPlantId;
	}
	public void setCprPlantId(int cprPlantId) throws java.sql.SQLException{
		if(isSame(cprPlantId, getCprPlantId()))return;
		int oldValue = getCprPlantId();
		this.cprPlantId=cprPlantId;
		setProperty("CPR_PLANT_ID", cprPlantId, oldValue);
		cprPlant=null;
	}
	public PartType getPartType()throws java.sql.SQLException{
		if(partType==null)
			partType=PartType.getInstance(getPartTypeId());
		return partType;
	}
	public void setPartType(PartType partType)throws java.sql.SQLException{
		setPartTypeId(partType==null?0:partType.getId());
		this.partType=partType;
	}
	public CprPlant getCprPlant()throws java.sql.SQLException{
		if(cprPlant==null)
			cprPlant=CprPlant.getInstance(getCprPlantId());
		return cprPlant;
	}
	public void setCprPlant(CprPlant cprPlant)throws java.sql.SQLException{
		setCprPlantId(cprPlant==null?0:cprPlant.getId());
		this.cprPlant=cprPlant;
	}
	public PartTypeCpr copy()throws java.sql.SQLException{
		PartTypeCpr cp = new PartTypeCpr((PartTypeCpr)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PartTypeCprDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PartTypeCprDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getPartTypeId(),o.getPartTypeId())) diffs.add("PART_TYPE_ID");
		if(!isSame(getCprPlantId(),o.getCprPlantId())) diffs.add("CPR_PLANT_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(partType != null && partType.isNewInstance())
				partType.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
