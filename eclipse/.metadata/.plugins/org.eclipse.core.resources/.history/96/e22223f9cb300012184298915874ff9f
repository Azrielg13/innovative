package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Map;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.jep.JEP;
import com.sce.esp.object.dao.CktGrowthDAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI355_CKT_GROWTH")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM CktGrowth o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.CKT_ID=?3 AND o.GROWTH_TYPE_ID=?4 AND o.YEAR=?5"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM CktGrowth o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM CktGrowth o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByCkt", query="SELECT o FROM CktGrowth o WHERE o.PLANYEAR=?1 AND o.CKT_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByGrowthType", query="SELECT o FROM CktGrowth o WHERE o.PLANYEAR=?1 AND o.GROWTH_TYPE_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI355_CKT_GROWTH o WHERE o.PLANYEAR=? AND o.SIM_ID=? AND o.CKT_ID=? AND o.GROWTH_TYPE_ID=? AND o.YEAR=?"),//AUTO-GENERATED
})
public class CktGrowth extends CktGrowthDAO implements Serializable{
	//Roger Stinks
	/**
	 * 
	 */
	private static final long serialVersionUID = 8287523768749598474L;
	
	public static enum GROWTH_CASE{HIGH,BASE,LOW};

	public CktGrowth(){
	}
	public CktGrowth(CktGrowth o) throws SQLException{
		super(o);
	}
	
	public CktGrowth(int planyear, int simId, int cktId, int growthTypeId,int year) throws SQLException {
		super(planyear, simId, cktId, growthTypeId, year);
	}
			
	public double getGrowthHC() throws SQLException{
		return getGrowth(GROWTH_CASE.HIGH);
	}
	public double getGrowthBC() throws SQLException{
		return getGrowth(GROWTH_CASE.BASE);
	}
	public double getGrowthLC() throws SQLException{
		return getGrowth(GROWTH_CASE.LOW);
	}
	
	public void setXVal(int x, double value) throws SQLException{
		switch(x){
			case 1: setX1(value); break;
			case 2: setX2(value); break;
			case 3: setX3(value); break;
			case 4: setX4(value); break;
			case 5: setX5(value); break;
			case 6: setX6(value); break;
			case 7: setX7(value); break;
			case 8: setX8(value); break;
			default: throw new SQLException("Unknown x index: "+x);
		}
	}
	
	public double getXVal(int x)throws SQLException{
		switch(x){
			case 1: return isXUseDefault(x)?getGrowthType().getXDefault(x):getX1();
			case 2: return isXUseDefault(x)?getGrowthType().getXDefault(x):getX2();
			case 3: return isXUseDefault(x)?getGrowthType().getXDefault(x):getX3();
			case 4: return isXUseDefault(x)?getGrowthType().getXDefault(x):getX4();
			case 5: return isXUseDefault(x)?getGrowthType().getXDefault(x):getX5();
			case 6: return isXUseDefault(x)?getGrowthType().getXDefault(x):getX6();
			case 7: return isXUseDefault(x)?getGrowthType().getXDefault(x):getX7();
			case 8: return isXUseDefault(x)?getGrowthType().getXDefault(x):getX8();
		}
		throw new SQLException("Unknown x index: "+x);
	}
	public boolean isXUseDefault(int x) throws SQLException{
		return (!getGrowthType().isXEditable(x) && getGrowthType().getXDefault(x)!=0) || (getUseDefaults() & (int)Math.pow(2, x-1)) > 0;
	}
	
	private double getGrowth(GROWTH_CASE gc) throws SQLException{
		Double growth = (Double)getCachedValue("getGrowth",gc);
		if(growth==null){
			growth=0.0;
			GrowthType gt = getGrowthType();
			JEP processor = null;
			switch(gc){
				case HIGH: processor = gt.getProcessor(gt.getEquationHc()); break;
				case BASE: processor = gt.getProcessor(gt.getEquation()); break;
				case LOW: processor = gt.getProcessor(gt.getEquationLc()); break;
			}
			if(processor!=null){
				for(int x=1; x<9; x++){
					double value = getXVal(x);
					if(gt.getXUnit(x) != null && gt.getXUnit(x).equalsIgnoreCase("KVA"))
						value /= 1000;
					processor.addVariable("x"+x, value);
					processor.addVariable("x_"+x, value);
					if(gt.getXName(x) != null)
						processor.addVariable(gt.getXName(x), value);
				}
				Object result = processor.getValueAsObject();
				if (result!=null)
					growth=processor.getValue();
			}
			else
				growth=0.0;
			setCachedValue(growth,"getGrowth",gc);
		}
		return growth;
	}
	
	public void setProperty(String prop, Object newValue, Object oldValue) throws SQLException{
		super.setProperty(prop, newValue, oldValue);
		invalidateAllCache();
		CktYear cy = CktYear.getInstance(getPlanyear(), getCktId(), getYear(), false);
		if(cy!=null)
			cy.invalidateAllCache();
		Ckt ckt = Ckt.getInstance(getPlanyear(), getCktId(), false);
		if(ckt!=null){
			BbankYear bby = BbankYear.getInstance(getPlanyear(), getSimId(), ckt.getBbank().getBbankSubId(), getYear(), false);
			if(bby!=null)
				bby.invalidateAllCache();
		}
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()!=0){
			int bs=0;
			Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
			if(sim != null)
				bs = sim.getBaseSimId();
			setPtr(getInstance(getPlanyear(), bs, getCktId(), getGrowthTypeId(), getYear()));
		}
		else if(getGrowthTypeId()==GrowthType.BG && getYear()>=getPlanyear()){
			setPtr(getInstance(getPlanyear(), getSimId(), getCktId(), getGrowthTypeId(), getYear()-1));
		}
	}
}
