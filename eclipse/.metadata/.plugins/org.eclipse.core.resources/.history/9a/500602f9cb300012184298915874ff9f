/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Collection;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.swing.Icon;

import com.sce.esp.object.dao.StlDAO;
@Entity
@Table(schema="MDI",name="MDI370_STL")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Stl o WHERE o.PLANYEAR=?1 AND o.STL_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Stl o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Stl o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByAbank", query="SELECT o FROM Stl o WHERE o.PLANYEAR=?1 AND o.ABANK_SUB_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI370_STL o WHERE o.PLANYEAR=? AND o.STL_ID=?"),//AUTO-GENERATED
})
public class Stl extends StlDAO implements ModelingObject, Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -6336632289820347658L;
	/*
	 * Only use this constructor for the wizard
	 */
	public Stl(){
	}
	public Stl(int planyear) {
		super(planyear,0);
	}
	
	/**
	 * The Constructor.
	 * 
	 * @param stlId the stl id
	 * @param planyear the planyear
	 */
	public Stl(int planyear, int stlId){
		super(planyear,stlId);
	}
	
	public Stl(Stl stl) {
		super(stl);
	}
	
	public String getName(){
		return getStlName();
	}

	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		return getStlName();
	}

	public CoType getCoType() throws SQLException {
		return CoType.getInstance(getCoTypeId());
	}

	public int getCoTypeId() {
		return CoType.STL;
	}

	public int getId() {
		return getStlId();
	}
	public synchronized Collection<ScopeItem> getScopeItems()throws SQLException{
		return ScopeItem.getNamedCollection("findByModelingItem", getCoTypeId(),getId());
	}
	public FacilityObject getFacilityInstalledAt(int simId)throws SQLException{
		for(ScopeItem si:getScopeItems())
			if(si.isActiveBl(getPlanyear(),simId) && si.getQuantity() == 1)
				return si.getFacilityObject(getPlanyear());
		return null;
	}
	@Override
	public Icon getIcon() {
		// TODO Auto-generated method stub
		return null;
	}
}
