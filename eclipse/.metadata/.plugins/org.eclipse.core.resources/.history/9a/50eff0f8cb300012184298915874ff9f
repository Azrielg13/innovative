package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Collection;
import java.util.Hashtable;
import java.util.Observable;
import java.util.TreeSet;

import com.sce.esp.object.dao.DataAccessObject;
import com.sce.esp.util.AgObserver;

public class AgObjectObserver extends AgObserver{
	
	private Hashtable<String, Boolean> observerMap = new Hashtable<String, Boolean>();
	private AgObject ao;
	private static Hashtable<String,AgObjectObserver> hash = new Hashtable<String,AgObjectObserver>();
	private static boolean fetch=true;
	private boolean forceUpdate=false;
	private double _c=0, _d=0, _e=0, _f=0, _g=0, _h=0; 
	private int _cnt=0;

	public static AgObjectObserver getInstance(AgObject ao) throws SQLException{
		//		if(Sub.getInstance(planyear, subId).getYear(simId, year) == null)
		//			return new AgObjectObserver(Sub.getInstance(planyear, subId).getYear(simId, year));
		String key = MDIObject.getHashKey(new Object[]{ao });
		AgObjectObserver o = hash.get(key);
		if(o == null && fetch){
			o = new AgObjectObserver(ao);
			hash.put(key,o);
		}
		return o;
	}

	private AgObjectObserver(AgObject ao){
		this.ao=ao;
		//this.ao.attach(this);
		this.ao.addObserver(this);
		makeDirty();
	}

	public void update(DataAccessObject dao) {
		super.update(dao);
		makeDirty();
	}

	private void makeDirty() {
		observerMap.put("_c", isDirty);	
		observerMap.put("_d", isDirty);	
		observerMap.put("_e", isDirty);	
		observerMap.put("_f", isDirty);		
		observerMap.put("_g", isDirty);	
		observerMap.put("_h", isDirty);		
		observerMap.put("_cnt", isDirty);	
	}

	public double getNetCostChangeTotal(int simId, Collection<Program> p, SceElem e) throws SQLException {
		if(forceUpdate || observerMap.get("_c")){			
			_c = 0.0;
			for(int year = ao.getPlanyear(); year < ao.getPlanyear()+Department.getInstance(ao.getPlanyear()).getPlanFor(); year++)
				_c += ao.getYear(simId, year).getNetCostChange(p, e);			
			observerMap.put("_c", !isDirty);
		}
		return _c;
	}

	public double getPriorAppCostTotal(int simId, Collection<Program> p, SceElem e) throws SQLException {
		if(forceUpdate || observerMap.get("_d")){		
			_d = 0;
			for(int year = ao.getPlanyear()-10; year < ao.getPlanyear(); year++)
				for(CostStage cs:CostStage.getCostStages(CostStage.Type.Approved))
					_d += ao.getYear(simId, year).getCostTotal(p, e, cs);
			observerMap.put("_d", !isDirty);
		}
		return _d;
	}

	public double getPriorNetCostChangeTotal(int simId, Collection<Program> p, SceElem e) throws SQLException {
		if(forceUpdate || observerMap.get("_e")){		
			_e = 0;
			for(int year = ao.getPlanyear()-10; year < ao.getPlanyear(); year++)
				_e += ao.getYear(simId, year).getNetCostChange(p, e);
			observerMap.put("_e", !isDirty);
		}
		return _e;
	}

	public double getPriorPropCostTotal(int simId, Collection<Program> p, SceElem e) throws SQLException {
		if(forceUpdate || observerMap.get("_f")){
			_f = 0;
			for(int year = ao.getPlanyear()-10; year < ao.getPlanyear(); year++)
				_f += ao.getYear(simId, year).getPropCostTotal(p, e);
			observerMap.put("_f", !isDirty);
		}
		return _f;
	}

	public int getProjCountTotal(int simId, TreeSet<Program> p)throws SQLException {
		if(forceUpdate || observerMap.get("_cnt")){
			_cnt = 0;
			for(int year = ao.getPlanyear(); year < ao.getPlanyear()+Department.getInstance(ao.getPlanyear()).getPlanFor(); year++)
				_cnt += ao.getYear(simId, year).getProjCount(p);
			observerMap.put("_cnt", !isDirty);
		}
		return _cnt;
	}

	public double getPropCostTotal(int simId, Collection<Program> p, SceElem e)throws SQLException {
		if(forceUpdate || observerMap.get("_g")){
			_g = 0.0;
			for(int year = ao.getPlanyear(); year < ao.getPlanyear()+Department.getInstance(ao.getPlanyear()).getPlanFor(); year++)
				_g += ao.getYear(simId, year).getPropCostTotal(p, e);
			observerMap.put("_g", !isDirty);
		}
		return _g;
	}

	public double getVarAddTotal(int simId, TreeSet<Program> p)throws SQLException {
		if(forceUpdate || observerMap.get("_h")){
			_h = 0.0;
			for(int year = ao.getPlanyear(); year < ao.getPlanyear()+Department.getInstance(ao.getPlanyear()).getPlanFor(); year++)
				_h += ao.getYear(simId, year).getVarAdd(p);
			observerMap.put("_h", !isDirty);
		}
		return _h;
	}

//	@Override
//	public void update(Observable o, Object arg) {
//		// TODO Auto-generated method stub
//		
//	}
}
