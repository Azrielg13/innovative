package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.TestResponse;
import com.sce.esp.object.model.TestScript;
import com.sce.esp.object.model.TestUser;
import com.sce.esp.object.model.User;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class TestUserDAO extends MDIObject{
	public static enum KEY_PROPERTY{SCRIPT_ID,USERNAME_ID};
	public static enum PROPERTY{SCRIPT_ID,USERNAME_ID};
	public final static int SCRIPTID_LIMIT = 9;
	public final static int USERNAMEID_LIMIT = 9;
	private int scriptId;
	private int usernameId;
	private Collection<TestResponse> testResponses;
	private TestScript testScript;
	private User user;
	public static TestUser getInstance(int scriptId, int usernameId)throws java.sql.SQLException{
		return getInstance(scriptId, usernameId, true);
	}
	public static TestUser getInstance(int scriptId, int usernameId, boolean fetch)throws java.sql.SQLException{
		if(isNull(scriptId, usernameId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scriptId, usernameId);
		Cache cache = em.getEntityManagerFactory().getCache();
		TestUser o = null;
		if(cache != null && cache.contains(TestUser.class, pk))
			o = em.find(TestUser.class, pk);
		if(o==null && getAICache().contains(TestUser.class, pk))
			o = getAICache().find(TestUser.class, pk);
		if(o==null && fetch)
			o = em.find(TestUser.class, pk);
		if(o==null && fetch && TestUser.class.getAnnotation(AutoInsertable.class) != null){
			o = new TestUser(scriptId, usernameId);
			getAICache().cache(TestUser.class, o);
		}
		return o;
	}
	public static Collection<TestUser> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<TestUser> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<TestUser> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM TestUser o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<TestUser> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TestUser> tq = em.createQuery(jpql,TestUser.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<TestUser> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TestUser> tq = em.createNamedQuery(name,TestUser.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TestUserDAO(){}
	public TestUserDAO(int scriptId, int usernameId){
		this.scriptId=scriptId;
		this.usernameId=usernameId;
	}
	public TestUserDAO(TestUserDAO orig){
		super(orig);
		this.scriptId=orig.getScriptId();
		this.usernameId=orig.getUsernameId();
		copyFrom(orig);
	}
	public void copyFrom(TestUserDAO orig){
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scriptId, usernameId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="SCRIPT_ID",nullable=false,length=9)
	public int getScriptId(){
		return scriptId;
	}
	public void setScriptId(int scriptId) throws java.sql.SQLException{
		if(isSame(scriptId, getScriptId()))return;
		int oldValue = getScriptId();
		this.scriptId=scriptId;
		setProperty("SCRIPT_ID", scriptId, oldValue);
		testScript=null;
	}
	@Id
	@Column(name="USERNAME_ID",nullable=false,length=9)
	public int getUsernameId(){
		return usernameId;
	}
	public void setUsernameId(int usernameId) throws java.sql.SQLException{
		if(isSame(usernameId, getUsernameId()))return;
		int oldValue = getUsernameId();
		this.usernameId=usernameId;
		setProperty("USERNAME_ID", usernameId, oldValue);
		user=null;
	}
	public TestScript getTestScript()throws java.sql.SQLException{
		if(testScript==null)
			testScript=TestScript.getInstance(getScriptId());
		return testScript;
	}
	public void setTestScript(TestScript testScript)throws java.sql.SQLException{
		setScriptId(testScript==null?0:testScript.getScriptId());
		this.testScript=testScript;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getUsernameId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setUsernameId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public Collection<TestResponse> getTestResponses()throws java.sql.SQLException{
		if(isNewInstance() || testResponses != null){
			if(testResponses == null)
				testResponses = new TreeSet<TestResponse>();
			return testResponses;
		}
		return TestResponse.getNamedCollection("findByTestUser",getScriptId(), getUsernameId());
	}
	public void addTestResponse(TestResponse testResponse)throws java.sql.SQLException{
		testResponse.setTestUser((TestUser)this);
		if(isNewInstance() || testResponses != null)
			getTestResponses().add(testResponse);
		else
			testResponse.insert();
	}
	public void removeTestResponse(TestResponse testResponse)throws java.sql.SQLException{
		if(isNewInstance() || testResponses != null)
			getTestResponses().remove(testResponse);
		else
			testResponse.delete();
	}
	public TestUser copy()throws java.sql.SQLException{
		TestUser cp = new TestUser((TestUser)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TestUserDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(TestResponse child:getTestResponses())
			cp.addTestResponse(child.copy());
	}
	public Vector<String> getDifference(TestUserDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScriptId(),o.getScriptId())) diffs.add("SCRIPT_ID");
		if(!isSame(getUsernameId(),o.getUsernameId())) diffs.add("USERNAME_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(testScript != null && testScript.isNewInstance())
				testScript.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(testResponses != null){
			for(TestResponse testResponse:getTestResponses())
				testResponse.setTestUser((TestUser)this);
		}
		if(testResponses != null){
			for(TestResponse testResponse:getTestResponses())
				if(testResponse.isNewInstance())
					testResponse.insert();
			testResponses = null;
		}
	}
}
