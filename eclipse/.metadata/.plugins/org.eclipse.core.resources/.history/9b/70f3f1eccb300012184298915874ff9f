/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.jortho;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.List;
import java.util.Locale;

import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Caret;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import javax.swing.text.Utilities;

import com.sce.esp.component.DynamicTextArea;

/**
 * Is used from CheckerMenu and CheckerPopup to handle the user events.
 * @author Volker Berlin
 */
public class CheckerListener implements PopupMenuListener, LanguageChangeListener {

    private final JComponent          menu;

    private Dictionary                dictionary;

    private Locale                    locale;

    private final SpellCheckerOptions options;

    CheckerListener( JComponent menu, SpellCheckerOptions options ) {
        this.menu = menu;
        this.options = options == null ? SpellChecker.getOptions() : options;
        SpellChecker.addLanguageChangeLister( this );
        dictionary = SpellChecker.getCurrentDictionary();
        locale = SpellChecker.getCurrentLocale();
    }

    public void popupMenuCanceled( PopupMenuEvent e ) {
        /* empty */
    }

    public void popupMenuWillBecomeInvisible( PopupMenuEvent e ) {
        /* empty */
    }

    public void popupMenuWillBecomeVisible( PopupMenuEvent ev ) {
        if( SpellChecker.getCurrentDictionary() == null) {
            menu.setEnabled( false );
            return;
        }

        JPopupMenu popup = (JPopupMenu)ev.getSource();

        Component invoker = popup.getInvoker();
        if( invoker instanceof JTextComponent ) {
            final JTextComponent jText = (JTextComponent)invoker;
            if( !jText.isEditable() ) {
                // Suggestions only for editable text components
                menu.setEnabled( false );
                return;
            }
            Caret caret = jText.getCaret();
            int offs = Math.min( caret.getDot(), caret.getMark() );
            Point p = jText.getMousePosition();
            if( p != null ) {
                // use position from mouse click and not from editor cursor position 
                offs = jText.viewToModel( p );
            }
            try {
                Document doc = jText.getDocument();
                if( offs > 0 && (offs >= doc.getLength() || Character.isWhitespace( doc.getText( offs, 1 ).charAt( 0 ) )) ) {
                    // if the next character is a white space then use the word on the left site
                    offs--;
                }
                
                if( offs < 0 ) {
                    // occur if there nothing under the mouse pointer
                    menu.setEnabled( false );
                    return;
                }
                
                // get the word from current position
                final int begOffs = Utilities.getWordStart( jText, offs );
                final int endOffs = Utilities.getWordEnd( jText, offs );
                final String word = jText.getText( begOffs, endOffs - begOffs );

                //find the first invalid word from current position
                Tokenizer tokenizer = new Tokenizer( jText, dictionary, locale, offs, options );
                String invalidWord;
                do {
                    invalidWord = tokenizer.nextInvalidWord();
                } while( tokenizer.getWordOffset() < begOffs );
                menu.removeAll();

                if( !word.equals( invalidWord ) ) {
                    // the current word is not invalid
                    menu.setEnabled( false );
                    return;
                }

                if( dictionary == null ) {
                    // without dictionary it is disabled
                    menu.setEnabled( false );
                    return;
                }

                List<Suggestion> list = dictionary.searchSuggestions( word );

                //Disable then menu item if there are no suggestions
                menu.setEnabled( list.size() > 0 );

                boolean needCapitalization = tokenizer.isFirstWordInSentence() && Utils.isFirstCapitalized( word );

                for( int i = 0; i < list.size() && i < options.getSuggestionsLimitMenu(); i++ ) {
                    Suggestion sugestion = list.get( i );
                    String sugestionWord = sugestion.getWord();
                    if( needCapitalization ) {
                        sugestionWord = Utils.getCapitalized( sugestionWord );
                    }
                    JMenuItem item = new JMenuItem( sugestionWord );
                    menu.add( item );
                    final String newWord = sugestionWord;
                    item.addActionListener( new ActionListener() {
                        public void actionPerformed( ActionEvent e ) {
                            jText.setSelectionStart( begOffs );
                            jText.setSelectionEnd( endOffs );
                            jText.replaceSelection( newWord );
                            if(jText instanceof DynamicTextArea){                            	
                            	((DynamicTextArea)jText).setSelectionStart(begOffs);
                            	((DynamicTextArea)jText).setSelectionEnd( endOffs );
                            	((DynamicTextArea)jText).replaceSelection( newWord +" ");
                            	try {
									((DynamicTextArea)jText).updateObject();
								} catch (SQLException e1) {
									e1.printStackTrace();
								}
                            }
                            
                        }

                    } );
                }
                
                // Add the menu item "Add to Dictionary"
                UserDictionaryProvider provider = SpellChecker.getUserDictionaryProvider();
                if( provider == null ) {
                    return;
                }
                JMenuItem addToDic = new JMenuItem( Utils.getResource( "addToDictionary" ) );
                addToDic.addActionListener( new ActionListener() {

                    public void actionPerformed( ActionEvent e ) {
                        UserDictionaryProvider provider = SpellChecker.getUserDictionaryProvider();
                        if( provider != null ) {
                            provider.addWord( word );
                        }
                        dictionary.add( word );
                        dictionary.trimToSize();
                        AutoSpellChecker.refresh( jText );
                    }

                } );
                if( list.size() > 0 ) {
                    if( menu instanceof JMenu ) {
                        ((JMenu)menu).addSeparator();
                    } else if( menu instanceof JPopupMenu ) {
                        ((JPopupMenu)menu).addSeparator();
                    }
                }
                menu.add( addToDic );
                menu.setEnabled( true );
            } catch( BadLocationException ex ) {
                ex.printStackTrace();
            }
        }
    }

    public void languageChanged( LanguageChangeEvent ev ) {
        dictionary = SpellChecker.getCurrentDictionary();
        locale = SpellChecker.getCurrentLocale();
    }
}
