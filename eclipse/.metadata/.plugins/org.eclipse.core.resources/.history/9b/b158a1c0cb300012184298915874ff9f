/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.SQLException;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.SwingConstants;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.JTextComponent;

import com.jidesoft.swing.DefaultOverlayable;
import com.jidesoft.swing.StyledLabelBuilder;
import com.sce.esp.dialog.ESPDialog;
import com.sce.esp.security.TopFlight;
import com.sce.esp.security.UserRole;
import com.sce.esp.util.ui.LimitDocument;

public abstract class DynamicOverlayableTextPane extends DefaultOverlayable
		implements
			DynamicTextComponent,
			MouseListener,
			FocusListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = -7013113464135499078L;
	private Component c;
	private Object obj;
	private Object setObject;
	private int userRole;
	private Object editingO;
	private boolean isEditing;
	private JTextPane txtPane;

	/**
	 * 
	 * @param c
	 * @param obj
	 * @param limit
	 */
	public DynamicOverlayableTextPane(Component c, Object obj, int limit) {
		this(c, obj, limit, 1, UserRole.MDI_R_USER, "Add text here");
	}
	/**
	 * 
	 * @param c
	 * @param obj
	 * @param limit
	 * @param cols
	 */
	public DynamicOverlayableTextPane(Component c, Object obj, int limit,
			int rows) {
		this(c, obj, limit, rows, UserRole.MDI_R_USER, "Add text here");
	}
	/**
	 * 
	 * @param c
	 * @param obj
	 * @param limit
	 * @param rows
	 * @param userRole
	 */
	public DynamicOverlayableTextPane(Component c, Object obj, int limit,
			int rows, int userRole) {
		this(c, obj, limit, rows, userRole, "Add text here");
	}
	/**
	 * 
	 * @param c
	 * @param obj
	 * @param limit
	 * @param rows
	 * @param userRole
	 * @param helpText
	 */
	public DynamicOverlayableTextPane(Component c, Object obj, int limit,
			int rows, int userRole, String helpText) {
		super();
		this.c = c;
		this.obj = obj;
		this.userRole = userRole;

		txtPane = new JTextPane(new LimitDocument(limit)) {

			/**
			 * 
			 */
			private static final long serialVersionUID = 4849806606108625135L;

			public void paintComponent(Graphics g) {

				Object o = getObject();
				Object value = null;
				try {
					if (o != null)
						value = getObjectValue();

					if (setObject != o
							|| !isEditing
							&& !hasFocus()
							&& o != null
							&& (value == null && getText().length() > 0 || value != null
									&& !getText().equals("" + value))) {
						if (value != null) {
							setText("" + value);
						} else {
							setText("");
						}
						setCaretPosition(0);

						setObject = o;
					}
					if (shouldBeEnabled() != isEnabled())
						setEnabled(shouldBeEnabled());
				} catch (Exception e) {
					e.printStackTrace();
				}
				super.paintComponent(g);
			}
		};

		JScrollPane s = new JScrollPane(txtPane);
		setActualComponent(s);
		addOverlayComponent(
				StyledLabelBuilder.createStyledLabel("{" + helpText
						+ ":f:gray}"), SwingConstants.CENTER);

		s.setPreferredSize(new Dimension(550, rows * 20));

		txtPane.addFocusListener(this);
		txtPane.addMouseListener(this);

		txtPane.getDocument().addDocumentListener(new DocumentListener() {
			public void insertUpdate(DocumentEvent e) {
				if (txtPane.getDocument().getLength() > 0) {
					setOverlayVisible(false);
				}
			}

			public void removeUpdate(DocumentEvent e) {
				if (txtPane.getDocument().getLength() == 0)
					setOverlayVisible(true);
			}

			public void changedUpdate(DocumentEvent e) {
			}
		});
		addFocusListener(this);
		addMouseListener(this);
	}

	public JTextComponent getTextComponent() {
		return txtPane;
	}

	public String getText() {
		if (txtPane != null)
			return txtPane.getText();
		return "";
	}

	public Object getObject() {
		return obj;
	}

	public void focusGained(FocusEvent fe) {
		if (fe.getOppositeComponent() != null)
			editingO = getObject();

		setOverlayVisible(false);

	}
	public void focusLost(FocusEvent fe) {
		if (setObject != editingO)
			return;
		try {
			if (getEditingObject() != null && !isEditing)
				updateObject();
		} catch (Exception e) {
			e.printStackTrace();
			ESPDialog.showMessageDialog(this, e.getMessage(), "Error",
					JOptionPane.ERROR_MESSAGE);
		}

		setOverlayVisible(txtPane.getDocument().getLength() == 0);

		if (c != null)
			c.repaint();
	}

	public void mouseClicked(MouseEvent me) {
	}
	public void mouseEntered(MouseEvent arg0) {
	}
	public void mouseExited(MouseEvent arg0) {
	}
	public void mousePressed(MouseEvent arg0) {
	}
	public void mouseReleased(MouseEvent arg0) {
	}

	public boolean shouldBeEnabled() throws SQLException {
		return getObject() != null && hasPermission();
	}

	public boolean hasPermission() throws SQLException {
		return TopFlight.getInstance().hasAccessRight(userRole);
	}

	public abstract void updateObject() throws SQLException;

	protected Object getEditingObject() {
		return editingO;
	}
	public abstract Object getObjectValue() throws SQLException;

	public synchronized void setEditInProgress(boolean isEditing) {
		this.isEditing = isEditing;
	}

	public JTextPane getTextPane() {
		return txtPane;
	}
}