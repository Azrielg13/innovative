package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Discipline;
import com.sce.esp.object.model.ProjWorkGroup;
import com.sce.esp.object.model.ProjWorkGroupDis;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ProjWorkGroupDisDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{RESOURCE_EVAL_ID,WORK_GROUP_ID,TYPE,DISCIPLINE_ID};
	public static enum PROPERTY{RESOURCE_EVAL_ID,WORK_GROUP_ID,TYPE,DISCIPLINE_ID,WORK_DAYS,OFFSET_DAYS,OFFSET_REQ,NOTE,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1};
	public final static int RESOURCEEVALID_LIMIT = 9;
	public final static int WORKGROUPID_LIMIT = 9;
	public final static int TYPE_LIMIT = 2;
	public final static int DISCIPLINEID_LIMIT = 9;
	public final static int WORKDAYS_LIMIT = 6;
	public final static int OFFSETDAYS_LIMIT = 6;
	public final static int OFFSETREQ_LIMIT = 1;
	public final static int NOTE_LIMIT = 128;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int resourceEvalId;
	private int workGroupId;
	private int type;
	private int disciplineId;
	private int workDays;
	private int offsetDays;
	private boolean offsetReq = false;
	private String note;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private ProjWorkGroup projWorkGroup;
	private Discipline discipline;
	public static ProjWorkGroupDis getInstance(int resourceEvalId, int workGroupId, int type, int disciplineId)throws java.sql.SQLException{
		return getInstance(resourceEvalId, workGroupId, type, disciplineId, true);
	}
	public static ProjWorkGroupDis getInstance(int resourceEvalId, int workGroupId, int type, int disciplineId, boolean fetch)throws java.sql.SQLException{
		if(isNull(resourceEvalId, workGroupId, type, disciplineId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(resourceEvalId, workGroupId, type, disciplineId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProjWorkGroupDis o = null;
		if(cache != null && cache.contains(ProjWorkGroupDis.class, pk))
			o = em.find(ProjWorkGroupDis.class, pk);
		if(o==null && getAICache().contains(ProjWorkGroupDis.class, pk))
			o = getAICache().find(ProjWorkGroupDis.class, pk);
		if(o==null && fetch)
			o = em.find(ProjWorkGroupDis.class, pk);
		if(o==null && fetch && ProjWorkGroupDis.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProjWorkGroupDis(resourceEvalId, workGroupId, type, disciplineId);
			getAICache().cache(ProjWorkGroupDis.class, o);
		}
		return o;
	}
	public static Collection<ProjWorkGroupDis> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProjWorkGroupDis> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProjWorkGroupDis> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProjWorkGroupDis o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProjWorkGroupDis> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjWorkGroupDis> tq = em.createQuery(jpql,ProjWorkGroupDis.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProjWorkGroupDis> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjWorkGroupDis> tq = em.createNamedQuery(name,ProjWorkGroupDis.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProjWorkGroupDisDAO(){}
	public ProjWorkGroupDisDAO(int resourceEvalId, int workGroupId, int type, int disciplineId){
		this.resourceEvalId=resourceEvalId;
		this.workGroupId=workGroupId;
		this.type=type;
		this.disciplineId=disciplineId;
	}
	public ProjWorkGroupDisDAO(ProjWorkGroupDisDAO orig){
		super(orig);
		this.resourceEvalId=orig.getResourceEvalId();
		this.workGroupId=orig.getWorkGroupId();
		this.type=orig.getType();
		this.disciplineId=orig.getDisciplineId();
		copyFrom(orig);
	}
	public void copyFrom(ProjWorkGroupDisDAO orig){
		this.workDays=orig.getWorkDays();
		this.offsetDays=orig.getOffsetDays();
		this.offsetReq=orig.isOffsetReq();
		this.note=orig.getNote();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{resourceEvalId, workGroupId, type, disciplineId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="RESOURCE_EVAL_ID",nullable=false,length=9)
	public int getResourceEvalId(){
		return resourceEvalId;
	}
	public void setResourceEvalId(int resourceEvalId) throws java.sql.SQLException{
		if(isSame(resourceEvalId, getResourceEvalId()))return;
		int oldValue = getResourceEvalId();
		this.resourceEvalId=resourceEvalId;
		setProperty("RESOURCE_EVAL_ID", resourceEvalId, oldValue);
	}
	@Id
	@Column(name="WORK_GROUP_ID",nullable=false,length=9)
	public int getWorkGroupId(){
		return workGroupId;
	}
	public void setWorkGroupId(int workGroupId) throws java.sql.SQLException{
		if(isSame(workGroupId, getWorkGroupId()))return;
		int oldValue = getWorkGroupId();
		this.workGroupId=workGroupId;
		setProperty("WORK_GROUP_ID", workGroupId, oldValue);
	}
	@Id
	@Column(name="TYPE",nullable=false,length=2)
	public int getType(){
		return type;
	}
	public void setType(int type) throws java.sql.SQLException{
		if(isSame(type, getType()))return;
		int oldValue = getType();
		this.type=type;
		setProperty("TYPE", type, oldValue);
		projWorkGroup=null;
	}
	@Id
	@Column(name="DISCIPLINE_ID",nullable=false,length=9)
	public int getDisciplineId(){
		return disciplineId;
	}
	public void setDisciplineId(int disciplineId) throws java.sql.SQLException{
		if(isSame(disciplineId, getDisciplineId()))return;
		int oldValue = getDisciplineId();
		this.disciplineId=disciplineId;
		setProperty("DISCIPLINE_ID", disciplineId, oldValue);
		discipline=null;
	}
	@Column(name="WORK_DAYS",nullable=true,length=6)
	public int getWorkDays(){
		return workDays;
	}
	public void setWorkDays(int workDays) throws java.sql.SQLException{
		if(isSame(workDays, getWorkDays()))return;
		int oldValue = getWorkDays();
		this.workDays=workDays;
		setProperty("WORK_DAYS", workDays, oldValue);
	}
	@Column(name="OFFSET_DAYS",nullable=true,length=6)
	public int getOffsetDays(){
		return offsetDays;
	}
	public void setOffsetDays(int offsetDays) throws java.sql.SQLException{
		if(isSame(offsetDays, getOffsetDays()))return;
		int oldValue = getOffsetDays();
		this.offsetDays=offsetDays;
		setProperty("OFFSET_DAYS", offsetDays, oldValue);
	}
	@Column(name="OFFSET_REQ",nullable=true,length=1)
	public boolean isOffsetReq(){
		return offsetReq;
	}
	public void setOffsetReq(boolean offsetReq) throws java.sql.SQLException{
		if(isSame(offsetReq, isOffsetReq()))return;
		boolean oldValue = isOffsetReq();
		this.offsetReq=offsetReq;
		setProperty("OFFSET_REQ", offsetReq, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=128)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public ProjWorkGroup getProjWorkGroup()throws java.sql.SQLException{
		if(projWorkGroup==null)
			projWorkGroup=ProjWorkGroup.getInstance(getResourceEvalId(), getWorkGroupId(), getType());
		return projWorkGroup;
	}
	public void setProjWorkGroup(ProjWorkGroup projWorkGroup)throws java.sql.SQLException{
		setType(projWorkGroup==null?0:projWorkGroup.getType());
		this.projWorkGroup=projWorkGroup;
	}
	public Discipline getDiscipline()throws java.sql.SQLException{
		if(discipline==null)
			discipline=Discipline.getInstance(getDisciplineId());
		return discipline;
	}
	public void setDiscipline(Discipline discipline)throws java.sql.SQLException{
		setDisciplineId(discipline==null?0:discipline.getDisciplineId());
		this.discipline=discipline;
	}
	public ProjWorkGroupDis copy()throws java.sql.SQLException{
		ProjWorkGroupDis cp = new ProjWorkGroupDis((ProjWorkGroupDis)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProjWorkGroupDisDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ProjWorkGroupDisDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getResourceEvalId(),o.getResourceEvalId())) diffs.add("RESOURCE_EVAL_ID");
		if(!isSame(getWorkGroupId(),o.getWorkGroupId())) diffs.add("WORK_GROUP_ID");
		if(!isSame(getType(),o.getType())) diffs.add("TYPE");
		if(!isSame(getDisciplineId(),o.getDisciplineId())) diffs.add("DISCIPLINE_ID");
		if(!isSame(getWorkDays(),o.getWorkDays())) diffs.add("WORK_DAYS");
		if(!isSame(getOffsetDays(),o.getOffsetDays())) diffs.add("OFFSET_DAYS");
		if(!isSame(isOffsetReq(),o.isOffsetReq())) diffs.add("OFFSET_REQ");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
