package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Pif;
import com.sce.esp.object.model.PifImpact;
import com.sce.esp.object.model.PifImpactType;
import com.sce.esp.object.model.PifImpactValue;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class PifImpactDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,PIF_ID,PIF_IMPACT_TYPE_ID};
	public static enum PROPERTY{PLANYEAR,PIF_ID,PIF_IMPACT_TYPE_ID,SCORE,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int PIFID_LIMIT = 9;
	public final static int PIFIMPACTTYPEID_LIMIT = 9;
	public final static int SCORE_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int planyear;
	private int pifId;
	private int pifImpactTypeId;
	private int score;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Pif pif;
	private PifImpactType pifImpactType;
	private PifImpactValue pifImpactValue;
	public static PifImpact getInstance(int planyear, int pifId, int pifImpactTypeId)throws java.sql.SQLException{
		return getInstance(planyear, pifId, pifImpactTypeId, true);
	}
	public static PifImpact getInstance(int planyear, int pifId, int pifImpactTypeId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, pifId, pifImpactTypeId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, pifId, pifImpactTypeId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifImpact o = null;
		if(cache != null && cache.contains(PifImpact.class, pk))
			o = em.find(PifImpact.class, pk);
		if(o==null && getAICache().contains(PifImpact.class, pk))
			o = getAICache().find(PifImpact.class, pk);
		if(o==null && fetch)
			o = em.find(PifImpact.class, pk);
		if(o==null && fetch && PifImpact.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifImpact(planyear, pifId, pifImpactTypeId);
			getAICache().cache(PifImpact.class, o);
		}
		return o;
	}
	public static Collection<PifImpact> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifImpact> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifImpact> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifImpact o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifImpact> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifImpact> tq = em.createQuery(jpql,PifImpact.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifImpact> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifImpact> tq = em.createNamedQuery(name,PifImpact.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifImpactDAO(){}
	public PifImpactDAO(int planyear, int pifId, int pifImpactTypeId){
		this.planyear=planyear;
		this.pifId=pifId;
		this.pifImpactTypeId=pifImpactTypeId;
	}
	public PifImpactDAO(PifImpactDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.pifId=orig.getPifId();
		this.pifImpactTypeId=orig.getPifImpactTypeId();
		copyFrom(orig);
	}
	public void copyFrom(PifImpactDAO orig){
		this.score=orig.getScore();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, pifId, pifImpactTypeId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="PIF_ID",nullable=false,length=9)
	public int getPifId(){
		return pifId;
	}
	public void setPifId(int pifId) throws java.sql.SQLException{
		if(isSame(pifId, getPifId()))return;
		int oldValue = getPifId();
		this.pifId=pifId;
		setProperty("PIF_ID", pifId, oldValue);
		pif=null;
	}
	@Id
	@Column(name="PIF_IMPACT_TYPE_ID",nullable=false,length=9)
	public int getPifImpactTypeId(){
		return pifImpactTypeId;
	}
	public void setPifImpactTypeId(int pifImpactTypeId) throws java.sql.SQLException{
		if(isSame(pifImpactTypeId, getPifImpactTypeId()))return;
		int oldValue = getPifImpactTypeId();
		this.pifImpactTypeId=pifImpactTypeId;
		setProperty("PIF_IMPACT_TYPE_ID", pifImpactTypeId, oldValue);
		pifImpactType=null;
	}
	@Column(name="SCORE",nullable=true,length=9)
	public int getScore(){
		return score;
	}
	public void setScore(int score) throws java.sql.SQLException{
		if(isSame(score, getScore()))return;
		int oldValue = getScore();
		this.score=score;
		setProperty("SCORE", score, oldValue);
		pifImpactValue=null;
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Pif getPif()throws java.sql.SQLException{
		if(pif==null)
			pif=Pif.getInstance(getPlanyear(), getPifId());
		return pif;
	}
	public void setPif(Pif pif)throws java.sql.SQLException{
		setPifId(pif==null?0:pif.getPifId());
		this.pif=pif;
	}
	public PifImpactType getPifImpactType()throws java.sql.SQLException{
		if(pifImpactType==null)
			pifImpactType=PifImpactType.getInstance(getPlanyear(), getPifImpactTypeId());
		return pifImpactType;
	}
	public void setPifImpactType(PifImpactType pifImpactType)throws java.sql.SQLException{
		setPifImpactTypeId(pifImpactType==null?0:pifImpactType.getPifImpactTypeId());
		this.pifImpactType=pifImpactType;
	}
	public PifImpactValue getPifImpactValue()throws java.sql.SQLException{
		if(pifImpactValue==null)
			pifImpactValue=PifImpactValue.getInstance(getPlanyear(), getScore());
		return pifImpactValue;
	}
	public void setPifImpactValue(PifImpactValue pifImpactValue)throws java.sql.SQLException{
		setScore(pifImpactValue==null?0:pifImpactValue.getPifImpactValueId());
		this.pifImpactValue=pifImpactValue;
	}
	public PifImpact copy()throws java.sql.SQLException{
		PifImpact cp = new PifImpact((PifImpact)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifImpactDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PifImpactDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getPifId(),o.getPifId())) diffs.add("PIF_ID");
		if(!isSame(getPifImpactTypeId(),o.getPifImpactTypeId())) diffs.add("PIF_IMPACT_TYPE_ID");
		if(!isSame(getScore(),o.getScore())) diffs.add("SCORE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
