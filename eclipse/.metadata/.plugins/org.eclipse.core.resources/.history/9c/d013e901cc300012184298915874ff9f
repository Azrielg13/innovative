package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;

import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;

import oracle.sql.BLOB;

import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.BlobFile;
import com.sce.esp.object.model.User;
import com.sce.esp.object.model.UserFile;
public abstract class UserFileDAO extends BlobFile{
	public static enum KEY_PROPERTY{FILE_ID};
	public static enum PROPERTY{FILE_ID,USER_ID,FILE_NAME,FILE_SIZE,FILE_TYPE,BLOB_FILE,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1};
	public final static int FILEID_LIMIT = 9;
	public final static int USERID_LIMIT = 9;
	public final static int FILENAME_LIMIT = 64;
	public final static int FILESIZE_LIMIT = 9;
	public final static int FILETYPE_LIMIT = 64;
	public final static int BLOBFILE_LIMIT = 4000;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int fileId;
	private int userId;
	private String fileName;
	private int fileSize;
	private String fileType;
	private BLOB blobFile;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private User user;
	public static UserFile getInstance(int fileId)throws java.sql.SQLException{
		return getInstance(fileId, true);
	}
	public static UserFile getInstance(int fileId, boolean fetch)throws java.sql.SQLException{
		if(isNull(fileId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(fileId);
		Cache cache = em.getEntityManagerFactory().getCache();
		UserFile o = null;
		if(cache != null && cache.contains(UserFile.class, pk))
			o = em.find(UserFile.class, pk);
		if(o==null && getAICache().contains(UserFile.class, pk))
			o = getAICache().find(UserFile.class, pk);
		if(o==null && fetch)
			o = em.find(UserFile.class, pk);
		if(o==null && fetch && UserFile.class.getAnnotation(AutoInsertable.class) != null){
			o = new UserFile(fileId);
			getAICache().cache(UserFile.class, o);
		}
		return o;
	}
	public static Collection<UserFile> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<UserFile> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<UserFile> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM UserFile o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<UserFile> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<UserFile> tq = em.createQuery(jpql,UserFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<UserFile> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<UserFile> tq = em.createNamedQuery(name,UserFile.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public UserFileDAO(){}
	public UserFileDAO(int fileId){
		this.fileId=fileId;
	}
	public UserFileDAO(UserFileDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(UserFileDAO orig){
		this.userId=orig.getUserId();
		this.fileName=orig.getFileName();
		this.fileSize=orig.getFileSize();
		this.fileType=orig.getFileType();
		this.blobFile=orig.getBlobFile();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{fileId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDI007_SEQ",sequenceName="MDI007_SEQ")
	@Column(name="FILE_ID",nullable=false,length=9)
	public int getFileId(){
		return fileId;
	}
	public void setFileId(int fileId) throws java.sql.SQLException{
		if(isSame(fileId, getFileId()))return;
		int oldValue = getFileId();
		this.fileId=fileId;
		setProperty("FILE_ID", fileId, oldValue);
	}
	@Column(name="USER_ID",nullable=false,length=9)
	public int getUserId(){
		return userId;
	}
	public void setUserId(int userId) throws java.sql.SQLException{
		if(isSame(userId, getUserId()))return;
		int oldValue = getUserId();
		this.userId=userId;
		setProperty("USER_ID", userId, oldValue);
		user=null;
	}
	@Column(name="FILE_NAME",nullable=false,length=64)
	public String getFileName(){
		return fileName;
	}
	public void setFileName(String fileName) throws java.sql.SQLException{
		if(isSame(fileName, getFileName()))return;
		String oldValue = getFileName();
		this.fileName=fileName;
		setProperty("FILE_NAME", fileName, oldValue);
	}
	@Column(name="FILE_SIZE",nullable=false,length=9)
	public int getFileSize(){
		return fileSize;
	}
	public void setFileSize(int fileSize) throws java.sql.SQLException{
		if(isSame(fileSize, getFileSize()))return;
		int oldValue = getFileSize();
		this.fileSize=fileSize;
		setProperty("FILE_SIZE", fileSize, oldValue);
	}
	@Column(name="FILE_TYPE",nullable=true,length=64)
	public String getFileType(){
		return fileType;
	}
	public void setFileType(String fileType) throws java.sql.SQLException{
		if(isSame(fileType, getFileType()))return;
		String oldValue = getFileType();
		this.fileType=fileType;
		setProperty("FILE_TYPE", fileType, oldValue);
	}
	@Column(name="BLOB_FILE",nullable=true,length=4000)
	public BLOB getBlobFile(){
		return blobFile;
	}
	public void setBlobFile(BLOB blobFile) throws java.sql.SQLException{
		if(isSame(blobFile, getBlobFile()))return;
		BLOB oldValue = getBlobFile();
		this.blobFile=blobFile;
		setProperty("BLOB_FILE", blobFile, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getUserId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setUserId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public UserFile copy()throws java.sql.SQLException{
		UserFile cp = new UserFile((UserFile)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(UserFileDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(UserFileDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getFileId(),o.getFileId())) diffs.add("FILE_ID");
		if(!isSame(getUserId(),o.getUserId())) diffs.add("USER_ID");
		if(!isSame(getFileName(),o.getFileName())) diffs.add("FILE_NAME");
		if(!isSame(getFileSize(),o.getFileSize())) diffs.add("FILE_SIZE");
		if(!isSame(getFileType(),o.getFileType())) diffs.add("FILE_TYPE");
		if(!isSame(getBlobFile(),o.getBlobFile())) diffs.add("BLOB_FILE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(user != null && user.isNewInstance())
				user.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
