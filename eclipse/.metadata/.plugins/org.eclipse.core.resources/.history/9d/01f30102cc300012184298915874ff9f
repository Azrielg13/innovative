package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.ScopeItem;
import com.sce.esp.object.model.ScopeItemCostYear;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ScopeItemCostYearDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCOPE_ITEM_ID,YEAR};
	public static enum PROPERTY{SCOPE_ITEM_ID,YEAR,COST,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SCOPEITEMID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int COST_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int scopeItemId;
	private int year;
	private int cost;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private ScopeItem scopeItem;
	public static ScopeItemCostYear getInstance(int scopeItemId, int year)throws java.sql.SQLException{
		return getInstance(scopeItemId, year, true);
	}
	public static ScopeItemCostYear getInstance(int scopeItemId, int year, boolean fetch)throws java.sql.SQLException{
		if(isNull(scopeItemId, year))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scopeItemId, year);
		Cache cache = em.getEntityManagerFactory().getCache();
		ScopeItemCostYear o = null;
		if(cache != null && cache.contains(ScopeItemCostYear.class, pk))
			o = em.find(ScopeItemCostYear.class, pk);
		if(o==null && getAICache().contains(ScopeItemCostYear.class, pk))
			o = getAICache().find(ScopeItemCostYear.class, pk);
		if(o==null && fetch)
			o = em.find(ScopeItemCostYear.class, pk);
		if(o==null && fetch && ScopeItemCostYear.class.getAnnotation(AutoInsertable.class) != null){
			o = new ScopeItemCostYear(scopeItemId, year);
			getAICache().cache(ScopeItemCostYear.class, o);
		}
		return o;
	}
	public static Collection<ScopeItemCostYear> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ScopeItemCostYear> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ScopeItemCostYear> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ScopeItemCostYear o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ScopeItemCostYear> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeItemCostYear> tq = em.createQuery(jpql,ScopeItemCostYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ScopeItemCostYear> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeItemCostYear> tq = em.createNamedQuery(name,ScopeItemCostYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ScopeItemCostYearDAO(){}
	public ScopeItemCostYearDAO(int scopeItemId, int year){
		this.scopeItemId=scopeItemId;
		this.year=year;
	}
	public ScopeItemCostYearDAO(ScopeItemCostYearDAO orig){
		super(orig);
		this.scopeItemId=orig.getScopeItemId();
		this.year=orig.getYear();
		copyFrom(orig);
	}
	public void copyFrom(ScopeItemCostYearDAO orig){
		this.cost=orig.getCost();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scopeItemId, year};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="SCOPE_ITEM_ID",nullable=false,length=9)
	public int getScopeItemId(){
		return scopeItemId;
	}
	public void setScopeItemId(int scopeItemId) throws java.sql.SQLException{
		if(isSame(scopeItemId, getScopeItemId()))return;
		int oldValue = getScopeItemId();
		this.scopeItemId=scopeItemId;
		setProperty("SCOPE_ITEM_ID", scopeItemId, oldValue);
		scopeItem=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="COST",nullable=true,length=9)
	public int getCost(){
		return cost;
	}
	public void setCost(int cost) throws java.sql.SQLException{
		if(isSame(cost, getCost()))return;
		int oldValue = getCost();
		this.cost=cost;
		setProperty("COST", cost, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public ScopeItem getScopeItem()throws java.sql.SQLException{
		if(scopeItem==null)
			scopeItem=ScopeItem.getInstance(getScopeItemId());
		return scopeItem;
	}
	public void setScopeItem(ScopeItem scopeItem)throws java.sql.SQLException{
		setScopeItemId(scopeItem==null?0:scopeItem.getScopeItemId());
		this.scopeItem=scopeItem;
	}
	public ScopeItemCostYear copy()throws java.sql.SQLException{
		ScopeItemCostYear cp = new ScopeItemCostYear((ScopeItemCostYear)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ScopeItemCostYearDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ScopeItemCostYearDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScopeItemId(),o.getScopeItemId())) diffs.add("SCOPE_ITEM_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getCost(),o.getCost())) diffs.add("COST");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
