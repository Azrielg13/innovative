package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Abank;
import com.sce.esp.object.model.Stl;
import com.sce.esp.object.model.Sub;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class AbankDAO extends Sub{
	public static enum KEY_PROPERTY{PLANYEAR,ABANK_SUB_ID};
	public static enum PROPERTY{PLANYEAR,ABANK_SUB_ID,Q_LOSS_NOTE,COND_NOTE,STL_FINALIZED,STL_APPROVED,VAR_NOTE};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int ABANKSUBID_LIMIT = 9;
	public final static int QLOSSNOTE_LIMIT = 256;
	public final static int CONDNOTE_LIMIT = 256;
	public final static int STLFINALIZED_LIMIT = 1;
	public final static int STLAPPROVED_LIMIT = 1;
	public final static int VARNOTE_LIMIT = 256;
	private int planyear;
	private int abankSubId;
	private String qLossNote;
	private String condNote;
	private boolean stlFinalized;
	private boolean stlApproved;
	private String varNote;
	private Collection<Stl> stls;
	private Sub sub;
	public static Abank getInstance(int planyear, int abankSubId)throws java.sql.SQLException{
		return getInstance(planyear, abankSubId, true);
	}
	public static Abank getInstance(int planyear, int abankSubId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, abankSubId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, abankSubId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Abank o = null;
		if(cache != null && cache.contains(Abank.class, pk))
			o = em.find(Abank.class, pk);
		if(o==null && getAICache().contains(Abank.class, pk))
			o = getAICache().find(Abank.class, pk);
		if(o==null && fetch)
			o = em.find(Abank.class, pk);
		if(o==null && fetch && Abank.class.getAnnotation(AutoInsertable.class) != null){
			o = new Abank(planyear, abankSubId);
			getAICache().cache(Abank.class, o);
		}
		return o;
	}
	public static Collection<Abank> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Abank> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Abank> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Abank o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Abank> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Abank> tq = em.createQuery(jpql,Abank.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Abank> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Abank> tq = em.createNamedQuery(name,Abank.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public AbankDAO(){}
	public AbankDAO(int planyear, int abankSubId){
		this.planyear=planyear;
		this.abankSubId=abankSubId;
	}
	public AbankDAO(AbankDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.abankSubId=orig.getAbankSubId();
		copyFrom(orig);
	}
	public void copyFrom(AbankDAO orig){
		this.qLossNote=orig.getQLossNote();
		this.condNote=orig.getCondNote();
		this.stlFinalized=orig.isStlFinalized();
		this.stlApproved=orig.isStlApproved();
		this.varNote=orig.getVarNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, abankSubId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="ABANK_SUB_ID",nullable=false,length=9)
	public int getAbankSubId(){
		return abankSubId;
	}
	public void setAbankSubId(int abankSubId) throws java.sql.SQLException{
		if(isSame(abankSubId, getAbankSubId()))return;
		int oldValue = getAbankSubId();
		this.abankSubId=abankSubId;
		setProperty("ABANK_SUB_ID", abankSubId, oldValue);
		sub=null;
	}
	@Column(name="Q_LOSS_NOTE",nullable=true,length=256)
	public String getQLossNote(){
		return qLossNote;
	}
	public void setQLossNote(String qLossNote) throws java.sql.SQLException{
		if(isSame(qLossNote, getQLossNote()))return;
		String oldValue = getQLossNote();
		this.qLossNote=qLossNote;
		setProperty("Q_LOSS_NOTE", qLossNote, oldValue);
	}
	@Column(name="COND_NOTE",nullable=true,length=256)
	public String getCondNote(){
		return condNote;
	}
	public void setCondNote(String condNote) throws java.sql.SQLException{
		if(isSame(condNote, getCondNote()))return;
		String oldValue = getCondNote();
		this.condNote=condNote;
		setProperty("COND_NOTE", condNote, oldValue);
	}
	@Column(name="STL_FINALIZED",nullable=true,length=1)
	public boolean isStlFinalized(){
		return stlFinalized;
	}
	public void setStlFinalized(boolean stlFinalized) throws java.sql.SQLException{
		if(isSame(stlFinalized, isStlFinalized()))return;
		boolean oldValue = isStlFinalized();
		this.stlFinalized=stlFinalized;
		setProperty("STL_FINALIZED", stlFinalized, oldValue);
	}
	@Column(name="STL_APPROVED",nullable=true,length=1)
	public boolean isStlApproved(){
		return stlApproved;
	}
	public void setStlApproved(boolean stlApproved) throws java.sql.SQLException{
		if(isSame(stlApproved, isStlApproved()))return;
		boolean oldValue = isStlApproved();
		this.stlApproved=stlApproved;
		setProperty("STL_APPROVED", stlApproved, oldValue);
	}
	@Column(name="VAR_NOTE",nullable=true,length=256)
	public String getVarNote(){
		return varNote;
	}
	public void setVarNote(String varNote) throws java.sql.SQLException{
		if(isSame(varNote, getVarNote()))return;
		String oldValue = getVarNote();
		this.varNote=varNote;
		setProperty("VAR_NOTE", varNote, oldValue);
	}
	public Sub getSub()throws java.sql.SQLException{
		if(sub==null)
			sub=Sub.getInstance(getPlanyear(), getAbankSubId());
		return sub;
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		setAbankSubId(sub==null?0:sub.getSubId());
		this.sub=sub;
	}
	public Collection<Stl> getStls()throws java.sql.SQLException{
		if(isNewInstance() || stls != null){
			if(stls == null)
				stls = new TreeSet<Stl>();
			return stls;
		}
		return Stl.getNamedCollection("findByAbank",getPlanyear(), getAbankSubId());
	}
	public void addStl(Stl stl)throws java.sql.SQLException{
		stl.setAbank((Abank)this);
		if(isNewInstance() || stls != null)
			getStls().add(stl);
		else
			stl.insert();
	}
	public void removeStl(Stl stl)throws java.sql.SQLException{
		if(isNewInstance() || stls != null)
			getStls().remove(stl);
		else
			stl.delete();
	}
	public Abank copy()throws java.sql.SQLException{
		Abank cp = new Abank((Abank)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(AbankDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(Stl child:getStls())
			cp.addStl(child.copy());
	}
	public Vector<String> getDifference(AbankDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getAbankSubId(),o.getAbankSubId())) diffs.add("ABANK_SUB_ID");
		if(!isSame(getQLossNote(),o.getQLossNote())) diffs.add("Q_LOSS_NOTE");
		if(!isSame(getCondNote(),o.getCondNote())) diffs.add("COND_NOTE");
		if(!isSame(isStlFinalized(),o.isStlFinalized())) diffs.add("STL_FINALIZED");
		if(!isSame(isStlApproved(),o.isStlApproved())) diffs.add("STL_APPROVED");
		if(!isSame(getVarNote(),o.getVarNote())) diffs.add("VAR_NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(stls != null){
			for(Stl stl:getStls()){
				if(stl.isNewInstance())
					stl.setAbank((Abank)this);
				stl.insert();
			}
			stls = null;
		}
	}
}
