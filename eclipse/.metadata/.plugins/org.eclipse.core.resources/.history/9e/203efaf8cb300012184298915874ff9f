package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import javax.swing.Icon;

import com.sce.esp.util.IconsFactory;

/**
 * This object has been created to provide the ability to assign
 * projects to T Subs (AA-BANK's with voltage transformation of
 * 500/220kV). 
 * 
 * The Transmission <code>Sub</code> Wrapper class which extends
 * <code>Sub</code>.  The object data is currently stored in
 * the <code>Abank</code> table.  Tbank records are of
 * <code>SubType</code> T. 
 * 
 * @author TIG
 *
 */
public class Tbank extends Sub implements FacilityObject{
	
	private Abank abank;
	
	public Tbank(Abank abank) {
		this.abank=abank;
	}

	@Override
	public Collection<Weatherstation> getWeatherStations() throws SQLException {
		return abank.getDistrict().getWeatherStations();
	}

	@Override
	public Collection<Weatherstation> getWeatherStationsByInstance() throws SQLException {
		return abank.getDistrict().getWeatherStationsByInstance();
	}

	@Override
	public double getPercentInstance(Weatherstation ws) throws SQLException {
		return abank.getDistrict().getPercentInstance(ws);
	}

	@Override
	public Icon getIcon() {
		return IconsFactory.ICON_TBANK;
	}

	@Override
	public Collection<? extends CoreObject> getChildren(int simId) throws SQLException {
		return null;
	}

	@Override
	public Collection<? extends CoreObject> getChildren(int simId, SubFilter sf) throws SQLException {
		return null;
	}

	@Override
	public CoreObject getPlanYearInstance(int planyear) throws SQLException {
		// TODO Auto-generated method stub
		return abank.getPlanYearInstance(planyear);
	}

	@Override
	public int getPaTotal(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getPaFin(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getLgTotal(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getLgFin(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getCsTotal(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getCsFin(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getN1Total(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getN1Fin(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getVarTotal(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getVarFin(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getPaApp(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getLgApp(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getCsApp(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getN1App(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getVarApp(int simId) throws SQLException {
		return 0;
	}

	@Override
	public Collection<Pif> getPifs() throws SQLException {
		return null;
	}

	@Override
	public double getVarASupply(int simId, int year) throws SQLException {
		return 0;
	}

	@Override
	public double getVarARequired(int simId, int year) throws SQLException {
		return 0;
	}

	@Override
	public double getVarBSupply(int simId, int year) throws SQLException {
		return 0;
	}

	@Override
	public double getVarBRequired(int simId, int year) throws SQLException {
		return 0;
	}

	@Override
	public double getVarAReserved(int simId, int year) throws SQLException {
		return 0;
	}

	@Override
	public double getVarBReserved(int simId, int year) throws SQLException {
		return 0;
	}

	@Override
	public TreeSet<SceProjRev> getSceProjRevsCostYr(int simId, Collection<Program> progs, int projStatuses, int costYear) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}


	@Override
	public CoType getCoType() throws SQLException {
		return CoType.getInstance(CoType.TBANK);
	}

	@Override
	public AutomatedEquipment getCoinParent() throws SQLException {
		return null;
	}

	@Override
	public TreeSet<SubVar> getAllEverSubVars(int simId) throws SQLException {
		return null;
	}

	@Override
	public SubYear getYear(int simId, int year, boolean fetch) throws SQLException {
		return abank.getYear(simId, year);
	}

	@Override
	public Sub getPrevInstance() throws SQLException {
		return abank.getPrevInstance().getTbank();
	}

	@Override
	public int getNonCoinChildFlag(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getCoinChildFlag(int simId) throws SQLException {
		return 0;
	}

	@Override
	public int getVarReserveFlag(int simId) throws SQLException {
		return 0;
	}

	@Override
	public Collection<LgProj> getLgProjs(int simId) throws SQLException {
		return null;
	}

	@Override
	public void setN1Finalized(boolean finalized) throws SQLException {
		
	}

	@Override
	public void setN1Approved(boolean finalized) throws SQLException {
		
	}

	@Override
	public void setVarFinalized(boolean finalized) throws SQLException {
		
	}

	@Override
	public void setVarApproved(boolean finalized) throws SQLException {
		
	}

	@Override
	public double getCoinChildTotalProjLoad(int simId) throws SQLException {
		return 0;
	}

	@Override
	public double getPRN(int simId) throws SQLException {
		return 0;
	}

	@Override
	public double getNormPRN(int simId) throws SQLException {
		return 0;
	}

	@Override
	public boolean isPRNEditable(int simId) throws SQLException {
		return false;
	}

	@Override
	public double getAltPRN(int simId) throws SQLException {
		return 0;
	}

	@Override
	public Sub copy() throws SQLException {
		return null;
	}

	@Override
	public int getId() {
		return abank.getId();
	}

	@Override
	public String getName() {
		return abank.getName();
	}

	@Override
	public double getMVAFactor() throws SQLException {
		return abank.getMVAFactor();
	}

	@Override
	public String getStatus(int simId) throws SQLException {
		return abank.getStatus(simId);
	}

	@Override
	public String toString() {
		return abank.toString();
	}

	@Override
	public SubType getSubType() throws SQLException {
		return abank.getSubType();
	}

	@Override
	public SimSub getSimSub(int simId) throws SQLException {
		return abank.getSimSub(simId);
	}

	public String getSubName(){
		return abank.getSubName();
	}
	
	public int getCoTypeId(){
		return CoType.TBANK;
	}

//	@Override
//	public synchronized TreeSet<SceProjElemCost> getSceProjElemCosts() throws SQLException {
//		// TODO Auto-generated method stub
//		return super.getSceProjElemCosts();
//	}
	public TreeSet<SceProj> getSceProjs() throws SQLException{
		TreeSet<SceProj> sceProjs = new TreeSet<SceProj>();
		for(SceProjElemCost cost:getSceProjElemCosts())
			sceProjs.add(cost.getSceProjRev().getSceProj());
		return sceProjs;
	}

	//XXX hate this. hate you
	public TreeSet<SceProj> getSceProjs(int simId) throws SQLException{
		TreeSet<SceProj> sceProjs = new TreeSet<SceProj>();
		for(SceProjElemCost cost:getSceProjElemCosts())
			sceProjs.add(cost.getSceProjRev().getSceProj());
		return sceProjs;
	}

	public synchronized TreeSet<SceProjElemCost> getSceProjElemCosts()throws SQLException{
		@SuppressWarnings("unchecked")
		TreeSet<SceProjElemCost> specs = (TreeSet<SceProjElemCost>)getCachedValue("getSceProjElemCosts");
		if(specs==null){
			specs = new TreeSet<SceProjElemCost>(SceProjElemCost.getNamedCollection("findBySub", getCoTypeId(), getId()));
			setCachedValue(specs, "getSceProjElemCosts");
		}
		return specs;
	}
	
	public int getPlanyear(){
		return abank.getPlanyear();
	}

	@Override
	public TreeSet<Sys> getSyss(int simId) throws SQLException {
		return super.getSyss(simId);
	}

	@Override
	public TreeSet<Sys> getSyssSCE(int simId) throws SQLException {
		return super.getSyssSCE(simId);
	}

	@Override
	public synchronized Collection<ScopeItem> getScopeItems()
			throws SQLException {
		return super.getScopeItems();
	}

	
	public TreeSet<SceProjRev> getSceProjRevs(int simId, Collection<Program> progs,int projStatuses) throws SQLException {
		TreeSet<SceProjRev> sceProjRevs = new TreeSet<SceProjRev>();
		for(SceProjElemCost spec:getSceProjElemCosts()){
			SceProjRev rev = spec.getSceProjRev().getSceProj().getCurRev(getPlanyear(), simId);
			if(rev != null && (progs == null || progs.contains(rev.getProgram())) && (rev.getProjectStatus() & projStatuses) > 1)
				sceProjRevs.add(rev);
		}
		return sceProjRevs;
	}

}
