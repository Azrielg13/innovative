package com.sce.esp.dialog;

import java.awt.event.ActionEvent;
import java.io.Serializable;
import java.sql.SQLException;

import javax.swing.AbstractAction;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;

import com.jidesoft.dialog.PageList;
import com.jidesoft.swing.JideSwingUtilities;
import com.jidesoft.wizard.AbstractWizardPage;
import com.jidesoft.wizard.WizardDialog;
import com.jidesoft.wizard.WizardStyle;
import com.sce.esp.util.IconsFactory;

/**
 * <p>ESPWizard</br>
 * <p>Creates an abstract ESP Wizard Class.</p>
 *
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public abstract class ESPWizard extends WizardDialog implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 4889017948137006029L;
	protected PageList model;
	private boolean completed;
	
	public static ImageIcon WIZARD = IconsFactory.getImageIcon(IconsFactory.Wizard.WIZARD);
	public static ImageIcon BRIEFCASE = IconsFactory.getImageIcon(IconsFactory.Wizard.BRIEFCASE);
	public static ImageIcon PROJSELECT = IconsFactory.getImageIcon(IconsFactory.Wizard.PROJSELECTION);
	public static ImageIcon ADDWIZARD = (IconsFactory.getImageIcon(IconsFactory.Frame.ADDWIZARD));
	public static ImageIcon DELWIZARD = (IconsFactory.getImageIcon(IconsFactory.Frame.DELWIZARD));
	public static ImageIcon LISTRIGHT = IconsFactory.getImageIcon(IconsFactory.Wizard.LISTRIGHT);
	public static ImageIcon LISTLEFT = IconsFactory.getImageIcon(IconsFactory.Wizard.LISTLEFT);
	public static ImageIcon DUCTBANK = IconsFactory.getImageIcon(IconsFactory.Wizard.DUCTBANK);
	public static ImageIcon PWR_QLTY =  IconsFactory.getImageIcon(IconsFactory.Wizard.PWR_QLTY);
	public static ImageIcon MATRIX =  IconsFactory.getScaledImageIcon(IconsFactory.Wizard.MATRIX,256);
	public static ImageIcon RETRACT = IconsFactory.getImageIcon( IconsFactory.Frame.RETRACT);
	/**
	 * This constructor requires all fields to be passed as parameters.
	 * @param jf the parent frame
	 * @param title the dialogs title
	 */
	protected ESPWizard(JFrame jf, String title){
		super(jf, title);
		WizardStyle.setStyle(WizardStyle.WIZARD97_STYLE);
		setDefaultGraphic(IconsFactory.getImageIcon(IconsFactory.Wizard.WELCOME).getImage());
		setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
		setActions();
	}

	/**
	 * Update is where the wizard shall insert
	 * the new record
	 * @throws SQLException the SQL insert exception
	 */
	public abstract void update() throws Exception;

	/**
	 * Creates the help content.
	 */
	public void setupHelpText() {
		if(getCurrentPage() instanceof ESPWizardPage) {
			for(int i=0; i<model.getPageCount(); i++) {
				if(getCurrentPage()==model.getPage(i)) {					
					ESPWizardPage mwp = ((ESPWizardPage)model.getPage(i));
					mwp.setHelpText(mwp.getHelpText());
				}
			}
		}
	}

	/**
	 * 
	 */
	public void setActions() {
		setFinishAction(new AbstractAction("Finish") {
			private static final long serialVersionUID = -7085880805402640349L;
			public void actionPerformed(ActionEvent ae) {
				try {
					update();
					dispose();
				} catch (Exception e) {
					e.printStackTrace();
					ErrorDialog.showError(null, "Insert Error", e);
				}
            }
		});
		setCancelAction(new AbstractAction("Cancel") {
			private static final long serialVersionUID = -3547443955914946388L;
			public void actionPerformed(ActionEvent e) {
		        dispose();
		    }
        });
		setNextAction(new AbstractAction("Next") {
			private static final long serialVersionUID = 2422623406949203426L;
			public void actionPerformed(ActionEvent e) {
		        setCurrentPage(getNextPage(),false);
		        setupHelpText();
		    }
        });
		setBackAction(new AbstractAction("Back") {
			private static final long serialVersionUID = 396485380151412300L;
			public void actionPerformed(ActionEvent e) {
		    	if(getVisitedPages().size()>0)
		    		setCurrentPage(((AbstractWizardPage)getVisitedPages().get(getVisitedPages().size()-1)).getTitle(),true);
		    	else {
		    		int index = model.getPageIndexByFullTitle(getCurrentPage().getFullTitle());
	                if (index > 0) {
	                    index --;
	                    setCurrentPage(model.getPage(index), true);
	                }
		    	}
		        setupHelpText();
		    }
        });
	}//END setActions

	/**
	 * Display the wizard dialog.
	 */
	public void showDialog(){
		pack();
		JideSwingUtilities.globalCenterWindow(this);
		setResizable(true);
		setVisible(true);
	}
	
	public void setCompleted(boolean completed){
		this.completed = completed;
	}
	
	public boolean isCompleted(){
		return completed;
	}
}