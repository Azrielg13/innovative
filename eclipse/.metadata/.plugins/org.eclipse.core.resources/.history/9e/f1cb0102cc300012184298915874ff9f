package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CommitteeTracking;
import com.sce.esp.object.model.GateTracking;
import com.sce.esp.object.model.MitigationRisk;
import com.sce.esp.object.model.Org;
import com.sce.esp.object.model.Program;
import com.sce.esp.object.model.ProjMajorMtl;
import com.sce.esp.object.model.ProjResourceEval;
import com.sce.esp.object.model.ProjRevFile;
import com.sce.esp.object.model.ProjRevOffset;
import com.sce.esp.object.model.SceProj;
import com.sce.esp.object.model.SceProjAssumption;
import com.sce.esp.object.model.SceProjDriver;
import com.sce.esp.object.model.SceProjElemCost;
import com.sce.esp.object.model.SceProjMitigation;
import com.sce.esp.object.model.SceProjRev;
import com.sce.esp.object.model.SceProjTracking;
import com.sce.esp.object.model.User;
import java.sql.Clob;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SceProjRevDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCE_PROJ_REV_ID};

	public static enum PROPERTY{SCE_PROJ_REV_ID,SCE_PROJ_ID,REV_TS,ORG_ID,SPONSOR_PROJ_ID,SPONSOR_PROJ_NUM,SPONSOR_USER_ID,PROGRAM_ID,PROJ_NUM,LOCATION,TITLE,NEED,NOTE,ALT_PROJ_NOTE,ESCALATION_RATE,PRIORITY_OVERRIDE,PROJ_STATUS,COMMITTEE,FILE_NO,PMO_ORG_ID,PMO_NOTE,N1_RESERVE_NO_PROJ,PROJ_PRIORITY,RESERVE_HC_NO_PROJ,EPEF_NUM,ACTIVE,OD_NOTE,EPEF_SUBMIT_USER_ID,EPEF_SUBMIT_TS,EPEF_COMMENT,EPEF_OFFSET_COMMENT,EPEF_REL_TRENDS,EPEF_ACK_USER_ID,EPEF_ACK_TS,EPEF_TRACKING_SENT_TS,EPEF_APP_USER_ID,EPEF_APP_BY_USER_ID,EPEF_RESOLUTION_TS,EPEF_RESOLUTION,EPEF_RESOLUTION_NOTE,EPEF_APP_EXPIRE_TS,EPEF_PRIORITY_NEEDED,ATP_NEED_TS,RETRACT_REQ_TS,RETRACT_REQ_USER_ID,RETRACT_REQ_NOTE,NERC_EXPECTED,ENG_SCH_ORG_ID,ENG_SCH_USER_ID,TOTAL_DURATION,RESERVE_NO_PROJ,AVG_CKT_LOAD_NO_PROJ,ALT_DOUBLE3,EPEF_COMMENT2,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,USE_DEFAULT_TITLE,USE_CALC_JUST,CRIT_ASS,ECON_JUST,FINALIZED,REVIEWED,FORCE_REV_STATUS,SIM_ID,GO131D,GRC,DESCRIPTION,TASK_ID,RISK_OF_MISALIGNMENT,RISK_OF_MISSALIGNMENT_NOTES};
	public final static int SCEPROJREVID_LIMIT = 9;
	public final static int SCEPROJID_LIMIT = 9;
	public final static int REVTS_LIMIT = 7;
	public final static int ORGID_LIMIT = 9;
	public final static int SPONSORPROJID_LIMIT = 32;
	public final static int SPONSORPROJNUM_LIMIT = 32;
	public final static int SPONSORUSERID_LIMIT = 9;
	public final static int PROGRAMID_LIMIT = 9;
	public final static int PROJNUM_LIMIT = 32;
	public final static int LOCATION_LIMIT = 256;
	public final static int TITLE_LIMIT = 1024;
	public final static int NAME_LIMIT = 32;
	public final static int NEED_LIMIT = 1024;
	public final static int NOTE_LIMIT = 768;
	public final static int ALTPROJNOTE_LIMIT = 2048;
	public final static int ESCALATIONRATE_LIMIT = 24;
	public final static int PRIORITYOVERRIDE_LIMIT = 9;
	public final static int PROJSTATUS_LIMIT = 5;
	public final static int COMMITTEE_LIMIT = 64;
	public final static int FILENO_LIMIT = 2;
	public final static int PMOORGID_LIMIT = 9;
	public final static int PMONOTE_LIMIT = 256;
	public final static int N1RESERVENOPROJ_LIMIT = 24;
	public final static int PROJPRIORITY_LIMIT = 4;
	public final static int RESERVEHCNOPROJ_LIMIT = 24;
	public final static int EPEFNUM_LIMIT = 32;
	public final static int ACTIVE_LIMIT = 1;
	public final static int ODNOTE_LIMIT = 512;
	public final static int EPEFSUBMITUSERID_LIMIT = 9;
	public final static int EPEFSUBMITTS_LIMIT = 7;
	public final static int EPEFCOMMENT_LIMIT = 512;
	public final static int EPEFOFFSETCOMMENT_LIMIT = 256;
	public final static int EPEFRELTRENDS_LIMIT = 64;
	public final static int EPEFACKUSERID_LIMIT = 9;
	public final static int EPEFACKTS_LIMIT = 7;
	public final static int EPEFTRACKINGSENTTS_LIMIT = 7;
	public final static int EPEFAPPUSERID_LIMIT = 9;
	public final static int EPEFAPPBYUSERID_LIMIT = 9;
	public final static int EPEFRESOLUTIONTS_LIMIT = 7;
	public final static int EPEFRESOLUTION_LIMIT = 2;
	public final static int EPEFRESOLUTIONNOTE_LIMIT = 512;
	public final static int EPEFAPPEXPIRETS_LIMIT = 7;
	public final static int EPEFPRIORITYNEEDED_LIMIT = 1;
	public final static int ATPNEEDTS_LIMIT = 7;
	public final static int RETRACTREQTS_LIMIT = 7;
	public final static int RETRACTREQUSERID_LIMIT = 9;
	public final static int RETRACTREQNOTE_LIMIT = 512;
	public final static int NERCEXPECTED_LIMIT = 7;
	public final static int ENGSCHORGID_LIMIT = 9;
	public final static int ENGSCHUSERID_LIMIT = 9;
	public final static int TOTALDURATION_LIMIT = 9;
	public final static int RESERVENOPROJ_LIMIT = 24;
	public final static int AVGCKTLOADNOPROJ_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int EPEFCOMMENT2_LIMIT = 256;
	public final static int USEDEFAULTTITLE_LIMIT = 1;
	public final static int USECALCJUST_LIMIT = 1;
	public final static int CRITASS_LIMIT = 2048;
	public final static int ECONJUST_LIMIT = 2048;
	public final static int FINALIZED_LIMIT = 2;
	public final static int REVIEWED_LIMIT = 2;
	public final static int FORCEREVSTATUS_LIMIT = 1;
	public final static int SIMID_LIMIT = 9;
	public final static int GO131D_LIMIT = 2;
	public final static int GRC_LIMIT = 1;
	public final static int MPOLEADUSERID_LIMIT = 9;
	public final static int MPODEVUSERID_LIMIT = 9;
	public final static int MPOEXECUSERID_LIMIT = 9;
	public final static int TASKID_LIMIT = 9;
	public final static int GO131DFILINGTYPEID_LIMIT = 9;
	public final static int DESCRIPTION_LIMIT = 4000;
	public final static int RISKOFMISALIGNMENT_LIMIT = 9;
	public final static int RISKOFMISSALIGNMENTNOTES_LIMIT = 1024;
	private int sceProjRevId;
	private int sceProjId;
	private Calendar revTs;
	private int orgId;
	private String sponsorProjId;
	private String sponsorProjNum;
	private int sponsorUserId;
	private int programId;
	private String projNum;
	private String location;
	private String title;
	private String name;
	private String need;
	private String note;
	private String altProjNote;
	private double escalationRate = .03;
	private int priorityOverride;
	private int projStatus = 1;
	private String committee = "Grid Planning Committee";
	private int fileNo;
	private int pmoOrgId;
	private String pmoNote;
	private double n1ReserveNoProj;
	private int projPriority;
	private double reserveHcNoProj;
	private String epefNum;
	private boolean active = true;
	private String odNote;
	private int epefSubmitUserId;
	private Calendar epefSubmitTs;
	private String epefComment;
	private String epefOffsetComment;
	private String epefRelTrends;
	private int epefAckUserId;
	private Calendar epefAckTs;
	private Calendar epefTrackingSentTs;
	private int epefAppUserId;
	private int epefAppByUserId;
	private Calendar epefResolutionTs;
	private int epefResolution;
	private String epefResolutionNote;
	private Calendar epefAppExpireTs;
	private boolean epefPriorityNeeded = true;
	private Calendar atpNeedTs;
	private Calendar retractReqTs;
	private int retractReqUserId;
	private String retractReqNote;
	private Calendar nercExpected;
	private int engSchOrgId;
	private int engSchUserId;
	private int totalDuration;
	private double reserveNoProj;
	private double avgCktLoadNoProj;
	private double altDouble3;
	private String epefComment2;
	private boolean useDefaultTitle;
	private boolean useCalcJust;
	private String critAss;
	private String econJust;
	private int finalized;
	private int reviewed;
	private boolean forceRevStatus;
	private int simId = 0;
	private int go131D;
	private boolean grc;
	private int mpoLeadUserId;
	private int mpoDevUserId;
	private int mpoExecUserId;
	private int taskId;
	private int go131DFilingTypeId;
	private String description;
	private int riskOfMisalignment;
	private String riskOfMissalignmentNotes;
	private Collection<GateTracking> gateTrackings;
	private Collection<ProjRevFile> projRevFiles;
	private Collection<ProjResourceEval> projResourceEvals;
	private Collection<ProjMajorMtl> projMajorMtls;
	private Collection<ProjRevOffset> projRevOffsets;
	private Collection<ProjRevOffset> projRevOffsets2;
	private Collection<SceProjElemCost> sceProjElemCosts;
	private Collection<SceProjMitigation> sceProjMitigations;
	private Collection<SceProjTracking> sceProjTrackings;
	private Collection<CommitteeTracking> committeeTrackings;
	private Collection<SceProjDriver> sceProjDrivers;
	private Collection<SceProjAssumption> sceProjAssumptions;
	private MitigationRisk mitigationRisk;
	private SceProj sceProj;
	private Program program;
	private Org org;
	private User user;
	private Org org2;
	private User user2;
	private User user3;
	private User user4;
	private User user5;
	private User user6;
	private Org org3;
	private User user7;
	public static SceProjRev getInstance(int sceProjRevId)throws java.sql.SQLException{
		return getInstance(sceProjRevId, true);
	}
	public static SceProjRev getInstance(int sceProjRevId, boolean fetch)throws java.sql.SQLException{
		if(isNull(sceProjRevId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(sceProjRevId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjRev o = null;
		if(cache != null && cache.contains(SceProjRev.class, pk))
			o = em.find(SceProjRev.class, pk);
		if(o==null && getAICache().contains(SceProjRev.class, pk))
			o = getAICache().find(SceProjRev.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjRev.class, pk);
		if(o==null && fetch && SceProjRev.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjRev(sceProjRevId);
			getAICache().cache(SceProjRev.class, o);
		}
		return o;
	}
	public static Collection<SceProjRev> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjRev> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjRev> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjRev o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjRev> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjRev> tq = em.createQuery(jpql,SceProjRev.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjRev> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjRev> tq = em.createNamedQuery(name,SceProjRev.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjRevDAO(){}
	public SceProjRevDAO(int sceProjRevId){
		this.sceProjRevId=sceProjRevId;
	}
	public SceProjRevDAO(SceProjRevDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SceProjRevDAO orig){
		this.sceProjId=orig.getSceProjId();
		this.revTs=orig.getRevTs();
		this.orgId=orig.getOrgId();
		this.sponsorProjId=orig.getSponsorProjId();
		this.sponsorProjNum=orig.getSponsorProjNum();
		this.sponsorUserId=orig.getSponsorUserId();
		this.programId=orig.getProgramId();
		this.projNum=orig.getProjNum();
		this.location=orig.getLocation();
		this.title=orig.getTitle();
		this.name=orig.getName();
		this.need=orig.getNeed();
		this.note=orig.getNote();
		this.altProjNote=orig.getAltProjNote();
		this.escalationRate=orig.getEscalationRate();
		this.priorityOverride=orig.getPriorityOverride();
		this.projStatus=orig.getProjStatus();
		this.committee=orig.getCommittee();
		this.fileNo=orig.getFileNo();
		this.pmoOrgId=orig.getPmoOrgId();
		this.pmoNote=orig.getPmoNote();
		this.n1ReserveNoProj=orig.getN1ReserveNoProj();
		this.projPriority=orig.getProjPriority();
		this.reserveHcNoProj=orig.getReserveHcNoProj();
		this.epefNum=orig.getEpefNum();
		this.active=orig.isActive();
		this.odNote=orig.getOdNote();
		this.epefSubmitUserId=orig.getEpefSubmitUserId();
		this.epefSubmitTs=orig.getEpefSubmitTs();
		this.epefComment=orig.getEpefComment();
		this.epefOffsetComment=orig.getEpefOffsetComment();
		this.epefRelTrends=orig.getEpefRelTrends();
		this.epefAckUserId=orig.getEpefAckUserId();
		this.epefAckTs=orig.getEpefAckTs();
		this.epefTrackingSentTs=orig.getEpefTrackingSentTs();
		this.epefAppUserId=orig.getEpefAppUserId();
		this.epefAppByUserId=orig.getEpefAppByUserId();
		this.epefResolutionTs=orig.getEpefResolutionTs();
		this.epefResolution=orig.getEpefResolution();
		this.epefResolutionNote=orig.getEpefResolutionNote();
		this.epefAppExpireTs=orig.getEpefAppExpireTs();
		this.epefPriorityNeeded=orig.isEpefPriorityNeeded();
		this.atpNeedTs=orig.getAtpNeedTs();
		this.retractReqTs=orig.getRetractReqTs();
		this.retractReqUserId=orig.getRetractReqUserId();
		this.retractReqNote=orig.getRetractReqNote();
		this.nercExpected=orig.getNercExpected();
		this.engSchOrgId=orig.getEngSchOrgId();
		this.engSchUserId=orig.getEngSchUserId();
		this.totalDuration=orig.getTotalDuration();
		this.reserveNoProj=orig.getReserveNoProj();
		this.avgCktLoadNoProj=orig.getAvgCktLoadNoProj();
		this.altDouble3=orig.getAltDouble3();
		this.epefComment2=orig.getEpefComment2();
		this.useDefaultTitle=orig.isUseDefaultTitle();
		this.useCalcJust=orig.isUseCalcJust();
		this.critAss=orig.getCritAss();
		this.econJust=orig.getEconJust();
		this.finalized=orig.getFinalized();
		this.reviewed=orig.getReviewed();
		this.forceRevStatus=orig.isForceRevStatus();
		this.simId=orig.getSimId();
		this.go131D=orig.getGo131D();
		this.grc=orig.isGrc();
<<<<<<< .mine
=======
//		this.mpoLeadUserId=orig.getMpoLeadUserId();
//		this.mpoDevUserId=orig.getMpoDevUserId();
//		this.mpoExecUserId=orig.getMpoExecUserId();
>>>>>>> .r18324
		this.description=orig.getDescription();
		this.taskId=orig.getTaskId();
		this.go131DFilingTypeId=orig.getGo131DFilingTypeId();
		this.description=orig.getDescription();
		this.riskOfMisalignment=orig.getRiskOfMisalignment();
		this.riskOfMissalignmentNotes=orig.getRiskOfMissalignmentNotes();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{sceProjRevId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS40_SEQ",sequenceName="MDIS40_SEQ")
	@Column(name="SCE_PROJ_REV_ID",nullable=false,length=9)
	public int getSceProjRevId(){
		return sceProjRevId;
	}
	public void setSceProjRevId(int sceProjRevId) throws java.sql.SQLException{
		if(isSame(sceProjRevId, getSceProjRevId()))return;
		int oldValue = getSceProjRevId();
		this.sceProjRevId=sceProjRevId;
		setProperty("SCE_PROJ_REV_ID", sceProjRevId, oldValue);
	}
	@Column(name="SCE_PROJ_ID",nullable=false,length=9)
	public int getSceProjId(){
		return sceProjId;
	}
	public void setSceProjId(int sceProjId) throws java.sql.SQLException{
		if(isSame(sceProjId, getSceProjId()))return;
		int oldValue = getSceProjId();
		this.sceProjId=sceProjId;
		setProperty("SCE_PROJ_ID", sceProjId, oldValue);
		sceProj=null;
	}
	@Column(name="REV_TS",nullable=false,length=7)
	public Calendar getRevTs(){
		return revTs;
	}
	public void setRevTs(Calendar revTs) throws java.sql.SQLException{
		if(isSame(revTs, getRevTs()))return;
		Calendar oldValue = getRevTs();
		this.revTs=revTs;
		setProperty("REV_TS", revTs, oldValue);
	}
	@Column(name="ORG_ID",nullable=true,length=9)
	public int getOrgId(){
		return orgId;
	}
	public void setOrgId(int orgId) throws java.sql.SQLException{
		if(isSame(orgId, getOrgId()))return;
		int oldValue = getOrgId();
		this.orgId=orgId;
		setProperty("ORG_ID", orgId, oldValue);
		org=null;
	}
	@Column(name="SPONSOR_PROJ_ID",nullable=true,length=32)
	public String getSponsorProjId(){
		return sponsorProjId;
	}
	public void setSponsorProjId(String sponsorProjId) throws java.sql.SQLException{
		if(isSame(sponsorProjId, getSponsorProjId()))return;
		String oldValue = getSponsorProjId();
		this.sponsorProjId=sponsorProjId;
		setProperty("SPONSOR_PROJ_ID", sponsorProjId, oldValue);
	}
	@Column(name="SPONSOR_PROJ_NUM",nullable=true,length=32)
	public String getSponsorProjNum(){
		return sponsorProjNum;
	}
	public void setSponsorProjNum(String sponsorProjNum) throws java.sql.SQLException{
		if(isSame(sponsorProjNum, getSponsorProjNum()))return;
		String oldValue = getSponsorProjNum();
		this.sponsorProjNum=sponsorProjNum;
		setProperty("SPONSOR_PROJ_NUM", sponsorProjNum, oldValue);
	}
	@Column(name="SPONSOR_USER_ID",nullable=true,length=9)
	public int getSponsorUserId(){
		return sponsorUserId;
	}
	public void setSponsorUserId(int sponsorUserId) throws java.sql.SQLException{
		if(isSame(sponsorUserId, getSponsorUserId()))return;
		int oldValue = getSponsorUserId();
		this.sponsorUserId=sponsorUserId;
		setProperty("SPONSOR_USER_ID", sponsorUserId, oldValue);
		user=null;
	}
	@Column(name="PROGRAM_ID",nullable=false,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
		program=null;
	}
	@Column(name="PROJ_NUM",nullable=true,length=32)
	public String getProjNum(){
		return projNum;
	}
	public void setProjNum(String projNum) throws java.sql.SQLException{
		if(isSame(projNum, getProjNum()))return;
		String oldValue = getProjNum();
		this.projNum=projNum;
		setProperty("PROJ_NUM", projNum, oldValue);
	}
	@Column(name="LOCATION",nullable=true,length=256)
	public String getLocation(){
		return location;
	}
	public void setLocation(String location) throws java.sql.SQLException{
		if(isSame(location, getLocation()))return;
		String oldValue = getLocation();
		this.location=location;
		setProperty("LOCATION", location, oldValue);
	}
	@Column(name="TITLE",nullable=false,length=1024)
	public String getTitle(){
		return title;
	}
	public void setTitle(String title) throws java.sql.SQLException{
		if(isSame(title, getTitle()))return;
		String oldValue = getTitle();
		this.title=title;
		setProperty("TITLE", title, oldValue);
	}
	@Column(name="NAME",nullable=true,length=32)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="NEED",nullable=true,length=1024)
	public String getNeed(){
		return need;
	}
	public void setNeed(String need) throws java.sql.SQLException{
		if(isSame(need, getNeed()))return;
		String oldValue = getNeed();
		this.need=need;
		setProperty("NEED", need, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=768)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="ALT_PROJ_NOTE",nullable=true,length=2048)
	public String getAltProjNote(){
		return altProjNote;
	}
	public void setAltProjNote(String altProjNote) throws java.sql.SQLException{
		if(isSame(altProjNote, getAltProjNote()))return;
		String oldValue = getAltProjNote();
		this.altProjNote=altProjNote;
		setProperty("ALT_PROJ_NOTE", altProjNote, oldValue);
	}
	@Column(name="ESCALATION_RATE",nullable=true,length=24)
	public double getEscalationRate(){
		return escalationRate;
	}
	public void setEscalationRate(double escalationRate) throws java.sql.SQLException{
		if(isSame(escalationRate, getEscalationRate()))return;
		double oldValue = getEscalationRate();
		this.escalationRate=escalationRate;
		setProperty("ESCALATION_RATE", escalationRate, oldValue);
	}
	@Column(name="PRIORITY_OVERRIDE",nullable=true,length=9)
	public int getPriorityOverride(){
		return priorityOverride;
	}
	public void setPriorityOverride(int priorityOverride) throws java.sql.SQLException{
		if(isSame(priorityOverride, getPriorityOverride()))return;
		int oldValue = getPriorityOverride();
		this.priorityOverride=priorityOverride;
		setProperty("PRIORITY_OVERRIDE", priorityOverride, oldValue);
	}
	@Column(name="PROJ_STATUS",nullable=true,length=5)
	public int getProjStatus(){
		return projStatus;
	}
	public void setProjStatus(int projStatus) throws java.sql.SQLException{
		if(isSame(projStatus, getProjStatus()))return;
		int oldValue = getProjStatus();
		this.projStatus=projStatus;
		setProperty("PROJ_STATUS", projStatus, oldValue);
	}
	@Column(name="COMMITTEE",nullable=true,length=64)
	public String getCommittee(){
		return committee;
	}
	public void setCommittee(String committee) throws java.sql.SQLException{
		if(isSame(committee, getCommittee()))return;
		String oldValue = getCommittee();
		this.committee=committee;
		setProperty("COMMITTEE", committee, oldValue);
	}
	@Column(name="FILE_NO",nullable=true,length=2)
	public int getFileNo(){
		return fileNo;
	}
	public void setFileNo(int fileNo) throws java.sql.SQLException{
		if(isSame(fileNo, getFileNo()))return;
		int oldValue = getFileNo();
		this.fileNo=fileNo;
		setProperty("FILE_NO", fileNo, oldValue);
	}
	@Column(name="PMO_ORG_ID",nullable=true,length=9)
	public int getPmoOrgId(){
		return pmoOrgId;
	}
	public void setPmoOrgId(int pmoOrgId) throws java.sql.SQLException{
		if(isSame(pmoOrgId, getPmoOrgId()))return;
		int oldValue = getPmoOrgId();
		this.pmoOrgId=pmoOrgId;
		setProperty("PMO_ORG_ID", pmoOrgId, oldValue);
		org2=null;
	}
	@Column(name="PMO_NOTE",nullable=true,length=256)
	public String getPmoNote(){
		return pmoNote;
	}
	public void setPmoNote(String pmoNote) throws java.sql.SQLException{
		if(isSame(pmoNote, getPmoNote()))return;
		String oldValue = getPmoNote();
		this.pmoNote=pmoNote;
		setProperty("PMO_NOTE", pmoNote, oldValue);
	}
	@Column(name="N1_RESERVE_NO_PROJ",nullable=true,length=24)
	public double getN1ReserveNoProj(){
		return n1ReserveNoProj;
	}
	public void setN1ReserveNoProj(double n1ReserveNoProj) throws java.sql.SQLException{
		if(isSame(n1ReserveNoProj, getN1ReserveNoProj()))return;
		double oldValue = getN1ReserveNoProj();
		this.n1ReserveNoProj=n1ReserveNoProj;
		setProperty("N1_RESERVE_NO_PROJ", n1ReserveNoProj, oldValue);
	}
	@Column(name="PROJ_PRIORITY",nullable=true,length=4)
	public int getProjPriority(){
		return projPriority;
	}
	public void setProjPriority(int projPriority) throws java.sql.SQLException{
		if(isSame(projPriority, getProjPriority()))return;
		int oldValue = getProjPriority();
		this.projPriority=projPriority;
		setProperty("PROJ_PRIORITY", projPriority, oldValue);
	}
	@Column(name="RESERVE_HC_NO_PROJ",nullable=true,length=24)
	public double getReserveHcNoProj(){
		return reserveHcNoProj;
	}
	public void setReserveHcNoProj(double reserveHcNoProj) throws java.sql.SQLException{
		if(isSame(reserveHcNoProj, getReserveHcNoProj()))return;
		double oldValue = getReserveHcNoProj();
		this.reserveHcNoProj=reserveHcNoProj;
		setProperty("RESERVE_HC_NO_PROJ", reserveHcNoProj, oldValue);
	}
	@Column(name="EPEF_NUM",nullable=true,length=32)
	public String getEpefNum(){
		return epefNum;
	}
	public void setEpefNum(String epefNum) throws java.sql.SQLException{
		if(isSame(epefNum, getEpefNum()))return;
		String oldValue = getEpefNum();
		this.epefNum=epefNum;
		setProperty("EPEF_NUM", epefNum, oldValue);
	}
	@Column(name="ACTIVE",nullable=true,length=1)
	public boolean isActive(){
		return active;
	}
	public void setActive(boolean active) throws java.sql.SQLException{
		if(isSame(active, isActive()))return;
		boolean oldValue = isActive();
		this.active=active;
		setProperty("ACTIVE", active, oldValue);
	}
	@Column(name="OD_NOTE",nullable=true,length=512)
	public String getOdNote(){
		return odNote;
	}
	public void setOdNote(String odNote) throws java.sql.SQLException{
		if(isSame(odNote, getOdNote()))return;
		String oldValue = getOdNote();
		this.odNote=odNote;
		setProperty("OD_NOTE", odNote, oldValue);
	}
	@Column(name="EPEF_SUBMIT_USER_ID",nullable=true,length=9)
	public int getEpefSubmitUserId(){
		return epefSubmitUserId;
	}
	public void setEpefSubmitUserId(int epefSubmitUserId) throws java.sql.SQLException{
		if(isSame(epefSubmitUserId, getEpefSubmitUserId()))return;
		int oldValue = getEpefSubmitUserId();
		this.epefSubmitUserId=epefSubmitUserId;
		setProperty("EPEF_SUBMIT_USER_ID", epefSubmitUserId, oldValue);
		user2=null;
	}
	@Column(name="EPEF_SUBMIT_TS",nullable=true,length=7)
	public Calendar getEpefSubmitTs(){
		return epefSubmitTs;
	}
	public void setEpefSubmitTs(Calendar epefSubmitTs) throws java.sql.SQLException{
		if(isSame(epefSubmitTs, getEpefSubmitTs()))return;
		Calendar oldValue = getEpefSubmitTs();
		this.epefSubmitTs=epefSubmitTs;
		setProperty("EPEF_SUBMIT_TS", epefSubmitTs, oldValue);
	}
	@Column(name="EPEF_COMMENT",nullable=true,length=512)
	public String getEpefComment(){
		return epefComment;
	}
	public void setEpefComment(String epefComment) throws java.sql.SQLException{
		if(isSame(epefComment, getEpefComment()))return;
		String oldValue = getEpefComment();
		this.epefComment=epefComment;
		setProperty("EPEF_COMMENT", epefComment, oldValue);
	}
	@Column(name="EPEF_OFFSET_COMMENT",nullable=true,length=256)
	public String getEpefOffsetComment(){
		return epefOffsetComment;
	}
	public void setEpefOffsetComment(String epefOffsetComment) throws java.sql.SQLException{
		if(isSame(epefOffsetComment, getEpefOffsetComment()))return;
		String oldValue = getEpefOffsetComment();
		this.epefOffsetComment=epefOffsetComment;
		setProperty("EPEF_OFFSET_COMMENT", epefOffsetComment, oldValue);
	}
	@Column(name="EPEF_REL_TRENDS",nullable=true,length=64)
	public String getEpefRelTrends(){
		return epefRelTrends;
	}
	public void setEpefRelTrends(String epefRelTrends) throws java.sql.SQLException{
		if(isSame(epefRelTrends, getEpefRelTrends()))return;
		String oldValue = getEpefRelTrends();
		this.epefRelTrends=epefRelTrends;
		setProperty("EPEF_REL_TRENDS", epefRelTrends, oldValue);
	}
	@Column(name="EPEF_ACK_USER_ID",nullable=true,length=9)
	public int getEpefAckUserId(){
		return epefAckUserId;
	}
	public void setEpefAckUserId(int epefAckUserId) throws java.sql.SQLException{
		if(isSame(epefAckUserId, getEpefAckUserId()))return;
		int oldValue = getEpefAckUserId();
		this.epefAckUserId=epefAckUserId;
		setProperty("EPEF_ACK_USER_ID", epefAckUserId, oldValue);
		user5=null;
	}
	@Column(name="EPEF_ACK_TS",nullable=true,length=7)
	public Calendar getEpefAckTs(){
		return epefAckTs;
	}
	public void setEpefAckTs(Calendar epefAckTs) throws java.sql.SQLException{
		if(isSame(epefAckTs, getEpefAckTs()))return;
		Calendar oldValue = getEpefAckTs();
		this.epefAckTs=epefAckTs;
		setProperty("EPEF_ACK_TS", epefAckTs, oldValue);
	}
	@Column(name="EPEF_TRACKING_SENT_TS",nullable=true,length=7)
	public Calendar getEpefTrackingSentTs(){
		return epefTrackingSentTs;
	}
	public void setEpefTrackingSentTs(Calendar epefTrackingSentTs) throws java.sql.SQLException{
		if(isSame(epefTrackingSentTs, getEpefTrackingSentTs()))return;
		Calendar oldValue = getEpefTrackingSentTs();
		this.epefTrackingSentTs=epefTrackingSentTs;
		setProperty("EPEF_TRACKING_SENT_TS", epefTrackingSentTs, oldValue);
	}
	@Column(name="EPEF_APP_USER_ID",nullable=true,length=9)
	public int getEpefAppUserId(){
		return epefAppUserId;
	}
	public void setEpefAppUserId(int epefAppUserId) throws java.sql.SQLException{
		if(isSame(epefAppUserId, getEpefAppUserId()))return;
		int oldValue = getEpefAppUserId();
		this.epefAppUserId=epefAppUserId;
		setProperty("EPEF_APP_USER_ID", epefAppUserId, oldValue);
		user3=null;
	}
	@Column(name="EPEF_APP_BY_USER_ID",nullable=true,length=9)
	public int getEpefAppByUserId(){
		return epefAppByUserId;
	}
	public void setEpefAppByUserId(int epefAppByUserId) throws java.sql.SQLException{
		if(isSame(epefAppByUserId, getEpefAppByUserId()))return;
		int oldValue = getEpefAppByUserId();
		this.epefAppByUserId=epefAppByUserId;
		setProperty("EPEF_APP_BY_USER_ID", epefAppByUserId, oldValue);
		user4=null;
	}
	@Column(name="EPEF_RESOLUTION_TS",nullable=true,length=7)
	public Calendar getEpefResolutionTs(){
		return epefResolutionTs;
	}
	public void setEpefResolutionTs(Calendar epefResolutionTs) throws java.sql.SQLException{
		if(isSame(epefResolutionTs, getEpefResolutionTs()))return;
		Calendar oldValue = getEpefResolutionTs();
		this.epefResolutionTs=epefResolutionTs;
		setProperty("EPEF_RESOLUTION_TS", epefResolutionTs, oldValue);
	}
	@Column(name="EPEF_RESOLUTION",nullable=true,length=2)
	public int getEpefResolution(){
		return epefResolution;
	}
	public void setEpefResolution(int epefResolution) throws java.sql.SQLException{
		if(isSame(epefResolution, getEpefResolution()))return;
		int oldValue = getEpefResolution();
		this.epefResolution=epefResolution;
		setProperty("EPEF_RESOLUTION", epefResolution, oldValue);
	}
	@Column(name="EPEF_RESOLUTION_NOTE",nullable=true,length=512)
	public String getEpefResolutionNote(){
		return epefResolutionNote;
	}
	public void setEpefResolutionNote(String epefResolutionNote) throws java.sql.SQLException{
		if(isSame(epefResolutionNote, getEpefResolutionNote()))return;
		String oldValue = getEpefResolutionNote();
		this.epefResolutionNote=epefResolutionNote;
		setProperty("EPEF_RESOLUTION_NOTE", epefResolutionNote, oldValue);
	}
	@Column(name="EPEF_APP_EXPIRE_TS",nullable=true,length=7)
	public Calendar getEpefAppExpireTs(){
		return epefAppExpireTs;
	}
	public void setEpefAppExpireTs(Calendar epefAppExpireTs) throws java.sql.SQLException{
		if(isSame(epefAppExpireTs, getEpefAppExpireTs()))return;
		Calendar oldValue = getEpefAppExpireTs();
		this.epefAppExpireTs=epefAppExpireTs;
		setProperty("EPEF_APP_EXPIRE_TS", epefAppExpireTs, oldValue);
	}
	@Column(name="EPEF_PRIORITY_NEEDED",nullable=true,length=1)
	public boolean isEpefPriorityNeeded(){
		return epefPriorityNeeded;
	}
	public void setEpefPriorityNeeded(boolean epefPriorityNeeded) throws java.sql.SQLException{
		if(isSame(epefPriorityNeeded, isEpefPriorityNeeded()))return;
		boolean oldValue = isEpefPriorityNeeded();
		this.epefPriorityNeeded=epefPriorityNeeded;
		setProperty("EPEF_PRIORITY_NEEDED", epefPriorityNeeded, oldValue);
	}
	@Column(name="ATP_NEED_TS",nullable=true,length=7)
	public Calendar getAtpNeedTs(){
		return atpNeedTs;
	}
	public void setAtpNeedTs(Calendar atpNeedTs) throws java.sql.SQLException{
		if(isSame(atpNeedTs, getAtpNeedTs()))return;
		Calendar oldValue = getAtpNeedTs();
		this.atpNeedTs=atpNeedTs;
		setProperty("ATP_NEED_TS", atpNeedTs, oldValue);
	}
	@Column(name="RETRACT_REQ_TS",nullable=true,length=7)
	public Calendar getRetractReqTs(){
		return retractReqTs;
	}
	public void setRetractReqTs(Calendar retractReqTs) throws java.sql.SQLException{
		if(isSame(retractReqTs, getRetractReqTs()))return;
		Calendar oldValue = getRetractReqTs();
		this.retractReqTs=retractReqTs;
		setProperty("RETRACT_REQ_TS", retractReqTs, oldValue);
	}
	@Column(name="RETRACT_REQ_USER_ID",nullable=true,length=9)
	public int getRetractReqUserId(){
		return retractReqUserId;
	}
	public void setRetractReqUserId(int retractReqUserId) throws java.sql.SQLException{
		if(isSame(retractReqUserId, getRetractReqUserId()))return;
		int oldValue = getRetractReqUserId();
		this.retractReqUserId=retractReqUserId;
		setProperty("RETRACT_REQ_USER_ID", retractReqUserId, oldValue);
		user6=null;
	}
	@Column(name="RETRACT_REQ_NOTE",nullable=true,length=512)
	public String getRetractReqNote(){
		return retractReqNote;
	}
	public void setRetractReqNote(String retractReqNote) throws java.sql.SQLException{
		if(isSame(retractReqNote, getRetractReqNote()))return;
		String oldValue = getRetractReqNote();
		this.retractReqNote=retractReqNote;
		setProperty("RETRACT_REQ_NOTE", retractReqNote, oldValue);
	}
	@Column(name="NERC_EXPECTED",nullable=true,length=7)
	public Calendar getNercExpected(){
		return nercExpected;
	}
	public void setNercExpected(Calendar nercExpected) throws java.sql.SQLException{
		if(isSame(nercExpected, getNercExpected()))return;
		Calendar oldValue = getNercExpected();
		this.nercExpected=nercExpected;
		setProperty("NERC_EXPECTED", nercExpected, oldValue);
	}
	@Column(name="ENG_SCH_ORG_ID",nullable=true,length=9)
	public int getEngSchOrgId(){
		return engSchOrgId;
	}
	public void setEngSchOrgId(int engSchOrgId) throws java.sql.SQLException{
		if(isSame(engSchOrgId, getEngSchOrgId()))return;
		int oldValue = getEngSchOrgId();
		this.engSchOrgId=engSchOrgId;
		setProperty("ENG_SCH_ORG_ID", engSchOrgId, oldValue);
		org3=null;
	}
	@Column(name="ENG_SCH_USER_ID",nullable=true,length=9)
	public int getEngSchUserId(){
		return engSchUserId;
	}
	public void setEngSchUserId(int engSchUserId) throws java.sql.SQLException{
		if(isSame(engSchUserId, getEngSchUserId()))return;
		int oldValue = getEngSchUserId();
		this.engSchUserId=engSchUserId;
		setProperty("ENG_SCH_USER_ID", engSchUserId, oldValue);
		user7=null;
	}
	@Column(name="TOTAL_DURATION",nullable=true,length=9)
	public int getTotalDuration(){
		return totalDuration;
	}
	public void setTotalDuration(int totalDuration) throws java.sql.SQLException{
		if(isSame(totalDuration, getTotalDuration()))return;
		int oldValue = getTotalDuration();
		this.totalDuration=totalDuration;
		setProperty("TOTAL_DURATION", totalDuration, oldValue);
	}
	@Column(name="RESERVE_NO_PROJ",nullable=true,length=24)
	public double getReserveNoProj(){
		return reserveNoProj;
	}
	public void setReserveNoProj(double reserveNoProj) throws java.sql.SQLException{
		if(isSame(reserveNoProj, getReserveNoProj()))return;
		double oldValue = getReserveNoProj();
		this.reserveNoProj=reserveNoProj;
		setProperty("RESERVE_NO_PROJ", reserveNoProj, oldValue);
	}
	@Column(name="AVG_CKT_LOAD_NO_PROJ",nullable=true,length=24)
	public double getAvgCktLoadNoProj(){
		return avgCktLoadNoProj;
	}
	public void setAvgCktLoadNoProj(double avgCktLoadNoProj) throws java.sql.SQLException{
		if(isSame(avgCktLoadNoProj, getAvgCktLoadNoProj()))return;
		double oldValue = getAvgCktLoadNoProj();
		this.avgCktLoadNoProj=avgCktLoadNoProj;
		setProperty("AVG_CKT_LOAD_NO_PROJ", avgCktLoadNoProj, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="EPEF_COMMENT2",nullable=true,length=256)
	public String getEpefComment2(){
		return epefComment2;
	}
	public void setEpefComment2(String epefComment2) throws java.sql.SQLException{
		if(isSame(epefComment2, getEpefComment2()))return;
		String oldValue = getEpefComment2();
		this.epefComment2=epefComment2;
		setProperty("EPEF_COMMENT2", epefComment2, oldValue);
	}
	@Column(name="USE_DEFAULT_TITLE",nullable=true,length=1)
	public boolean isUseDefaultTitle(){
		return useDefaultTitle;
	}
	public void setUseDefaultTitle(boolean useDefaultTitle) throws java.sql.SQLException{
		if(isSame(useDefaultTitle, isUseDefaultTitle()))return;
		boolean oldValue = isUseDefaultTitle();
		this.useDefaultTitle=useDefaultTitle;
		setProperty("USE_DEFAULT_TITLE", useDefaultTitle, oldValue);
	}
	@Column(name="USE_CALC_JUST",nullable=true,length=1)
	public boolean isUseCalcJust(){
		return useCalcJust;
	}
	public void setUseCalcJust(boolean useCalcJust) throws java.sql.SQLException{
		if(isSame(useCalcJust, isUseCalcJust()))return;
		boolean oldValue = isUseCalcJust();
		this.useCalcJust=useCalcJust;
		setProperty("USE_CALC_JUST", useCalcJust, oldValue);
	}
	@Column(name="CRIT_ASS",nullable=true,length=2048)
	public String getCritAss(){
		return critAss;
	}
	public void setCritAss(String critAss) throws java.sql.SQLException{
		if(isSame(critAss, getCritAss()))return;
		String oldValue = getCritAss();
		this.critAss=critAss;
		setProperty("CRIT_ASS", critAss, oldValue);
	}
	@Column(name="ECON_JUST",nullable=true,length=2048)
	public String getEconJust(){
		return econJust;
	}
	public void setEconJust(String econJust) throws java.sql.SQLException{
		if(isSame(econJust, getEconJust()))return;
		String oldValue = getEconJust();
		this.econJust=econJust;
		setProperty("ECON_JUST", econJust, oldValue);
	}
	@Column(name="FINALIZED",nullable=true,length=2)
	public int getFinalized(){
		return finalized;
	}
	public void setFinalized(int finalized) throws java.sql.SQLException{
		if(isSame(finalized, getFinalized()))return;
		int oldValue = getFinalized();
		this.finalized=finalized;
		setProperty("FINALIZED", finalized, oldValue);
	}
	@Column(name="REVIEWED",nullable=true,length=2)
	public int getReviewed(){
		return reviewed;
	}
	public void setReviewed(int reviewed) throws java.sql.SQLException{
		if(isSame(reviewed, getReviewed()))return;
		int oldValue = getReviewed();
		this.reviewed=reviewed;
		setProperty("REVIEWED", reviewed, oldValue);
	}
	@Column(name="FORCE_REV_STATUS",nullable=true,length=1)
	public boolean isForceRevStatus(){
		return forceRevStatus;
	}
	public void setForceRevStatus(boolean forceRevStatus) throws java.sql.SQLException{
		if(isSame(forceRevStatus, isForceRevStatus()))return;
		boolean oldValue = isForceRevStatus();
		this.forceRevStatus=forceRevStatus;
		setProperty("FORCE_REV_STATUS", forceRevStatus, oldValue);
	}
	@Column(name="SIM_ID",nullable=true,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Column(name="GO131D",nullable=true,length=2)
	public int getGo131D(){
		return go131D;
	}
	public void setGo131D(int go131D) throws java.sql.SQLException{
		if(isSame(go131D, getGo131D()))return;
		int oldValue = getGo131D();
		this.go131D=go131D;
		setProperty("GO131D", go131D, oldValue);
	}
	@Column(name="GRC",nullable=true,length=1)
	public boolean isGrc(){
		return grc;
	}
	public void setGrc(boolean grc) throws java.sql.SQLException{
		if(isSame(grc, isGrc()))return;
		boolean oldValue = isGrc();
		this.grc=grc;
		setProperty("GRC", grc, oldValue);
	}
	@Column(name="TASK_ID",nullable=true,length=9)
	public int getTaskId(){
		return taskId;
	}
	public void setTaskId(int taskId) throws java.sql.SQLException{
		if(isSame(taskId, getTaskId()))return;
		int oldValue = getTaskId();
		this.taskId=taskId;
		setProperty("TASK_ID", taskId, oldValue);
	}
	@Column(name="GO131D_FILING_TYPE_ID",nullable=true,length=9)
	public int getGo131DFilingTypeId(){
		return go131DFilingTypeId;
	}
	@Column(name="RISK_OF_MISALIGNMENT",nullable=true,length=9)
	public int getRiskOfMisalignment(){
		return riskOfMisalignment;
	}
	public void setRiskOfMisalignment(int riskOfMisalignment) throws java.sql.SQLException{
		if(isSame(riskOfMisalignment, getRiskOfMisalignment()))return;
		int oldValue = getRiskOfMisalignment();
		this.riskOfMisalignment=riskOfMisalignment;
		setProperty("RISK_OF_MISALIGNMENT", riskOfMisalignment, oldValue);
		mitigationRisk=null;
	}
	@Column(name="RISK_OF_MISSALIGNMENT_NOTES",nullable=true,length=1024)
	public String getRiskOfMissalignmentNotes(){
		return riskOfMissalignmentNotes;
	}
	public void setRiskOfMissalignmentNotes(String riskOfMissalignmentNotes) throws java.sql.SQLException{
		if(isSame(riskOfMissalignmentNotes, getRiskOfMissalignmentNotes()))return;
		String oldValue = getRiskOfMissalignmentNotes();
		this.riskOfMissalignmentNotes=riskOfMissalignmentNotes;
		setProperty("RISK_OF_MISSALIGNMENT_NOTES", riskOfMissalignmentNotes, oldValue);
	}
	public MitigationRisk getMitigationRisk()throws java.sql.SQLException{
		if(mitigationRisk==null)
			mitigationRisk=MitigationRisk.getInstance(getRiskOfMisalignment());
		return mitigationRisk;
	}
	public void setMitigationRisk(MitigationRisk mitigationRisk)throws java.sql.SQLException{
		setRiskOfMisalignment(mitigationRisk==null?0:mitigationRisk.getMitigationRiskId());
		this.mitigationRisk=mitigationRisk;
	}
	public void setGo131DFilingTypeId(int go131DFilingTypeId) throws java.sql.SQLException{
		if(isSame(go131DFilingTypeId, getGo131DFilingTypeId()))return;
		int oldValue = getGo131DFilingTypeId();
		this.go131DFilingTypeId=go131DFilingTypeId;
		setProperty("GO131D_FILING_TYPE_ID", go131DFilingTypeId, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=4000)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	public SceProj getSceProj()throws java.sql.SQLException{
		if(sceProj==null)
			sceProj=SceProj.getInstance(getSceProjId());
		return sceProj;
	}
	public void setSceProj(SceProj sceProj)throws java.sql.SQLException{
		setSceProjId(sceProj==null?0:sceProj.getSceProjId());
		this.sceProj=sceProj;
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getProgramId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setProgramId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public Org getOrg()throws java.sql.SQLException{
		if(org==null)
			org=Org.getInstance(getOrgId());
		return org;
	}
	public void setOrg(Org org)throws java.sql.SQLException{
		setOrgId(org==null?0:org.getOrgId());
		this.org=org;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getSponsorUserId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setSponsorUserId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public Org getOrg2()throws java.sql.SQLException{
		if(org2==null)
			org2=Org.getInstance(getPmoOrgId());
		return org2;
	}
	public void setOrg2(Org org2)throws java.sql.SQLException{
		setPmoOrgId(org2==null?0:org2.getOrgId());
		this.org2=org2;
	}
	public User getUser2()throws java.sql.SQLException{
		if(user2==null)
			user2=User.getInstance(getEpefSubmitUserId());
		return user2;
	}
	public void setUser2(User user2)throws java.sql.SQLException{
		setEpefSubmitUserId(user2==null?0:user2.getUsernameId());
		this.user2=user2;
	}
	public User getUser3()throws java.sql.SQLException{
		if(user3==null)
			user3=User.getInstance(getEpefAppUserId());
		return user3;
	}
	public void setUser3(User user3)throws java.sql.SQLException{
		setEpefAppUserId(user3==null?0:user3.getUsernameId());
		this.user3=user3;
	}
	public User getUser4()throws java.sql.SQLException{
		if(user4==null)
			user4=User.getInstance(getEpefAppByUserId());
		return user4;
	}
	public void setUser4(User user4)throws java.sql.SQLException{
		setEpefAppByUserId(user4==null?0:user4.getUsernameId());
		this.user4=user4;
	}
	public User getUser5()throws java.sql.SQLException{
		if(user5==null)
			user5=User.getInstance(getEpefAckUserId());
		return user5;
	}
	public void setUser5(User user5)throws java.sql.SQLException{
		setEpefAckUserId(user5==null?0:user5.getUsernameId());
		this.user5=user5;
	}
	public User getUser6()throws java.sql.SQLException{
		if(user6==null)
			user6=User.getInstance(getRetractReqUserId());
		return user6;
	}
	public void setUser6(User user6)throws java.sql.SQLException{
		setRetractReqUserId(user6==null?0:user6.getUsernameId());
		this.user6=user6;
	}
	public Org getOrg3()throws java.sql.SQLException{
		if(org3==null)
			org3=Org.getInstance(getEngSchOrgId());
		return org3;
	}
	public void setOrg3(Org org3)throws java.sql.SQLException{
		setEngSchOrgId(org3==null?0:org3.getOrgId());
		this.org3=org3;
	}
	public User getUser7()throws java.sql.SQLException{
		if(user7==null)
			user7=User.getInstance(getEngSchUserId());
		return user7;
	}
	public void setUser7(User user7)throws java.sql.SQLException{
		setEngSchUserId(user7==null?0:user7.getUsernameId());
		this.user7=user7;
	}
	public Collection<ProjRevFile> getProjRevFiles()throws java.sql.SQLException{
		if(isNewInstance() || projRevFiles != null){
			if(projRevFiles == null)
				projRevFiles = new TreeSet<ProjRevFile>();
			return projRevFiles;
		}
		return ProjRevFile.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public Collection<GateTracking> getGateTrackings()throws java.sql.SQLException{
		if(isNewInstance() || gateTrackings != null){
			if(gateTrackings == null)
				gateTrackings = new TreeSet<GateTracking>();
			return gateTrackings;
		}

		return GateTracking.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addProjRevFile(ProjRevFile projRevFile)throws java.sql.SQLException{
		projRevFile.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || projRevFiles != null)
			getProjRevFiles().add(projRevFile);
		else
			projRevFile.insert();
	}

	public void addGateTracking(GateTracking gateTracking)throws java.sql.SQLException{
		gateTracking.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || gateTrackings != null)
			getGateTrackings().add(gateTracking);
		else
			gateTracking.insert();
	}
	public void removeProjRevFile(ProjRevFile projRevFile)throws java.sql.SQLException{
		if(isNewInstance() || projRevFiles != null)
			getProjRevFiles().remove(projRevFile);
		else
			projRevFile.delete();
	}
	public void removeGateTracking(GateTracking gateTracking)throws java.sql.SQLException{
		if(isNewInstance() || gateTrackings != null)
			getGateTrackings().remove(gateTracking);
		else
			gateTracking.delete();
	}
	public Collection<ProjResourceEval> getProjResourceEvals()throws java.sql.SQLException{
		if(isNewInstance() || projResourceEvals != null){
			if(projResourceEvals == null)
				projResourceEvals = new TreeSet<ProjResourceEval>();
			return projResourceEvals;
		}
		return ProjResourceEval.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addProjResourceEval(ProjResourceEval projResourceEval)throws java.sql.SQLException{
		projResourceEval.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || projResourceEvals != null)
			getProjResourceEvals().add(projResourceEval);
		else
			projResourceEval.insert();
	}
	public void removeProjResourceEval(ProjResourceEval projResourceEval)throws java.sql.SQLException{
		if(isNewInstance() || projResourceEvals != null)
			getProjResourceEvals().remove(projResourceEval);
		else
			projResourceEval.delete();
	}
	public Collection<ProjMajorMtl> getProjMajorMtls()throws java.sql.SQLException{
		if(isNewInstance() || projMajorMtls != null){
			if(projMajorMtls == null)
				projMajorMtls = new TreeSet<ProjMajorMtl>();
			return projMajorMtls;
		}
		return ProjMajorMtl.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addProjMajorMtl(ProjMajorMtl projMajorMtl)throws java.sql.SQLException{
		projMajorMtl.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || projMajorMtls != null)
			getProjMajorMtls().add(projMajorMtl);
		else
			projMajorMtl.insert();
	}
	public void removeProjMajorMtl(ProjMajorMtl projMajorMtl)throws java.sql.SQLException{
		if(isNewInstance() || projMajorMtls != null)
			getProjMajorMtls().remove(projMajorMtl);
		else
			projMajorMtl.delete();
	}
	public Collection<ProjRevOffset> getProjRevOffsets()throws java.sql.SQLException{
		if(isNewInstance() || projRevOffsets != null){
			if(projRevOffsets == null)
				projRevOffsets = new TreeSet<ProjRevOffset>();
			return projRevOffsets;
		}
		return ProjRevOffset.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addProjRevOffset(ProjRevOffset projRevOffset)throws java.sql.SQLException{
		projRevOffset.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || projRevOffsets != null)
			getProjRevOffsets().add(projRevOffset);
		else
			projRevOffset.insert();
	}
	public void removeProjRevOffset(ProjRevOffset projRevOffset)throws java.sql.SQLException{
		if(isNewInstance() || projRevOffsets != null)
			getProjRevOffsets().remove(projRevOffset);
		else
			projRevOffset.delete();
	}
	public Collection<ProjRevOffset> getProjRevOffsets2()throws java.sql.SQLException{
		if(isNewInstance() || projRevOffsets2 != null){
			if(projRevOffsets2 == null)
				projRevOffsets2 = new TreeSet<ProjRevOffset>();
			return projRevOffsets2;
		}
		return ProjRevOffset.getNamedCollection("findBySceProjRev2",getSceProjRevId());
	}
	public void addProjRevOffset2(ProjRevOffset projRevOffset2)throws java.sql.SQLException{
		projRevOffset2.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || projRevOffsets2 != null)
			getProjRevOffsets2().add(projRevOffset2);
		else
			projRevOffset2.insert();
	}
	public void removeProjRevOffset2(ProjRevOffset projRevOffset2)throws java.sql.SQLException{
		if(isNewInstance() || projRevOffsets2 != null)
			getProjRevOffsets2().remove(projRevOffset2);
		else
			projRevOffset2.delete();
	}
	public Collection<SceProjElemCost> getSceProjElemCosts()throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemCosts != null){
			if(sceProjElemCosts == null)
				sceProjElemCosts = new TreeSet<SceProjElemCost>();
			return sceProjElemCosts;
		}
		return SceProjElemCost.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		sceProjElemCost.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || sceProjElemCosts != null)
			getSceProjElemCosts().add(sceProjElemCost);
		else
			sceProjElemCost.insert();
	}
	public void removeSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemCosts != null)
			getSceProjElemCosts().remove(sceProjElemCost);
		else
			sceProjElemCost.delete();
	}
	public Collection<SceProjMitigation> getSceProjMitigations()throws java.sql.SQLException{
		if(isNewInstance() || sceProjMitigations != null){
			if(sceProjMitigations == null)
				sceProjMitigations = new TreeSet<SceProjMitigation>();
			return sceProjMitigations;
		}
		return SceProjMitigation.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addSceProjMitigation(SceProjMitigation sceProjMitigation)throws java.sql.SQLException{
		sceProjMitigation.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || sceProjMitigations != null)
			getSceProjMitigations().add(sceProjMitigation);
		else
			sceProjMitigation.insert();
	}
	public void removeSceProjMitigation(SceProjMitigation sceProjMitigation)throws java.sql.SQLException{
		if(isNewInstance() || sceProjMitigations != null)
			getSceProjMitigations().remove(sceProjMitigation);
		else
			sceProjMitigation.delete();
	}
	public Collection<SceProjTracking> getSceProjTrackings()throws java.sql.SQLException{
		if(isNewInstance() || sceProjTrackings != null){
			if(sceProjTrackings == null)
				sceProjTrackings = new TreeSet<SceProjTracking>();
			return sceProjTrackings;
		}
		return SceProjTracking.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addSceProjTracking(SceProjTracking sceProjTracking)throws java.sql.SQLException{
		sceProjTracking.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || sceProjTrackings != null)
			getSceProjTrackings().add(sceProjTracking);
		else
			sceProjTracking.insert();
	}
	public void removeSceProjTracking(SceProjTracking sceProjTracking)throws java.sql.SQLException{
		if(isNewInstance() || sceProjTrackings != null)
			getSceProjTrackings().remove(sceProjTracking);
		else
			sceProjTracking.delete();
	}
	public Collection<CommitteeTracking> getCommitteeTrackings()throws java.sql.SQLException{
		if(isNewInstance() || committeeTrackings != null){
			if(committeeTrackings == null)
				committeeTrackings = new TreeSet<CommitteeTracking>();
			return committeeTrackings;
		}
		return CommitteeTracking.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addCommitteeTracking(CommitteeTracking committeeTracking)throws java.sql.SQLException{
		committeeTracking.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || committeeTrackings != null)
			getCommitteeTrackings().add(committeeTracking);
		else
			committeeTracking.insert();
	}
	public void removeCommitteeTracking(CommitteeTracking committeeTracking)throws java.sql.SQLException{
		if(isNewInstance() || committeeTrackings != null)
			getCommitteeTrackings().remove(committeeTracking);
		else
			committeeTracking.delete();
	}
	public Collection<SceProjDriver> getSceProjDrivers()throws java.sql.SQLException{
		if(isNewInstance() || sceProjDrivers != null){
			if(sceProjDrivers == null)
				sceProjDrivers = new TreeSet<SceProjDriver>();
			return sceProjDrivers;
		}
		return SceProjDriver.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addSceProjDriver(SceProjDriver sceProjDriver)throws java.sql.SQLException{
		sceProjDriver.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || sceProjDrivers != null)
			getSceProjDrivers().add(sceProjDriver);
		else
			sceProjDriver.insert();
	}
	public void removeSceProjDriver(SceProjDriver sceProjDriver)throws java.sql.SQLException{
		if(isNewInstance() || sceProjDrivers != null)
			getSceProjDrivers().remove(sceProjDriver);
		else
			sceProjDriver.delete();
	}
	public Collection<SceProjAssumption> getSceProjAssumptions()throws java.sql.SQLException{
		if(isNewInstance() || sceProjAssumptions != null){
			if(sceProjAssumptions == null)
				sceProjAssumptions = new TreeSet<SceProjAssumption>();
			return sceProjAssumptions;
		}
		return SceProjAssumption.getNamedCollection("findBySceProjRev",getSceProjRevId());
	}
	public void addSceProjAssumption(SceProjAssumption sceProjAssumption)throws java.sql.SQLException{
		sceProjAssumption.setSceProjRev((SceProjRev)this);
		if(isNewInstance() || sceProjAssumptions != null)
			getSceProjAssumptions().add(sceProjAssumption);
		else
			sceProjAssumption.insert();
	}
	public void removeSceProjAssumption(SceProjAssumption sceProjAssumption)throws java.sql.SQLException{
		if(isNewInstance() || sceProjAssumptions != null)
			getSceProjAssumptions().remove(sceProjAssumption);
		else
			sceProjAssumption.delete();
	}
	public SceProjRev copy()throws java.sql.SQLException{
		SceProjRev cp = new SceProjRev((SceProjRev)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjRevDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(GateTracking child:getGateTrackings())
			cp.addGateTracking(child.copy());
		for(ProjMajorMtl child:getProjMajorMtls())
			cp.addProjMajorMtl(child.copy());
		for(ProjResourceEval child:getProjResourceEvals())
			cp.addProjResourceEval(child.copy());
		for(ProjRevFile child:getProjRevFiles())
			cp.addProjRevFile(child.copy());
		for(ProjResourceEval child:getProjResourceEvals())
			cp.addProjResourceEval(child.copy());
		for(ProjMajorMtl child:getProjMajorMtls())
			cp.addProjMajorMtl(child.copy());
		for(ProjRevOffset child:getProjRevOffsets())
			cp.addProjRevOffset(child.copy());
		for(ProjRevOffset child:getProjRevOffsets2())
			cp.addProjRevOffset2(child.copy());
		for(SceProjElemCost child:getSceProjElemCosts())
			cp.addSceProjElemCost(child.copy());
		for(SceProjMitigation child:getSceProjMitigations())
			cp.addSceProjMitigation(child.copy());
		for(SceProjTracking child:getSceProjTrackings())
			cp.addSceProjTracking(child.copy());
		for(CommitteeTracking child:getCommitteeTrackings())
			cp.addCommitteeTracking(child.copy());
		for(SceProjDriver child:getSceProjDrivers())
			cp.addSceProjDriver(child.copy());
		for(SceProjAssumption child:getSceProjAssumptions())
			cp.addSceProjAssumption(child.copy());
	}
	public Vector<String> getDifference(SceProjRevDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getSceProjRevId(),o.getSceProjRevId())) diffs.add("SCE_PROJ_REV_ID");
		if(!isSame(getSceProjId(),o.getSceProjId())) diffs.add("SCE_PROJ_ID");
		if(!isSame(getRevTs(),o.getRevTs())) diffs.add("REV_TS");
		if(!isSame(getOrgId(),o.getOrgId())) diffs.add("ORG_ID");
		if(!isSame(getSponsorProjId(),o.getSponsorProjId())) diffs.add("SPONSOR_PROJ_ID");
		if(!isSame(getSponsorProjNum(),o.getSponsorProjNum())) diffs.add("SPONSOR_PROJ_NUM");
		if(!isSame(getSponsorUserId(),o.getSponsorUserId())) diffs.add("SPONSOR_USER_ID");
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		if(!isSame(getProjNum(),o.getProjNum())) diffs.add("PROJ_NUM");
		if(!isSame(getLocation(),o.getLocation())) diffs.add("LOCATION");
		if(!isSame(getTitle(),o.getTitle())) diffs.add("TITLE");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getNeed(),o.getNeed())) diffs.add("NEED");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getAltProjNote(),o.getAltProjNote())) diffs.add("ALT_PROJ_NOTE");
		if(!isSame(getEscalationRate(),o.getEscalationRate())) diffs.add("ESCALATION_RATE");
		if(!isSame(getPriorityOverride(),o.getPriorityOverride())) diffs.add("PRIORITY_OVERRIDE");
		if(!isSame(getProjStatus(),o.getProjStatus())) diffs.add("PROJ_STATUS");
		if(!isSame(getCommittee(),o.getCommittee())) diffs.add("COMMITTEE");
		if(!isSame(getFileNo(),o.getFileNo())) diffs.add("FILE_NO");
		if(!isSame(getPmoOrgId(),o.getPmoOrgId())) diffs.add("PMO_ORG_ID");
		if(!isSame(getPmoNote(),o.getPmoNote())) diffs.add("PMO_NOTE");
		if(!isSame(getN1ReserveNoProj(),o.getN1ReserveNoProj())) diffs.add("N1_RESERVE_NO_PROJ");
		if(!isSame(getProjPriority(),o.getProjPriority())) diffs.add("PROJ_PRIORITY");
		if(!isSame(getReserveHcNoProj(),o.getReserveHcNoProj())) diffs.add("RESERVE_HC_NO_PROJ");
		if(!isSame(getEpefNum(),o.getEpefNum())) diffs.add("EPEF_NUM");
		if(!isSame(isActive(),o.isActive())) diffs.add("ACTIVE");
		if(!isSame(getOdNote(),o.getOdNote())) diffs.add("OD_NOTE");
		if(!isSame(getEpefSubmitUserId(),o.getEpefSubmitUserId())) diffs.add("EPEF_SUBMIT_USER_ID");
		if(!isSame(getEpefSubmitTs(),o.getEpefSubmitTs())) diffs.add("EPEF_SUBMIT_TS");
		if(!isSame(getEpefComment(),o.getEpefComment())) diffs.add("EPEF_COMMENT");
		if(!isSame(getEpefOffsetComment(),o.getEpefOffsetComment())) diffs.add("EPEF_OFFSET_COMMENT");
		if(!isSame(getEpefRelTrends(),o.getEpefRelTrends())) diffs.add("EPEF_REL_TRENDS");
		if(!isSame(getEpefAckUserId(),o.getEpefAckUserId())) diffs.add("EPEF_ACK_USER_ID");
		if(!isSame(getEpefAckTs(),o.getEpefAckTs())) diffs.add("EPEF_ACK_TS");
		if(!isSame(getEpefTrackingSentTs(),o.getEpefTrackingSentTs())) diffs.add("EPEF_TRACKING_SENT_TS");
		if(!isSame(getEpefAppUserId(),o.getEpefAppUserId())) diffs.add("EPEF_APP_USER_ID");
		if(!isSame(getEpefAppByUserId(),o.getEpefAppByUserId())) diffs.add("EPEF_APP_BY_USER_ID");
		if(!isSame(getEpefResolutionTs(),o.getEpefResolutionTs())) diffs.add("EPEF_RESOLUTION_TS");
		if(!isSame(getEpefResolution(),o.getEpefResolution())) diffs.add("EPEF_RESOLUTION");
		if(!isSame(getEpefResolutionNote(),o.getEpefResolutionNote())) diffs.add("EPEF_RESOLUTION_NOTE");
		if(!isSame(getEpefAppExpireTs(),o.getEpefAppExpireTs())) diffs.add("EPEF_APP_EXPIRE_TS");
		if(!isSame(isEpefPriorityNeeded(),o.isEpefPriorityNeeded())) diffs.add("EPEF_PRIORITY_NEEDED");
		if(!isSame(getAtpNeedTs(),o.getAtpNeedTs())) diffs.add("ATP_NEED_TS");
		if(!isSame(getRetractReqTs(),o.getRetractReqTs())) diffs.add("RETRACT_REQ_TS");
		if(!isSame(getRetractReqUserId(),o.getRetractReqUserId())) diffs.add("RETRACT_REQ_USER_ID");
		if(!isSame(getRetractReqNote(),o.getRetractReqNote())) diffs.add("RETRACT_REQ_NOTE");
		if(!isSame(getNercExpected(),o.getNercExpected())) diffs.add("NERC_EXPECTED");
		if(!isSame(getEngSchOrgId(),o.getEngSchOrgId())) diffs.add("ENG_SCH_ORG_ID");
		if(!isSame(getEngSchUserId(),o.getEngSchUserId())) diffs.add("ENG_SCH_USER_ID");
		if(!isSame(getTotalDuration(),o.getTotalDuration())) diffs.add("TOTAL_DURATION");
		if(!isSame(getReserveNoProj(),o.getReserveNoProj())) diffs.add("RESERVE_NO_PROJ");
		if(!isSame(getAvgCktLoadNoProj(),o.getAvgCktLoadNoProj())) diffs.add("AVG_CKT_LOAD_NO_PROJ");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getEpefComment2(),o.getEpefComment2())) diffs.add("EPEF_COMMENT2");
		if(!isSame(isUseDefaultTitle(),o.isUseDefaultTitle())) diffs.add("USE_DEFAULT_TITLE");
		if(!isSame(isUseCalcJust(),o.isUseCalcJust())) diffs.add("USE_CALC_JUST");
		if(!isSame(getCritAss(),o.getCritAss())) diffs.add("CRIT_ASS");
		if(!isSame(getEconJust(),o.getEconJust())) diffs.add("ECON_JUST");
		if(!isSame(getFinalized(),o.getFinalized())) diffs.add("FINALIZED");
		if(!isSame(getReviewed(),o.getReviewed())) diffs.add("REVIEWED");
		if(!isSame(isForceRevStatus(),o.isForceRevStatus())) diffs.add("FORCE_REV_STATUS");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getGo131D(),o.getGo131D())) diffs.add("GO131D");
		if(!isSame(isGrc(),o.isGrc())) diffs.add("GRC");
<<<<<<< .mine
=======
//		if(!isSame(getMpoLeadUserId(),o.getMpoLeadUserId())) diffs.add("MPO_LEAD_USER_ID");
//		if(!isSame(getMpoDevUserId(),o.getMpoDevUserId())) diffs.add("MPO_DEV_USER_ID");
//		if(!isSame(getMpoExecUserId(),o.getMpoExecUserId())) diffs.add("MPO_EXEC_USER_ID");
>>>>>>> .r18324
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getTaskId(),o.getTaskId())) diffs.add("TASK_ID");
		if(!isSame(getGo131DFilingTypeId(),o.getGo131DFilingTypeId())) diffs.add("GO131D_FILING_TYPE_ID");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getRiskOfMisalignment(),o.getRiskOfMisalignment())) diffs.add("RISK_OF_MISALIGNMENT");
		if(!isSame(getRiskOfMissalignmentNotes(),o.getRiskOfMissalignmentNotes())) diffs.add("RISK_OF_MISSALIGNMENT_NOTES");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(projRevFiles != null){
			for(ProjRevFile projRevFile:getProjRevFiles()){
				if(projRevFile.isNewInstance())
					projRevFile.setSceProjRev((SceProjRev)this);
				projRevFile.insert();

				projRevFiles = null;
			}
			if(gateTrackings != null){
				for(GateTracking gateTracking:getGateTrackings()){
					if(gateTracking.isNewInstance())
						gateTracking.setSceProjRev((SceProjRev)this);
					gateTracking.insert();
				}

				gateTrackings = null;
			}
			if(projResourceEvals != null){
				for(ProjResourceEval projResourceEval:getProjResourceEvals()){
					if(projResourceEval.isNewInstance())
						projResourceEval.setSceProjRev((SceProjRev)this);
					projResourceEval.insert();
				}
				projResourceEvals = null;
			}
			if(projMajorMtls != null){
				for(ProjMajorMtl projMajorMtl:getProjMajorMtls()){
					if(projMajorMtl.isNewInstance())
						projMajorMtl.setSceProjRev((SceProjRev)this);
					projMajorMtl.insert();
				}
				projMajorMtls = null;
			}
			if(projRevOffsets != null){
				for(ProjRevOffset projRevOffset:getProjRevOffsets()){
					if(projRevOffset.isNewInstance())
						projRevOffset.setSceProjRev((SceProjRev)this);
					projRevOffset.insert();
				}
				projRevOffsets = null;
			}
			if(projRevOffsets2 != null){
				for(ProjRevOffset projRevOffset2:getProjRevOffsets2()){
					if(projRevOffset2.isNewInstance())
						projRevOffset2.setSceProjRev((SceProjRev)this);
					projRevOffset2.insert();
				}
				projRevOffsets2 = null;
			}
			if(sceProjElemCosts != null){
				for(SceProjElemCost sceProjElemCost:getSceProjElemCosts()){
					if(sceProjElemCost.isNewInstance())
						sceProjElemCost.setSceProjRev((SceProjRev)this);
					sceProjElemCost.insert();
				}
				sceProjElemCosts = null;
			}
			if(sceProjMitigations != null){
				for(SceProjMitigation sceProjMitigation:getSceProjMitigations()){
					if(sceProjMitigation.isNewInstance())
						sceProjMitigation.setSceProjRev((SceProjRev)this);
					sceProjMitigation.insert();
				}
				sceProjMitigations = null;
			}
			if(sceProjTrackings != null){
				for(SceProjTracking sceProjTracking:getSceProjTrackings()){
					if(sceProjTracking.isNewInstance())
						sceProjTracking.setSceProjRev((SceProjRev)this);
					sceProjTracking.insert();
				}
				sceProjTrackings = null;
			}
			if(committeeTrackings != null){
				for(CommitteeTracking gateTracking:getCommitteeTrackings()){
					if(gateTracking.isNewInstance())
						gateTracking.setSceProjRev((SceProjRev)this);
					gateTracking.insert();
				}
				committeeTrackings = null;
			}
			if(sceProjDrivers != null){
				for(SceProjDriver sceProjDriver:getSceProjDrivers()){
					if(sceProjDriver.isNewInstance())
						sceProjDriver.setSceProjRev((SceProjRev)this);
					sceProjDriver.insert();
				}
				sceProjDrivers = null;
			}
			if(sceProjAssumptions != null){
				for(SceProjAssumption sceProjAssumption:getSceProjAssumptions()){
					if(sceProjAssumption.isNewInstance())
						sceProjAssumption.setSceProjRev((SceProjRev)this);
					sceProjAssumption.insert();
				}
				sceProjAssumptions = null;
			}
		}
	}
	}
}
