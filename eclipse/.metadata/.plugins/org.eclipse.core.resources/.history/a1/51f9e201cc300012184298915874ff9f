package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostLoaderRate;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.SceProjElemCost;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class CostLoaderRateDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{COST_ID,LOADER_ID};
	public static enum PROPERTY{COST_ID,LOADER_ID,RATE};
	public final static int COSTID_LIMIT = 9;
	public final static int LOADERID_LIMIT = 9;
	public final static int RATE_LIMIT = 24;
	private int costId;
	private int loaderId;
	private double rate;
	private SceProjElemCost sceProjElemCost;
	private LookUp loaderType;
	public static CostLoaderRate getInstance(int costId, int loaderId)throws java.sql.SQLException{
		return getInstance(costId, loaderId, true);
	}
	public static CostLoaderRate getInstance(int costId, int loaderId, boolean fetch)throws java.sql.SQLException{
		if(isNull(costId, loaderId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(costId, loaderId);
		Cache cache = em.getEntityManagerFactory().getCache();
		CostLoaderRate o = null;
		if(cache != null && cache.contains(CostLoaderRate.class, pk))
			o = em.find(CostLoaderRate.class, pk);
		if(o==null && getAICache().contains(CostLoaderRate.class, pk))
			o = getAICache().find(CostLoaderRate.class, pk);
		if(o==null && fetch)
			o = em.find(CostLoaderRate.class, pk);
		if(o==null && fetch && CostLoaderRate.class.getAnnotation(AutoInsertable.class) != null){
			o = new CostLoaderRate(costId, loaderId);
			getAICache().cache(CostLoaderRate.class, o);
		}
		return o;
	}
	public static Collection<CostLoaderRate> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CostLoaderRate> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CostLoaderRate> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CostLoaderRate o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CostLoaderRate> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostLoaderRate> tq = em.createQuery(jpql,CostLoaderRate.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CostLoaderRate> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostLoaderRate> tq = em.createNamedQuery(name,CostLoaderRate.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CostLoaderRateDAO(){}
	public CostLoaderRateDAO(int costId, int loaderId){
		this.costId=costId;
		this.loaderId=loaderId;
	}
	public CostLoaderRateDAO(CostLoaderRateDAO orig){
		super(orig);
		this.costId=orig.getCostId();
		this.loaderId=orig.getLoaderId();
		copyFrom(orig);
	}
	public void copyFrom(CostLoaderRateDAO orig){
		this.rate=orig.getRate();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{costId, loaderId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="COST_ID",nullable=false,length=9)
	public int getCostId(){
		return costId;
	}
	public void setCostId(int costId) throws java.sql.SQLException{
		if(isSame(costId, getCostId()))return;
		int oldValue = getCostId();
		this.costId=costId;
		setProperty("COST_ID", costId, oldValue);
		sceProjElemCost=null;
	}
	@Id
	@Column(name="LOADER_ID",nullable=false,length=9)
	public int getLoaderId(){
		return loaderId;
	}
	public void setLoaderId(int loaderId) throws java.sql.SQLException{
		if(isSame(loaderId, getLoaderId()))return;
		int oldValue = getLoaderId();
		this.loaderId=loaderId;
		setProperty("LOADER_ID", loaderId, oldValue);
		loaderType=null;
	}
	@Column(name="RATE",nullable=true,length=24)
	public double getRate(){
		return rate;
	}
	public void setRate(double rate) throws java.sql.SQLException{
		if(isSame(rate, getRate()))return;
		double oldValue = getRate();
		this.rate=rate;
		setProperty("RATE", rate, oldValue);
	}
	public SceProjElemCost getSceProjElemCost()throws java.sql.SQLException{
		if(sceProjElemCost==null)
			sceProjElemCost=SceProjElemCost.getInstance(getCostId());
		return sceProjElemCost;
	}
	public void setSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		setCostId(sceProjElemCost==null?0:sceProjElemCost.getCostId());
		this.sceProjElemCost=sceProjElemCost;
	}
	public LookUp getLoaderType()throws java.sql.SQLException{
		if(loaderType==null)
			loaderType=LookUp.getInstance(getLoaderId());
		return loaderType;
	}
	public void setLoaderType(LookUp loaderType)throws java.sql.SQLException{
		setLoaderId(loaderType==null?0:loaderType.getId());
		this.loaderType=loaderType;
	}
	public CostLoaderRate copy()throws java.sql.SQLException{
		CostLoaderRate cp = new CostLoaderRate((CostLoaderRate)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CostLoaderRateDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CostLoaderRateDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getCostId(),o.getCostId())) diffs.add("COST_ID");
		if(!isSame(getLoaderId(),o.getLoaderId())) diffs.add("LOADER_ID");
		if(!isSame(getRate(),o.getRate())) diffs.add("RATE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
