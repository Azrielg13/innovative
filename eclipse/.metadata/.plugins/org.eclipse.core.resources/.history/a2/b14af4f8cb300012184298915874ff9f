
package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;

import javax.swing.Icon;

import com.sce.esp.util.IconsFactory;


public class SceProjElem implements Comparable<Object>, ProjectItem{
	private SceProjRev sceProjRev;
	private int sceElemId;
	private SceElem sceElem;

	public static final int LICENSING_PERMITTING=14;
	public static final int DISTRIBUTION_SUBS=1;
	public static final int DIVISION_OH=2;
	public static final int TRANSMISSION_LINES=3;
	public static final int DISTRIBUTION_LINES=4;
	public static final int AFUDC=5;
	public static final int TELECOM=6;
	public static final int TRANSMISSION_SUBS=7;
	public static final int CRE_RW_LAND=8;
	public static final int SUBTRANS_LINES=9;
	public static final int GROSS_DIRECT_EXPENSE=10;
	public static final int MISC_CONSTRUCTION_EXP=11;
	public static final int GENERATION=12;
	public static final int OTHER=13;
	public static final int IT=15;
	public static final int ENVIRONMENTAL=16;

	public SceProjElem(SceProjRev sceProjRev, SceElem sceElem) {
		this.sceProjRev = sceProjRev;
		this.sceElem = sceElem;
		this.sceElemId = sceElem.getSceElemId();
	}
	public SceProjElem(SceProjRev sceProjRev, int sceElemId) {
		this.sceProjRev = sceProjRev;
		this.sceElemId = sceElemId;
	}

	public int getSceElemId(){
		return sceElemId;
	}

	public SceElem getSceElem() throws SQLException{
		if(sceElem == null)
			sceElem = SceElem.getInstance(sceElemId);
		return sceElem;
	}

	public String toString(){
		try {
			return ""+getSceElem();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * Compare to.
	 *
	 * @param o the o
	 *
	 * @return the int
	 */
	public int compareTo(Object o){
		return toString().compareTo(o.toString());
	}

	/**
	 * Doesn't matter if CostElement isEnabledBl()
	 * @return
	 * @throws SQLException
	 */
	public int getPriorCost(CostStage.Type costType)throws SQLException{
		int prior=0;
		for(SceProjElemCost spec : getSceProjElemCosts(costType))
			if(spec.isEnabled())
				prior+=spec.getPriorCost();
		return prior;
	}

	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public int getTotalCost(CostStage.Type costType) throws SQLException {
		int totalCost=0;
		for(SceProjElemCost spec : getSceProjElemCosts(costType))
			if(spec.isEnabled())
				totalCost += spec.getTotalCost();
		return totalCost; 
	}

	public int getTotalCost(CostStage.Type costType, int year) throws SQLException {
		int totalCost=0;
		int curYear = Calendar.getInstance().get(Calendar.YEAR);
		for(SceProjElemCost spec : getSceProjElemCosts(costType))
			if(spec.isEnabled() || year < curYear)
				totalCost+=spec.getCost(year);
		return totalCost;
	}

	public String getCurrentCostElemScope() throws SQLException{    	
		String scope = "";
		for(SceProjElemCost ce : getSceProjElemCosts(CostStage.Type.Proposed))
			scope += ce.getScopeDesc()+"\n\n";
		return scope;
	} 

	public String getCurrentScopeWithStage() throws SQLException{    	
		String scope = "";
		for(SceProjElemCost ce : getSceProjElemCosts(CostStage.Type.Proposed))
			scope += ce.getScopeWithStage()+"\n\n";
		return scope;
	} 

	public String getApprovedCostElemScope() throws SQLException{    	
		String scope = "";
		for(SceProjElemCost ce : getSceProjElemCosts(CostStage.Type.Approved))
			scope += ce.getScopeDesc()+"\n\n";
		return scope;
	}

	public TreeSet<SceProjElemCost> getSceProjElemCosts(CostStage.Type costType) throws SQLException{
		TreeSet<SceProjElemCost> specs = new TreeSet<SceProjElemCost>();
		for(SceProjElemCost spec:sceProjRev.getSceProjElemCosts(costType))
			if(spec.getSceElemId() == sceElemId)
				specs.add(spec);
		return specs;
	}

	public SceProjRev getSceProjRev()throws SQLException{
		if(sceProjRev==null){
			throw new SQLException("sceProjRev is null!!!");
		}
		return sceProjRev;
	}

	public double getContFactor(CostStage.Type costType) throws SQLException{
		double tc = getTotalCost(costType);
		if(tc!=0)
			return tc/(tc-getContAmount(costType))-1;
		return 0;
	}
	public int getContAmount(CostStage.Type costType) throws SQLException{
		int total=0;
		for(SceProjElemCost spec : getSceProjElemCosts(costType))
			if(spec.isEnabled())
				total+=spec.getContAmount();
		return total;
	}
	@Override
	public Calendar getModelDate() throws SQLException{
		if(getInServiceDate() != null)
			return getInServiceDate();
		if(getOpDate() != null)
			return getOpDate();
		return getNeedDate();
	}
	public Calendar getNeedDate() throws SQLException{
		Calendar max = null;
		for(SceProjElemCost spec : getSceProjElemCosts(CostStage.Type.Proposed))
			if(spec.getNeedDate()!=null && (max==null || spec.getNeedDate().getTimeInMillis()>max.getTimeInMillis()))
				max = spec.getNeedDate();
		return max;
	}
	public Calendar getOpDate() throws SQLException{
		Calendar max = null;
		for(SceProjElemCost spec : getSceProjElemCosts(CostStage.Type.Proposed))
			if(spec.getOpDate()!=null && (max==null || spec.getOpDate().getTimeInMillis()>max.getTimeInMillis()))
				max = spec.getOpDate();
		return max;
	}
	public Calendar getInServiceDate() throws SQLException{
		Calendar max = null;
		for(SceProjElemCost spec : getSceProjElemCosts(CostStage.Type.Proposed)){
			if(spec.getInServiceDate() == null)
				return null;
			if((max==null || spec.getInServiceDate().getTimeInMillis()>max.getTimeInMillis())){

				max = spec.getInServiceDate();
			}
		}
		return max;
	}
	public int getCalendarYear() throws SQLException{
		if(getModelDate()!=null)
			return getModelDate().get(Calendar.YEAR);
		return 0;
	}
	@Override
	public double getTotSceCost(int costGroupId) throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}
	@Override
	public double getTotConCost(int costGroupId) throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}
	@Override
	public double getUnitCost(CostType ct) throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}
	public Icon getIcon() throws SQLException {
		switch(getSceElemId()){
			case SceProjElem.LICENSING_PERMITTING: IconsFactory.getIcon(IconsFactory.Element.LIC);
			case SceProjElem.DISTRIBUTION_SUBS: return IconsFactory.DIST_SUB;
			case SceProjElem.DIVISION_OH: return IconsFactory.getIcon(IconsFactory.Element.DIST);
			case SceProjElem.TRANSMISSION_LINES: return IconsFactory.TRANS_LINE;
			case SceProjElem.DISTRIBUTION_LINES: return IconsFactory.D_LINE;
			case SceProjElem.AFUDC: return IconsFactory.getIcon(IconsFactory.Element.AFUDC);
			case SceProjElem.TELECOM: return IconsFactory.getScaledImageIcon(IconsFactory.Element.TELE,16);
			case SceProjElem.TRANSMISSION_SUBS: return IconsFactory.TRANS_SUB;
			case SceProjElem.CRE_RW_LAND: return IconsFactory.REAL_PROP;
			case SceProjElem.SUBTRANS_LINES: return IconsFactory.getScaledImageIcon(IconsFactory.Element.SUBTRANS,16);
			case SceProjElem.GROSS_DIRECT_EXPENSE: return IconsFactory.getIcon(IconsFactory.Element.EXP);
			case SceProjElem.MISC_CONSTRUCTION_EXP: return IconsFactory.getIcon(IconsFactory.Element.MISC);
			case SceProjElem.GENERATION: return IconsFactory.getIcon(IconsFactory.Element.GEN);
			case SceProjElem.OTHER: return IconsFactory.getScaledImageIcon(IconsFactory.Element.OTHER,16);
			case SceProjElem.IT: return IconsFactory.getIcon(IconsFactory.Element.TELE);
			case SceProjElem.ENVIRONMENTAL: return IconsFactory.ENVIORMENTAL;
		}
		return IconsFactory.SPI_APPROVED;
	}
	@Override
	public Collection<SceElem> getSceElems() throws SQLException {
		TreeSet<SceElem> elems = new TreeSet<SceElem>();
		elems.add(getSceElem());
		return elems;
	}
}
