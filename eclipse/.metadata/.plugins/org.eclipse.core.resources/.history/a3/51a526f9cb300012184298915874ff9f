/**
1 *           | Master Data Interface Version 2.0 |
 *
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team.
 * 	                   All rights reserved.
 *
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Vector;

import javax.persistence.Cache;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.SubDailyDAO;
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI150_SUB_DAILY")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM SubDaily o WHERE o.PLANYEAR=?1 AND o.SUB_ID=?2 AND o.PEAK_DATE=?3"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM SubDaily o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM SubDaily o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
<<<<<<< .working
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI150_SUB_DAILY o WHERE o.PLANYEAR=? AND o.SUB_ID=? AND o.PEAK_DATE=?"),//AUTO-GENERATED
	@NamedNativeQuery(name = "findByID_FETCH", query="SELECT * FROM (SELECT ? AS PLANYEAR, o.PLANYEAR AS REAL_P_Y, SUB_ID, PEAK_DATE, PEAK_TIME, PEAK_VAL, PEAK_ADJ, GEN_ADJ, NOTE, COIN_FACTOR, VAR_VAL, PEAK_A, PEAK_B, PEAK_C, DOC_NOTE, ABNORMAL, RETRIEVED, INSERT_TS, INSERT_USER_ID, MODIFIED_TS, MODIFIED_USER_ID, DELETED_TS, DELETED_USER_ID FROM MDI150_SUB_DAILY o WHERE PLANYEAR<=? AND SUB_ID=? AND PEAK_DATE=? ORDER BY REAL_P_Y DESC) WHERE ROWNUM=1"),
=======
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI150_SUB_DAILY o WHERE o.PLANYEAR=? AND o.SUB_ID=? AND o.PEAK_DATE=?"),//AUTO-GENERATED
	@NamedNativeQuery(name = "findByID_FETCH", query="SELECT * FROM (SELECT ? AS PLANYEAR, o.PLANYEAR AS REAL_P_Y, SUB_ID, PEAK_DATE, PEAK_TIME, PEAK_VAL, PEAK_ADJ, GEN_ADJ, NOTE, COIN_FACTOR, VAR_VAL, PEAK_A, PEAK_B, PEAK_C, DOC_NOTE, ABNORMAL, RETRIEVED, INSERT_TS, INSERT_USER_ID, MODIFIED_TS, MODIFIED_USER_ID, DELETED_TS, DELETED_USER_ID FROM MDI150_SUB_DAILY o WHERE PLANYEAR<=? AND SUB_ID=? AND TO_CHAR(PEAK_DATE,'YYYY-MM-DD')=? ORDER BY REAL_P_Y DESC) WHERE ROWNUM=1"),
>>>>>>> .merge-right.r17354
})
public class SubDaily extends SubDailyDAO implements Serializable {
	
	private static final long serialVersionUID = 1L;
	
	public static SubDaily getInstance(int planyear, int subId, Calendar peakDate)throws java.sql.SQLException{
		return getInstance(planyear, subId, peakDate, true);
	}
	public static SubDaily getInstance(int planyear, int subId, Calendar peakDate, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, subId, peakDate))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, planyear, subId, peakDate);
		Cache cache = em.getEntityManagerFactory().getCache();
		SubDaily o = null;
		if(cache != null && cache.contains(SubDaily.class, pk))
			o = em.find(SubDaily.class, pk);
		if(o==null && getAICache().contains(SubDaily.class, pk))
			o = getAICache().find(SubDaily.class, pk);
		if(o==null && fetch)
			o = em.find(SubDaily.class, pk);
		if(o==null && fetch && SubDaily.class.getAnnotation(AutoInsertable.class) != null){
			o = new SubDaily(planyear, subId, peakDate);
			getAICache().cache(SubDaily.class, o);
		}
		return o;
	}

	/**
	 * The Constructor.
	 *
	 * @param peakDate the peak date
	 * @param subId the sub id
	 * @param planyear the planyear
	 *
	 * @throws SQLException 	 */
	public SubDaily(){
	}
	public SubDaily(int planyear, int subId, Calendar peakDate){
		super(planyear,subId,peakDate);
	}

	public SubDaily(SubDaily subDaily) {
		super(subDaily);
	}
	
	public Object[] getKeyValues(){
		return new Object[]{getPlanyear(), getPlanyear(), getSubId(), getPeakDate()};
	}
	
	/**
	 *
	 * @return the <code>LoadServingEntity</code>
	 * @throws SQLException
	 */
	public LoadServingEntity getLSE() throws SQLException {
		return getSub();
	}

	public String getIDCol() {
		return "SUB_ID";
	}

	public int getId() {
		return getSubId();
	}
	
	public Vector<String> getInsertStatus(){
		return new Vector<String>();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.DailyPeak#getPLL()
	 */
	public double getPLL() throws SQLException{
		return getSub().getPLLInService(getDate(), 0);
	}
	@Override
	public AutomatedEquipment getAE() throws SQLException {
		return getSub();
	}
}
