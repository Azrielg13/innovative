/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.util.Vector;

import javax.swing.table.AbstractTableModel;

import com.jidesoft.grid.CellStyle;
import com.jidesoft.grid.HierarchicalTableModel;
import com.jidesoft.grid.StyleModel;
import com.sce.esp.object.model.BlobFile;
import com.sce.esp.util.Calculate;

public class BlobFileTableModel extends AbstractTableModel
		implements
			HierarchicalTableModel,
			StyleModel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 2817885475883575889L;
	private Vector<? extends BlobFile> files = new Vector<BlobFile>();

	public BlobFileTableModel(Vector<? extends BlobFile> b) {
		this.files = b;
	}

	public BlobFile getSelectedFileObject(int row) {
		return files.get(row);
	}

	public int getRowCount() {
		return files.size();
	}

	public int getColumnCount() {
		return 3;
	}

	public Object getValueAt(int rowIndex, int columnIndex) {
		switch (columnIndex) {
			case 0 :
				return files.get(rowIndex);
			case 1 :
				return "Size";
			case 2 :
				return Calculate.round(
						files.get(rowIndex).getFileSize() / 1000, 1) + " KB";
		}
		return "";
	}

	public boolean isCellEditable(int row, int column) {
		return false;
	}

	public boolean hasChild(int row) {
		return true;
	}

	public boolean isExpandable(int row) {
		return true;
	}

	public boolean isHierarchical(int row) {
		return false;
	}

	public Object getChildValueAt(int row) {
		return files.get(row);
	}

	public boolean isCellStyleOn() {
		return true;
	}

	private CellStyle _cellStyle = new CellStyle();

	public CellStyle getCellStyleAt(int rowIndex, int columnIndex) {
		if (columnIndex == 2) {
			return _cellStyle;
		}
		return null;
	}
}