package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CriteriaWs;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Weatherstation;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class WeatherstationDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,STATION_ID};
	public static enum PROPERTY{PLANYEAR,STATION_ID,SOURCE,STATION_CODE,STATION_NAME,EDISON_FACILITY,ADDRESS,CITY,STATE,ZIP,COUNTY,PAX,PHONE,LATITUDE,LONGITUDE,ELEVATION,CLIMATE_ZONE,IN_SERVICE_DATE,SITE_LOC,DATA_LOC,APPROVED,DISABLED,STATION_NUMBER,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int STATIONID_LIMIT = 9;
	public final static int SOURCE_LIMIT = 20;
	public final static int STATIONCODE_LIMIT = 10;
	public final static int STATIONNAME_LIMIT = 20;
	public final static int EDISONFACILITY_LIMIT = 64;
	public final static int ADDRESS_LIMIT = 64;
	public final static int CITY_LIMIT = 20;
	public final static int STATE_LIMIT = 20;
	public final static int ZIP_LIMIT = 10;
	public final static int COUNTY_LIMIT = 20;
	public final static int PAX_LIMIT = 5;
	public final static int PHONE_LIMIT = 15;
	public final static int LATITUDE_LIMIT = 24;
	public final static int LONGITUDE_LIMIT = 24;
	public final static int ELEVATION_LIMIT = 9;
	public final static int CLIMATEZONE_LIMIT = 2;
	public final static int INSERVICEDATE_LIMIT = 7;
	public final static int SITELOC_LIMIT = 10;
	public final static int DATALOC_LIMIT = 64;
	public final static int APPROVED_LIMIT = 1;
	public final static int DISABLED_LIMIT = 1;
	public final static int STATIONNUMBER_LIMIT = 8;
	private int planyear;
	private int stationId;
	private String source;
	private String stationCode;
	private String stationName;
	private String edisonFacility;
	private String address;
	private String city;
	private String state;
	private String zip;
	private String county;
	private String pax;
	private String phone;
	private double latitude;
	private double longitude;
	private int elevation;
	private int climateZone;
	private Calendar inServiceDate;
	private String siteLoc;
	private String dataLoc;
	private boolean approved;
	private boolean disabled;
	private int stationNumber;
	private Collection<CriteriaWs> criteriaWss;
	private Department department;
	public static Weatherstation getInstance(int planyear, int stationId)throws java.sql.SQLException{
		return getInstance(planyear, stationId, true);
	}
	public static Weatherstation getInstance(int planyear, int stationId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, stationId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, stationId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Weatherstation o = null;
		if(cache != null && cache.contains(Weatherstation.class, pk))
			o = em.find(Weatherstation.class, pk);
		if(o==null && getAICache().contains(Weatherstation.class, pk))
			o = getAICache().find(Weatherstation.class, pk);
		if(o==null && fetch)
			o = em.find(Weatherstation.class, pk);
		if(o==null && fetch && Weatherstation.class.getAnnotation(AutoInsertable.class) != null){
			o = new Weatherstation(planyear, stationId);
			getAICache().cache(Weatherstation.class, o);
		}
		return o;
	}
	public static Collection<Weatherstation> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Weatherstation> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Weatherstation> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Weatherstation o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Weatherstation> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Weatherstation> tq = em.createQuery(jpql,Weatherstation.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Weatherstation> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Weatherstation> tq = em.createNamedQuery(name,Weatherstation.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public WeatherstationDAO(){}
	public WeatherstationDAO(int planyear, int stationId){
		this.planyear=planyear;
		this.stationId=stationId;
	}
	public WeatherstationDAO(WeatherstationDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(WeatherstationDAO orig){
		this.source=orig.getSource();
		this.stationCode=orig.getStationCode();
		this.stationName=orig.getStationName();
		this.edisonFacility=orig.getEdisonFacility();
		this.address=orig.getAddress();
		this.city=orig.getCity();
		this.state=orig.getState();
		this.zip=orig.getZip();
		this.county=orig.getCounty();
		this.pax=orig.getPax();
		this.phone=orig.getPhone();
		this.latitude=orig.getLatitude();
		this.longitude=orig.getLongitude();
		this.elevation=orig.getElevation();
		this.climateZone=orig.getClimateZone();
		this.inServiceDate=orig.getInServiceDate();
		this.siteLoc=orig.getSiteLoc();
		this.dataLoc=orig.getDataLoc();
		this.approved=orig.isApproved();
		this.disabled=orig.isDisabled();
		this.stationNumber=orig.getStationNumber();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, stationId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI580_SEQ",sequenceName="MDI580_SEQ")
	@Column(name="STATION_ID",nullable=false,length=9)
	public int getStationId(){
		return stationId;
	}
	public void setStationId(int stationId) throws java.sql.SQLException{
		if(isSame(stationId, getStationId()))return;
		int oldValue = getStationId();
		this.stationId=stationId;
		setProperty("STATION_ID", stationId, oldValue);
	}
	@Column(name="SOURCE",nullable=true,length=20)
	public String getSource(){
		return source;
	}
	public void setSource(String source) throws java.sql.SQLException{
		if(isSame(source, getSource()))return;
		String oldValue = getSource();
		this.source=source;
		setProperty("SOURCE", source, oldValue);
	}
	@Column(name="STATION_CODE",nullable=true,length=10)
	public String getStationCode(){
		return stationCode;
	}
	public void setStationCode(String stationCode) throws java.sql.SQLException{
		if(isSame(stationCode, getStationCode()))return;
		String oldValue = getStationCode();
		this.stationCode=stationCode;
		setProperty("STATION_CODE", stationCode, oldValue);
	}
	@Column(name="STATION_NAME",nullable=false,length=20)
	public String getStationName(){
		return stationName;
	}
	public void setStationName(String stationName) throws java.sql.SQLException{
		if(isSame(stationName, getStationName()))return;
		String oldValue = getStationName();
		this.stationName=stationName;
		setProperty("STATION_NAME", stationName, oldValue);
	}
	@Column(name="EDISON_FACILITY",nullable=true,length=64)
	public String getEdisonFacility(){
		return edisonFacility;
	}
	public void setEdisonFacility(String edisonFacility) throws java.sql.SQLException{
		if(isSame(edisonFacility, getEdisonFacility()))return;
		String oldValue = getEdisonFacility();
		this.edisonFacility=edisonFacility;
		setProperty("EDISON_FACILITY", edisonFacility, oldValue);
	}
	@Column(name="ADDRESS",nullable=true,length=64)
	public String getAddress(){
		return address;
	}
	public void setAddress(String address) throws java.sql.SQLException{
		if(isSame(address, getAddress()))return;
		String oldValue = getAddress();
		this.address=address;
		setProperty("ADDRESS", address, oldValue);
	}
	@Column(name="CITY",nullable=true,length=20)
	public String getCity(){
		return city;
	}
	public void setCity(String city) throws java.sql.SQLException{
		if(isSame(city, getCity()))return;
		String oldValue = getCity();
		this.city=city;
		setProperty("CITY", city, oldValue);
	}
	@Column(name="STATE",nullable=true,length=20)
	public String getState(){
		return state;
	}
	public void setState(String state) throws java.sql.SQLException{
		if(isSame(state, getState()))return;
		String oldValue = getState();
		this.state=state;
		setProperty("STATE", state, oldValue);
	}
	@Column(name="ZIP",nullable=true,length=10)
	public String getZip(){
		return zip;
	}
	public void setZip(String zip) throws java.sql.SQLException{
		if(isSame(zip, getZip()))return;
		String oldValue = getZip();
		this.zip=zip;
		setProperty("ZIP", zip, oldValue);
	}
	@Column(name="COUNTY",nullable=true,length=20)
	public String getCounty(){
		return county;
	}
	public void setCounty(String county) throws java.sql.SQLException{
		if(isSame(county, getCounty()))return;
		String oldValue = getCounty();
		this.county=county;
		setProperty("COUNTY", county, oldValue);
	}
	@Column(name="PAX",nullable=true,length=5)
	public String getPax(){
		return pax;
	}
	public void setPax(String pax) throws java.sql.SQLException{
		if(isSame(pax, getPax()))return;
		String oldValue = getPax();
		this.pax=pax;
		setProperty("PAX", pax, oldValue);
	}
	@Column(name="PHONE",nullable=true,length=15)
	public String getPhone(){
		return phone;
	}
	public void setPhone(String phone) throws java.sql.SQLException{
		if(isSame(phone, getPhone()))return;
		String oldValue = getPhone();
		this.phone=phone;
		setProperty("PHONE", phone, oldValue);
	}
	@Column(name="LATITUDE",nullable=true,length=24)
	public double getLatitude(){
		return latitude;
	}
	public void setLatitude(double latitude) throws java.sql.SQLException{
		if(isSame(latitude, getLatitude()))return;
		double oldValue = getLatitude();
		this.latitude=latitude;
		setProperty("LATITUDE", latitude, oldValue);
	}
	@Column(name="LONGITUDE",nullable=true,length=24)
	public double getLongitude(){
		return longitude;
	}
	public void setLongitude(double longitude) throws java.sql.SQLException{
		if(isSame(longitude, getLongitude()))return;
		double oldValue = getLongitude();
		this.longitude=longitude;
		setProperty("LONGITUDE", longitude, oldValue);
	}
	@Column(name="ELEVATION",nullable=true,length=9)
	public int getElevation(){
		return elevation;
	}
	public void setElevation(int elevation) throws java.sql.SQLException{
		if(isSame(elevation, getElevation()))return;
		int oldValue = getElevation();
		this.elevation=elevation;
		setProperty("ELEVATION", elevation, oldValue);
	}
	@Column(name="CLIMATE_ZONE",nullable=true,length=2)
	public int getClimateZone(){
		return climateZone;
	}
	public void setClimateZone(int climateZone) throws java.sql.SQLException{
		if(isSame(climateZone, getClimateZone()))return;
		int oldValue = getClimateZone();
		this.climateZone=climateZone;
		setProperty("CLIMATE_ZONE", climateZone, oldValue);
	}
	@Column(name="IN_SERVICE_DATE",nullable=true,length=7)
	public Calendar getInServiceDate(){
		return inServiceDate;
	}
	public void setInServiceDate(Calendar inServiceDate) throws java.sql.SQLException{
		if(isSame(inServiceDate, getInServiceDate()))return;
		Calendar oldValue = getInServiceDate();
		this.inServiceDate=inServiceDate;
		setProperty("IN_SERVICE_DATE", inServiceDate, oldValue);
	}
	@Column(name="SITE_LOC",nullable=true,length=10)
	public String getSiteLoc(){
		return siteLoc;
	}
	public void setSiteLoc(String siteLoc) throws java.sql.SQLException{
		if(isSame(siteLoc, getSiteLoc()))return;
		String oldValue = getSiteLoc();
		this.siteLoc=siteLoc;
		setProperty("SITE_LOC", siteLoc, oldValue);
	}
	@Column(name="DATA_LOC",nullable=true,length=64)
	public String getDataLoc(){
		return dataLoc;
	}
	public void setDataLoc(String dataLoc) throws java.sql.SQLException{
		if(isSame(dataLoc, getDataLoc()))return;
		String oldValue = getDataLoc();
		this.dataLoc=dataLoc;
		setProperty("DATA_LOC", dataLoc, oldValue);
	}
	@Column(name="APPROVED",nullable=true,length=1)
	public boolean isApproved(){
		return approved;
	}
	public void setApproved(boolean approved) throws java.sql.SQLException{
		if(isSame(approved, isApproved()))return;
		boolean oldValue = isApproved();
		this.approved=approved;
		setProperty("APPROVED", approved, oldValue);
	}
	@Column(name="DISABLED",nullable=true,length=1)
	public boolean isDisabled(){
		return disabled;
	}
	public void setDisabled(boolean disabled) throws java.sql.SQLException{
		if(isSame(disabled, isDisabled()))return;
		boolean oldValue = isDisabled();
		this.disabled=disabled;
		setProperty("DISABLED", disabled, oldValue);
	}
	@Column(name="STATION_NUMBER",nullable=true,length=8)
	public int getStationNumber(){
		return stationNumber;
	}
	public void setStationNumber(int stationNumber) throws java.sql.SQLException{
		if(isSame(stationNumber, getStationNumber()))return;
		int oldValue = getStationNumber();
		this.stationNumber=stationNumber;
		setProperty("STATION_NUMBER", stationNumber, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public Collection<CriteriaWs> getCriteriaWss()throws java.sql.SQLException{
		if(isNewInstance() || criteriaWss != null){
			if(criteriaWss == null)
				criteriaWss = new TreeSet<CriteriaWs>();
			return criteriaWss;
		}
		return CriteriaWs.getNamedCollection("findByWeatherstation",getPlanyear(), getStationId());
	}
	public void addCriteriaWs(CriteriaWs criteriaWs)throws java.sql.SQLException{
		criteriaWs.setWeatherstation((Weatherstation)this);
		if(isNewInstance() || criteriaWss != null)
			getCriteriaWss().add(criteriaWs);
		else
			criteriaWs.insert();
	}
	public void removeCriteriaWs(CriteriaWs criteriaWs)throws java.sql.SQLException{
		if(isNewInstance() || criteriaWss != null)
			getCriteriaWss().remove(criteriaWs);
		else
			criteriaWs.delete();
	}
	public Weatherstation copy()throws java.sql.SQLException{
		Weatherstation cp = new Weatherstation((Weatherstation)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(WeatherstationDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(CriteriaWs child:getCriteriaWss())
			cp.addCriteriaWs(child.copy());
	}
	public Vector<String> getDifference(WeatherstationDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getStationId(),o.getStationId())) diffs.add("STATION_ID");
		if(!isSame(getSource(),o.getSource())) diffs.add("SOURCE");
		if(!isSame(getStationCode(),o.getStationCode())) diffs.add("STATION_CODE");
		if(!isSame(getStationName(),o.getStationName())) diffs.add("STATION_NAME");
		if(!isSame(getEdisonFacility(),o.getEdisonFacility())) diffs.add("EDISON_FACILITY");
		if(!isSame(getAddress(),o.getAddress())) diffs.add("ADDRESS");
		if(!isSame(getCity(),o.getCity())) diffs.add("CITY");
		if(!isSame(getState(),o.getState())) diffs.add("STATE");
		if(!isSame(getZip(),o.getZip())) diffs.add("ZIP");
		if(!isSame(getCounty(),o.getCounty())) diffs.add("COUNTY");
		if(!isSame(getPax(),o.getPax())) diffs.add("PAX");
		if(!isSame(getPhone(),o.getPhone())) diffs.add("PHONE");
		if(!isSame(getLatitude(),o.getLatitude())) diffs.add("LATITUDE");
		if(!isSame(getLongitude(),o.getLongitude())) diffs.add("LONGITUDE");
		if(!isSame(getElevation(),o.getElevation())) diffs.add("ELEVATION");
		if(!isSame(getClimateZone(),o.getClimateZone())) diffs.add("CLIMATE_ZONE");
		if(!isSame(getInServiceDate(),o.getInServiceDate())) diffs.add("IN_SERVICE_DATE");
		if(!isSame(getSiteLoc(),o.getSiteLoc())) diffs.add("SITE_LOC");
		if(!isSame(getDataLoc(),o.getDataLoc())) diffs.add("DATA_LOC");
		if(!isSame(isApproved(),o.isApproved())) diffs.add("APPROVED");
		if(!isSame(isDisabled(),o.isDisabled())) diffs.add("DISABLED");
		if(!isSame(getStationNumber(),o.getStationNumber())) diffs.add("STATION_NUMBER");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(criteriaWss != null){
			for(CriteriaWs criteriaWs:getCriteriaWss()){
				if(criteriaWs.isNewInstance())
					criteriaWs.setWeatherstation((Weatherstation)this);
				criteriaWs.insert();
			}
			criteriaWss = null;
		}
	}
}
