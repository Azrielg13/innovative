/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.security;

import java.sql.SQLException;
import java.util.Properties;

import com.sce.esp.object.model.Org;
import com.sce.esp.object.model.User;

/**
 * <p>UserRole</br>
 * UserRole extends Properties in order to supply
 * a location for credential data which is retrieved
 * from the database.</p>
 *
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class UserRole extends Properties {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8289960820877067201L;
	public final static int MDI_R_INQUIRY = 90 ;
	public final static int MDI_R_USER = 50;
	public final static int MDI_R_MGR = 20;
	public final static int MDI_R_ADMIN = 10;	

	/**
	 * Empty Constructor
	 */
	public UserRole() {}	

	public int getLevel() throws SQLException{
		if(isAdmin())
			return MDI_R_ADMIN;
		if(isMgr())
			return MDI_R_MGR;
		if(isUser())
			return MDI_R_USER;     	
		if(isGuest())
			return MDI_R_INQUIRY;    	
		return MDI_R_INQUIRY;
	}

	public String showAllRoles(){		
		return	" inq? "+containsKey("MDI_R_INQUIRY")
		+" grow? "+containsKey("MDI_R_GROWTH")
		+ " proj? "+containsKey("MDI_R_PROJ")
		+ " user? "+containsKey("MDI_R_USER")
		+ " mgr? "+containsKey("MDI_R_MGR")
		+ " admin? "+containsKey("MDI_R_ADMIN");		
	}
	
	public String toString(){		
		try {
			if(isAdmin())
				return "Admin";
			if(isMgr())
				return "Manager / Lead";
			if(isUser())
				return "User";    	
			if(isGuest())
				return "Read Only";
		} catch (SQLException e) {			
			e.printStackTrace();
		}    	
		return "Unknown";
	}

	/**
	 * Determines if the user is read-only based
	 * on granted db roles.
	 * @return - true is user is read only
	 * @throws SQLException 
	 */
	public boolean isGuest() throws SQLException{		
		return (User.getActiveUser().isReadOnly() || (containsKey("MDI_R_INQUIRY") && !containsKey("MDI_R_GROWTH") && !containsKey("MDI_R_PROJ") &&  !containsKey("MDI_R_USER") && !containsKey("MDI_R_MGR") && !containsKey("MDI_R_ADMIN")));
	}

	/**
	 * Determines if the currently signed in user
	 * has basic read/write capabilities. 
	 * @return - Returns true if user privileges are granted.
	 */
	public boolean isUser() throws SQLException{
		return ((containsKey("MDI_R_USER") || containsKey("MDI_R_PROJ") || containsKey("MDI_R_GROWTH") || isMgr()) && !User.getActiveUser().isReadOnly());
	}    

	/**
	 * Determines if the currently signed in user
	 * has manager capabilities. 
	 * @return - Returns true is mgr privileges are granted.
	 */
	public boolean isMgr() throws SQLException{
		return ((containsKey("MDI_R_MGR") || isAdmin()) && !User.getActiveUser().isReadOnly());
	}

	/**
	 * Determines if the currently signed in user
	 * has administration capabilities. 
	 * @return - Returns true is admin privileges are granted.
	 * @throws SQLException 
	 */
	public boolean isAdmin() throws SQLException{
		return (containsKey("MDI_R_ADMIN") && !User.getActiveUser().isReadOnly());
	} 

	//MDI
	public boolean isMDIAdmin() throws SQLException {
		return isAdmin() && (User.getActiveUser().getOrgId() == Org.DE || User.getActiveUser().getOrgId() == Org.PQ || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP || User.getActiveUser().getOrgId() == Org.RGT);
	}
	
	public boolean isMDIMgr() throws SQLException {
		return isMgr() && (User.getActiveUser().getOrgId() == Org.DE || User.getActiveUser().getOrgId() == Org.PQ || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP || User.getActiveUser().getOrgId() == Org.RGT);
	}

	public boolean isMDIUser() throws SQLException {
		return isUser() && (User.getActiveUser().getOrgId() == Org.DE ||  User.getActiveUser().getOrgId() == Org.PQ  || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP || User.getActiveUser().getOrgId() == Org.RGT);
	}
	
	public boolean isMDIInquiry() throws SQLException {
		return isGuest();
	}
	
	
	//Growth
	public boolean isGrowthAdmin() throws SQLException{
		return isMDIAdmin();
	}
	
	public boolean isGrowthMgr() throws SQLException{
		return isMDIUser();
	}
	
	public boolean isGrowthUser() throws SQLException {
		return isUser();
	}
	
	public boolean isGrowthInquiry() throws SQLException {
		return isGuest();
	}
	

	//IWP
	public boolean isIWPAdmin() throws SQLException{
		return isAdmin() && (User.getActiveUser().getOrgId() == Org.SPI || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP);
	}

	public boolean isIWPMgr() throws SQLException {
		return isMgr() && (User.getActiveUser().getOrgId() == Org.SPI || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP);
	}

	public boolean isIWPUser() throws SQLException{
		return isUser() && (User.getActiveUser().getOrgId() == Org.SPI || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP);
	}
	
	public boolean isIWPInquiry() throws SQLException {
		return isGuest();
	}


	//SPI
	public boolean isPSIAdmin() throws SQLException{
		return isAdmin() && (User.getActiveUser().getOrgId() == Org.SPI || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP);
	}
	
	public boolean isPSIMgr() throws SQLException{
		return isMgr() && (User.getActiveUser().getOrgId() == Org.SPI || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP);
	}
	
	public boolean isPSIUser() throws SQLException{
		return isUser();
	}
	
	public boolean isPSIInquiry() throws SQLException {
		return isGuest();
	}
	
	//SCMT
	public boolean isSCMTAdmin() throws SQLException {
		return isAdmin() && (User.getActiveUser().getOrgId() == Org.DE || User.getActiveUser().getOrgId() == Org.PQ || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP);
	}
	
	public boolean isSCMTMgr() throws SQLException {
		return isMgr() && (User.getActiveUser().getOrgId() == Org.DE || User.getActiveUser().getOrgId() == Org.PQ || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP );
	}

	public boolean isSCMTUser() throws SQLException {
		return isUser() && (User.getActiveUser().getOrgId() == Org.DE ||  User.getActiveUser().getOrgId() == Org.PQ  || User.getActiveUser().getOrgId() == Org.TIG || User.getActiveUser().getOrgId() == Org.ESP);
	}
	
	public boolean isSCMTInquiry() throws SQLException {
		return isGuest();
	}
}