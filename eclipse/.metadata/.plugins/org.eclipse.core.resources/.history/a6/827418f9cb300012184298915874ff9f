/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.swing.Icon;

import com.sce.esp.object.dao.FlagDAO;
import com.sce.esp.util.IconsFactory;
@Entity
@Table(schema="MDI",name="MDI880_FLAG")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Flag o WHERE o.PLANYEAR=?1 AND o.FLAG_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Flag o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Flag o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByDepartment", query="SELECT o FROM Flag o WHERE o.PLANYEAR=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI880_FLAG o WHERE o.PLANYEAR=? AND o.FLAG_ID=?"),//AUTO-GENERATED
})
public class Flag extends FlagDAO implements Serializable{
	
	private static final long serialVersionUID = 3089757628157802686L;

	/** The Number of years to check flags for, py < CKT_YEARS **/
	public final static int CKT_YEARS = 3;
	
	/** The ALT Criteria to check for flags **/
	public final static int SUB_ALT_CRITERIA_YEARS = 5;

	/** The Constant TENYRAVGFLAG. */
	public final static int TEN_YR_AVG_FLAG = 1;

	/** The Constant WSDISTANCEFLAG. */
	public final static int WS_DISTANCE_FLAG = 2;

	/** The Constant TEMPADJFLAG. */
	public final static int TEMP_ADJ_FLAG = 3;

	/** The Constant HIGHTEMPSENSFLAG. */
	public final static int HIGH_TEMP_SENS_FLAG = 4;

	/** The Constant LOWTEMPSENSFLAG. */
	public final static int LOW_TEMP_SENS_FLAG = 5;

	/** The Constant TEMPSENSYEARFLAG. */
	public final static int TEMP_SENS_YEAR_FLAG = 6;

	/** The Constant TEMPSENSPYFLAG. */
	public final static int TEMP_SENS_PY_FLAG = 7;

	/** The Constant INTFLAG. */
	public final static int INT_FLAG = 8;

	/** The Constant SPDATEFLAG. */
	public final static int SP_DATE_FLAG = 9;

	/** The Constant COINFLAG. */
	public final static int COIN_FLAG = 10;
	
	/** The Constant NONCOINFLAG. */
	public final static int NON_COIN_FLAG = 11;

	/** The Constant GROWTHYEARFLAG. */
	public final static int GROWTH_YR_FLAG = 12;

	/** The Constant GROWTHPYFLAG. */
	public final static int GROWTH_PY_FLAG = 13;

	/** The Constant CHILDGROWTHFLAG. */
	public final static int CHILD_GROWTH_FLAG = 14;

	/** The Constant HIGHDRFFLAG. */
	public final static int HIGH_DRF_FLAG = 15;

	/** The Constant LOWDRFFLAG. */
	public final static int LOW_DRF_FLAG = 16;	

	/** The Constant PLLFLAG. */
	public final static int PLL_FLAG = 17;

	/** The Constant SUBRESERVEFLAG. */
	public final static int SUB_RESERVE_FLAG = 18;

	/** The Constant ACLFLAG. */
	public final static int ACL_FLAG = 19;

	/** The Constant USERSPECFLAG. */
	public final static int USER_SPEC_SP_FLAG = 20;

	/** The Constant INTERSYSTRANSFLAG. */
	public final static int INTER_SYS_XFR_FLAG = 21;

	/** The Constant XFERCONFIRMFLAG. */
	public final static int XFR_CONFIRM_FLAG = 22;

	/** The Constant BADTRANSFLAG. */
	public final static int BAD_XFR_FLAG = 23;

	/** The Constant LARGEXFRFLAG. */
	public final static int LARGE_XFR_FLAG = 24;

	/** The Constant CKTXFRFLAG. */
	public final static int CKT_XFR_FLAG = 25;

	/** The Constant BADPROJFLAG. */
	public final static int PROJ_BAD_FLAG = 26;

	/** The Constant NOPROJCOSTFLAG. */
	public final static int PROJ_NO_COST_FLAG = 27;

	/** The Constant PROJCOSTDELTAFLAG. */
	public final static int PROJ_COST_DELTA_FLAG = 28;	

	/** The Constant NOPLANCOSTFLAG. */
	public final static int PROJ_NO_PLAN_COST_FLAG = 29;

	/** The Constant YEAROFCOSTFLAG. */
	public final static int PROJ_YEAR_OF_COST_FLAG = 30;

	/** The Constant PLLDELTAFLAG. */
	public final static int PROJ_PLL_DELTA_FLAG = 31;

	/** The Constant ELLDELTAFLAG. */
	public final static int PROJ_ELL_DELTA_FLAG = 32;

	/** The Constant N1DELTAFLAG. */
	public final static int PROJ_N1_DELTA_FLAG = 33;

	/** The Constant STELLDELTAFLAG. */
	public final static int PROJ_STELL_DELTA_FLAG = 34;

	/** The Constant OPDATEFLAG. */
	public final static int PROJ_OP_DATE_FLAG = 35;

	/** The Constant CKTPLLFLAG. */
	public final static int CKT_PLL_FLAG = 36;

	/** The Constant CKTRESERVEFLAG. */
	public final static int CKT_RESERVE_FLAG = 37;

	/** The Constant DBNORMALFLAG. */
	public final static int CA_DB_NORM_FLAG = 38;

	/** The Constant DBEMERGENCYFLAG. */
	public final static int CA_DB_EMER_FLAG = 39;

	/** The Constant N1STFLAG. */
	public final static int N1_ST_FLAG = 40;

	/** The Constant N1LTFLAG. */
	public final static int N1_LT_FLAG = 41;    

	/** The Constant N1SHEDFLAG. */
	public final static int N1_SHED_FLAG = 42;

	/** The Constant N1ROLLFLAG. */
	public final static int N1_ROLL_FLAG = 43;

	/** The Constant N1BADXFERFLAG. */
	public final static int N1_BAD_XFER_FLAG = 44;

	/** The Constant N1_XFER_FLAG. */
	public final static int N1_XFER_FLAG = 45;

	/** The Constant N1_NEG_RES_FLAG. */
	public final static int N1_NEG_RES_FLAG = 46;	

	/** The Constant N1_LIMIT_CHANGE_FLAG. */
	public final static int N1_LIMIT_CHANGE_FLAG = 47;	

	/** The Constant N1_LIMIT_NO_CHANGE_FLAG. */
	public final static int N1_LIMIT_NO_CHANGE_FLAG = 48;	

	/** The Constant PIF_COST_FLAG. */
	public final static int PIF_COST_FLAG = 49;	

	/** The Constant PIF_COST_PY_FLAG. */
	public final static int PIF_COST_PY_FLAG = 50;	

	/** The Constant PROJ_ACT_OP_FLAG. */
	public final static int PROJ_ACT_OP_FLAG = 51;	

	/** The Constant PROJ_INCONSISTENT_FLAG. */
	public final static int PROJ_INCONSISTENT_FLAG = 52;

	/** The Constant VAR_RESERVE_DIST_FLAG. */
	public final static int VAR_RESERVE_DIST_FLAG = 53;

	/** The Constant VAR_RESERVE_SYS_FLAG. */
	public final static int VAR_RESERVE_SYS_FLAG = 54;

	/** The Constant PROJ_Z_FLAG. */
	public final static int PROJ_Z_FLAG = 55;
	
	/** The Constant WS_MISSING_PEAKS_FLAG. */
	public final static int WS_MISSING_PEAKS_FLAG = 56;
	
	
	
	//Flags for last five years in plan.
	
	/** The Constant SUB_RES_LAST_FIVE_FLAG */
	public final static int SUB_RES_LAST_FIVE_FLAG = 57;
	
	/** The Constant WS_MISSING_PEAKS_FLAG. */
	public final static int ACL_LAST_FIVE_FLAG = 58;
	
	/** The Constant WS_MISSING_PEAKS_FLAG. */
	public final static int VAR_RESERVE_SYS_LAST_FIVE_FLAG = 59;
	
	/** Flags for EV study */
	public final static int ACL_EV_FLAG = 60;
	
	/** Flag for Ckt to Sub PRN. */
	public final static int CKT_TO_SUB_PRN_FLAG = 61;
	
	/** The Constant BBANK_NAMEPLATE_EXCEEDS_FLAG **/
	public final static int BBANK_NAMEPLATE_EXCEEDS_FLAG =62;
	
	

	/** The Constant ALARM_ICON. */
	public final static Icon ALARM_ICON = IconsFactory.getImageIcon(IconsFactory.Frame.ALARM);

	/** The Constant WARNING_ICON. */
	public final static Icon WARNING_ICON = IconsFactory.getImageIcon(IconsFactory.Frame.WARNING);

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 */
	public Flag(){
	}
	public Flag(int planyear) {
		super(planyear,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param flagId the flag id
	 * @param planyear the planyear
	 */
	public Flag(int planyear, int flagId){
		super(planyear,flagId);
	}

	public Flag(Flag flag) {
		super(flag);
	}

	/**
	 * Gets the icon.
	 * 
	 * @return the icon
	 */
	public Icon getIcon() {
		if(isAlarm())
			return ALARM_ICON;        
		return WARNING_ICON;
	}

	/**
	 * <p>Title: getToolTip()</p>
	 * <p>Returns html title and description with the value shown</p>.
	 * 
	 * @return String
	 */
	public String getToolTip() {    	   	
		return "<html>"+getToolTipText()+"</html>";
	}

	/**
	 * <p>Title: getToolTipText()</p>
	 * <p>Returns title and description with the value shown without the html open and close tags</p>.
	 * 
	 * @return String
	 */
	public String getToolTipText() {
		return " "+getTitle()+(isAlarm()?" [Alarm ":" [Warning ")+"#"+getFlagId()+"]"+"<br> - "+getToolTipDesc();
	}

	/**
	 * <p>Title: getToolTip()</p>
	 * <p>Returns html title and description with the value shown</p>.
	 * 
	 * @return String
	 */
	public String getToolTipDesc() {               
		String tooltip = getDescription().replaceAll("&value%",""+getValue()*100+"%");       
		return tooltip.replaceAll("&value",""+getValue());
	}
	
	/**
	 * Checks if is show flags.
	 * 
	 * @return true if flags are enabled for this particular flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isShowFlag() throws SQLException{
		//return true;//FIXME cache
		UserSelect userSel = User.getActiveUser().getUserSelect();
		//return (/*userSel.isShowFlags() &&*/ User.getActiveUser().getUserSelect().getMultFlags().contains(getFlagId()));
		return userSel.getMultShowFlags()!=null && 
				!userSel.getMultShowFlags().equals("0") && 
					!userSel.getMultShowFlags().equals("") && 
						User.getActiveUser().getUserSelect().getMultFlags().contains(getFlagId());
	}
	
	public String toString() {
		return getTitle();
	}
}
