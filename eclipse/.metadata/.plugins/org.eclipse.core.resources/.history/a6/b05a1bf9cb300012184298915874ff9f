/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.PifWoDAO;
@Entity
@Table(schema="MDI",name="MDI680_PIF_WO")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM PifWo o WHERE o.PLANYEAR=?1 AND o.WO_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM PifWo o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM PifWo o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByDistrict", query="SELECT o FROM PifWo o WHERE o.PLANYEAR=?1 AND o.DISTRICT_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByPif", query="SELECT o FROM PifWo o WHERE o.PLANYEAR=?1 AND o.PIF_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI680_PIF_WO o WHERE o.PLANYEAR=? AND o.WO_ID=?"),//AUTO-GENERATED
})
public class PifWo extends PifWoDAO implements Serializable{

	private static final long serialVersionUID = -5197662296275899104L;

	/** The Constant WO_PM. */
	public final static String[] WO_PM = {"PMO","DPMO","RPC","Other"};
	
	/** The Constant WO_DR. */
	public final static String[] WO_DR = {"Tech Plan","FE Tech","Dist Plan","Other"};
	
	
	public PifWo(){
	}
	public PifWo(int planyear, int woId){
		super(planyear,woId);
	}
	
	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 */
	public PifWo(int planyear){
		super(planyear,0);
	}
	
	
	
	public PifWo(PifWo pifWo) {
		super(pifWo);
	}

	/**
	 * Gets the wo num.
	 * 
	 * @return the wo num
	 * @throws SQLException 
	 */
	public String getWoNum() throws SQLException {
		if(getLoc()!=null && getDistrict()!=null && getWo()!=null && getAi()!=null)
		return getLoc()+getDistrict().getDistrictNum()+"-"+getWo()+"-"+getAi();
		return getSapNum();
	}
	
	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString() {
		try{
			return getWoNum();
		} catch(Exception e) {
			e.printStackTrace();
		}
		return "";
	}
	
	public double getLoadedCost() throws SQLException{
		return Department.getInstance(getPlanyear()).getPifOverhead()*getSceGross();
	}
	
	
	//BME MDI Add Prior Year Spend to PIF WO Wizard
	public double getPriorYearSpend(){
		return getAltDoubleA();
	}
	
	public void setPriorYearSpend(double x) throws SQLException{
		setAltDoubleA(x);
	}

	public double getDpiAdmin() {		
		return getAltDoubleB();
	}
	
	public void setDpiAdmin(double d) throws SQLException {		
		this.setAltDoubleB(d);
	}

	public int getDpiPlanning() {
		return (int)Math.round((getDpiLabor()+getDpiContract())*Pif.PLANNING_FACTOR);
	}
	
	public double getCapitalPercent(){
		return  this.getAltDoubleF();
	}
	
	public void setCapitalPercent(double d) throws SQLException{
		this.setAltDoubleF(d);
	}
	
	
	public double getOMPercent(){
		return  this.getAltDoubleE();
	}
	
	public void setOMPercent(double d) throws SQLException{
		this.setAltDoubleE(d);
	}
	
	public String getGWother(){
		return this.getAltVarchar1();
	}
	
	public void setGWother(String s) throws SQLException{
		this.setAltVarchar1(s);
	}
	
	public double getManDays(){
		return this.getAltDoubleD();
	}
	
	public void setManDays(double d) throws SQLException{
		this.setAltDoubleD(d);
	}
	
	public String getBiYear() throws SQLException{
		return this.getAltVarchar2();
	}
	
	public void setBiYear(String s) throws SQLException{
		this.setAltVarchar2(s);
	}
	
	public String getBiSouce() throws SQLException{
		return this.getAltVarchar3();
	}
	
	public void setBiSource(String s) throws SQLException{
		this.setAltVarchar3(s);
	}
	public int getTotalImpactScore() throws SQLException{
		int total = 0;
		for(PifWoImpact pwi : getPifWoImpacts())
			total+=pwi.getPifImpactValue().getValue();
		return total;
	}
	
	public int getTotalEstCost(){
		return getOAndM()+getCapital();
	}
	
	public int getOMtoCapitalPercent(){
		if(getCapital()!=0)
		return 	(int) Math.round((100.0-(((getCapital()*1.0-getOAndM()*1.0)/getCapital()*1.0)*100.0)));
		return 0;
	}
	
	public double getPercentComplete(){
		return getAltDoubleI();
	}
	
	public void setPercentComplete(double num) throws SQLException{
		setAltDoubleI(num);
	}
}
