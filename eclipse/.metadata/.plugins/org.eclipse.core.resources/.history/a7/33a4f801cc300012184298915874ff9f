package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.SubIrRank;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SubIrRankDAO extends MDIObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{PLANYEAR,ID,SUB_ID,EFF_DATE,TYPE,REPLACE_ODR,EQUIP_ID,MANUFACTURER,MODEL_NUM,SERIAL_NUM,SAP_CODE,CKT_BREAKER_DESC,BREAKER_TYPE,VOLTAGE_LVL,BANK,PHASE,TOP_MVA,PRIMARY_KV,SECONDARY_KV,PHASE_NUM,EXPERT_OPINION,OCBA_LVL_COUNTS,OP_MECHANISM,OP_COUNTS,CORRECT_MAT_PRI_ONE,CORRECT_MAT_PRI_TWO,CORRECT_MAT_PRI_THREE,FAULT_COUNTS,NUM_OF_CUSTS,CRIT_MULTIPLE,AGE,EFF_AGE,PLANNED_REPLACEMENT_COST,RISK_COST,HI,PROB_OF_FAILURE,RISK_RATIO,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int ID_LIMIT = 9;
	public final static int SUBID_LIMIT = 9;
	public final static int EFFDATE_LIMIT = 7;
	public final static int TYPE_LIMIT = 8;
	public final static int REPLACEODR_LIMIT = 9;
	public final static int EQUIPID_LIMIT = 16;
	public final static int MANUFACTURER_LIMIT = 32;
	public final static int MODELNUM_LIMIT = 32;
	public final static int SERIALNUM_LIMIT = 32;
	public final static int SAPCODE_LIMIT = 32;
	public final static int CKTBREAKERDESC_LIMIT = 64;
	public final static int BREAKERTYPE_LIMIT = 4;
	public final static int VOLTAGELVL_LIMIT = 9;
	public final static int BANK_LIMIT = 8;
	public final static int PHASE_LIMIT = 8;
	public final static int TOPMVA_LIMIT = 24;
	public final static int PRIMARYKV_LIMIT = 9;
	public final static int SECONDARYKV_LIMIT = 9;
	public final static int PHASENUM_LIMIT = 8;
	public final static int EXPERTOPINION_LIMIT = 16;
	public final static int OCBALVLCOUNTS_LIMIT = 2;
	public final static int OPMECHANISM_LIMIT = 8;
	public final static int OPCOUNTS_LIMIT = 9;
	public final static int CORRECTMATPRIONE_LIMIT = 9;
	public final static int CORRECTMATPRITWO_LIMIT = 9;
	public final static int CORRECTMATPRITHREE_LIMIT = 9;
	public final static int FAULTCOUNTS_LIMIT = 9;
	public final static int NUMOFCUSTS_LIMIT = 9;
	public final static int CRITMULTIPLE_LIMIT = 24;
	public final static int AGE_LIMIT = 9;
	public final static int EFFAGE_LIMIT = 9;
	public final static int PLANNEDREPLACEMENTCOST_LIMIT = 9;
	public final static int RISKCOST_LIMIT = 9;
	public final static int HI_LIMIT = 24;
	public final static int PROBOFFAILURE_LIMIT = 24;
	public final static int RISKRATIO_LIMIT = 24;
	private int planyear;
	private int id;
	private int subId;
	private Calendar effDate;
	private String type;
	private int replaceOdr;
	private String equipId;
	private String manufacturer;
	private String modelNum;
	private String serialNum;
	private String sapCode;
	private String cktBreakerDesc;
	private String breakerType;
	private int voltageLvl;
	private String bank;
	private String phase;
	private double topMva;
	private int primaryKv;
	private int secondaryKv;
	private String phaseNum;
	private String expertOpinion;
	private int ocbaLvlCounts;
	private String opMechanism;
	private int opCounts;
	private int correctMatPriOne;
	private int correctMatPriTwo;
	private int correctMatPriThree;
	private int faultCounts;
	private int numOfCusts;
	private double critMultiple;
	private int age;
	private int effAge;
	private int plannedReplacementCost;
	private int riskCost;
	private double hi;
	private double probOfFailure;
	private double riskRatio;
	private Sub sub;
	public static SubIrRank getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static SubIrRank getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		SubIrRank o = null;
		if(cache != null && cache.contains(SubIrRank.class, pk))
			o = em.find(SubIrRank.class, pk);
		if(o==null && getAICache().contains(SubIrRank.class, pk))
			o = getAICache().find(SubIrRank.class, pk);
		if(o==null && fetch)
			o = em.find(SubIrRank.class, pk);
		if(o==null && fetch && SubIrRank.class.getAnnotation(AutoInsertable.class) != null){
			o = new SubIrRank(id);
			getAICache().cache(SubIrRank.class, o);
		}
		return o;
	}
	public static Collection<SubIrRank> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SubIrRank> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SubIrRank> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SubIrRank o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SubIrRank> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubIrRank> tq = em.createQuery(jpql,SubIrRank.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SubIrRank> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubIrRank> tq = em.createNamedQuery(name,SubIrRank.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SubIrRankDAO(){}
	public SubIrRankDAO(int id){
		this.id=id;
	}
	public SubIrRankDAO(SubIrRankDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SubIrRankDAO orig){
		this.planyear=orig.getPlanyear();
		this.subId=orig.getSubId();
		this.effDate=orig.getEffDate();
		this.type=orig.getType();
		this.replaceOdr=orig.getReplaceOdr();
		this.equipId=orig.getEquipId();
		this.manufacturer=orig.getManufacturer();
		this.modelNum=orig.getModelNum();
		this.serialNum=orig.getSerialNum();
		this.sapCode=orig.getSapCode();
		this.cktBreakerDesc=orig.getCktBreakerDesc();
		this.breakerType=orig.getBreakerType();
		this.voltageLvl=orig.getVoltageLvl();
		this.bank=orig.getBank();
		this.phase=orig.getPhase();
		this.topMva=orig.getTopMva();
		this.primaryKv=orig.getPrimaryKv();
		this.secondaryKv=orig.getSecondaryKv();
		this.phaseNum=orig.getPhaseNum();
		this.expertOpinion=orig.getExpertOpinion();
		this.ocbaLvlCounts=orig.getOcbaLvlCounts();
		this.opMechanism=orig.getOpMechanism();
		this.opCounts=orig.getOpCounts();
		this.correctMatPriOne=orig.getCorrectMatPriOne();
		this.correctMatPriTwo=orig.getCorrectMatPriTwo();
		this.correctMatPriThree=orig.getCorrectMatPriThree();
		this.faultCounts=orig.getFaultCounts();
		this.numOfCusts=orig.getNumOfCusts();
		this.critMultiple=orig.getCritMultiple();
		this.age=orig.getAge();
		this.effAge=orig.getEffAge();
		this.plannedReplacementCost=orig.getPlannedReplacementCost();
		this.riskCost=orig.getRiskCost();
		this.hi=orig.getHi();
		this.probOfFailure=orig.getProbOfFailure();
		this.riskRatio=orig.getRiskRatio();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI106_SEQ",sequenceName="MDI106_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="SUB_ID",nullable=false,length=9)
	public int getSubId(){
		return subId;
	}
	public void setSubId(int subId) throws java.sql.SQLException{
		if(isSame(subId, getSubId()))return;
		int oldValue = getSubId();
		this.subId=subId;
		setProperty("SUB_ID", subId, oldValue);
		sub=null;
	}
	@Column(name="EFF_DATE",nullable=true,length=7)
	public Calendar getEffDate(){
		return effDate;
	}
	public void setEffDate(Calendar effDate) throws java.sql.SQLException{
		if(isSame(effDate, getEffDate()))return;
		Calendar oldValue = getEffDate();
		this.effDate=effDate;
		setProperty("EFF_DATE", effDate, oldValue);
	}
	@Column(name="TYPE",nullable=true,length=8)
	public String getType(){
		return type;
	}
	public void setType(String type) throws java.sql.SQLException{
		if(isSame(type, getType()))return;
		String oldValue = getType();
		this.type=type;
		setProperty("TYPE", type, oldValue);
	}
	@Column(name="REPLACE_ODR",nullable=true,length=9)
	public int getReplaceOdr(){
		return replaceOdr;
	}
	public void setReplaceOdr(int replaceOdr) throws java.sql.SQLException{
		if(isSame(replaceOdr, getReplaceOdr()))return;
		int oldValue = getReplaceOdr();
		this.replaceOdr=replaceOdr;
		setProperty("REPLACE_ODR", replaceOdr, oldValue);
	}
	@Column(name="EQUIP_ID",nullable=true,length=16)
	public String getEquipId(){
		return equipId;
	}
	public void setEquipId(String equipId) throws java.sql.SQLException{
		if(isSame(equipId, getEquipId()))return;
		String oldValue = getEquipId();
		this.equipId=equipId;
		setProperty("EQUIP_ID", equipId, oldValue);
	}
	@Column(name="MANUFACTURER",nullable=true,length=32)
	public String getManufacturer(){
		return manufacturer;
	}
	public void setManufacturer(String manufacturer) throws java.sql.SQLException{
		if(isSame(manufacturer, getManufacturer()))return;
		String oldValue = getManufacturer();
		this.manufacturer=manufacturer;
		setProperty("MANUFACTURER", manufacturer, oldValue);
	}
	@Column(name="MODEL_NUM",nullable=true,length=32)
	public String getModelNum(){
		return modelNum;
	}
	public void setModelNum(String modelNum) throws java.sql.SQLException{
		if(isSame(modelNum, getModelNum()))return;
		String oldValue = getModelNum();
		this.modelNum=modelNum;
		setProperty("MODEL_NUM", modelNum, oldValue);
	}
	@Column(name="SERIAL_NUM",nullable=true,length=32)
	public String getSerialNum(){
		return serialNum;
	}
	public void setSerialNum(String serialNum) throws java.sql.SQLException{
		if(isSame(serialNum, getSerialNum()))return;
		String oldValue = getSerialNum();
		this.serialNum=serialNum;
		setProperty("SERIAL_NUM", serialNum, oldValue);
	}
	@Column(name="SAP_CODE",nullable=true,length=32)
	public String getSapCode(){
		return sapCode;
	}
	public void setSapCode(String sapCode) throws java.sql.SQLException{
		if(isSame(sapCode, getSapCode()))return;
		String oldValue = getSapCode();
		this.sapCode=sapCode;
		setProperty("SAP_CODE", sapCode, oldValue);
	}
	@Column(name="CKT_BREAKER_DESC",nullable=true,length=64)
	public String getCktBreakerDesc(){
		return cktBreakerDesc;
	}
	public void setCktBreakerDesc(String cktBreakerDesc) throws java.sql.SQLException{
		if(isSame(cktBreakerDesc, getCktBreakerDesc()))return;
		String oldValue = getCktBreakerDesc();
		this.cktBreakerDesc=cktBreakerDesc;
		setProperty("CKT_BREAKER_DESC", cktBreakerDesc, oldValue);
	}
	@Column(name="BREAKER_TYPE",nullable=true,length=4)
	public String getBreakerType(){
		return breakerType;
	}
	public void setBreakerType(String breakerType) throws java.sql.SQLException{
		if(isSame(breakerType, getBreakerType()))return;
		String oldValue = getBreakerType();
		this.breakerType=breakerType;
		setProperty("BREAKER_TYPE", breakerType, oldValue);
	}
	@Column(name="VOLTAGE_LVL",nullable=true,length=9)
	public int getVoltageLvl(){
		return voltageLvl;
	}
	public void setVoltageLvl(int voltageLvl) throws java.sql.SQLException{
		if(isSame(voltageLvl, getVoltageLvl()))return;
		int oldValue = getVoltageLvl();
		this.voltageLvl=voltageLvl;
		setProperty("VOLTAGE_LVL", voltageLvl, oldValue);
	}
	@Column(name="BANK",nullable=true,length=8)
	public String getBank(){
		return bank;
	}
	public void setBank(String bank) throws java.sql.SQLException{
		if(isSame(bank, getBank()))return;
		String oldValue = getBank();
		this.bank=bank;
		setProperty("BANK", bank, oldValue);
	}
	@Column(name="PHASE",nullable=true,length=8)
	public String getPhase(){
		return phase;
	}
	public void setPhase(String phase) throws java.sql.SQLException{
		if(isSame(phase, getPhase()))return;
		String oldValue = getPhase();
		this.phase=phase;
		setProperty("PHASE", phase, oldValue);
	}
	@Column(name="TOP_MVA",nullable=true,length=24)
	public double getTopMva(){
		return topMva;
	}
	public void setTopMva(double topMva) throws java.sql.SQLException{
		if(isSame(topMva, getTopMva()))return;
		double oldValue = getTopMva();
		this.topMva=topMva;
		setProperty("TOP_MVA", topMva, oldValue);
	}
	@Column(name="PRIMARY_KV",nullable=true,length=9)
	public int getPrimaryKv(){
		return primaryKv;
	}
	public void setPrimaryKv(int primaryKv) throws java.sql.SQLException{
		if(isSame(primaryKv, getPrimaryKv()))return;
		int oldValue = getPrimaryKv();
		this.primaryKv=primaryKv;
		setProperty("PRIMARY_KV", primaryKv, oldValue);
	}
	@Column(name="SECONDARY_KV",nullable=true,length=9)
	public int getSecondaryKv(){
		return secondaryKv;
	}
	public void setSecondaryKv(int secondaryKv) throws java.sql.SQLException{
		if(isSame(secondaryKv, getSecondaryKv()))return;
		int oldValue = getSecondaryKv();
		this.secondaryKv=secondaryKv;
		setProperty("SECONDARY_KV", secondaryKv, oldValue);
	}
	@Column(name="PHASE_NUM",nullable=true,length=8)
	public String getPhaseNum(){
		return phaseNum;
	}
	public void setPhaseNum(String phaseNum) throws java.sql.SQLException{
		if(isSame(phaseNum, getPhaseNum()))return;
		String oldValue = getPhaseNum();
		this.phaseNum=phaseNum;
		setProperty("PHASE_NUM", phaseNum, oldValue);
	}
	@Column(name="EXPERT_OPINION",nullable=true,length=16)
	public String getExpertOpinion(){
		return expertOpinion;
	}
	public void setExpertOpinion(String expertOpinion) throws java.sql.SQLException{
		if(isSame(expertOpinion, getExpertOpinion()))return;
		String oldValue = getExpertOpinion();
		this.expertOpinion=expertOpinion;
		setProperty("EXPERT_OPINION", expertOpinion, oldValue);
	}
	@Column(name="OCBA_LVL_COUNTS",nullable=true,length=2)
	public int getOcbaLvlCounts(){
		return ocbaLvlCounts;
	}
	public void setOcbaLvlCounts(int ocbaLvlCounts) throws java.sql.SQLException{
		if(isSame(ocbaLvlCounts, getOcbaLvlCounts()))return;
		int oldValue = getOcbaLvlCounts();
		this.ocbaLvlCounts=ocbaLvlCounts;
		setProperty("OCBA_LVL_COUNTS", ocbaLvlCounts, oldValue);
	}
	@Column(name="OP_MECHANISM",nullable=true,length=8)
	public String getOpMechanism(){
		return opMechanism;
	}
	public void setOpMechanism(String opMechanism) throws java.sql.SQLException{
		if(isSame(opMechanism, getOpMechanism()))return;
		String oldValue = getOpMechanism();
		this.opMechanism=opMechanism;
		setProperty("OP_MECHANISM", opMechanism, oldValue);
	}
	@Column(name="OP_COUNTS",nullable=true,length=9)
	public int getOpCounts(){
		return opCounts;
	}
	public void setOpCounts(int opCounts) throws java.sql.SQLException{
		if(isSame(opCounts, getOpCounts()))return;
		int oldValue = getOpCounts();
		this.opCounts=opCounts;
		setProperty("OP_COUNTS", opCounts, oldValue);
	}
	@Column(name="CORRECT_MAT_PRI_ONE",nullable=true,length=9)
	public int getCorrectMatPriOne(){
		return correctMatPriOne;
	}
	public void setCorrectMatPriOne(int correctMatPriOne) throws java.sql.SQLException{
		if(isSame(correctMatPriOne, getCorrectMatPriOne()))return;
		int oldValue = getCorrectMatPriOne();
		this.correctMatPriOne=correctMatPriOne;
		setProperty("CORRECT_MAT_PRI_ONE", correctMatPriOne, oldValue);
	}
	@Column(name="CORRECT_MAT_PRI_TWO",nullable=true,length=9)
	public int getCorrectMatPriTwo(){
		return correctMatPriTwo;
	}
	public void setCorrectMatPriTwo(int correctMatPriTwo) throws java.sql.SQLException{
		if(isSame(correctMatPriTwo, getCorrectMatPriTwo()))return;
		int oldValue = getCorrectMatPriTwo();
		this.correctMatPriTwo=correctMatPriTwo;
		setProperty("CORRECT_MAT_PRI_TWO", correctMatPriTwo, oldValue);
	}
	@Column(name="CORRECT_MAT_PRI_THREE",nullable=true,length=9)
	public int getCorrectMatPriThree(){
		return correctMatPriThree;
	}
	public void setCorrectMatPriThree(int correctMatPriThree) throws java.sql.SQLException{
		if(isSame(correctMatPriThree, getCorrectMatPriThree()))return;
		int oldValue = getCorrectMatPriThree();
		this.correctMatPriThree=correctMatPriThree;
		setProperty("CORRECT_MAT_PRI_THREE", correctMatPriThree, oldValue);
	}
	@Column(name="FAULT_COUNTS",nullable=true,length=9)
	public int getFaultCounts(){
		return faultCounts;
	}
	public void setFaultCounts(int faultCounts) throws java.sql.SQLException{
		if(isSame(faultCounts, getFaultCounts()))return;
		int oldValue = getFaultCounts();
		this.faultCounts=faultCounts;
		setProperty("FAULT_COUNTS", faultCounts, oldValue);
	}
	@Column(name="NUM_OF_CUSTS",nullable=true,length=9)
	public int getNumOfCusts(){
		return numOfCusts;
	}
	public void setNumOfCusts(int numOfCusts) throws java.sql.SQLException{
		if(isSame(numOfCusts, getNumOfCusts()))return;
		int oldValue = getNumOfCusts();
		this.numOfCusts=numOfCusts;
		setProperty("NUM_OF_CUSTS", numOfCusts, oldValue);
	}
	@Column(name="CRIT_MULTIPLE",nullable=true,length=24)
	public double getCritMultiple(){
		return critMultiple;
	}
	public void setCritMultiple(double critMultiple) throws java.sql.SQLException{
		if(isSame(critMultiple, getCritMultiple()))return;
		double oldValue = getCritMultiple();
		this.critMultiple=critMultiple;
		setProperty("CRIT_MULTIPLE", critMultiple, oldValue);
	}
	@Column(name="AGE",nullable=true,length=9)
	public int getAge(){
		return age;
	}
	public void setAge(int age) throws java.sql.SQLException{
		if(isSame(age, getAge()))return;
		int oldValue = getAge();
		this.age=age;
		setProperty("AGE", age, oldValue);
	}
	@Column(name="EFF_AGE",nullable=true,length=9)
	public int getEffAge(){
		return effAge;
	}
	public void setEffAge(int effAge) throws java.sql.SQLException{
		if(isSame(effAge, getEffAge()))return;
		int oldValue = getEffAge();
		this.effAge=effAge;
		setProperty("EFF_AGE", effAge, oldValue);
	}
	@Column(name="PLANNED_REPLACEMENT_COST",nullable=true,length=9)
	public int getPlannedReplacementCost(){
		return plannedReplacementCost;
	}
	public void setPlannedReplacementCost(int plannedReplacementCost) throws java.sql.SQLException{
		if(isSame(plannedReplacementCost, getPlannedReplacementCost()))return;
		int oldValue = getPlannedReplacementCost();
		this.plannedReplacementCost=plannedReplacementCost;
		setProperty("PLANNED_REPLACEMENT_COST", plannedReplacementCost, oldValue);
	}
	@Column(name="RISK_COST",nullable=true,length=9)
	public int getRiskCost(){
		return riskCost;
	}
	public void setRiskCost(int riskCost) throws java.sql.SQLException{
		if(isSame(riskCost, getRiskCost()))return;
		int oldValue = getRiskCost();
		this.riskCost=riskCost;
		setProperty("RISK_COST", riskCost, oldValue);
	}
	@Column(name="HI",nullable=true,length=24)
	public double getHi(){
		return hi;
	}
	public void setHi(double hi) throws java.sql.SQLException{
		if(isSame(hi, getHi()))return;
		double oldValue = getHi();
		this.hi=hi;
		setProperty("HI", hi, oldValue);
	}
	@Column(name="PROB_OF_FAILURE",nullable=true,length=24)
	public double getProbOfFailure(){
		return probOfFailure;
	}
	public void setProbOfFailure(double probOfFailure) throws java.sql.SQLException{
		if(isSame(probOfFailure, getProbOfFailure()))return;
		double oldValue = getProbOfFailure();
		this.probOfFailure=probOfFailure;
		setProperty("PROB_OF_FAILURE", probOfFailure, oldValue);
	}
	@Column(name="RISK_RATIO",nullable=true,length=24)
	public double getRiskRatio(){
		return riskRatio;
	}
	public void setRiskRatio(double riskRatio) throws java.sql.SQLException{
		if(isSame(riskRatio, getRiskRatio()))return;
		double oldValue = getRiskRatio();
		this.riskRatio=riskRatio;
		setProperty("RISK_RATIO", riskRatio, oldValue);
	}
	public Sub getSub()throws java.sql.SQLException{
		if(sub==null)
			sub=Sub.getInstance(getPlanyear(), getSubId());
		return sub;
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		setSubId(sub==null?0:sub.getSubId());
		this.sub=sub;
	}
	public SubIrRank copy()throws java.sql.SQLException{
		SubIrRank cp = new SubIrRank((SubIrRank)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SubIrRankDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SubIrRankDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getSubId(),o.getSubId())) diffs.add("SUB_ID");
		if(!isSame(getEffDate(),o.getEffDate())) diffs.add("EFF_DATE");
		if(!isSame(getType(),o.getType())) diffs.add("TYPE");
		if(!isSame(getReplaceOdr(),o.getReplaceOdr())) diffs.add("REPLACE_ODR");
		if(!isSame(getEquipId(),o.getEquipId())) diffs.add("EQUIP_ID");
		if(!isSame(getManufacturer(),o.getManufacturer())) diffs.add("MANUFACTURER");
		if(!isSame(getModelNum(),o.getModelNum())) diffs.add("MODEL_NUM");
		if(!isSame(getSerialNum(),o.getSerialNum())) diffs.add("SERIAL_NUM");
		if(!isSame(getSapCode(),o.getSapCode())) diffs.add("SAP_CODE");
		if(!isSame(getCktBreakerDesc(),o.getCktBreakerDesc())) diffs.add("CKT_BREAKER_DESC");
		if(!isSame(getBreakerType(),o.getBreakerType())) diffs.add("BREAKER_TYPE");
		if(!isSame(getVoltageLvl(),o.getVoltageLvl())) diffs.add("VOLTAGE_LVL");
		if(!isSame(getBank(),o.getBank())) diffs.add("BANK");
		if(!isSame(getPhase(),o.getPhase())) diffs.add("PHASE");
		if(!isSame(getTopMva(),o.getTopMva())) diffs.add("TOP_MVA");
		if(!isSame(getPrimaryKv(),o.getPrimaryKv())) diffs.add("PRIMARY_KV");
		if(!isSame(getSecondaryKv(),o.getSecondaryKv())) diffs.add("SECONDARY_KV");
		if(!isSame(getPhaseNum(),o.getPhaseNum())) diffs.add("PHASE_NUM");
		if(!isSame(getExpertOpinion(),o.getExpertOpinion())) diffs.add("EXPERT_OPINION");
		if(!isSame(getOcbaLvlCounts(),o.getOcbaLvlCounts())) diffs.add("OCBA_LVL_COUNTS");
		if(!isSame(getOpMechanism(),o.getOpMechanism())) diffs.add("OP_MECHANISM");
		if(!isSame(getOpCounts(),o.getOpCounts())) diffs.add("OP_COUNTS");
		if(!isSame(getCorrectMatPriOne(),o.getCorrectMatPriOne())) diffs.add("CORRECT_MAT_PRI_ONE");
		if(!isSame(getCorrectMatPriTwo(),o.getCorrectMatPriTwo())) diffs.add("CORRECT_MAT_PRI_TWO");
		if(!isSame(getCorrectMatPriThree(),o.getCorrectMatPriThree())) diffs.add("CORRECT_MAT_PRI_THREE");
		if(!isSame(getFaultCounts(),o.getFaultCounts())) diffs.add("FAULT_COUNTS");
		if(!isSame(getNumOfCusts(),o.getNumOfCusts())) diffs.add("NUM_OF_CUSTS");
		if(!isSame(getCritMultiple(),o.getCritMultiple())) diffs.add("CRIT_MULTIPLE");
		if(!isSame(getAge(),o.getAge())) diffs.add("AGE");
		if(!isSame(getEffAge(),o.getEffAge())) diffs.add("EFF_AGE");
		if(!isSame(getPlannedReplacementCost(),o.getPlannedReplacementCost())) diffs.add("PLANNED_REPLACEMENT_COST");
		if(!isSame(getRiskCost(),o.getRiskCost())) diffs.add("RISK_COST");
		if(!isSame(getHi(),o.getHi())) diffs.add("HI");
		if(!isSame(getProbOfFailure(),o.getProbOfFailure())) diffs.add("PROB_OF_FAILURE");
		if(!isSame(getRiskRatio(),o.getRiskRatio())) diffs.add("RISK_RATIO");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
