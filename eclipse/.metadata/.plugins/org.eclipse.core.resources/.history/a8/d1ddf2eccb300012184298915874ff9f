/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.jortho;


/**
 * This class hold one Suggestion for another spelling. 
 * Note: this class has a natural ordering that is inconsistent with equals.
 * @author Volker Berlin
 */
final class Suggestion implements Comparable<Suggestion>{

    private final String word;
    private final int diff;
    
    /**
     * Construct a suggestion
     * @param word the characters of the suggested the word.
     * @param diff the difference to the original word.
     */
    Suggestion( CharSequence word, int diff) {
        this.word = word.toString();
        this.diff = diff;
    }
    
    /**
     * Return the suggested word and it equals to getWord().
     */
    @Override
    public String toString(){
        return word;
    }


    /**
     * Get the suggested word.
     * @return the word
     */
    public String getWord() {
        return word;
    }

    
    /**
     * Return a value that descript dissimilarity to the original word.
     * A vaulue of 0 means that the value is 100% identical. This should not occur.
     * @return the dissimilarity, so larger to differ the word.   
     */
    public int getDissimilarity(){
        return diff;
    }
    
    
    /**
     * {@inheritDoc}
     */
    @Override
    public boolean equals(Object sugg){
        if (sugg instanceof Suggestion) {
            return word.equals( ((Suggestion)sugg).word );
        }
        return false;
    }
    
    
    /**
     * {@inheritDoc}
     */
    @Override
    public int hashCode(){
        return word.hashCode();
    }


    /**
     * {@inheritDoc}
     */
    public int compareTo( Suggestion sugg ) {
        return diff - sugg.diff;
    }
}
