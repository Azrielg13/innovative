package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CritExcept;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Prog;
import com.sce.esp.object.model.ProgExcept;
import com.sce.esp.object.model.Program;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ProgExceptDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,EX_TYPE_ID};
	public static enum PROPERTY{PLANYEAR,EX_TYPE_ID,PROG_ID,TITLE,DESCRIPTION,VALUE,DISABLED,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,PROGRAM_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int EXTYPEID_LIMIT = 9;
	public final static int PROGID_LIMIT = 9;
	public final static int TITLE_LIMIT = 128;
	public final static int DESCRIPTION_LIMIT = 256;
	public final static int VALUE_LIMIT = 24;
	public final static int DISABLED_LIMIT = 1;
	public final static int PROGRAMID_LIMIT = 9;
	private int planyear;
	private int exTypeId;
	private int progId;
	private String title;
	private String description;
	private double value;
	private boolean disabled;
	private int programId;
	private Collection<CritExcept> critExcepts;
	private Prog prog;
	private Program program;
	public static ProgExcept getInstance(int planyear, int exTypeId)throws java.sql.SQLException{
		return getInstance(planyear, exTypeId, true);
	}
	public static ProgExcept getInstance(int planyear, int exTypeId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, exTypeId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, exTypeId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProgExcept o = null;
		if(cache != null && cache.contains(ProgExcept.class, pk))
			o = em.find(ProgExcept.class, pk);
		if(o==null && getAICache().contains(ProgExcept.class, pk))
			o = getAICache().find(ProgExcept.class, pk);
		if(o==null && fetch)
			o = em.find(ProgExcept.class, pk);
		if(o==null && fetch && ProgExcept.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProgExcept(planyear, exTypeId);
			getAICache().cache(ProgExcept.class, o);
		}
		return o;
	}
	public static Collection<ProgExcept> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProgExcept> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProgExcept> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProgExcept o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProgExcept> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProgExcept> tq = em.createQuery(jpql,ProgExcept.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProgExcept> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProgExcept> tq = em.createNamedQuery(name,ProgExcept.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProgExceptDAO(){}
	public ProgExceptDAO(int planyear, int exTypeId){
		this.planyear=planyear;
		this.exTypeId=exTypeId;
	}
	public ProgExceptDAO(ProgExceptDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(ProgExceptDAO orig){
		this.progId=orig.getProgId();
		this.title=orig.getTitle();
		this.description=orig.getDescription();
		this.value=orig.getValue();
		this.disabled=orig.isDisabled();
		this.programId=orig.getProgramId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, exTypeId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI567_SEQ",sequenceName="MDI567_SEQ")
	@Column(name="EX_TYPE_ID",nullable=false,length=9)
	public int getExTypeId(){
		return exTypeId;
	}
	public void setExTypeId(int exTypeId) throws java.sql.SQLException{
		if(isSame(exTypeId, getExTypeId()))return;
		int oldValue = getExTypeId();
		this.exTypeId=exTypeId;
		setProperty("EX_TYPE_ID", exTypeId, oldValue);
	}
	@Column(name="PROG_ID",nullable=false,length=9)
	public int getProgId(){
		return progId;
	}
	public void setProgId(int progId) throws java.sql.SQLException{
		if(isSame(progId, getProgId()))return;
		int oldValue = getProgId();
		this.progId=progId;
		setProperty("PROG_ID", progId, oldValue);
		prog=null;
	}
	@Column(name="TITLE",nullable=true,length=128)
	public String getTitle(){
		return title;
	}
	public void setTitle(String title) throws java.sql.SQLException{
		if(isSame(title, getTitle()))return;
		String oldValue = getTitle();
		this.title=title;
		setProperty("TITLE", title, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="VALUE",nullable=true,length=24)
	public double getValue(){
		return value;
	}
	public void setValue(double value) throws java.sql.SQLException{
		if(isSame(value, getValue()))return;
		double oldValue = getValue();
		this.value=value;
		setProperty("VALUE", value, oldValue);
	}
	@Column(name="DISABLED",nullable=true,length=1)
	public boolean isDisabled(){
		return disabled;
	}
	public void setDisabled(boolean disabled) throws java.sql.SQLException{
		if(isSame(disabled, isDisabled()))return;
		boolean oldValue = isDisabled();
		this.disabled=disabled;
		setProperty("DISABLED", disabled, oldValue);
	}
	@Column(name="PROGRAM_ID",nullable=true,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
		program=null;
	}
	public Prog getProg()throws java.sql.SQLException{
		if(prog==null)
			prog=Prog.getInstance(getPlanyear(), getProgId());
		return prog;
	}
	public void setProg(Prog prog)throws java.sql.SQLException{
		setProgId(prog==null?0:prog.getProgId());
		this.prog=prog;
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getProgramId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setProgramId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public Collection<CritExcept> getCritExcepts()throws java.sql.SQLException{
		if(isNewInstance() || critExcepts != null){
			if(critExcepts == null)
				critExcepts = new TreeSet<CritExcept>();
			return critExcepts;
		}
		return CritExcept.getNamedCollection("findByProgExcept",getPlanyear(), getExTypeId());
	}
	public void addCritExcept(CritExcept critExcept)throws java.sql.SQLException{
		critExcept.setProgExcept((ProgExcept)this);
		if(isNewInstance() || critExcepts != null)
			getCritExcepts().add(critExcept);
		else
			critExcept.insert();
	}
	public void removeCritExcept(CritExcept critExcept)throws java.sql.SQLException{
		if(isNewInstance() || critExcepts != null)
			getCritExcepts().remove(critExcept);
		else
			critExcept.delete();
	}
	public ProgExcept copy()throws java.sql.SQLException{
		ProgExcept cp = new ProgExcept((ProgExcept)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProgExceptDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(CritExcept child:getCritExcepts())
			cp.addCritExcept(child.copy());
	}
	public Vector<String> getDifference(ProgExceptDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getExTypeId(),o.getExTypeId())) diffs.add("EX_TYPE_ID");
		if(!isSame(getProgId(),o.getProgId())) diffs.add("PROG_ID");
		if(!isSame(getTitle(),o.getTitle())) diffs.add("TITLE");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getValue(),o.getValue())) diffs.add("VALUE");
		if(!isSame(isDisabled(),o.isDisabled())) diffs.add("DISABLED");
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(critExcepts != null){
			for(CritExcept critExcept:getCritExcepts()){
				if(critExcept.isNewInstance())
					critExcept.setProgExcept((ProgExcept)this);
				critExcept.insert();
			}
			critExcepts = null;
		}
	}
}
