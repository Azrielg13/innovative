/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.Color;

import javax.swing.JTable;
import javax.swing.table.TableModel;

import com.jidesoft.grid.AutoFilterTableHeader;
import com.jidesoft.grid.JideTable;
import com.jidesoft.grid.MultiTableModel;
import com.jidesoft.grid.NestedTableHeader;
import com.jidesoft.grid.TableScrollPane;

/**
 * The Class MDITableScrollPane.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class ESPTableScrollPane extends TableScrollPane {

	private boolean tree;
	private boolean hyperlink;
	private ESPTablePanel tablePanel;
	private int userLevel;
	protected AutoFilterTableHeader mainFilterHeader;

	/**
	 * The Constructor.
	 * 
	 * @param isHyperlink
	 *            the is hyperlink
	 * @param isTree
	 *            the is tree
	 * @param tablePanel
	 *            the table panel
	 */
	public ESPTableScrollPane(ESPTablePanel tablePanel, boolean isTree, boolean isHyperlink, int userLevel) {
		super();
		this.tablePanel = tablePanel;
		this.tree = isTree;
		this.hyperlink = isHyperlink;
		this.userLevel = userLevel;
	}

	/**
	 * Creates the table.
	 * 
	 * @param model
	 *            the model
	 * @param sortable
	 *            the sortable
	 * @param tableIndex
	 *            the table index
	 * 
	 * @return the J table
	 */
	protected JTable createTable(TableModel model, boolean sortable, int type) {
		JideTable table;

		if (type == MultiTableModel.HEADER_COLUMN && isTree()) {
			ESPTreeTable tTable = new ESPTreeTable(isHyperlink(), model, this, type, getUserLevel());
			tTable.setSortable(true);
			tTable.setRowHeight(18);
			tTable.setShowTreeLines(true);
			tTable.setGridColor(Color.gray.brighter());
			tTable.setFillBottom(false);
			tTable.setFillGrids(false);
			tTable.setNestedTableHeader(true);
			tTable.setFillsViewportWithStripe(false);
			tTable.setFillsViewportHeight(false);
			table = tTable;
		} else {
			ESPSortableTable sTable = new ESPSortableTable(model, this, type, getUserLevel());
			sTable.setSortable(true);
			sTable.setRowHeight(18);
			sTable.setGridColor(Color.gray.brighter());
			sTable.setColumnAutoResizable(true);
			sTable.setFillsViewportWithStripe(false);
			sTable.setFillsViewportHeight(false);
			sTable.setFillGrids(false);
			sTable.setFillBottom(false);
			sTable.setFillsViewportWithStripe(false);
			sTable.setFillsViewportHeight(false);
			sTable.setNestedTableHeader(true);
			table = sTable;
		}
		mainFilterHeader = new AutoFilterTableHeader(table);
		if(mainFilterHeader!=null){
		mainFilterHeader.setAutoFilterEnabled(true);
		mainFilterHeader.setUseNativeHeaderRenderer(true);
		mainFilterHeader.setShowFilterName(false);
		//mainFilterHeader.setShowFilterIcon(false);
		table.setTableHeader(mainFilterHeader);
		//table.setFillsViewportHeight(false);
		//table.setNestedTableHeader(true);
		//((NestedTableHeader) table.getTableHeader()).setUseNativeHeaderRenderer(true);
//FIXME FTT test filters
//		((NestedTableHeader) ((JideTable) tablePanel.getTableScrollPane().getMainTable()).getTableHeader()).setAutoFilterEnabled(true);
//		((NestedTableHeader) ((JideTable) tablePanel.getTableScrollPane().getMainTable()).getTableHeader()).setUseNativeHeaderRenderer(true);
//		((NestedTableHeader) ((JideTable) tablePanel.getTableScrollPane().getMainTable()).getTableHeader()).setShowFilterName(false);
//		((NestedTableHeader) ((JideTable) tablePanel.getTableScrollPane().getMainTable()).getTableHeader()).setShowFilterIcon(false);
		}
		ESPTableColumnChooser.install(table);
		return table;
	}

	public AutoFilterTableHeader getAutoFilterTableHeader() {
		return mainFilterHeader;
	}

	public boolean isHyperlink() {
		return hyperlink;
	}

	public int getUserLevel() {
		return userLevel;
	}

	public boolean isTree() {
		return tree;
	}

	/**
	 * Gets the MDI table panel.
	 * 
	 * @return the MDI table panel
	 */
	public ESPTablePanel getTablePanel() {
		return tablePanel;
	}

	public void invalidateCache() {
		((ESPTable) getMainTable()).invalidateCache();
	}

}