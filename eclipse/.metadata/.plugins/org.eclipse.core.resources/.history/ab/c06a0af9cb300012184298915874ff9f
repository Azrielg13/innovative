/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2002-2007, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.swing.Icon;

import com.sce.esp.object.dao.RegionDAO;
import com.sce.esp.util.IconsFactory;
@Entity
@Table(schema="MDI",name="MDI040_REGION")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Region o WHERE o.PLANYEAR=?1 AND o.REGION_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Region o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Region o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByZone", query="SELECT o FROM Region o WHERE o.PLANYEAR=?1 AND o.ZONE_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI040_REGION o WHERE o.PLANYEAR=? AND o.REGION_ID=?"),//AUTO-GENERATED
})
public class Region extends RegionDAO implements Serializable{

	private static final long serialVersionUID = 389399306128669253L;

	/** The prev instance. */
	private Region prevInstance;

	/** The prev instance read. */
	private boolean prevInstanceRead;

	/**
	 * Use for inserting records.
	 * 
	 * @param planyear the planyear
	 */
	public Region(){
	}
	public Region(int planyear) {
		super(planyear,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 * @param regionId the region id
	 */
	public Region(int planyear, int regionId){
		super(planyear,regionId);
	}

	
	public Region(Region region) {
		super(region);
	}

	public int getId(){
		return getRegionId();
	}
	
	public int getCoTypeId(){
		return CoType.REGION;
	}
	/**
	 * Returns the regionName.
	 * 
	 * @return The regionName
	 */
	public String getName(){
		return getRegionName();
	}
	
	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		return getName()+" Region";
	}

	/**
	 * Gets the level.
	 * 
	 * @return the level
	 */
	public int getLevel() {
		return REGION;
	}

	/**
	 * Gets the prev instance.
	 * 
	 * @return the prev instance
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Region getPrevInstance()throws SQLException{
		if(!prevInstanceRead){
			prevInstance = getInstance(getPlanyear()-1,getRegionId());
			prevInstanceRead = true;
		}
		return prevInstance;
	}

	/**
	 * Gets the icon.
	 * 
	 * @return the icon
	 */
	public Icon getIcon(){
		return IconsFactory.ICON_REGION;
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getChildren(int)
	 */
	public Collection<Sys> getChildren(int simId) throws SQLException {
		return getSyssSCE(simId);
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getPYInstance(int)
	 */
	public Region getPlanYearInstance(int planyear)throws SQLException{
		return getInstance(planyear,getRegionId());
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getParent()
	 */
	public Zone getParent()throws SQLException {
		return getZone();
	}
	
	public Collection<Sys> getSyss(int simId) throws SQLException{
		return getSyss();
	}
	public TreeSet<Sys> getSyssSCE(int simId)throws SQLException{
    	TreeSet<Sys> syss = new TreeSet<Sys>();
    	for(Sys sys:getSyss(simId))
    		if(!sys.isForeignSys())
    			syss.add(sys);
    	return syss;
    }
	public TreeSet<Zone> getZones() throws SQLException {
		TreeSet<Zone> zones = new TreeSet<Zone>();
		zones.add(getZone());
		return zones;
	}
	public TreeSet<Region> getRegions() throws SQLException {
		TreeSet<Region> regions = new TreeSet<Region>();
		regions.add(this);
		return regions;
	}
	
	public CoType getCoType() throws SQLException{
		return CoType.getInstance(CoType.REGION);
	}
	public double getPrimaryKv() throws SQLException {
		return getPrimaryKv();
	}
}
