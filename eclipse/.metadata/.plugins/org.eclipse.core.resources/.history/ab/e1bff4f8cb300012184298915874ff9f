/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;

/**
 * BME ESP clean up duplicate methods from CoreObject
 * 
 * A LoadServingEntity is  any object that physically serves load to a downstream object.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public interface LoadServingEntity extends CoreObject, AutomatedEquipment{
	
	/**
	 * Gets the planyear.
	 * 
	 * @return the planyear
	 */
	public int getPlanyear();
    
	
	/**
	 * Gets the prev instance.
	 * 
	 * @return the prev instance
	 * 
	 * @throws SQLException the SQL exception
	 */
	public LoadServingEntity getPrevInstance()throws SQLException;
	
	/**
	 * Gets the normalization date.
	 * 
	 * @return the normalization date
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Calendar getNormalizationDate() throws SQLException;
	//public int getId();
	/**
	 * Gets the name.
	 * 
	 * @return the name
	 */
	public String getName();
	
	
	/**
	 * Gets the peak date.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the peak date
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Calendar getPeakDate(int simId)throws SQLException;
	
	/**
	 * Sets the peak date.
	 * 
	 * @param simId the sim id
	 * @param date the date
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setPeakDate(int simId, Calendar date)throws SQLException;
	
	/**
	 * Gets the daily peak.
	 * 
	 * @param date the date
	 * 
	 * @return the daily peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public DailyPeak getDailyPeak(Calendar date)throws SQLException;
	
	/**
	 * Gets the ten year avg.
	 * 
	 * @return the ten year avg
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getTenYearAvg()throws SQLException;
	
	/**
	 * Gets the year.
	 * 
	 * @param year the year
	 * @param simId the sim id
	 * 
	 * @return the year
	 * 
	 * @throws SQLException the SQL exception
	 */
	public LoadServingEntityYear getYear(int simId, int year)throws SQLException;
	
	/**
	 * Gets the starting point.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the starting point
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getStartingPoint(int simId)throws SQLException;
	//public Calendar getMDIDecideDate() throws SQLException;
	/**
	 * Gets the lg finalized.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the lg finalized
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isLgFinalized(int simId)throws SQLException;
	
	/**
	 * Gets the lg approved.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the lg approved
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isLgApproved(int simId)throws SQLException;
	
	/**
	 * Gets the pa finalized.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the pa finalized
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isPaFinalized(int simId)throws SQLException;
	
	/**
	 * Gets the pa approved.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the pa approved
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isPaApproved(int simId)throws SQLException;	
	
	/**
	 * Gets the status finalized.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the status finalized
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isStatusFinalized(int simId)throws SQLException;
	
	/**
	 * Gets the status approved.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the status approved
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isStatusApproved(int simId)throws SQLException;	
	
	/**
	 * Sets the lg finalized.
	 * 
	 * @param lgFinalized the lg finalized
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setLgFinalized(int simId, boolean lgFinalized)throws SQLException;
	
	/**
	 * Sets the lg approved.
	 * 
	 * @param lgApproved the lg approved
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setLgApproved(int simId, boolean lgApproved)throws SQLException;
	
	/**
	 * Sets the pa finalized.
	 * 
	 * @param paFinalized the pa finalized
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setPaFinalized(int simId, boolean paFinalized)throws SQLException;
	
	/**
	 * Sets the pa approved.
	 * 
	 * @param simId the sim id
	 * @param paApproved the pa approved
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setPaApproved(int simId, boolean paApproved)throws SQLException;	
	
	/**
	 * Sets the status finalized.
	 * 
	 * @param statusFinalized the status finalized
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setStatusFinalized(int simId, boolean statusFinalized)throws SQLException;
	
	/**
	 * Sets the status approved.
	 * 
	 * @param statusApproved the status approved
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setStatusApproved(int simId, boolean statusApproved)throws SQLException;	
	
	
	/**
	 * Gets the weatherstations.
	 * 
	 * @return the weatherstations
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<Weatherstation> getWeatherStations()throws SQLException;
	
	/**
	 * Gets the lg note.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the lg note
	 * 
	 * @throws SQLException the SQL exception
	 */
	public String getLgNote(int simId)throws SQLException;
	
	/**
	 * Sets the lg note.
	 * 
	 * @param lgNote the lg note
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setLgNote(int simId, String lgNote)throws SQLException;
	
	/**
	 * Gets the daily peak.
	 * 
	 * @param fetch the fetch
	 * @param date the date
	 * 
	 * @return the daily peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public DailyPeak getDailyPeak(Calendar date, boolean fetch)throws SQLException;
	
	/**
	 * Gets the daily peaks.
	 * 
	 * @param startDate the start date
	 * @param endDate the end date
	 * 
	 * @return the daily peaks
	 * 
	 * @throws SQLException the SQL exception
	 */
	public DailyPeak[] getDailyPeaks(Calendar startDate, Calendar endDate)throws SQLException;
	
	/**
	 * Gets the monthly peak.
	 * 
	 * @param fetch the fetch
	 * @param month the month
	 * @param year the year
	 * 
	 * @return the monthly peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public MonthlyPeak getMonthlyPeak(int simId, int year, int month, boolean fetch)throws SQLException;
	
	/**
	 * Gets the monthly peak.
	 * 
	 * @param month the month
	 * @param year the year
	 * 
	 * @return the monthly peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public MonthlyPeak getMonthlyPeak(int simId, int year, int month)throws SQLException;
	
	

	/**
	 * Returns the latitude in decimal degrees for the
	 * specified entity (at the source of load flow).
	 * e.g., 34.2856475.
	 * 
	 * @return - the latitude
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getLatitude() throws SQLException;
	
	/**
	 * Returns the longitude in decimal degrees for the
	 * specified entity (at the source of load flow).
	 * e.g., -117.2348032.
	 * 
	 * @return - the longitude
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getLongitude() throws SQLException;
	


	public DailyPeak getPeakDailyPeak(int simId) throws SQLException;


	public Calendar getInServiceDate(int simId)throws SQLException;


	public boolean isUseAlt(int simId)throws SQLException;


	public double getNormStartingPoint(int simId)throws SQLException;


	public double getAltAdjPeak(int simId)throws SQLException;
}
