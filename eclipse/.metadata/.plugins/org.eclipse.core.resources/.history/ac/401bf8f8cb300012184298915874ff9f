/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Collection;
import java.util.StringTokenizer;
import java.util.TreeSet;
import java.util.Vector;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.UserSelectDAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI510_USER_SELECT")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM UserSelect o WHERE o.USERNAME_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM UserSelect o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM UserSelect o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByUser", query="SELECT o FROM UserSelect o WHERE o.USERNAME_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI510_USER_SELECT o WHERE o.USERNAME_ID=?"),//AUTO-GENERATED
})
public class UserSelect extends UserSelectDAO implements Serializable{

	private static final long serialVersionUID = 1541626268752544088L;

	/** The Constant LOAD_BY_SYSTEM. */
	public final static int LOAD_BY_SYSTEM=0;

	/** The Constant LOAD_BY_ALPHA. */
	public final static int LOAD_BY_ALPHA=1;

	/** The Constant LOAD_BY_DISTRICT. */
	public final static int LOAD_BY_DISTRICT=2;

	public UserSelect(){
	}
	public UserSelect(int usernameId) {
		super(usernameId);
	}
	
	public UserSelect(UserSelect userSelect) {
		super(userSelect);
	}

	public Object[] getMultSubTypeArray() throws SQLException{
		if(getMultSubTypeId()==null || getMultSubTypeId().length()==0){
			Integer[] w = new Integer[ SubType.getAll(Department.getActivePlanYear()).size() ]; 
			int i=0;
			for(SubType st:Department.getInstance(Department.getActivePlanYear()).getSubTypes())
				w[i++] = st.getSubTypeId();
			return w;
		}
		
		StringTokenizer st = new StringTokenizer(getMultSubTypeId(),",");
		TreeSet<Integer> types = new TreeSet<Integer>();
		while (st.hasMoreTokens()){	
			types.add(Integer.parseInt(st.nextToken().trim()));
		}
		return types.toArray();
	}

	public Object[] getMultSubStatusArray(){
		if(getMultSubStatus()==null || getMultSubStatus().length()==0)
			return new String[]{Sub.IN_SERVICE,Sub.FUTURE};

		StringTokenizer st = new StringTokenizer(getMultSubStatus(),",");
		Vector<String> status = new Vector<String>();
		while (st.hasMoreTokens()) {
			status.add(st.nextToken().trim());
		}
		return status.toArray();
	}

	/**
	 * Returns the showFlags.
	 * This method is called by every form.  If it returns true then
	 * each flag in the form is tested to see if user has them filtered.
	 * 
	 * @return The showFlags
	 */
	public boolean isShowFlags(){
		return false;//FIXME cache
		//return getMultShowFlags()!=null && !getMultShowFlags().equals("0") && !getMultShowFlags().equals("");
	}


	public static Collection<UserSelect> getAll(int planyear) throws SQLException {
		return getAll();
	}

	/**
	 * Obtain the user flag selections from database
	 * 
	 * @return the mult flags
	 * 
	 * @throws SQLException the SQL exception
	 */   
	public Vector<Integer> getMultFlags() throws SQLException{
		Vector<Integer> collection = new Vector<Integer>();
		String values = getMultShowFlags();
		if(values != null){
			values=values.trim();
			StringTokenizer st = new StringTokenizer(values,",");
			while (st.hasMoreTokens())					
				collection.add(Integer.parseInt(st.nextToken().trim()));
		}
		return collection;
	}   
	
	/**
	 * Set the user flag selections from database
	 * 
	 * @param v - vector containg flag id's
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setMultShowFlags(Vector<Integer> v) throws SQLException{
		setMultShowFlags(v.toString().substring(1,v.toString().length()-1));
	}

	/**
	 * Obtain the user district selections from the database.
	 * 
	 * @return the mult dis
	 * 
	 * @throws SQLException the SQL exception
	 */
	public final Vector<Integer> getMultDis() throws SQLException{
		Vector<Integer> collection = new Vector<Integer>();
		String values = getMultDisId();
		if(values != null){
			values=values.trim();
			StringTokenizer st = new StringTokenizer(values,",");
			while (st.hasMoreTokens())
				collection.add(Integer.parseInt(st.nextToken().trim()));
		}
		return collection;
	} 

	/**
	 * Set the user district selections in the database.
	 * 
	 * @param v - vector containg district id's
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setMultDisId(Vector<Integer> v) throws SQLException{    	 
		setMultDisId(v.toString().substring(1,v.toString().length()-1)); 
	}

	/**
	 * Obtain the user system selections from the database.
	 * 
	 * @return the mult sys
	 * 
	 * @throws SQLException the SQL exception
	 */   
	public Vector<Integer> getMultSys() throws SQLException{
		Vector<Integer> collection = new Vector<Integer>();
		String values = getMultSysId();
		if(values != null){
			values=values.trim();
			StringTokenizer st = new StringTokenizer(values,",");
			while (st.hasMoreTokens())
				collection.add(Integer.parseInt(st.nextToken().trim()));
		}
		return collection;
	}       

	/**
	 * Set the user system selections in the database.
	 * 
	 * @param v - vector containg system id's
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setMultSysId(Vector<Integer> v) throws SQLException{
		setMultSysId(v.toString().substring(1,v.toString().length()-1));
	}
	    
    public SubFilter getSubFilter() throws SQLException{
    	SubFilter sf = new SubFilter();
    	sf.addCriteria(new SubFilterCriteria(SubFilterCriteria.STATUS,getMultSubStatusArray()));
    	sf.addCriteria(new SubFilterCriteria(SubFilterCriteria.SUB_TYPE,getMultSubTypeArray()));
    	return sf;	
    }
    public int getPlanyear(){
    	int planyear = super.getPlanyear();
    	if(planyear==0)
    		return Department.getActivePlanYear();
    	return planyear;
    }
}	
