package com.sce.esp.component;

import java.awt.Dimension;
import java.sql.SQLException;
import java.util.Vector;

import javax.swing.table.DefaultTableModel;

import com.jidesoft.combobox.TableComboBox;
import com.jidesoft.combobox.TableComboBoxSearchable;
import com.jidesoft.grid.SortableTable;
import com.jidesoft.swing.SearchableUtils;
import com.sce.esp.object.model.AssumptionLoc;
import com.sce.esp.object.model.Loc;
import com.sce.esp.object.model.Org;
import com.sce.esp.object.model.SceProjAssumption;
import com.sce.esp.object.model.User;

public class LocComboBox extends TableComboBox {
	private static final long serialVersionUID = -448213965751602446L;
	private LocTableModel cm;
	public LocComboBox(LocTableModel cm) {
		super(cm);
		this.cm = cm;
		init();
	}

	public static LocTableModel createLocTableModel(SceProjAssumption spa) {
		return new LocTableModel(spa);
	}

	private void init() {
		Vector<User> users = new Vector<User>();
		users.add(new User());
		for (User u : User.getEnabledUsers())
			users.add(u);

		Vector<Org> orgs = new Vector<Org>();
		orgs.add(null);
		try {
			for (Org o : Org.getAllActive())
				orgs.add(o);
		} catch (SQLException e1) {
			e1.printStackTrace();
		}
		setEditable(false); 
		new TableComboBoxSearchable(this);
		SortableTable searchTable = new SortableTable(cm);
		searchTable.setPreferredScrollableViewportSize(new Dimension(400, 400));
		searchTable.setMinimumSize(new Dimension(400, 400));
		searchTable.setColumnSelectionAllowed(false);
		searchTable.setRowHeight(50);
		searchTable.setColumnAutoResizable(true);
		searchTable.setRowSelectionAllowed(true);
		SearchableUtils.installSearchable(searchTable);
	}
	
	

	static class LocTableModel extends DefaultTableModel {
		private static final long serialVersionUID = 5584053063003978873L;
		static String[] COLUMNS = new String[]{"LOC", "Description"};
		public LocTableModel(SceProjAssumption spa) {
			super(getData(spa), COLUMNS);
		}
		public static Object[][] getData(SceProjAssumption spa) {
			Object[][] DATA;
			try {
				DATA = new Object[Loc.getAllActive().size()+1][2];
				int i = 0;
				DATA[i][0] = null;
				DATA[i++][1] = null;
				for(AssumptionLoc al : spa.getAssumption().getAssumptionLocs()){
					DATA[i][0] = al.getLoc();
					DATA[i++][1] = al.getDescription();
				}
				return DATA;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return null;
		}

		public boolean isCellEditable(int row, int column) {
			return false;
		}
	}
}
