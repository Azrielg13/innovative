package com.sce.esp.component;

import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;

import com.sce.esp.util.StringUtils;

public class DynamicTableModel extends AbstractTableModel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 8398126854983133356L;
	/** The column names. */
	private String[] columnNames, outputHeaders;
	/** The data. */
	private Object[][] data;

	private int[] maxColLengths;

	/**
	 * Instantiates a new dynamic table model.
	 * 
	 * @param dataset
	 *            the dataset
	 */
	public DynamicTableModel(TableModel model) {
		super();
		initModel(model);
	}
	/**
	 * Inits the model.
	 * 
	 * @param dataset
	 *            the dataset
	 */
	private void initModel(TableModel dataModel) {

		int columnCount = dataModel.getColumnCount();
		int rowCount = dataModel.getRowCount();

		if (rowCount > 0) {
			columnNames = new String[columnCount];
			outputHeaders = new String[columnCount];
			maxColLengths = new int[columnCount];
			for (int i = 0; i < columnCount; i++) {
				columnNames[i] = dataModel.getColumnName(i);
				outputHeaders[i] = "";
				if (columnNames[i].charAt(0) == '<') {
					for (int j = 0; j < columnNames[i].length(); j++) {
						if (columnNames[i].charAt(j) == '>') {
							if (outputHeaders[i].length() > 0
									&& (j + 1) < columnNames[i].length()
									&& columnNames[i].charAt(j + 1) != '<')
								outputHeaders[i] += " ";
							while ((++j) < columnNames[i].length()
									&& columnNames[i].charAt(j) != '<') {
								outputHeaders[i] += columnNames[i].charAt(j);
							}
						}
					}
					if (StringUtils.isAlphanumeric(outputHeaders[i]))
						;
					else
						outputHeaders[i] = outputHeaders[i].replaceAll("\\$",
								"");

				} else {
					if (StringUtils.isAlphanumeric(columnNames[i]))
						outputHeaders[i] = columnNames[i];
					else
						outputHeaders[i] = columnNames[i].replaceAll("\\$", "");
				}

				maxColLengths[i] = outputHeaders[i].length();
				for (int j = 0; j < dataModel.getRowCount(); j++) {
					if (dataModel.getValueAt(j, i) != null
							&& dataModel.getValueAt(j, i).toString() != null
							&& dataModel.getValueAt(j, i).toString().length() > maxColLengths[i]) {
						maxColLengths[i] = dataModel.getValueAt(j, i)
								.toString().length();
					}
				}
				maxColLengths[i] += 2;
			}
		}

		if (rowCount > 0) {
			data = new String[rowCount][columnCount];
			for (int j = 0; j < rowCount; j++) {
				for (int k = 0; k < columnNames.length; k++) {
					if (dataModel.getValueAt(j, k) != null
							&& dataModel.getValueAt(j, k).toString() != null)
						data[j][k] = dataModel.getValueAt(j, k).toString();
				}
			}
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.swing.table.TableModel#getColumnCount()
	 */
	public int getColumnCount() {
		return columnNames.length;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.swing.table.TableModel#getRowCount()
	 */
	public int getRowCount() {
		return data.length;
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.swing.table.AbstractTableModel#getColumnName(int)
	 */
	public String getColumnName(int col) {
		return outputHeaders[col];
	}
	/*
	 * (non-Javadoc)
	 * 
	 * @see javax.swing.table.TableModel#getValueAt(int, int)
	 */
	public Object getValueAt(int row, int col) {
		return data[row][col];
	}
	/**
	 * Gets the column names.
	 * 
	 * @return the column names
	 */
	public String[] getColumnNames() {
		return outputHeaders;
	}
	/**
	 * Sets the column names.
	 * 
	 * @param columnNames
	 *            the new column names
	 */
	public void setColumnNames(String[] columnNames) {
		this.columnNames = columnNames;
	}
	/**
	 * Gets the data.
	 * 
	 * @return the data
	 */
	public Object[][] getData() {
		return data;
	}
	/**
	 * Sets the data.
	 * 
	 * @param data
	 *            the new data
	 */
	public void setData(Object[][] data) {
		this.data = data;
	}

	public int[] getMaxColLengths() {
		return maxColLengths;
	}

}