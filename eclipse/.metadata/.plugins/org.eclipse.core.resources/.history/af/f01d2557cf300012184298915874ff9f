package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.ESPTestCase;
import com.sce.esp.util.Calculate;


public class SceProjTest extends ESPTestCase {
	public void testGetProj() throws SQLException{
		SceProj p = SceProj.getInstance(800);
		assertNotNull(p);
	}
	public void testGetRevs() throws SQLException{
		SceProj p = SceProj.getInstance(800);
		assertNotSame(0,p.getSceProjRevs().size());
	}

	public void testGetPECs() throws SQLException{
//		SceProjElemCost.getCollection(new String[]{"SCE_PROJ_REV_ID"}, 50474);
		SceProj p = SceProj.getInstance(800);
		for(SceProjRev rev:p.getSceProjRevs())
			assertNotNull(rev.getSceProjElemCosts());
		assertNotSame(0,p.getSceProjRevs().size());
	}
	
//	public void testGetBanksPost() throws SQLException{
//		SceProjRev rev = SceProjRev.getInstance(44413);
//		SceProjElemCost spec = rev.getSceProjElemCosts().last();
//		assertNotSame(0,spec.getScopeItems().size());
//		assertNotSame(0,spec.getBanksPost(2011, 0, null).size());
//	}
	
	public void testNameplate() throws SQLException{
		SceProjRev rev = SceProjRev.getInstance(44413);
		assertEquals(128.8,rev.getNameplatePre(2011, 0));
		assertNotSame(0,rev.getSceProjElemCosts().size());
		assertNotSame(0.0,rev.getNameplatePost(2011, 0, null));
	}
	
	public void testNewProject() throws SQLException{
		SceProjRev rev = new SceProjRev();
		rev.setTitle("Testing making a new project");
		rev.setDescription("Testing making of new project");
		rev.setProgramId(Program.SUB_IR);
		rev.setSponsor(User.getActiveUser());
		
		SceProjElemCost spec = new SceProjElemCost();
		spec.setTitle("Transformer Work");
		spec.setNeedDate(Calculate.getCal(2016, Calendar.SEPTEMBER, 9));
		spec.setSceElemId(SceElem.DISTRIBUTION_SUBS);
		spec.setCostStageId(CostStage.PLAN_EST);
		spec.setFacilityObject(Sub.getInstance(2012, 744));
		rev.addSceProjElemCost(spec);
		
		ScopeItem si = new ScopeItem();
		si.setTitle("Remove Existing Transformer");
		si.setScopeTypeId(198);
		si.setModelingObject(Xfmr.getInstance(2012, 0, 1260));
		spec.addScopeItem(si);
		
		Xfmr newX = new Xfmr();
		newX.setPlanyear(2012);
		newX.setXfmrNum("3");
		newX.setNameplate(7);
		
		ScopeItem si2 = new ScopeItem();
		si2.setTitle("Add Replacement Transformer");
		si2.setScopeTypeId(197);
		si2.setModelingObject(newX);
		si2.setFacilityObject(Bank.getInstance(2012, 0, 1133));
		spec.addScopeItem(si2);
		
		assertNotNull(si.getScopeType());
		assertNotNull(si2.getScopeType());
		
		EspLogger.message(this, rev);
		
		//rev.insert();
	}
	
	public void testCreateVersion() throws SQLException{
		SceProjRev rev = SceProjRev.getInstance(53470);
		assertNotNull(rev);
		SceProjRev cp = rev.copyToConceptual(0);
		assertNotNull(cp);
		//cp.insert();
	}
}
