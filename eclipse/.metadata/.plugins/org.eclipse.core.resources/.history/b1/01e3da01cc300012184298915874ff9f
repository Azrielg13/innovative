package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Change;
import com.sce.esp.object.model.DriverCriteria;
import com.sce.esp.object.model.Program;
import com.sce.esp.object.model.RecommendedDriver;
import com.sce.esp.object.model.ScopeType;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class RecommendedDriverDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{RECOMMENDED_DRIVER_ID};
	public static enum PROPERTY{RECOMMENDED_DRIVER_ID,PROGRAM_ID,SCOPE_TYPE_ID,CHANGE_ID,DRIVER_CRITERIA_ID,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int RECOMMENDEDDRIVERID_LIMIT = 9;
	public final static int PROGRAMID_LIMIT = 9;
	public final static int SCOPETYPEID_LIMIT = 9;
	public final static int CHANGEID_LIMIT = 9;
	public final static int DRIVERCRITERIAID_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 1024;
	public final static int ALTDATE1_LIMIT = 7;
	private int recommendedDriverId;
	private int programId;
	private int scopeTypeId;
	private int changeId;
	private int driverCriteriaId;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Change change;
	private DriverCriteria driverCriteria;
	private Program program;
	private ScopeType scopeType;
	public static RecommendedDriver getInstance(int recommendedDriverId)throws java.sql.SQLException{
		return getInstance(recommendedDriverId, true);
	}
	public static RecommendedDriver getInstance(int recommendedDriverId, boolean fetch)throws java.sql.SQLException{
		if(isNull(recommendedDriverId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(recommendedDriverId);
		Cache cache = em.getEntityManagerFactory().getCache();
		RecommendedDriver o = null;
		if(cache != null && cache.contains(RecommendedDriver.class, pk))
			o = em.find(RecommendedDriver.class, pk);
		if(o==null && getAICache().contains(RecommendedDriver.class, pk))
			o = getAICache().find(RecommendedDriver.class, pk);
		if(o==null && fetch)
			o = em.find(RecommendedDriver.class, pk);
		if(o==null && fetch && RecommendedDriver.class.getAnnotation(AutoInsertable.class) != null){
			o = new RecommendedDriver(recommendedDriverId);
			getAICache().cache(RecommendedDriver.class, o);
		}
		return o;
	}
	public static Collection<RecommendedDriver> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<RecommendedDriver> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<RecommendedDriver> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM RecommendedDriver o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<RecommendedDriver> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<RecommendedDriver> tq = em.createQuery(jpql,RecommendedDriver.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<RecommendedDriver> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<RecommendedDriver> tq = em.createNamedQuery(name,RecommendedDriver.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public RecommendedDriverDAO(){}
	public RecommendedDriverDAO(int recommendedDriverId){
		this.recommendedDriverId=recommendedDriverId;
	}
	public RecommendedDriverDAO(RecommendedDriverDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(RecommendedDriverDAO orig){
		this.programId=orig.getProgramId();
		this.scopeTypeId=orig.getScopeTypeId();
		this.changeId=orig.getChangeId();
		this.driverCriteriaId=orig.getDriverCriteriaId();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{recommendedDriverId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT40_SEQ",sequenceName="MDIT40_SEQ")
	@Column(name="RECOMMENDED_DRIVER_ID",nullable=false,length=9)
	public int getRecommendedDriverId(){
		return recommendedDriverId;
	}
	public void setRecommendedDriverId(int recommendedDriverId) throws java.sql.SQLException{
		if(isSame(recommendedDriverId, getRecommendedDriverId()))return;
		int oldValue = getRecommendedDriverId();
		this.recommendedDriverId=recommendedDriverId;
		setProperty("RECOMMENDED_DRIVER_ID", recommendedDriverId, oldValue);
	}
	@Column(name="PROGRAM_ID",nullable=false,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
		program=null;
	}
	@Column(name="SCOPE_TYPE_ID",nullable=false,length=9)
	public int getScopeTypeId(){
		return scopeTypeId;
	}
	public void setScopeTypeId(int scopeTypeId) throws java.sql.SQLException{
		if(isSame(scopeTypeId, getScopeTypeId()))return;
		int oldValue = getScopeTypeId();
		this.scopeTypeId=scopeTypeId;
		setProperty("SCOPE_TYPE_ID", scopeTypeId, oldValue);
		scopeType=null;
	}
	@Column(name="CHANGE_ID",nullable=false,length=9)
	public int getChangeId(){
		return changeId;
	}
	public void setChangeId(int changeId) throws java.sql.SQLException{
		if(isSame(changeId, getChangeId()))return;
		int oldValue = getChangeId();
		this.changeId=changeId;
		setProperty("CHANGE_ID", changeId, oldValue);
		change=null;
	}
	@Column(name="DRIVER_CRITERIA_ID",nullable=false,length=9)
	public int getDriverCriteriaId(){
		return driverCriteriaId;
	}
	public void setDriverCriteriaId(int driverCriteriaId) throws java.sql.SQLException{
		if(isSame(driverCriteriaId, getDriverCriteriaId()))return;
		int oldValue = getDriverCriteriaId();
		this.driverCriteriaId=driverCriteriaId;
		setProperty("DRIVER_CRITERIA_ID", driverCriteriaId, oldValue);
		driverCriteria=null;
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=1024)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Change getChange()throws java.sql.SQLException{
		if(change==null)
			change=Change.getInstance(getChangeId());
		return change;
	}
	public void setChange(Change change)throws java.sql.SQLException{
		setChangeId(change==null?0:change.getChangeId());
		this.change=change;
	}
	public DriverCriteria getDriverCriteria()throws java.sql.SQLException{
		if(driverCriteria==null)
			driverCriteria=DriverCriteria.getInstance(getDriverCriteriaId());
		return driverCriteria;
	}
	public void setDriverCriteria(DriverCriteria driverCriteria)throws java.sql.SQLException{
		setDriverCriteriaId(driverCriteria==null?0:driverCriteria.getDriverCriteriaId());
		this.driverCriteria=driverCriteria;
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getProgramId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setProgramId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public ScopeType getScopeType()throws java.sql.SQLException{
		if(scopeType==null)
			scopeType=ScopeType.getInstance(getScopeTypeId());
		return scopeType;
	}
	public void setScopeType(ScopeType scopeType)throws java.sql.SQLException{
		setScopeTypeId(scopeType==null?0:scopeType.getScopeTypeId());
		this.scopeType=scopeType;
	}
	public RecommendedDriver copy()throws java.sql.SQLException{
		RecommendedDriver cp = new RecommendedDriver((RecommendedDriver)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(RecommendedDriverDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(RecommendedDriverDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getRecommendedDriverId(),o.getRecommendedDriverId())) diffs.add("RECOMMENDED_DRIVER_ID");
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		if(!isSame(getScopeTypeId(),o.getScopeTypeId())) diffs.add("SCOPE_TYPE_ID");
		if(!isSame(getChangeId(),o.getChangeId())) diffs.add("CHANGE_ID");
		if(!isSame(getDriverCriteriaId(),o.getDriverCriteriaId())) diffs.add("DRIVER_CRITERIA_ID");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
