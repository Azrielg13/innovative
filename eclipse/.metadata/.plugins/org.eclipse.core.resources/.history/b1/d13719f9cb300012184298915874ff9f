package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;

import com.sce.esp.util.Calculate;
import com.sce.javadna.JavaDNA;

public class ImbalanceCkt implements Comparable<Object>{
	
	public static final double A4_MULTIPLIER = 0.5;
	public static final double HP_MULTIPLIER = 0.5;
	
	private CktDaily cdp;
	private double aPhase=-1.0;
	private double bPhase=-1.0;
	private double cPhase=-1.0;

	public ImbalanceCkt(CktDaily cdp){
		this.cdp=cdp;
	}
	public Ckt getCkt() throws SQLException{
		return cdp.getCkt();
	}
	public Calendar getDate(){
		return cdp.getDate();
	}
	public Bbank getBbank() throws SQLException{
		return cdp.getBbank();
	}
	public Sys getSystem()throws SQLException{
		return cdp.getBbank().getYear(0, cdp.getBbank().getPlanyear()-1).getSys();
	}
	public CktDaily getCktDaily(){
		return cdp;
	}
	public String getDateCriteria(){
		try{
		if(getCkt().getPeakDate()!=null)
			return "Circuit";
		else if(getCkt().getBbank(0).getPeakDate(0)!=null)
			return "Substation";
		else if(getCkt().getBbank(0).getMDIDecideDate().getDate()!=null)
			return "MDI";
		}catch(Exception e){
			e.printStackTrace();
		}
		return "None";
	}
	public double getOverTrip() throws SQLException{
		return cdp.getNeutVal()*100/(getCkt().getGndTrip()*cdp.getCkt().getMVAFactor());
	}
	public double getOverpll() throws SQLException{
		return (cdp.getActualPeak()*cdp.getCkt().getMVAFactor()*100)/(cdp.getCkt().getYear(0, (cdp.getCkt().getPlanyear()-1)).getPLLBizLogic()*cdp.getCkt().getMVAFactor());
	}
	public double getImbalance()throws SQLException{
		double imbalance=0;
		try{			
			imbalance = Calculate.calcMaxDeviation(getAphase(),getBphase(),getCphase())/Calculate.calcAverage(getAphase(),getBphase(),getCphase());
		}catch(Exception e){
			e.printStackTrace();
		}
		return imbalance;
	}
	
	public double getAphase() throws SQLException{
		if(aPhase==-1.0 && getCkt().getADp()!=null && cdp.getDate()!=null && cdp.getPeakTime()!=null)
			aPhase = JavaDNA.getHistRead(getCkt().getADp(), cdp.getDate(), cdp.getPeakTime(), 1).getValue();
		return aPhase;
	}
	
	public double getBphase() throws SQLException{
		if(bPhase==-1.0 && getCkt().getBDp()!=null && cdp.getDate()!=null && cdp.getPeakTime()!=null)
			bPhase = JavaDNA.getHistRead(getCkt().getBDp(), cdp.getDate(), cdp.getPeakTime(), 1).getValue();
		return bPhase;
	}
	
	public double getCphase() throws SQLException{
		if(cPhase==-1.0 && getCkt().getCDp()!=null && cdp.getDate()!=null && cdp.getPeakTime()!=null)
			cPhase = JavaDNA.getHistRead(getCkt().getCDp(), cdp.getDate(), cdp.getPeakTime(), 1).getValue();
		return cPhase;
	}
	
	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */
	public int compareTo(Object o) {			
		CktDaily cdp2 = ((ImbalanceCkt)o).getCktDaily();
		try{				
			
			double overtrip1 = this.getOverTrip();
			double overtrip2 = cdp2.getNeutVal()*100/(cdp2.getCkt().getGndTrip()*cdp2.getCkt().getMVAFactor());				

			double overpll1 = getOverpll();
			double overpll2 = (cdp2.getActualPeak()*cdp2.getCkt().getMVAFactor()*100)/(cdp2.getCkt().getYear(0, (cdp2.getCkt().getPlanyear()-1)).getPLLBizLogic()*cdp2.getCkt().getMVAFactor());
			
			double finalAnswer1 = (A4_MULTIPLIER*overtrip1 + HP_MULTIPLIER*overpll1)/2;
			double finalAnswer2 = (A4_MULTIPLIER*overtrip2 + HP_MULTIPLIER*overpll2)/2;
			
			if(finalAnswer1>finalAnswer2)return -1;
			else if(finalAnswer1<finalAnswer2)return 1;

		}catch(Exception e){
			e.printStackTrace();
		}
		return 0;
	}
	public String toString(){
		try {
			return getCkt().toString();
		} catch (SQLException e) {				
			e.printStackTrace();
		}
		return "";
	}
}
