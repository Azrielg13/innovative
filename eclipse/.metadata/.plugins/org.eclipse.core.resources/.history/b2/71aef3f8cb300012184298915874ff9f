package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.EscalationRateDAO;
@Entity
@Table(schema="MDI",name="MDIT20_ESCALATION_RATE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM EscalationRate o WHERE o.ESCALATION_RATE_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM EscalationRate o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM EscalationRate o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByProgram", query="SELECT o FROM EscalationRate o WHERE o.PROGRAM_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIT20_ESCALATION_RATE o WHERE o.ESCALATION_RATE_ID=?"),//AUTO-GENERATED
})
public class EscalationRate extends EscalationRateDAO implements Serializable{

	private static final long serialVersionUID = -1522389595889049704L;

	public EscalationRate(){
	}
	public EscalationRate(int escalationRateId) {
		super(escalationRateId);
	}

	public EscalationRate(EscalationRate orig) {
		super(orig);
	}
	
	public static EscalationRate getInstance(Program program, SceElem sceElem, int year, Calendar effDate, boolean findBestMatch) throws SQLException{
		return getInstance(program.getProgramId(),sceElem.getSceElemId(),year,effDate,findBestMatch);
	}
	
	public static EscalationRate getInstance(int programId, int sceElemId, int year, Calendar effDate, boolean findBestMatch) throws SQLException{
		int fy = getFirstYear();
		int ly = getLastYear();
		if(year < fy)
			year = fy;
		if(year > ly)
			year = ly;
		EscalationRate er = getInstance(programId,sceElemId,year,effDate);
		if(findBestMatch){
			if(er == null)
				er = EscalationRate.getInstance(programId, SceElem.DISTRIBUTION_SUBS, year, effDate);
			if(er == null)
				er = EscalationRate.getInstance(Program.DSP, sceElemId, year, effDate);
			if(er == null)
				er = EscalationRate.getInstance(Program.DSP, SceElem.DISTRIBUTION_SUBS, year, effDate);
		}
		return er;
	}
	
	public static int getFirstYear() throws SQLException{
		int fy=Integer.MAX_VALUE;
		for(EscalationRate er:getAllActive())
			if(er.getYear() < fy)
				fy = er.getYear();
		return fy;
	}
	
	public static int getLastYear() throws SQLException{
		int ly=0;
		for(EscalationRate er:getAllActive())
			if(er.getYear() > ly)
				ly = er.getYear();
		return ly;
	}
	
	public static EscalationRate getInstance(Program program, SceElem sceElem, int year, Calendar effDate) throws SQLException{
		return getInstance(program.getProgramId(),sceElem.getSceElemId(),year,effDate);
	}
	
	public static EscalationRate getInstance(int programId, int sceElemId, int year, Calendar effDate) throws SQLException{
		EscalationRate bm=null;
		for(EscalationRate er:getAllActive())
			if((er.getEffDate() == null || er.getEffDate().compareTo(effDate) != 1) && er.getProgramId() == programId && er.getSceElemId() == sceElemId && er.getYear()<=year){
				if(er.getYear() == year)
					return er;
				if(bm==null || year-er.getYear()<year-bm.getYear())
					bm = er;
			}
		return bm;
	}
	
	public Calendar getEffDate(){
		return getAltDate1();
	}
	public void setEffDate(Calendar effDate) throws SQLException {
		setAltDate1(effDate);
	}
	
	public int compareTo(Object o){
		if(o instanceof EscalationRate){
			EscalationRate er = (EscalationRate)o;
			if(er.getEffDate() == null && getEffDate() != null)
				return -1;
			if(getEffDate() == null && er.getEffDate() != null)
				return 1;
			if(getEffDate() != null){
				int ret = getEffDate().compareTo(er.getEffDate());
				if(ret != 0)
					return -ret;
			}
		}
		return super.compareTo(o);
	}
}
