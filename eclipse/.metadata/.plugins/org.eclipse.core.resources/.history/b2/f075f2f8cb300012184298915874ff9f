package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Vector;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.TaskResourceDAO;
import com.sce.esp.util.LotusNotification;
@Entity
@Table(schema="MDI",name="MDIT07_TASK_RESOURCE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM TaskResource o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM TaskResource o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM TaskResource o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByProjTask", query="SELECT o FROM TaskResource o WHERE o.TASK_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByUser", query="SELECT o FROM TaskResource o WHERE o.USER_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIT07_TASK_RESOURCE o WHERE o.ID=?"),//AUTO-GENERATED
})
public class TaskResource extends TaskResourceDAO{
	public static enum NState{NOT_STARTED,NEED_NOTIFICATION,NOTIFIED,REMINDER,RE_REMINDER,STARTED,PAST_DUE,COMPLETE};
	public static enum NotifGroup{WORKER, MANAGER, BOTH, NOT_MATCH};
//	public static enum NotifGroup: int
//	{
//		WORKER = 1,
//		MANAGER = 2,
//		BOTH = 3
//	}
	public TaskResource(){
	}
	public TaskResource(int id){
		super(id);
	}
	public TaskResource(TaskResource orig){
		super(orig);
	}
	@Override
	public void setTask(AbstractTask at) throws SQLException {
		setProjTask((ProjTask) at);
	}
	//------------------------------- Customized --------------------------------------//
	
	public static Collection<TaskResource> getAllByTask(int taskId)throws java.sql.SQLException{
		return getNamedCollection("findByProjTask", taskId);
	}
	public static Collection<TaskResource> getAllByUser(int usernameId)throws java.sql.SQLException{
		return getNamedCollection("findByUser", usernameId);
	}
	
	public static ArrayList<TaskResource> getAllTaskResource(){	
		ArrayList<TaskResource> trList = new ArrayList<TaskResource>();
		try {
			for(TaskNotify task : TaskNotify.getUnnotify()){			// only look at particular day of task(s) (current)
				for(TaskResource res : TaskResource.getAllByTask(task.getTaskResId()))	// get all the resources from today task(s)
					trList.add(res);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return trList;
	}
	
	public static boolean isRecipient(TaskResource res, NotifGroup group){
		switch(group){
			case WORKER: 	return res.getRamId() == LookUp.RAM.PARTICIPENT || res.getRamId() == LookUp.RAM.ACCOUNTABLE;
			case MANAGER: 	return res.getRamId() == LookUp.RAM.APPROVER || res.getRamId() == LookUp.RAM.REVIEWER;
			case BOTH: 		return  true;
			default: return false;
		}
	}
	
	public static HashMap<User, ArrayList<TaskResource>> getNotifRecipient(ArrayList<TaskResource> allRes, NotifGroup group, NState state) throws SQLException{
		HashMap<User, ArrayList<TaskResource>> map = new HashMap<User, ArrayList<TaskResource>>();
		for(TaskResource res:allRes){
			if(res.isNotify()  && (isRecipient(res, group)) )//&& (state == res.getNotificationState()))	//Check 1.) does it need to be notified  
				if(!map.containsKey(res.getUser())){		//if it is new user then add to the map		//		2.)is it the right group?
					ArrayList<TaskResource> list = new ArrayList<TaskResource>();						//		3.) is it in the right state?
					list.add(res);
					map.put(res.getUser(), list);
				}
				else{
					map.get(res.getUser()).add(res);		//if the user existed, add resource to the existing map
				}
		}
		return map;
	}
	
	public static String getNotifTitle(){
		return "SCMT Notification TEST";
	}
	public static String getNotifContent(TaskResource.NState state){
		return "";
	}
	
	public static String getContent(Collection<TaskResource> allRes, TaskResource.NState state) throws SQLException{
		String content = allRes.size()>0?getNotifContent(TaskResource.NState.NEED_NOTIFICATION):"";
		for(TaskResource res:allRes)
			content = content+res.getEmailContent();
		return content;
	}
	
	public static void sendNotif() throws SQLException{
		for(User user:User.getProjUsers()){				//FIXME need to loop through users then userProj
			Vector<User> vUser = new Vector<User>();	//FIXME need to customize recipient
			vUser.add(user);
			
			Collection<TaskResource> initRes = user.getTaskResources(TaskResource.NState.NEED_NOTIFICATION);
			String content = getContent(initRes, TaskResource.NState.NEED_NOTIFICATION);
			content = content + getContent(user.getTaskResources(TaskResource.NState.REMINDER), TaskResource.NState.REMINDER);
			content = content + getContent(user.getTaskResources(TaskResource.NState.RE_REMINDER), TaskResource.NState.RE_REMINDER);
			content = content + getContent(user.getTaskResources(TaskResource.NState.PAST_DUE), TaskResource.NState.PAST_DUE);
					
			LotusNotification notif = new LotusNotification(getNotifTitle(), content, vUser);	//send out an email
			if(notif.sendScmtNotif() && initRes.size()>0){										//if the init notification is sent successfully
				if(!setNotifyDate(initRes))														//set the date to TaskNotify obj
					notif.sendScmtFailNotif();													//fail to set date, email to developer		
			}
		}
	}
	
	public static boolean setNotifyDate(Collection<TaskResource> res){	//FIXME -- Eddie wants to get rid of TaskNotify and move all the fields to TaskResource
		try {
			for(TaskResource tres:res){
				for(TaskNotify tn: TaskNotify.getAllByProj(tres.getId()))
					tn.setNotifiedDate(Calendar.getInstance());
			}
			return true;
		} catch (SQLException e) {
			return false;
		}
	}
	public static boolean resetNotifyDate(Collection<TaskResource> res){
		try {
			for(TaskResource tres:res){
				for(TaskNotify tn: TaskNotify.getAllByProj(tres.getId()))
					tn.setNotifiedDate(null);
			}
			return true;
		} catch (SQLException e) {
			return false;
		}
	}
	public boolean isComplete(){
		return getActEndDate() != null || getPercentComp()==100.0;
	}
	
	public NState getNotificationState() throws SQLException{
		if(isComplete())
			return NState.COMPLETE;
		if(isPastDue()) 
			return NState.PAST_DUE;
		if(getActStartDate()!=null)
			return NState.STARTED;
		return NState.NOT_STARTED;
	}
	public Calendar getEstStartDate() throws SQLException{
		return getProjTask().getStartDate();  
	}
	public Calendar getEstEndDate() throws SQLException{
		if(getEstStartDate()==null)return null;
		Calendar sDate = (Calendar)getEstStartDate().clone();
		sDate.add(Calendar.DATE, (int)getEstDuration());
		return sDate;
	}
	public boolean isPastDue() throws SQLException{
		if(isComplete())return false;
		Calendar estEnd = getEstEndDate();
		if(estEnd==null)
			return false;
		Calendar cal = Calendar.getInstance();
		return cal.after(estEnd);
	}
	public String getEmailContent() throws SQLException{
		return "Task: "+getProjTask()+" Due On "+getProjTask().getEstEndDate()+"\n";
	}
}
