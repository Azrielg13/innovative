package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.ProjTaskDAO;
@Entity
@Table(schema="MDI",name="MDIT03_PROJ_TASK")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ProjTask o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ProjTask o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ProjTask o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySceProjRev", query="SELECT o FROM ProjTask o WHERE o.SCE_PROJ_REV_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByTaskType", query="SELECT o FROM ProjTask o WHERE o.TASK_TYPE_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByParent", query="SELECT o FROM ProjTask o WHERE o.PARENT_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIT03_PROJ_TASK o WHERE o.ID=?"),//AUTO-GENERATED
})
public class ProjTask extends ProjTaskDAO{
	public ProjTask(){
	}
	public ProjTask(AbstractTask<?> at, SceProjRev rev) {
		try {
			TaskType tt = at.getTaskType();
			setTaskType(tt);
			setName(tt.getName());
			setDescription(tt.getDescription());
			setSceProjRev(rev);
			setEstEffort(at.getEstEffort());
			setShift(at.getShift());
			setEstDuration(at.getEstDuration());
			setDeliverable(at.getDeliverable());
			setPerfCrit(at.getPerfCrit());
			setData(at.getData());
			setStartDate(at.getStartDate());
			setEndDate(at.getEndDate());
			for(AbstractTask<?> childAt : at.getChildTasks()) {
				ProjTask childTask = new ProjTask(childAt, rev);
				addChildTask(childTask);
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public ProjTask(int id){
		super(id);
	}
	public ProjTask(ProjTask orig){
		super(orig);
	}
	@Override
	public Calendar getStartDate() throws SQLException {
		Calendar cal = getActStartDate();
		if(cal==null){
			cal = getEstStartDate();
			if(cal==null)
				cal = super.getStartDate();
		}
		return cal;
	}
	@Override
	public Calendar getEndDate() throws SQLException {
		Calendar cal = getActEndDate();
		if(cal==null){
			cal = getEstEndDate();
			if(cal==null)
				cal = super.getEndDate();
		}
		return cal;
	}
	/*@Override
	public double getDuration() throws SQLException {
		if(getActStartDate()!=null && getActEndDate()!=null || getEstStartDate()!=null && getEstEndDate()!=null)
			return getEndDate().getTimeInMillis()-getStartDate().getTimeInMillis()/Calculate.ONE_DAY;
		return super.getDuration();
	}*/
	@Override
	public Collection<ProjTask> getPredTasks() throws SQLException {
		TreeSet<ProjTask> pts = new TreeSet<ProjTask>();
		for(TaskRelation tr:getPreds())
			pts.add(tr.getPredTask());
		return pts;
	}
	@Override
	public AbstractRelation addPred(AbstractTask predTask, int relation)throws SQLException {
		TaskRelation tr = new TaskRelation(getId(),predTask.getId(),relation);
		addPred(tr);
		return tr;
	}
	@Override
	public Schedulable getSchedulable() throws SQLException {
		return getSceProjRev();
	}
	@Override
	public void setParent(AbstractTask at) throws SQLException {
		setParent((ProjTask) at);
	}
	@Override
	public void setSchedulable(Schedulable s) throws SQLException {
		if(s instanceof SceProjRev) setSceProjRev((SceProjRev) s);
	}
	@Override
	public TaskResource getNewResource() {
		return new TaskResource(); 
	}
}
