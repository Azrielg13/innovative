package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.SceProjElemPriorityDAO;
@Entity
@Table(schema="MDI",name="MDIS95_SCE_PROJ_ELEM_PRIORITY")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM SceProjElemPriority o WHERE o.COST_ID=?1 AND o.YEAR=?2 AND o.PRIORITY_TS=?3"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM SceProjElemPriority o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM SceProjElemPriority o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySceProjElemCost", query="SELECT o FROM SceProjElemPriority o WHERE o.COST_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIS95_SCE_PROJ_ELEM_PRIORITY o WHERE o.COST_ID=? AND o.YEAR=? AND o.PRIORITY_TS=?"),//AUTO-GENERATED
})
public class SceProjElemPriority extends SceProjElemPriorityDAO implements Serializable{
	
	private static final long serialVersionUID = -3855535592836163064L;

	public SceProjElemPriority(){
	}
	public SceProjElemPriority(int costId, int year, Calendar priorityTs) {
		super(costId, year, priorityTs);
	}

	public SceProjElemPriority(SceProjElemPriority sceProjElemPriority) {
		super(sceProjElemPriority);
	}

	public int getYearOld() throws SQLException {
		return getSceProjElemCost().getSceProjRev().getCalendarYear()+getYear();
	}
	
	/**
	 * TODO IWP Not working
	 * @return Modified User if not null, else Insert User
	 * @throws SQLException
	 */
	public User getPriorityUser() throws SQLException {
		if(User.getInstance(getPriorityUserId())!=null)
			return User.getInstance(getPriorityUserId());
		if(getModifiedUser()!=null)
			return getModifiedUser();
		return getInsertUser();
	}

	public void setPriorityUser(User user) throws SQLException {
		if(user == null)
			setPriorityUserId(0);
		else
			setPriorityUserId(user.getUsernameId());
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.esp.object.DataAccessObject#compareTo(java.lang.Object)
	 */
	public int compareTo(Object o){
		if(o instanceof SceProjElemPriority){
			SceProjElemPriority p = (SceProjElemPriority)o;

			if(this.getCostId()<p.getCostId())
				return -1;
			if(this.getCostId()>p.getCostId())
				return 1;

			if(this.getYear()<p.getYear())
				return -1;
			if(this.getYear()>p.getYear())
				return 1;

			return -1 * this.getPriorityTs().compareTo(p.getPriorityTs());
		}
		return super.compareTo(o);
	}

	/**
	 * Determines previous key elements based on matching keys
	 * @param keyRequestor
	 * @return a set of matching keys
	 * @throws SQLException
	 */
	public static TreeSet<SceProjElemPriority> findHistoryKeys(SceProjElemPriority keyRequestor) throws SQLException {
		if(keyRequestor==null)
			return null;
		
		TreeSet<SceProjElemPriority> keys = new TreeSet<SceProjElemPriority>();
		
		SceProjElemCost _spec = keyRequestor.getSceProjElemCost();
		int year = keyRequestor.getYear();
		
		SceProj og = _spec.getSceProjRev().getSceProj();
		//Get all revisions from the provided element
		for(SceProjRev rev: og.getSceProjRevs()){
			for(SceProjElemCost spec: rev.getSceProjElemCosts()){
				//Look for matches of the same type
				if(spec.getSceElemId() == _spec.getSceElemId()){
					//Found matching types??????
					if(spec.getSceProjElemCostYear(year).toString().equals(_spec.getSceProjElemCostYear(year).toString())){
						SceProjElemCostYear specy = spec.getSceProjElemCostYear(year);
						if(specy.getCost()>0 || specy.getPriorityBypass()>0){
							SceProjElemPriority spep = specy.getSceProjElemPriority(null);
							if(spep!=null && !keyRequestor.equals(spep)){
								keys.add(spep);
							}
						}								
					}							
				}			
			}				
		}
		return keys;
	}
	
	
	
}
