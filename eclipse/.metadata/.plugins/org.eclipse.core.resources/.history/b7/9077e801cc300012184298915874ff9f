package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Bank;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Prog;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.ProjElem;
import com.sce.esp.object.model.SceProj;
import com.sce.esp.object.model.SimAlt;
import com.sce.esp.object.model.SimCkt;
import com.sce.esp.object.model.SimSub;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.SubVar;
import com.sce.esp.object.model.User;
import com.sce.esp.object.model.Xfmr;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ProjDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,PROJ_ID};
	public static enum PROPERTY{PLANYEAR,SIM_ID,PROJ_ID,SUB_ID,PROG_ID,PROJ_NUM,REASON,OP_DATE,APP_DATE,SPONSOR_ID,PROJ_TITLE,USE_DEFAULT_TITLE,FORCE_REV,PRIORITY,RANK,STATUS_UPDATE,CREATOR_USERNAME_ID,CREATED_DATE,COMP_BY_ID,COMP_DATE,COMP_NOTE,CAP_ADD,CAP_ADD_Z,CKT_ADD,VAR_ADD,PLL_ADD,ELL_ADD,N1_ADD,USE_PREV_PLL,USE_PREV_ELL,USE_PREV_N1,RES_NO_PROJ,ACL_NO_PROJ,GO131D,GRC,FINALIZED,APPROVED,INACTIVE,NO_PROJ_NOTE,USE_CALC_JUST,IN_SERVICE_DATE,ALTER1,ALTER2,CRIT_ASS,ECON_JUST,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,SCE_PROJ_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int PROJID_LIMIT = 9;
	public final static int SUBID_LIMIT = 9;
	public final static int PROGID_LIMIT = 9;
	public final static int PROJNUM_LIMIT = 20;
	public final static int REASON_LIMIT = 2048;
	public final static int OPDATE_LIMIT = 7;
	public final static int APPDATE_LIMIT = 7;
	public final static int SPONSORID_LIMIT = 9;
	public final static int PROJTITLE_LIMIT = 512;
	public final static int USEDEFAULTTITLE_LIMIT = 1;
	public final static int FORCEREV_LIMIT = 1;
	public final static int PRIORITY_LIMIT = 1;
	public final static int RANK_LIMIT = 9;
	public final static int STATUSUPDATE_LIMIT = 2048;
	public final static int CREATORUSERNAMEID_LIMIT = 9;
	public final static int CREATEDDATE_LIMIT = 7;
	public final static int COMPBYID_LIMIT = 9;
	public final static int COMPDATE_LIMIT = 7;
	public final static int COMPNOTE_LIMIT = 512;
	public final static int CAPADD_LIMIT = 24;
	public final static int CAPADDZ_LIMIT = 24;
	public final static int CKTADD_LIMIT = 2;
	public final static int VARADD_LIMIT = 24;
	public final static int PLLADD_LIMIT = 24;
	public final static int ELLADD_LIMIT = 24;
	public final static int N1ADD_LIMIT = 24;
	public final static int USEPREVPLL_LIMIT = 1;
	public final static int USEPREVELL_LIMIT = 1;
	public final static int USEPREVN1_LIMIT = 1;
	public final static int RESNOPROJ_LIMIT = 24;
	public final static int ACLNOPROJ_LIMIT = 24;
	public final static int GO131D_LIMIT = 2;
	public final static int GRC_LIMIT = 1;
	public final static int FINALIZED_LIMIT = 1;
	public final static int APPROVED_LIMIT = 1;
	public final static int INACTIVE_LIMIT = 1;
	public final static int NOPROJNOTE_LIMIT = 1024;
	public final static int USECALCJUST_LIMIT = 1;
	public final static int INSERVICEDATE_LIMIT = 7;
	public final static int ALTER1_LIMIT = 2048;
	public final static int ALTER2_LIMIT = 2048;
	public final static int CRITASS_LIMIT = 2048;
	public final static int ECONJUST_LIMIT = 2048;
	public final static int SCEPROJID_LIMIT = 9;
	private Proj ptr;
	private int planyear;
	private int simId;
	private int projId;
	private int subId;
	private int progId;
	private String projNum;
	private String reason;
	private Calendar opDate;
	private Calendar appDate;
	private int sponsorId;
	private String projTitle;
	private boolean useDefaultTitle = true;
	private boolean forceRev;
	private String priority = "B";
	private int rank;
	private String statusUpdate;
	private int creatorUsernameId;
	private Calendar createdDate;
	private int compById;
	private Calendar compDate;
	private String compNote;
	private double capAdd;
	private double capAddZ;
	private int cktAdd;
	private double varAdd;
	private double pllAdd;
	private double ellAdd;
	private double n1Add;
	private boolean usePrevPll = true;
	private boolean usePrevEll = true;
	private boolean usePrevN1 = true;
	private double resNoProj;
	private double aclNoProj;
	private int go131D;
	private boolean grc;
	private boolean finalized;
	private boolean approved;
	private boolean inactive;
	private String noProjNote;
	private boolean useCalcJust = true;
	private Calendar inServiceDate;
	private String alter1;
	private String alter2;
	private String critAss;
	private String econJust;
	private int sceProjId;
	private Collection<Bank> banks;
	private Collection<Bank> banks2;
	private Collection<Ckt> ckts;
	private Collection<ProjElem> projElems;
	private Collection<SimAlt> simAlts;
	private Collection<SimCkt> simCkts;
	private Collection<SimCkt> simCkts2;
	private Collection<SimSub> simSubs;
	private Collection<SubVar> subVars;
	private Collection<SubVar> subVars2;
	private Collection<Xfmr> xfmrs;
	private Collection<Xfmr> xfmrs2;
	private Prog prog;
	private SceProj sceProj;
	private Simulation simulation;
	private Sub sub;
	private User user;
	private User user2;
	private User user3;
	public static Proj getInstance(int planyear, int simId, int projId)throws java.sql.SQLException{
		return getInstance(planyear, simId, projId, true);
	}
	public static Proj getInstance(int planyear, int simId, int projId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, projId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, projId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Proj o = null;
		if(cache != null && cache.contains(Proj.class, pk))
			o = em.find(Proj.class, pk);
		if(o==null && getAICache().contains(Proj.class, pk))
			o = getAICache().find(Proj.class, pk);
		if(o==null && fetch)
			o = em.find(Proj.class, pk);
		if(o==null && fetch && Proj.class.getAnnotation(AutoInsertable.class) != null){
			o = new Proj(planyear, simId, projId);
			getAICache().cache(Proj.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<Proj> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Proj> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Proj> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Proj o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Proj> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Proj> tq = em.createQuery(jpql,Proj.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Proj> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Proj> tq = em.createNamedQuery(name,Proj.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProjDAO(){}
	public ProjDAO(int planyear, int simId, int projId){
		this.planyear=planyear;
		this.simId=simId;
		this.projId=projId;
	}
	public ProjDAO(ProjDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		copyFrom(orig);
	}
	public void copyFrom(ProjDAO orig){
		this.subId=orig.getSubId();
		this.progId=orig.getProgId();
		this.projNum=orig.getProjNum();
		this.reason=orig.getReason();
		this.opDate=orig.getOpDate();
		this.appDate=orig.getAppDate();
		this.sponsorId=orig.getSponsorId();
		this.projTitle=orig.getProjTitle();
		this.useDefaultTitle=orig.isUseDefaultTitle();
		this.forceRev=orig.isForceRev();
		this.priority=orig.getPriority();
		this.rank=orig.getRank();
		this.statusUpdate=orig.getStatusUpdate();
		this.creatorUsernameId=orig.getCreatorUsernameId();
		this.createdDate=orig.getCreatedDate();
		this.compById=orig.getCompById();
		this.compDate=orig.getCompDate();
		this.compNote=orig.getCompNote();
		this.capAdd=orig.getCapAdd();
		this.capAddZ=orig.getCapAddZ();
		this.cktAdd=orig.getCktAdd();
		this.varAdd=orig.getVarAdd();
		this.pllAdd=orig.getPllAdd();
		this.ellAdd=orig.getEllAdd();
		this.n1Add=orig.getN1Add();
		this.usePrevPll=orig.isUsePrevPll();
		this.usePrevEll=orig.isUsePrevEll();
		this.usePrevN1=orig.isUsePrevN1();
		this.resNoProj=orig.getResNoProj();
		this.aclNoProj=orig.getAclNoProj();
		this.go131D=orig.getGo131D();
		this.grc=orig.isGrc();
		this.finalized=orig.isFinalized();
		this.approved=orig.isApproved();
		this.inactive=orig.isInactive();
		this.noProjNote=orig.getNoProjNote();
		this.useCalcJust=orig.isUseCalcJust();
		this.inServiceDate=orig.getInServiceDate();
		this.alter1=orig.getAlter1();
		this.alter2=orig.getAlter2();
		this.critAss=orig.getCritAss();
		this.econJust=orig.getEconJust();
		this.sceProjId=orig.getSceProjId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, projId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public Proj getPtr(){
		return ptr;
	}
	public void setPtr(Proj ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getProjId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
		simulation=null;
	}
	@Id
	@SequenceGenerator(name="MDI112_SEQ",sequenceName="MDI112_SEQ")
	@Column(name="PROJ_ID",nullable=false,length=9)
	public int getProjId(){
		return projId;
	}
	public void setProjId(int projId) throws java.sql.SQLException{
		if(isSame(projId, getProjId()))return;
		int oldValue = getProjId();
		this.projId=projId;
		setProperty("PROJ_ID", projId, oldValue);
	}
	@Column(name="SUB_ID",nullable=false,length=9)
	public int getSubId(){
		if(getPtr()!=null)
			return getPtr().getSubId();
		return subId;
	}
	public void setSubId(int subId) throws java.sql.SQLException{
		if(isSame(subId, getSubId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSubId();
		this.subId=subId;
		setProperty("SUB_ID", subId, oldValue);
		sub=null;
	}
	@Column(name="PROG_ID",nullable=false,length=9)
	public int getProgId(){
		if(getPtr()!=null)
			return getPtr().getProgId();
		return progId;
	}
	public void setProgId(int progId) throws java.sql.SQLException{
		if(isSame(progId, getProgId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getProgId();
		this.progId=progId;
		setProperty("PROG_ID", progId, oldValue);
		prog=null;
	}
	@Column(name="PROJ_NUM",nullable=true,length=20)
	public String getProjNum(){
		if(getPtr()!=null)
			return getPtr().getProjNum();
		return projNum;
	}
	public void setProjNum(String projNum) throws java.sql.SQLException{
		if(isSame(projNum, getProjNum()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getProjNum();
		this.projNum=projNum;
		setProperty("PROJ_NUM", projNum, oldValue);
	}
	@Column(name="REASON",nullable=true,length=2048)
	public String getReason(){
		if(getPtr()!=null)
			return getPtr().getReason();
		return reason;
	}
	public void setReason(String reason) throws java.sql.SQLException{
		if(isSame(reason, getReason()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getReason();
		this.reason=reason;
		setProperty("REASON", reason, oldValue);
	}
	@Column(name="OP_DATE",nullable=false,length=7)
	public Calendar getOpDate(){
		if(getPtr()!=null)
			return getPtr().getOpDate();
		return opDate;
	}
	public void setOpDate(Calendar opDate) throws java.sql.SQLException{
		if(isSame(opDate, getOpDate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getOpDate();
		this.opDate=opDate;
		setProperty("OP_DATE", opDate, oldValue);
	}
	@Column(name="APP_DATE",nullable=true,length=7)
	public Calendar getAppDate(){
		if(getPtr()!=null)
			return getPtr().getAppDate();
		return appDate;
	}
	public void setAppDate(Calendar appDate) throws java.sql.SQLException{
		if(isSame(appDate, getAppDate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getAppDate();
		this.appDate=appDate;
		setProperty("APP_DATE", appDate, oldValue);
	}
	@Column(name="SPONSOR_ID",nullable=true,length=9)
	public int getSponsorId(){
		if(getPtr()!=null)
			return getPtr().getSponsorId();
		return sponsorId;
	}
	public void setSponsorId(int sponsorId) throws java.sql.SQLException{
		if(isSame(sponsorId, getSponsorId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSponsorId();
		this.sponsorId=sponsorId;
		setProperty("SPONSOR_ID", sponsorId, oldValue);
		user3=null;
	}
	@Column(name="PROJ_TITLE",nullable=true,length=512)
	public String getProjTitle(){
		if(getPtr()!=null)
			return getPtr().getProjTitle();
		return projTitle;
	}
	public void setProjTitle(String projTitle) throws java.sql.SQLException{
		if(isSame(projTitle, getProjTitle()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getProjTitle();
		this.projTitle=projTitle;
		setProperty("PROJ_TITLE", projTitle, oldValue);
	}
	@Column(name="USE_DEFAULT_TITLE",nullable=true,length=1)
	public boolean isUseDefaultTitle(){
		if(getPtr()!=null)
			return getPtr().isUseDefaultTitle();
		return useDefaultTitle;
	}
	public void setUseDefaultTitle(boolean useDefaultTitle) throws java.sql.SQLException{
		if(isSame(useDefaultTitle, isUseDefaultTitle()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUseDefaultTitle();
		this.useDefaultTitle=useDefaultTitle;
		setProperty("USE_DEFAULT_TITLE", useDefaultTitle, oldValue);
	}
	@Column(name="FORCE_REV",nullable=true,length=1)
	public boolean isForceRev(){
		if(getPtr()!=null)
			return getPtr().isForceRev();
		return forceRev;
	}
	public void setForceRev(boolean forceRev) throws java.sql.SQLException{
		if(isSame(forceRev, isForceRev()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isForceRev();
		this.forceRev=forceRev;
		setProperty("FORCE_REV", forceRev, oldValue);
	}
	@Column(name="PRIORITY",nullable=true,length=1)
	public String getPriority(){
		if(getPtr()!=null)
			return getPtr().getPriority();
		return priority;
	}
	public void setPriority(String priority) throws java.sql.SQLException{
		if(isSame(priority, getPriority()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getPriority();
		this.priority=priority;
		setProperty("PRIORITY", priority, oldValue);
	}
	@Column(name="RANK",nullable=true,length=9)
	public int getRank(){
		if(getPtr()!=null)
			return getPtr().getRank();
		return rank;
	}
	public void setRank(int rank) throws java.sql.SQLException{
		if(isSame(rank, getRank()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getRank();
		this.rank=rank;
		setProperty("RANK", rank, oldValue);
	}
	@Column(name="STATUS_UPDATE",nullable=true,length=2048)
	public String getStatusUpdate(){
		if(getPtr()!=null)
			return getPtr().getStatusUpdate();
		return statusUpdate;
	}
	public void setStatusUpdate(String statusUpdate) throws java.sql.SQLException{
		if(isSame(statusUpdate, getStatusUpdate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getStatusUpdate();
		this.statusUpdate=statusUpdate;
		setProperty("STATUS_UPDATE", statusUpdate, oldValue);
	}
	@Column(name="CREATOR_USERNAME_ID",nullable=false,length=9)
	public int getCreatorUsernameId(){
		if(getPtr()!=null)
			return getPtr().getCreatorUsernameId();
		return creatorUsernameId;
	}
	public void setCreatorUsernameId(int creatorUsernameId) throws java.sql.SQLException{
		if(isSame(creatorUsernameId, getCreatorUsernameId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getCreatorUsernameId();
		this.creatorUsernameId=creatorUsernameId;
		setProperty("CREATOR_USERNAME_ID", creatorUsernameId, oldValue);
		user=null;
	}
	@Column(name="CREATED_DATE",nullable=false,length=7)
	public Calendar getCreatedDate(){
		if(getPtr()!=null)
			return getPtr().getCreatedDate();
		return createdDate;
	}
	public void setCreatedDate(Calendar createdDate) throws java.sql.SQLException{
		if(isSame(createdDate, getCreatedDate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getCreatedDate();
		this.createdDate=createdDate;
		setProperty("CREATED_DATE", createdDate, oldValue);
	}
	@Column(name="COMP_BY_ID",nullable=true,length=9)
	public int getCompById(){
		if(getPtr()!=null)
			return getPtr().getCompById();
		return compById;
	}
	public void setCompById(int compById) throws java.sql.SQLException{
		if(isSame(compById, getCompById()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getCompById();
		this.compById=compById;
		setProperty("COMP_BY_ID", compById, oldValue);
		user2=null;
	}
	@Column(name="COMP_DATE",nullable=true,length=7)
	public Calendar getCompDate(){
		if(getPtr()!=null)
			return getPtr().getCompDate();
		return compDate;
	}
	public void setCompDate(Calendar compDate) throws java.sql.SQLException{
		if(isSame(compDate, getCompDate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getCompDate();
		this.compDate=compDate;
		setProperty("COMP_DATE", compDate, oldValue);
	}
	@Column(name="COMP_NOTE",nullable=true,length=512)
	public String getCompNote(){
		if(getPtr()!=null)
			return getPtr().getCompNote();
		return compNote;
	}
	public void setCompNote(String compNote) throws java.sql.SQLException{
		if(isSame(compNote, getCompNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getCompNote();
		this.compNote=compNote;
		setProperty("COMP_NOTE", compNote, oldValue);
	}
	@Column(name="CAP_ADD",nullable=true,length=24)
	public double getCapAdd(){
		if(getPtr()!=null)
			return getPtr().getCapAdd();
		return capAdd;
	}
	public void setCapAdd(double capAdd) throws java.sql.SQLException{
		if(isSame(capAdd, getCapAdd()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getCapAdd();
		this.capAdd=capAdd;
		setProperty("CAP_ADD", capAdd, oldValue);
	}
	@Column(name="CAP_ADD_Z",nullable=true,length=24)
	public double getCapAddZ(){
		if(getPtr()!=null)
			return getPtr().getCapAddZ();
		return capAddZ;
	}
	public void setCapAddZ(double capAddZ) throws java.sql.SQLException{
		if(isSame(capAddZ, getCapAddZ()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getCapAddZ();
		this.capAddZ=capAddZ;
		setProperty("CAP_ADD_Z", capAddZ, oldValue);
	}
	@Column(name="CKT_ADD",nullable=true,length=2)
	public int getCktAdd(){
		if(getPtr()!=null)
			return getPtr().getCktAdd();
		return cktAdd;
	}
	public void setCktAdd(int cktAdd) throws java.sql.SQLException{
		if(isSame(cktAdd, getCktAdd()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getCktAdd();
		this.cktAdd=cktAdd;
		setProperty("CKT_ADD", cktAdd, oldValue);
	}
	@Column(name="VAR_ADD",nullable=true,length=24)
	public double getVarAdd(){
		if(getPtr()!=null)
			return getPtr().getVarAdd();
		return varAdd;
	}
	public void setVarAdd(double varAdd) throws java.sql.SQLException{
		if(isSame(varAdd, getVarAdd()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getVarAdd();
		this.varAdd=varAdd;
		setProperty("VAR_ADD", varAdd, oldValue);
	}
	@Column(name="PLL_ADD",nullable=true,length=24)
	public double getPllAdd(){
		if(getPtr()!=null)
			return getPtr().getPllAdd();
		return pllAdd;
	}
	public void setPllAdd(double pllAdd) throws java.sql.SQLException{
		if(isSame(pllAdd, getPllAdd()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getPllAdd();
		this.pllAdd=pllAdd;
		setProperty("PLL_ADD", pllAdd, oldValue);
	}
	@Column(name="ELL_ADD",nullable=true,length=24)
	public double getEllAdd(){
		if(getPtr()!=null)
			return getPtr().getEllAdd();
		return ellAdd;
	}
	public void setEllAdd(double ellAdd) throws java.sql.SQLException{
		if(isSame(ellAdd, getEllAdd()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getEllAdd();
		this.ellAdd=ellAdd;
		setProperty("ELL_ADD", ellAdd, oldValue);
	}
	@Column(name="N1_ADD",nullable=true,length=24)
	public double getN1Add(){
		if(getPtr()!=null)
			return getPtr().getN1Add();
		return n1Add;
	}
	public void setN1Add(double n1Add) throws java.sql.SQLException{
		if(isSame(n1Add, getN1Add()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getN1Add();
		this.n1Add=n1Add;
		setProperty("N1_ADD", n1Add, oldValue);
	}
	@Column(name="USE_PREV_PLL",nullable=true,length=1)
	public boolean isUsePrevPll(){
		if(getPtr()!=null)
			return getPtr().isUsePrevPll();
		return usePrevPll;
	}
	public void setUsePrevPll(boolean usePrevPll) throws java.sql.SQLException{
		if(isSame(usePrevPll, isUsePrevPll()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUsePrevPll();
		this.usePrevPll=usePrevPll;
		setProperty("USE_PREV_PLL", usePrevPll, oldValue);
	}
	@Column(name="USE_PREV_ELL",nullable=true,length=1)
	public boolean isUsePrevEll(){
		if(getPtr()!=null)
			return getPtr().isUsePrevEll();
		return usePrevEll;
	}
	public void setUsePrevEll(boolean usePrevEll) throws java.sql.SQLException{
		if(isSame(usePrevEll, isUsePrevEll()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUsePrevEll();
		this.usePrevEll=usePrevEll;
		setProperty("USE_PREV_ELL", usePrevEll, oldValue);
	}
	@Column(name="USE_PREV_N1",nullable=true,length=1)
	public boolean isUsePrevN1(){
		if(getPtr()!=null)
			return getPtr().isUsePrevN1();
		return usePrevN1;
	}
	public void setUsePrevN1(boolean usePrevN1) throws java.sql.SQLException{
		if(isSame(usePrevN1, isUsePrevN1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUsePrevN1();
		this.usePrevN1=usePrevN1;
		setProperty("USE_PREV_N1", usePrevN1, oldValue);
	}
	@Column(name="RES_NO_PROJ",nullable=true,length=24)
	public double getResNoProj(){
		if(getPtr()!=null)
			return getPtr().getResNoProj();
		return resNoProj;
	}
	public void setResNoProj(double resNoProj) throws java.sql.SQLException{
		if(isSame(resNoProj, getResNoProj()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getResNoProj();
		this.resNoProj=resNoProj;
		setProperty("RES_NO_PROJ", resNoProj, oldValue);
	}
	@Column(name="ACL_NO_PROJ",nullable=true,length=24)
	public double getAclNoProj(){
		if(getPtr()!=null)
			return getPtr().getAclNoProj();
		return aclNoProj;
	}
	public void setAclNoProj(double aclNoProj) throws java.sql.SQLException{
		if(isSame(aclNoProj, getAclNoProj()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getAclNoProj();
		this.aclNoProj=aclNoProj;
		setProperty("ACL_NO_PROJ", aclNoProj, oldValue);
	}
	@Column(name="GO131D",nullable=true,length=2)
	public int getGo131D(){
		if(getPtr()!=null)
			return getPtr().getGo131D();
		return go131D;
	}
	public void setGo131D(int go131D) throws java.sql.SQLException{
		if(isSame(go131D, getGo131D()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getGo131D();
		this.go131D=go131D;
		setProperty("GO131D", go131D, oldValue);
	}
	@Column(name="GRC",nullable=true,length=1)
	public boolean isGrc(){
		if(getPtr()!=null)
			return getPtr().isGrc();
		return grc;
	}
	public void setGrc(boolean grc) throws java.sql.SQLException{
		if(isSame(grc, isGrc()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isGrc();
		this.grc=grc;
		setProperty("GRC", grc, oldValue);
	}
	@Column(name="FINALIZED",nullable=true,length=1)
	public boolean isFinalized(){
		if(getPtr()!=null)
			return getPtr().isFinalized();
		return finalized;
	}
	public void setFinalized(boolean finalized) throws java.sql.SQLException{
		if(isSame(finalized, isFinalized()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isFinalized();
		this.finalized=finalized;
		setProperty("FINALIZED", finalized, oldValue);
	}
	@Column(name="APPROVED",nullable=true,length=1)
	public boolean isApproved(){
		if(getPtr()!=null)
			return getPtr().isApproved();
		return approved;
	}
	public void setApproved(boolean approved) throws java.sql.SQLException{
		if(isSame(approved, isApproved()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isApproved();
		this.approved=approved;
		setProperty("APPROVED", approved, oldValue);
	}
	@Column(name="INACTIVE",nullable=true,length=1)
	public boolean isInactive(){
		if(getPtr()!=null)
			return getPtr().isInactive();
		return inactive;
	}
	public void setInactive(boolean inactive) throws java.sql.SQLException{
		if(isSame(inactive, isInactive()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isInactive();
		this.inactive=inactive;
		setProperty("INACTIVE", inactive, oldValue);
	}
	@Column(name="NO_PROJ_NOTE",nullable=true,length=1024)
	public String getNoProjNote(){
		if(getPtr()!=null)
			return getPtr().getNoProjNote();
		return noProjNote;
	}
	public void setNoProjNote(String noProjNote) throws java.sql.SQLException{
		if(isSame(noProjNote, getNoProjNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getNoProjNote();
		this.noProjNote=noProjNote;
		setProperty("NO_PROJ_NOTE", noProjNote, oldValue);
	}
	@Column(name="USE_CALC_JUST",nullable=true,length=1)
	public boolean isUseCalcJust(){
		if(getPtr()!=null)
			return getPtr().isUseCalcJust();
		return useCalcJust;
	}
	public void setUseCalcJust(boolean useCalcJust) throws java.sql.SQLException{
		if(isSame(useCalcJust, isUseCalcJust()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isUseCalcJust();
		this.useCalcJust=useCalcJust;
		setProperty("USE_CALC_JUST", useCalcJust, oldValue);
	}
	@Column(name="IN_SERVICE_DATE",nullable=true,length=7)
	public Calendar getInServiceDate(){
		if(getPtr()!=null)
			return getPtr().getInServiceDate();
		return inServiceDate;
	}
	public void setInServiceDate(Calendar inServiceDate) throws java.sql.SQLException{
		if(isSame(inServiceDate, getInServiceDate()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		Calendar oldValue = getInServiceDate();
		this.inServiceDate=inServiceDate;
		setProperty("IN_SERVICE_DATE", inServiceDate, oldValue);
	}
	@Column(name="ALTER1",nullable=true,length=2048)
	public String getAlter1(){
		if(getPtr()!=null)
			return getPtr().getAlter1();
		return alter1;
	}
	public void setAlter1(String alter1) throws java.sql.SQLException{
		if(isSame(alter1, getAlter1()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getAlter1();
		this.alter1=alter1;
		setProperty("ALTER1", alter1, oldValue);
	}
	@Column(name="ALTER2",nullable=true,length=2048)
	public String getAlter2(){
		if(getPtr()!=null)
			return getPtr().getAlter2();
		return alter2;
	}
	public void setAlter2(String alter2) throws java.sql.SQLException{
		if(isSame(alter2, getAlter2()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getAlter2();
		this.alter2=alter2;
		setProperty("ALTER2", alter2, oldValue);
	}
	@Column(name="CRIT_ASS",nullable=true,length=2048)
	public String getCritAss(){
		if(getPtr()!=null)
			return getPtr().getCritAss();
		return critAss;
	}
	public void setCritAss(String critAss) throws java.sql.SQLException{
		if(isSame(critAss, getCritAss()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getCritAss();
		this.critAss=critAss;
		setProperty("CRIT_ASS", critAss, oldValue);
	}
	@Column(name="ECON_JUST",nullable=true,length=2048)
	public String getEconJust(){
		if(getPtr()!=null)
			return getPtr().getEconJust();
		return econJust;
	}
	public void setEconJust(String econJust) throws java.sql.SQLException{
		if(isSame(econJust, getEconJust()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getEconJust();
		this.econJust=econJust;
		setProperty("ECON_JUST", econJust, oldValue);
	}
	@Column(name="SCE_PROJ_ID",nullable=true,length=9)
	public int getSceProjId(){
		if(getPtr()!=null)
			return getPtr().getSceProjId();
		return sceProjId;
	}
	public void setSceProjId(int sceProjId) throws java.sql.SQLException{
		if(isSame(sceProjId, getSceProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSceProjId();
		this.sceProjId=sceProjId;
		setProperty("SCE_PROJ_ID", sceProjId, oldValue);
		sceProj=null;
	}
	public Prog getProg()throws java.sql.SQLException{
		if(prog==null)
			prog=Prog.getInstance(getPlanyear(), getProgId());
		return prog;
	}
	public void setProg(Prog prog)throws java.sql.SQLException{
		setProgId(prog==null?0:prog.getProgId());
		this.prog=prog;
	}
	public SceProj getSceProj()throws java.sql.SQLException{
		if(sceProj==null)
			sceProj=SceProj.getInstance(getSceProjId());
		return sceProj;
	}
	public void setSceProj(SceProj sceProj)throws java.sql.SQLException{
		setSceProjId(sceProj==null?0:sceProj.getSceProjId());
		this.sceProj=sceProj;
	}
	public Simulation getSimulation()throws java.sql.SQLException{
		if(simulation==null)
			simulation=Simulation.getInstance(getPlanyear(), getSimId());
		return simulation;
	}
	public void setSimulation(Simulation simulation)throws java.sql.SQLException{
		setSimId(simulation==null?0:simulation.getSimId());
		this.simulation=simulation;
	}
	public Sub getSub()throws java.sql.SQLException{
		if(sub==null)
			sub=Sub.getInstance(getPlanyear(), getSubId());
		return sub;
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		setSubId(sub==null?0:sub.getSubId());
		this.sub=sub;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getCreatorUsernameId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setCreatorUsernameId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public User getUser2()throws java.sql.SQLException{
		if(user2==null)
			user2=User.getInstance(getCompById());
		return user2;
	}
	public void setUser2(User user2)throws java.sql.SQLException{
		setCompById(user2==null?0:user2.getUsernameId());
		this.user2=user2;
	}
	public User getUser3()throws java.sql.SQLException{
		if(user3==null)
			user3=User.getInstance(getSponsorId());
		return user3;
	}
	public void setUser3(User user3)throws java.sql.SQLException{
		setSponsorId(user3==null?0:user3.getUsernameId());
		this.user3=user3;
	}
	public Collection<Bank> getBanks()throws java.sql.SQLException{
		if(isNewInstance() || banks != null){
			if(banks == null)
				banks = new TreeSet<Bank>();
			return banks;
		}
		return Bank.getNamedCollection("findByProj",getPlanyear(), getSimId(), getProjId());
	}
	public void addBank(Bank bank)throws java.sql.SQLException{
		bank.setProj((Proj)this);
		if(isNewInstance() || banks != null)
			getBanks().add(bank);
		else
			bank.insert();
	}
	public void removeBank(Bank bank)throws java.sql.SQLException{
		if(isNewInstance() || banks != null)
			getBanks().remove(bank);
		else
			bank.delete();
	}
	public Collection<Bank> getBanks2()throws java.sql.SQLException{
		if(isNewInstance() || banks2 != null){
			if(banks2 == null)
				banks2 = new TreeSet<Bank>();
			return banks2;
		}
		return Bank.getNamedCollection("findByProj2",getPlanyear(), getSimId(), getProjId());
	}
	public void addBank2(Bank bank2)throws java.sql.SQLException{
		bank2.setProj((Proj)this);
		if(isNewInstance() || banks2 != null)
			getBanks2().add(bank2);
		else
			bank2.insert();
	}
	public void removeBank2(Bank bank2)throws java.sql.SQLException{
		if(isNewInstance() || banks2 != null)
			getBanks2().remove(bank2);
		else
			bank2.delete();
	}
	public Collection<Ckt> getCkts()throws java.sql.SQLException{
		if(isNewInstance() || ckts != null){
			if(ckts == null)
				ckts = new TreeSet<Ckt>();
			return ckts;
		}
		return Ckt.getNamedCollection("findByProj",getPlanyear(), getSimId(), getProjId());
	}
	public void addCkt(Ckt ckt)throws java.sql.SQLException{
		ckt.setProj((Proj)this);
		if(isNewInstance() || ckts != null)
			getCkts().add(ckt);
		else
			ckt.insert();
	}
	public void removeCkt(Ckt ckt)throws java.sql.SQLException{
		if(isNewInstance() || ckts != null)
			getCkts().remove(ckt);
		else
			ckt.delete();
	}
	public Collection<ProjElem> getProjElems()throws java.sql.SQLException{
		if(isNewInstance() || projElems != null){
			if(projElems == null)
				projElems = new TreeSet<ProjElem>();
			return projElems;
		}
		return ProjElem.getNamedCollection("findByProj",getPlanyear(), getSimId(), getProjId());
	}
	public void addProjElem(ProjElem projElem)throws java.sql.SQLException{
		projElem.setProj((Proj)this);
		if(isNewInstance() || projElems != null)
			getProjElems().add(projElem);
		else
			projElem.insert();
	}
	public void removeProjElem(ProjElem projElem)throws java.sql.SQLException{
		if(isNewInstance() || projElems != null)
			getProjElems().remove(projElem);
		else
			projElem.delete();
	}
	public Collection<SimAlt> getSimAlts()throws java.sql.SQLException{
		if(isNewInstance() || simAlts != null){
			if(simAlts == null)
				simAlts = new TreeSet<SimAlt>();
			return simAlts;
		}
		return SimAlt.getNamedCollection("findByProj",getPlanyear(), getSimId(), getProjId());
	}
	public void addSimAlt(SimAlt simAlt)throws java.sql.SQLException{
		simAlt.setProj((Proj)this);
		if(isNewInstance() || simAlts != null)
			getSimAlts().add(simAlt);
		else
			simAlt.insert();
	}
	public void removeSimAlt(SimAlt simAlt)throws java.sql.SQLException{
		if(isNewInstance() || simAlts != null)
			getSimAlts().remove(simAlt);
		else
			simAlt.delete();
	}
	public Collection<SimCkt> getSimCkts()throws java.sql.SQLException{
		if(isNewInstance() || simCkts != null){
			if(simCkts == null)
				simCkts = new TreeSet<SimCkt>();
			return simCkts;
		}
		return SimCkt.getNamedCollection("findByProj",getPlanyear(), getSimId(), getProjId());
	}
	public void addSimCkt(SimCkt simCkt)throws java.sql.SQLException{
		simCkt.setProj((Proj)this);
		if(isNewInstance() || simCkts != null)
			getSimCkts().add(simCkt);
		else
			simCkt.insert();
	}
	public void removeSimCkt(SimCkt simCkt)throws java.sql.SQLException{
		if(isNewInstance() || simCkts != null)
			getSimCkts().remove(simCkt);
		else
			simCkt.delete();
	}
	public Collection<SimCkt> getSimCkts2()throws java.sql.SQLException{
		if(isNewInstance() || simCkts2 != null){
			if(simCkts2 == null)
				simCkts2 = new TreeSet<SimCkt>();
			return simCkts2;
		}
		return SimCkt.getNamedCollection("findByProj2",getPlanyear(), getSimId(), getProjId());
	}
	public void addSimCkt2(SimCkt simCkt2)throws java.sql.SQLException{
		simCkt2.setProj((Proj)this);
		if(isNewInstance() || simCkts2 != null)
			getSimCkts2().add(simCkt2);
		else
			simCkt2.insert();
	}
	public void removeSimCkt2(SimCkt simCkt2)throws java.sql.SQLException{
		if(isNewInstance() || simCkts2 != null)
			getSimCkts2().remove(simCkt2);
		else
			simCkt2.delete();
	}
	public Collection<SimSub> getSimSubs()throws java.sql.SQLException{
		if(isNewInstance() || simSubs != null){
			if(simSubs == null)
				simSubs = new TreeSet<SimSub>();
			return simSubs;
		}
		return SimSub.getNamedCollection("findByProj",getPlanyear(), getSimId(), getProjId());
	}
	public void addSimSub(SimSub simSub)throws java.sql.SQLException{
		simSub.setProj((Proj)this);
		if(isNewInstance() || simSubs != null)
			getSimSubs().add(simSub);
		else
			simSub.insert();
	}
	public void removeSimSub(SimSub simSub)throws java.sql.SQLException{
		if(isNewInstance() || simSubs != null)
			getSimSubs().remove(simSub);
		else
			simSub.delete();
	}
	public Collection<SubVar> getSubVars()throws java.sql.SQLException{
		if(isNewInstance() || subVars != null){
			if(subVars == null)
				subVars = new TreeSet<SubVar>();
			return subVars;
		}
		return SubVar.getNamedCollection("findByProj",getPlanyear(), getSimId(), getProjId());
	}
	public void addSubVar(SubVar subVar)throws java.sql.SQLException{
		subVar.setProj((Proj)this);
		if(isNewInstance() || subVars != null)
			getSubVars().add(subVar);
		else
			subVar.insert();
	}
	public void removeSubVar(SubVar subVar)throws java.sql.SQLException{
		if(isNewInstance() || subVars != null)
			getSubVars().remove(subVar);
		else
			subVar.delete();
	}
	public Collection<SubVar> getSubVars2()throws java.sql.SQLException{
		if(isNewInstance() || subVars2 != null){
			if(subVars2 == null)
				subVars2 = new TreeSet<SubVar>();
			return subVars2;
		}
		return SubVar.getNamedCollection("findByProj2",getPlanyear(), getSimId(), getProjId());
	}
	public void addSubVar2(SubVar subVar2)throws java.sql.SQLException{
		subVar2.setProj((Proj)this);
		if(isNewInstance() || subVars2 != null)
			getSubVars2().add(subVar2);
		else
			subVar2.insert();
	}
	public void removeSubVar2(SubVar subVar2)throws java.sql.SQLException{
		if(isNewInstance() || subVars2 != null)
			getSubVars2().remove(subVar2);
		else
			subVar2.delete();
	}
	public Collection<Xfmr> getXfmrs()throws java.sql.SQLException{
		if(isNewInstance() || xfmrs != null){
			if(xfmrs == null)
				xfmrs = new TreeSet<Xfmr>();
			return xfmrs;
		}
		return Xfmr.getNamedCollection("findByProj",getPlanyear(), getSimId(), getProjId());
	}
	public void addXfmr(Xfmr xfmr)throws java.sql.SQLException{
		xfmr.setProj((Proj)this);
		if(isNewInstance() || xfmrs != null)
			getXfmrs().add(xfmr);
		else
			xfmr.insert();
	}
	public void removeXfmr(Xfmr xfmr)throws java.sql.SQLException{
		if(isNewInstance() || xfmrs != null)
			getXfmrs().remove(xfmr);
		else
			xfmr.delete();
	}
	public Collection<Xfmr> getXfmrs2()throws java.sql.SQLException{
		if(isNewInstance() || xfmrs2 != null){
			if(xfmrs2 == null)
				xfmrs2 = new TreeSet<Xfmr>();
			return xfmrs2;
		}
		return Xfmr.getNamedCollection("findByProj2",getPlanyear(), getSimId(), getProjId());
	}
	public void addXfmr2(Xfmr xfmr2)throws java.sql.SQLException{
		xfmr2.setProj((Proj)this);
		if(isNewInstance() || xfmrs2 != null)
			getXfmrs2().add(xfmr2);
		else
			xfmr2.insert();
	}
	public void removeXfmr2(Xfmr xfmr2)throws java.sql.SQLException{
		if(isNewInstance() || xfmrs2 != null)
			getXfmrs2().remove(xfmr2);
		else
			xfmr2.delete();
	}
	public Proj copy()throws java.sql.SQLException{
		Proj cp = new Proj((Proj)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProjDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(Bank child:getBanks())
			cp.addBank(child.copy());
		for(Bank child:getBanks2())
			cp.addBank(child.copy());
		for(Ckt child:getCkts())
			cp.addCkt(child.copy());
		for(ProjElem child:getProjElems())
			cp.addProjElem(child.copy());
		for(SimAlt child:getSimAlts())
			cp.addSimAlt(child.copy());
		for(SimCkt child:getSimCkts())
			cp.addSimCkt(child.copy());
		for(SimCkt child:getSimCkts2())
			cp.addSimCkt(child.copy());
		for(SimSub child:getSimSubs())
			cp.addSimSub(child.copy());
		for(SubVar child:getSubVars())
			cp.addSubVar(child.copy());
		for(SubVar child:getSubVars2())
			cp.addSubVar(child.copy());
		for(Xfmr child:getXfmrs())
			cp.addXfmr(child.copy());
		for(Xfmr child:getXfmrs2())
			cp.addXfmr(child.copy());
	}
	public Vector<String> getDifference(ProjDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getProjId(),o.getProjId())) diffs.add("PROJ_ID");
		if(!isSame(getSubId(),o.getSubId())) diffs.add("SUB_ID");
		if(!isSame(getProgId(),o.getProgId())) diffs.add("PROG_ID");
		if(!isSame(getProjNum(),o.getProjNum())) diffs.add("PROJ_NUM");
		if(!isSame(getReason(),o.getReason())) diffs.add("REASON");
		if(!isSame(getOpDate(),o.getOpDate())) diffs.add("OP_DATE");
		if(!isSame(getAppDate(),o.getAppDate())) diffs.add("APP_DATE");
		if(!isSame(getSponsorId(),o.getSponsorId())) diffs.add("SPONSOR_ID");
		if(!isSame(getProjTitle(),o.getProjTitle())) diffs.add("PROJ_TITLE");
		if(!isSame(isUseDefaultTitle(),o.isUseDefaultTitle())) diffs.add("USE_DEFAULT_TITLE");
		if(!isSame(isForceRev(),o.isForceRev())) diffs.add("FORCE_REV");
		if(!isSame(getPriority(),o.getPriority())) diffs.add("PRIORITY");
		if(!isSame(getRank(),o.getRank())) diffs.add("RANK");
		if(!isSame(getStatusUpdate(),o.getStatusUpdate())) diffs.add("STATUS_UPDATE");
		if(!isSame(getCreatorUsernameId(),o.getCreatorUsernameId())) diffs.add("CREATOR_USERNAME_ID");
		if(!isSame(getCreatedDate(),o.getCreatedDate())) diffs.add("CREATED_DATE");
		if(!isSame(getCompById(),o.getCompById())) diffs.add("COMP_BY_ID");
		if(!isSame(getCompDate(),o.getCompDate())) diffs.add("COMP_DATE");
		if(!isSame(getCompNote(),o.getCompNote())) diffs.add("COMP_NOTE");
		if(!isSame(getCapAdd(),o.getCapAdd())) diffs.add("CAP_ADD");
		if(!isSame(getCapAddZ(),o.getCapAddZ())) diffs.add("CAP_ADD_Z");
		if(!isSame(getCktAdd(),o.getCktAdd())) diffs.add("CKT_ADD");
		if(!isSame(getVarAdd(),o.getVarAdd())) diffs.add("VAR_ADD");
		if(!isSame(getPllAdd(),o.getPllAdd())) diffs.add("PLL_ADD");
		if(!isSame(getEllAdd(),o.getEllAdd())) diffs.add("ELL_ADD");
		if(!isSame(getN1Add(),o.getN1Add())) diffs.add("N1_ADD");
		if(!isSame(isUsePrevPll(),o.isUsePrevPll())) diffs.add("USE_PREV_PLL");
		if(!isSame(isUsePrevEll(),o.isUsePrevEll())) diffs.add("USE_PREV_ELL");
		if(!isSame(isUsePrevN1(),o.isUsePrevN1())) diffs.add("USE_PREV_N1");
		if(!isSame(getResNoProj(),o.getResNoProj())) diffs.add("RES_NO_PROJ");
		if(!isSame(getAclNoProj(),o.getAclNoProj())) diffs.add("ACL_NO_PROJ");
		if(!isSame(getGo131D(),o.getGo131D())) diffs.add("GO131D");
		if(!isSame(isGrc(),o.isGrc())) diffs.add("GRC");
		if(!isSame(isFinalized(),o.isFinalized())) diffs.add("FINALIZED");
		if(!isSame(isApproved(),o.isApproved())) diffs.add("APPROVED");
		if(!isSame(isInactive(),o.isInactive())) diffs.add("INACTIVE");
		if(!isSame(getNoProjNote(),o.getNoProjNote())) diffs.add("NO_PROJ_NOTE");
		if(!isSame(isUseCalcJust(),o.isUseCalcJust())) diffs.add("USE_CALC_JUST");
		if(!isSame(getInServiceDate(),o.getInServiceDate())) diffs.add("IN_SERVICE_DATE");
		if(!isSame(getAlter1(),o.getAlter1())) diffs.add("ALTER1");
		if(!isSame(getAlter2(),o.getAlter2())) diffs.add("ALTER2");
		if(!isSame(getCritAss(),o.getCritAss())) diffs.add("CRIT_ASS");
		if(!isSame(getEconJust(),o.getEconJust())) diffs.add("ECON_JUST");
		if(!isSame(getSceProjId(),o.getSceProjId())) diffs.add("SCE_PROJ_ID");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(banks != null){
			for(Bank bank:getBanks()){
				if(bank.isNewInstance())
					bank.setProj((Proj)this);
				bank.insert();
			}
			banks = null;
		}
		if(banks2 != null){
			for(Bank bank2:getBanks2()){
				if(bank2.isNewInstance())
					bank2.setProj((Proj)this);
				bank2.insert();
			}
			banks2 = null;
		}
		if(ckts != null){
			for(Ckt ckt:getCkts()){
				if(ckt.isNewInstance())
					ckt.setProj((Proj)this);
				ckt.insert();
			}
			ckts = null;
		}
		if(projElems != null){
			for(ProjElem projElem:getProjElems()){
				if(projElem.isNewInstance())
					projElem.setProj((Proj)this);
				projElem.insert();
			}
			projElems = null;
		}
		if(simAlts != null){
			for(SimAlt simAlt:getSimAlts()){
				if(simAlt.isNewInstance())
					simAlt.setProj((Proj)this);
				simAlt.insert();
			}
			simAlts = null;
		}
		if(simCkts != null){
			for(SimCkt simCkt:getSimCkts()){
				if(simCkt.isNewInstance())
					simCkt.setProj((Proj)this);
				simCkt.insert();
			}
			simCkts = null;
		}
		if(simCkts2 != null){
			for(SimCkt simCkt2:getSimCkts2()){
				if(simCkt2.isNewInstance())
					simCkt2.setProj((Proj)this);
				simCkt2.insert();
			}
			simCkts2 = null;
		}
		if(simSubs != null){
			for(SimSub simSub:getSimSubs()){
				if(simSub.isNewInstance())
					simSub.setProj((Proj)this);
				simSub.insert();
			}
			simSubs = null;
		}
		if(subVars != null){
			for(SubVar subVar:getSubVars()){
				if(subVar.isNewInstance())
					subVar.setProj((Proj)this);
				subVar.insert();
			}
			subVars = null;
		}
		if(subVars2 != null){
			for(SubVar subVar2:getSubVars2()){
				if(subVar2.isNewInstance())
					subVar2.setProj((Proj)this);
				subVar2.insert();
			}
			subVars2 = null;
		}
		if(xfmrs != null){
			for(Xfmr xfmr:getXfmrs()){
				if(xfmr.isNewInstance())
					xfmr.setProj((Proj)this);
				xfmr.insert();
			}
			xfmrs = null;
		}
		if(xfmrs2 != null){
			for(Xfmr xfmr2:getXfmrs2()){
				if(xfmr2.isNewInstance())
					xfmr2.setProj((Proj)this);
				xfmr2.insert();
			}
			xfmrs2 = null;
		}
	}
}
