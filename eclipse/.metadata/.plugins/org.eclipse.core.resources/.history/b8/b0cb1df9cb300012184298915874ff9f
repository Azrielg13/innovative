package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.SceProjTrackingDAO;
@Entity
@Table(schema="MDI",name="MDIS90_SCE_PROJ_TRACKING")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM SceProjTracking o WHERE o.PROJ_T_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM SceProjTracking o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM SceProjTracking o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySceProjRev", query="SELECT o FROM SceProjTracking o WHERE o.SCE_PROJ_REV_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIS90_SCE_PROJ_TRACKING o WHERE o.PROJ_T_ID=?"),//AUTO-GENERATED
})
public class SceProjTracking extends SceProjTrackingDAO implements Serializable{

	private static final long serialVersionUID = -3748929353564193381L;

	public SceProjTracking(){
	}
	public SceProjTracking(int projTrackId) {
		super(projTrackId);
	}

	public SceProjTracking(SceProjTracking sceProjTracking) {
		super(sceProjTracking);
	}
	
	public TreeSet<SceProjTracking> getSceProjTrackingNodes() throws SQLException{
		TreeSet<SceProjTracking> nodes = new TreeSet<SceProjTracking>();
		for(SceProjTrackingDep dep:getSceProjTrackingDeps2())
			nodes.add(dep.getSceProjTracking());
		return nodes;
	}
	
	public Calendar getStartDate()throws SQLException{
		if(getStartTs() != null)
			return getStartTs();
		if(getSceProjTrackingDeps().size() == 0)
			return getSceProjRev().getEpefTrackingSentTsBl();
		Calendar cal = null;
		for(SceProjTrackingDep dep:getSceProjTrackingDeps())
			if(cal == null || dep.getSceProjTracking2().getEndDate().compareTo(cal) > 0)
				cal = dep.getSceProjTracking2().getEndDate();
		return cal;
	}
	
	public Calendar getTargetDate()throws SQLException{
		if(getStartDate() == null)
			return null;
		Calendar cal = (Calendar)getStartDate().clone();
		cal.add(Calendar.DATE, getTargetWorkDays());
		return cal;
	}
	
	public Calendar getEndDate()throws SQLException{
		if(getCompleteTs() != null)
			return getCompleteTs();
		return getTargetDate();
	}
	
	public int getTurnAround()throws SQLException{
		if(getCompleteTs() == null || getStartDate() == null)
			return -1;
		return (int)Math.round((getCompleteTs().getTimeInMillis() - getStartDate().getTimeInMillis()) / (24*60*60*1000.0)); 
	}
}
