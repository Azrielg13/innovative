package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostStage;
import com.sce.esp.object.model.Program;
import com.sce.esp.object.model.ProjContingency;
import com.sce.esp.object.model.SceElem;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ProjContingencyDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PROJ_CONT_ID};
	public static enum PROPERTY{PROJ_CONT_ID,PROGRAM_ID,COST_STAGE_ID,SCE_ELEM_ID,EFF_DATE,REG_CONT,MAJOR_CONT,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PROJCONTID_LIMIT = 9;
	public final static int PROGRAMID_LIMIT = 9;
	public final static int COSTSTAGEID_LIMIT = 9;
	public final static int SCEELEMID_LIMIT = 9;
	public final static int EFFDATE_LIMIT = 7;
	public final static int REGCONT_LIMIT = 24;
	public final static int MAJORCONT_LIMIT = 24;
	private int projContId;
	private int programId;
	private int costStageId;
	private int sceElemId;
	private Calendar effDate;
	private double regCont;
	private double majorCont;
	private CostStage costStage;
	private Program program;
	private SceElem sceElem;
	public static ProjContingency getInstance(int projContId)throws java.sql.SQLException{
		return getInstance(projContId, true);
	}
	public static ProjContingency getInstance(int projContId, boolean fetch)throws java.sql.SQLException{
		if(isNull(projContId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(projContId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProjContingency o = null;
		if(cache != null && cache.contains(ProjContingency.class, pk))
			o = em.find(ProjContingency.class, pk);
		if(o==null && getAICache().contains(ProjContingency.class, pk))
			o = getAICache().find(ProjContingency.class, pk);
		if(o==null && fetch)
			o = em.find(ProjContingency.class, pk);
		if(o==null && fetch && ProjContingency.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProjContingency(projContId);
			getAICache().cache(ProjContingency.class, o);
		}
		return o;
	}
	public static Collection<ProjContingency> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProjContingency> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProjContingency> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProjContingency o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProjContingency> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjContingency> tq = em.createQuery(jpql,ProjContingency.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProjContingency> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjContingency> tq = em.createNamedQuery(name,ProjContingency.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProjContingencyDAO(){}
	public ProjContingencyDAO(int projContId){
		this.projContId=projContId;
	}
	public ProjContingencyDAO(ProjContingencyDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ProjContingencyDAO orig){
		this.programId=orig.getProgramId();
		this.costStageId=orig.getCostStageId();
		this.sceElemId=orig.getSceElemId();
		this.effDate=orig.getEffDate();
		this.regCont=orig.getRegCont();
		this.majorCont=orig.getMajorCont();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{projContId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIV80_SEQ",sequenceName="MDIV80_SEQ")
	@Column(name="PROJ_CONT_ID",nullable=false,length=9)
	public int getProjContId(){
		return projContId;
	}
	public void setProjContId(int projContId) throws java.sql.SQLException{
		if(isSame(projContId, getProjContId()))return;
		int oldValue = getProjContId();
		this.projContId=projContId;
		setProperty("PROJ_CONT_ID", projContId, oldValue);
	}
	@Column(name="PROGRAM_ID",nullable=false,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
		program=null;
	}
	@Column(name="COST_STAGE_ID",nullable=false,length=9)
	public int getCostStageId(){
		return costStageId;
	}
	public void setCostStageId(int costStageId) throws java.sql.SQLException{
		if(isSame(costStageId, getCostStageId()))return;
		int oldValue = getCostStageId();
		this.costStageId=costStageId;
		setProperty("COST_STAGE_ID", costStageId, oldValue);
		costStage=null;
	}
	@Column(name="SCE_ELEM_ID",nullable=true,length=9)
	public int getSceElemId(){
		return sceElemId;
	}
	public void setSceElemId(int sceElemId) throws java.sql.SQLException{
		if(isSame(sceElemId, getSceElemId()))return;
		int oldValue = getSceElemId();
		this.sceElemId=sceElemId;
		setProperty("SCE_ELEM_ID", sceElemId, oldValue);
		sceElem=null;
	}
	@Column(name="EFF_DATE",nullable=true,length=7)
	public Calendar getEffDate(){
		return effDate;
	}
	public void setEffDate(Calendar effDate) throws java.sql.SQLException{
		if(isSame(effDate, getEffDate()))return;
		Calendar oldValue = getEffDate();
		this.effDate=effDate;
		setProperty("EFF_DATE", effDate, oldValue);
	}
	@Column(name="REG_CONT",nullable=true,length=24)
	public double getRegCont(){
		return regCont;
	}
	public void setRegCont(double regCont) throws java.sql.SQLException{
		if(isSame(regCont, getRegCont()))return;
		double oldValue = getRegCont();
		this.regCont=regCont;
		setProperty("REG_CONT", regCont, oldValue);
	}
	@Column(name="MAJOR_CONT",nullable=true,length=24)
	public double getMajorCont(){
		return majorCont;
	}
	public void setMajorCont(double majorCont) throws java.sql.SQLException{
		if(isSame(majorCont, getMajorCont()))return;
		double oldValue = getMajorCont();
		this.majorCont=majorCont;
		setProperty("MAJOR_CONT", majorCont, oldValue);
	}
	public CostStage getCostStage()throws java.sql.SQLException{
		if(costStage==null)
			costStage=CostStage.getInstance(getCostStageId());
		return costStage;
	}
	public void setCostStage(CostStage costStage)throws java.sql.SQLException{
		setCostStageId(costStage==null?0:costStage.getCostStageId());
		this.costStage=costStage;
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getProgramId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setProgramId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public SceElem getSceElem()throws java.sql.SQLException{
		if(sceElem==null)
			sceElem=SceElem.getInstance(getSceElemId());
		return sceElem;
	}
	public void setSceElem(SceElem sceElem)throws java.sql.SQLException{
		setSceElemId(sceElem==null?0:sceElem.getSceElemId());
		this.sceElem=sceElem;
	}
	public ProjContingency copy()throws java.sql.SQLException{
		ProjContingency cp = new ProjContingency((ProjContingency)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProjContingencyDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ProjContingencyDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getProjContId(),o.getProjContId())) diffs.add("PROJ_CONT_ID");
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		if(!isSame(getCostStageId(),o.getCostStageId())) diffs.add("COST_STAGE_ID");
		if(!isSame(getSceElemId(),o.getSceElemId())) diffs.add("SCE_ELEM_ID");
		if(!isSame(getEffDate(),o.getEffDate())) diffs.add("EFF_DATE");
		if(!isSame(getRegCont(),o.getRegCont())) diffs.add("REG_CONT");
		if(!isSame(getMajorCont(),o.getMajorCont())) diffs.add("MAJOR_CONT");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
