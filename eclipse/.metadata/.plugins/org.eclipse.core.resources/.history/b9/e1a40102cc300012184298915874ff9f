package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.SceProjDriver;
import com.sce.esp.object.model.SceProjRev;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SceProjDriverDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCE_PROJ_DRIVER_ID};
	public static enum PROPERTY{SCE_PROJ_DRIVER_ID,SCE_PROJ_REV_ID,CHANGE,CRITERIA,VIOLATION,MAGNITUDE,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SCEPROJDRIVERID_LIMIT = 9;
	public final static int SCEPROJREVID_LIMIT = 9;
	public final static int CHANGE_LIMIT = 1024;
	public final static int CRITERIA_LIMIT = 1024;
	public final static int VIOLATION_LIMIT = 1024;
	public final static int MAGNITUDE_LIMIT = 24;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 1024;
	public final static int ALTDATE1_LIMIT = 7;
	private int sceProjDriverId;
	private int sceProjRevId;
	private String change;
	private String criteria;
	private String violation;
	private double magnitude;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private SceProjRev sceProjRev;
	public static SceProjDriver getInstance(int sceProjDriverId)throws java.sql.SQLException{
		return getInstance(sceProjDriverId, true);
	}
	public static SceProjDriver getInstance(int sceProjDriverId, boolean fetch)throws java.sql.SQLException{
		if(isNull(sceProjDriverId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(sceProjDriverId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjDriver o = null;
		if(cache != null && cache.contains(SceProjDriver.class, pk))
			o = em.find(SceProjDriver.class, pk);
		if(o==null && getAICache().contains(SceProjDriver.class, pk))
			o = getAICache().find(SceProjDriver.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjDriver.class, pk);
		if(o==null && fetch && SceProjDriver.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjDriver(sceProjDriverId);
			getAICache().cache(SceProjDriver.class, o);
		}
		return o;
	}
	public static Collection<SceProjDriver> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjDriver> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjDriver> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjDriver o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjDriver> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjDriver> tq = em.createQuery(jpql,SceProjDriver.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjDriver> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjDriver> tq = em.createNamedQuery(name,SceProjDriver.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjDriverDAO(){}
	public SceProjDriverDAO(int sceProjDriverId){
		this.sceProjDriverId=sceProjDriverId;
	}
	public SceProjDriverDAO(SceProjDriverDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SceProjDriverDAO orig){
		this.sceProjRevId=orig.getSceProjRevId();
		this.change=orig.getChange();
		this.criteria=orig.getCriteria();
		this.violation=orig.getViolation();
		this.magnitude=orig.getMagnitude();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{sceProjDriverId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT50_SEQ",sequenceName="MDIT50_SEQ")
	@Column(name="SCE_PROJ_DRIVER_ID",nullable=false,length=9)
	public int getSceProjDriverId(){
		return sceProjDriverId;
	}
	public void setSceProjDriverId(int sceProjDriverId) throws java.sql.SQLException{
		if(isSame(sceProjDriverId, getSceProjDriverId()))return;
		int oldValue = getSceProjDriverId();
		this.sceProjDriverId=sceProjDriverId;
		setProperty("SCE_PROJ_DRIVER_ID", sceProjDriverId, oldValue);
	}
	@Column(name="SCE_PROJ_REV_ID",nullable=false,length=9)
	public int getSceProjRevId(){
		return sceProjRevId;
	}
	public void setSceProjRevId(int sceProjRevId) throws java.sql.SQLException{
		if(isSame(sceProjRevId, getSceProjRevId()))return;
		int oldValue = getSceProjRevId();
		this.sceProjRevId=sceProjRevId;
		setProperty("SCE_PROJ_REV_ID", sceProjRevId, oldValue);
		sceProjRev=null;
	}
	@Column(name="CHANGE",nullable=true,length=1024)
	public String getChange(){
		return change;
	}
	public void setChange(String change) throws java.sql.SQLException{
		if(isSame(change, getChange()))return;
		String oldValue = getChange();
		this.change=change;
		setProperty("CHANGE", change, oldValue);
	}
	@Column(name="CRITERIA",nullable=true,length=1024)
	public String getCriteria(){
		return criteria;
	}
	public void setCriteria(String criteria) throws java.sql.SQLException{
		if(isSame(criteria, getCriteria()))return;
		String oldValue = getCriteria();
		this.criteria=criteria;
		setProperty("CRITERIA", criteria, oldValue);
	}
	@Column(name="VIOLATION",nullable=true,length=1024)
	public String getViolation(){
		return violation;
	}
	public void setViolation(String violation) throws java.sql.SQLException{
		if(isSame(violation, getViolation()))return;
		String oldValue = getViolation();
		this.violation=violation;
		setProperty("VIOLATION", violation, oldValue);
	}
	@Column(name="MAGNITUDE",nullable=true,length=24)
	public double getMagnitude(){
		return magnitude;
	}
	public void setMagnitude(double magnitude) throws java.sql.SQLException{
		if(isSame(magnitude, getMagnitude()))return;
		double oldValue = getMagnitude();
		this.magnitude=magnitude;
		setProperty("MAGNITUDE", magnitude, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=1024)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public SceProjRev getSceProjRev()throws java.sql.SQLException{
		if(sceProjRev==null)
			sceProjRev=SceProjRev.getInstance(getSceProjRevId());
		return sceProjRev;
	}
	public void setSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		setSceProjRevId(sceProjRev==null?0:sceProjRev.getSceProjRevId());
		this.sceProjRev=sceProjRev;
	}
	public SceProjDriver copy()throws java.sql.SQLException{
		SceProjDriver cp = new SceProjDriver((SceProjDriver)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjDriverDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SceProjDriverDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getSceProjDriverId(),o.getSceProjDriverId())) diffs.add("SCE_PROJ_DRIVER_ID");
		if(!isSame(getSceProjRevId(),o.getSceProjRevId())) diffs.add("SCE_PROJ_REV_ID");
		if(!isSame(getChange(),o.getChange())) diffs.add("CHANGE");
		if(!isSame(getCriteria(),o.getCriteria())) diffs.add("CRITERIA");
		if(!isSame(getViolation(),o.getViolation())) diffs.add("VIOLATION");
		if(!isSame(getMagnitude(),o.getMagnitude())) diffs.add("MAGNITUDE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
