/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.SubUnitCostDAO;
@Entity
@Table(schema="MDI",name="MDI555_SUB_UNIT_COST")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM SubUnitCost o WHERE o.PLANYEAR=?1 AND o.EQUIP_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM SubUnitCost o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM SubUnitCost o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByElem", query="SELECT o FROM SubUnitCost o WHERE o.PLANYEAR=?1 AND o.ELEM_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI555_SUB_UNIT_COST o WHERE o.PLANYEAR=? AND o.EQUIP_ID=?"),//AUTO-GENERATED
})
public class SubUnitCost extends SubUnitCostDAO implements Serializable{	
	
	private static final long serialVersionUID = 3571244634283293502L;

	public static final double DESIGN_FACTOR = .1;
	
	/** The Constant DESIGN_FACTOR to specify cost in the year ahead.... */
	public static final double DESIGN_FACTOR_N = .8;
	public static final double DESIGN_FACTOR_N1 = .2;
	
	
	/** The Constant DESIGN_FACTORs 
	 * to specify cost in the year ahead and two years ahead
	 * updated 2-2-2010 from PMO Brenda Espino
	 * @author stonerbj 
	 */
	public static final double TSP_DESIGN_FACTOR_N = .55529;
	public static final double TSP_DESIGN_FACTOR_N1 = .31535;
	public static final double TSP_DESIGN_FACTOR_N2 = .12936;
	
	public static final double DSP_DESIGN_FACTOR_N = .49513;
	public static final double DSP_DESIGN_FACTOR_N1 = .49675;
	public static final double DSP_DESIGN_FACTOR_N2 = .00813;
	
	public static final double CKTS_DESIGN_FACTOR_N = .59431;
	public static final double CKTS_DESIGN_FACTOR_N1 = .33818;
	public static final double CKTS_DESIGN_FACTOR_N2 = .06751;
	
	
	/** 2010 TDBU Escalation Rates
	 *  from Clint Chien FP&A TDBU PAX 28324 2-2-2010
	 * @author stonerbj
	 */
	public static final double[] DIST_ESC_RATES = {0.018375,0.017938,0.023958,0.028975,0.030865,0.029034,0.027513,0.026104,0.026061,0.026556};
	public static final double[] TRANS_ESC_RATES = {0.017853,0.018271,0.025443,0.030698,0.034547,0.031703,0.025207,0.024464,0.025672,0.027888};
	
	
	public final static SubUnitCost defaultSubUnitCost = new SubUnitCost(0, "Miscellaneous");
	
	public SubUnitCost(){
	}
	public SubUnitCost(int planyear) {
		super(planyear,0);
	}
	public SubUnitCost(int planyear, String title){
		super(planyear,0);
		try {
			setTitle(title);
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	public SubUnitCost(int planyear, int equipId){
		super(planyear,equipId);
	}

	public SubUnitCost(SubUnitCost subUnitCost) {
		super(subUnitCost);
	}
	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString() {
		return getTitle() + " (" + getEstYear()+")";
	}
	
	
	
	/**
	 * Old method signature
	 * @param opYear
	 * @param year
	 * @return
	 * @throws SQLException
	 */
//	public int getCost(int opYear, int year) throws SQLException{	
//		return getCost(opYear, year, false);
//	}
	
	/**
	 * New method for 2010 GRC 
	 * @param opYear
	 * @param year
	 * @return
	 * @throws SQLException
	 */
	public int getCost(int opYear, int year, boolean isTSP) throws SQLException{	
		
		//Logic Prioir to 2-2-2010 
		if(getPlanyear()<2010){
			
			//Year of Cost
			if(opYear == year){			
				double escRate = Department.getInstance(getPlanyear()).getEscalationRate();
				int escYears = opYear-getEstYear();			
				return (int)Math.ceil(getUnitCost()*(1-SubUnitCost.DESIGN_FACTOR)*Math.pow(1+escRate,escYears));
			//Year Ahead Cost
			}else if(year == opYear - 1 ){
				double escRate = Department.getInstance(getPlanyear()).getEscalationRate();
				int escYears = opYear-getEstYear();
				return (int)Math.ceil((getUnitCost()*(SubUnitCost.DESIGN_FACTOR)*Math.pow(1+escRate,escYears)));
			}
		
		}else{
			
			double escRate = 1;
			for(int y = getEstYear()+1; y <= opYear; y++){
				if(y < 2010 || y > 2019)
					escRate *= (1 + Department.getInstance(getPlanyear()).getEscalationRate());
				else{
					if(isTSP)
						escRate *= (1 + TRANS_ESC_RATES[y-2010]);
					else
						escRate *= (1 + DIST_ESC_RATES[y-2010]);
				}
			}
			
			//Year of Cost
			if(opYear == year){		
				if(getElemId() == 4){ //DLines
					return (int)Math.round(getUnitCost()*(SubUnitCost.CKTS_DESIGN_FACTOR_N)*(escRate));	
				}
				else if (getElemId() ==  1 || getElemId() == 7){//DSubs or TSubs
					if(isTSP)
						return (int)Math.round(getUnitCost()*(SubUnitCost.TSP_DESIGN_FACTOR_N)*(escRate));
					else
						return (int)Math.round(getUnitCost()*(SubUnitCost.DSP_DESIGN_FACTOR_N)*(escRate));
				}
				else
					return (int)Math.round(getUnitCost()*(SubUnitCost.DESIGN_FACTOR_N)*(escRate));
				
			//Year Ahead Cost		
			}else if(year == opYear - 1 ){
				if(getElemId() == 4) //DLines
					return (int)Math.round(getUnitCost()*(SubUnitCost.CKTS_DESIGN_FACTOR_N1)*(escRate));	
				else if (getElemId() ==  1 || getElemId() == 7){//DSubs or TSubs
					if(isTSP)
						return (int)Math.round(getUnitCost()*(SubUnitCost.TSP_DESIGN_FACTOR_N1)*(escRate));
					else
						return (int)Math.round(getUnitCost()*(SubUnitCost.DSP_DESIGN_FACTOR_N1)*(escRate));
				}					
				else
					return (int)Math.round(getUnitCost()*(SubUnitCost.DESIGN_FACTOR_N1)*(escRate));
			}
			
			//2 Years Ahead Cost		
			else if(year == opYear - 2 ){
				if(getElemId() == 4) //DLines
					return (int)Math.round(getUnitCost()*(SubUnitCost.CKTS_DESIGN_FACTOR_N2)*(escRate));	
				else if (getElemId() ==  1 || getElemId() == 7){//DSubs or TSubs
					if(isTSP)
						return (int)Math.round(getUnitCost()*(SubUnitCost.TSP_DESIGN_FACTOR_N2)*(escRate));
					else
						return (int)Math.round(getUnitCost()*(SubUnitCost.DSP_DESIGN_FACTOR_N2)*(escRate));
				}
			}
		}
		
		return 0;
	}	
}
