package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MitigationKeyConsids;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class MitigationKeyConsidsDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{MITIGATION_KEY_CONSIDS_ID};
	public static enum PROPERTY{MITIGATION_KEY_CONSIDS_ID,NAME,CONSIDERATION,DESCRIPTION,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int MITIGATIONKEYCONSIDSID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int CONSIDERATION_LIMIT = 512;
	public final static int DESCRIPTION_LIMIT = 1024;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 1024;
	public final static int ALTDATE1_LIMIT = 7;
	private int mitigationKeyConsidsId;
	private String name;
	private String consideration;
	private String description;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	public static MitigationKeyConsids getInstance(int mitigationKeyConsidsId)throws java.sql.SQLException{
		return getInstance(mitigationKeyConsidsId, true);
	}
	public static MitigationKeyConsids getInstance(int mitigationKeyConsidsId, boolean fetch)throws java.sql.SQLException{
		if(isNull(mitigationKeyConsidsId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(mitigationKeyConsidsId);
		Cache cache = em.getEntityManagerFactory().getCache();
		MitigationKeyConsids o = null;
		if(cache != null && cache.contains(MitigationKeyConsids.class, pk))
			o = em.find(MitigationKeyConsids.class, pk);
		if(o==null && getAICache().contains(MitigationKeyConsids.class, pk))
			o = getAICache().find(MitigationKeyConsids.class, pk);
		if(o==null && fetch)
			o = em.find(MitigationKeyConsids.class, pk);
		if(o==null && fetch && MitigationKeyConsids.class.getAnnotation(AutoInsertable.class) != null){
			o = new MitigationKeyConsids(mitigationKeyConsidsId);
			getAICache().cache(MitigationKeyConsids.class, o);
		}
		return o;
	}
	public static Collection<MitigationKeyConsids> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<MitigationKeyConsids> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<MitigationKeyConsids> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM MitigationKeyConsids o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<MitigationKeyConsids> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<MitigationKeyConsids> tq = em.createQuery(jpql,MitigationKeyConsids.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<MitigationKeyConsids> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<MitigationKeyConsids> tq = em.createNamedQuery(name,MitigationKeyConsids.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public MitigationKeyConsidsDAO(){}
	public MitigationKeyConsidsDAO(int mitigationKeyConsidsId){
		this.mitigationKeyConsidsId=mitigationKeyConsidsId;
	}
	public MitigationKeyConsidsDAO(MitigationKeyConsidsDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(MitigationKeyConsidsDAO orig){
		this.name=orig.getName();
		this.consideration=orig.getConsideration();
		this.description=orig.getDescription();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{mitigationKeyConsidsId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIV40_SEQ",sequenceName="MDIV40_SEQ")
	@Column(name="MITIGATION_KEY_CONSIDS_ID",nullable=false,length=9)
	public int getMitigationKeyConsidsId(){
		return mitigationKeyConsidsId;
	}
	public void setMitigationKeyConsidsId(int mitigationKeyConsidsId) throws java.sql.SQLException{
		if(isSame(mitigationKeyConsidsId, getMitigationKeyConsidsId()))return;
		int oldValue = getMitigationKeyConsidsId();
		this.mitigationKeyConsidsId=mitigationKeyConsidsId;
		setProperty("MITIGATION_KEY_CONSIDS_ID", mitigationKeyConsidsId, oldValue);
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="CONSIDERATION",nullable=true,length=512)
	public String getConsideration(){
		return consideration;
	}
	public void setConsideration(String consideration) throws java.sql.SQLException{
		if(isSame(consideration, getConsideration()))return;
		String oldValue = getConsideration();
		this.consideration=consideration;
		setProperty("CONSIDERATION", consideration, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=1024)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=1024)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public MitigationKeyConsids copy()throws java.sql.SQLException{
		MitigationKeyConsids cp = new MitigationKeyConsids((MitigationKeyConsids)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(MitigationKeyConsidsDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(MitigationKeyConsidsDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getMitigationKeyConsidsId(),o.getMitigationKeyConsidsId())) diffs.add("MITIGATION_KEY_CONSIDS_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getConsideration(),o.getConsideration())) diffs.add("CONSIDERATION");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
