package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Program;
import com.sce.esp.object.model.ProgramYear;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ProgramYearDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PROGRAM_ID,YEAR};
	public static enum PROPERTY{PROGRAM_ID,YEAR,PROP_BUDGET,APP_BUDGET,ALT_BUDGET1,ALT_BUDGET2,ALT_BUDGET3,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_VARCHAR1,ALT_VARCHAR2,ALT_VARCHAR3,ALT_DATE1,ALT_DATE2,ALT_DATE3};
	public final static int PROGRAMID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int PROPBUDGET_LIMIT = 9;
	public final static int APPBUDGET_LIMIT = 9;
	public final static int ALTBUDGET1_LIMIT = 9;
	public final static int ALTBUDGET2_LIMIT = 9;
	public final static int ALTBUDGET3_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTDATE2_LIMIT = 7;
	public final static int ALTDATE3_LIMIT = 7;
	private int programId;
	private int year;
	private int propBudget;
	private int appBudget;
	private int altBudget1;
	private int altBudget2;
	private int altBudget3;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private String altVarchar1;
	private String altVarchar2;
	private String altVarchar3;
	private Calendar altDate1;
	private Calendar altDate2;
	private Calendar altDate3;
	private Program program;
	public static ProgramYear getInstance(int programId, int year)throws java.sql.SQLException{
		return getInstance(programId, year, true);
	}
	public static ProgramYear getInstance(int programId, int year, boolean fetch)throws java.sql.SQLException{
		if(isNull(programId, year))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(programId, year);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProgramYear o = null;
		if(cache != null && cache.contains(ProgramYear.class, pk))
			o = em.find(ProgramYear.class, pk);
		if(o==null && getAICache().contains(ProgramYear.class, pk))
			o = getAICache().find(ProgramYear.class, pk);
		if(o==null && fetch)
			o = em.find(ProgramYear.class, pk);
		if(o==null && fetch && ProgramYear.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProgramYear(programId, year);
			getAICache().cache(ProgramYear.class, o);
		}
		return o;
	}
	public static Collection<ProgramYear> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProgramYear> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProgramYear> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProgramYear o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProgramYear> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProgramYear> tq = em.createQuery(jpql,ProgramYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProgramYear> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProgramYear> tq = em.createNamedQuery(name,ProgramYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProgramYearDAO(){}
	public ProgramYearDAO(int programId, int year){
		this.programId=programId;
		this.year=year;
	}
	public ProgramYearDAO(ProgramYearDAO orig){
		super(orig);
		this.programId=orig.getProgramId();
		this.year=orig.getYear();
		copyFrom(orig);
	}
	public void copyFrom(ProgramYearDAO orig){
		this.propBudget=orig.getPropBudget();
		this.appBudget=orig.getAppBudget();
		this.altBudget1=orig.getAltBudget1();
		this.altBudget2=orig.getAltBudget2();
		this.altBudget3=orig.getAltBudget3();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altVarchar1=orig.getAltVarchar1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altDate1=orig.getAltDate1();
		this.altDate2=orig.getAltDate2();
		this.altDate3=orig.getAltDate3();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{programId, year};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PROGRAM_ID",nullable=false,length=9)
	public int getProgramId(){
		return programId;
	}
	public void setProgramId(int programId) throws java.sql.SQLException{
		if(isSame(programId, getProgramId()))return;
		int oldValue = getProgramId();
		this.programId=programId;
		setProperty("PROGRAM_ID", programId, oldValue);
		program=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="PROP_BUDGET",nullable=true,length=9)
	public int getPropBudget(){
		return propBudget;
	}
	public void setPropBudget(int propBudget) throws java.sql.SQLException{
		if(isSame(propBudget, getPropBudget()))return;
		int oldValue = getPropBudget();
		this.propBudget=propBudget;
		setProperty("PROP_BUDGET", propBudget, oldValue);
	}
	@Column(name="APP_BUDGET",nullable=true,length=9)
	public int getAppBudget(){
		return appBudget;
	}
	public void setAppBudget(int appBudget) throws java.sql.SQLException{
		if(isSame(appBudget, getAppBudget()))return;
		int oldValue = getAppBudget();
		this.appBudget=appBudget;
		setProperty("APP_BUDGET", appBudget, oldValue);
	}
	@Column(name="ALT_BUDGET1",nullable=true,length=9)
	public int getAltBudget1(){
		return altBudget1;
	}
	public void setAltBudget1(int altBudget1) throws java.sql.SQLException{
		if(isSame(altBudget1, getAltBudget1()))return;
		int oldValue = getAltBudget1();
		this.altBudget1=altBudget1;
		setProperty("ALT_BUDGET1", altBudget1, oldValue);
	}
	@Column(name="ALT_BUDGET2",nullable=true,length=9)
	public int getAltBudget2(){
		return altBudget2;
	}
	public void setAltBudget2(int altBudget2) throws java.sql.SQLException{
		if(isSame(altBudget2, getAltBudget2()))return;
		int oldValue = getAltBudget2();
		this.altBudget2=altBudget2;
		setProperty("ALT_BUDGET2", altBudget2, oldValue);
	}
	@Column(name="ALT_BUDGET3",nullable=true,length=9)
	public int getAltBudget3(){
		return altBudget3;
	}
	public void setAltBudget3(int altBudget3) throws java.sql.SQLException{
		if(isSame(altBudget3, getAltBudget3()))return;
		int oldValue = getAltBudget3();
		this.altBudget3=altBudget3;
		setProperty("ALT_BUDGET3", altBudget3, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_DATE2",nullable=true,length=7)
	public Calendar getAltDate2(){
		return altDate2;
	}
	public void setAltDate2(Calendar altDate2) throws java.sql.SQLException{
		if(isSame(altDate2, getAltDate2()))return;
		Calendar oldValue = getAltDate2();
		this.altDate2=altDate2;
		setProperty("ALT_DATE2", altDate2, oldValue);
	}
	@Column(name="ALT_DATE3",nullable=true,length=7)
	public Calendar getAltDate3(){
		return altDate3;
	}
	public void setAltDate3(Calendar altDate3) throws java.sql.SQLException{
		if(isSame(altDate3, getAltDate3()))return;
		Calendar oldValue = getAltDate3();
		this.altDate3=altDate3;
		setProperty("ALT_DATE3", altDate3, oldValue);
	}
	public Program getProgram()throws java.sql.SQLException{
		if(program==null)
			program=Program.getInstance(getProgramId());
		return program;
	}
	public void setProgram(Program program)throws java.sql.SQLException{
		setProgramId(program==null?0:program.getProgramId());
		this.program=program;
	}
	public ProgramYear copy()throws java.sql.SQLException{
		ProgramYear cp = new ProgramYear((ProgramYear)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProgramYearDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ProgramYearDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getProgramId(),o.getProgramId())) diffs.add("PROGRAM_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getPropBudget(),o.getPropBudget())) diffs.add("PROP_BUDGET");
		if(!isSame(getAppBudget(),o.getAppBudget())) diffs.add("APP_BUDGET");
		if(!isSame(getAltBudget1(),o.getAltBudget1())) diffs.add("ALT_BUDGET1");
		if(!isSame(getAltBudget2(),o.getAltBudget2())) diffs.add("ALT_BUDGET2");
		if(!isSame(getAltBudget3(),o.getAltBudget3())) diffs.add("ALT_BUDGET3");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltDate2(),o.getAltDate2())) diffs.add("ALT_DATE2");
		if(!isSame(getAltDate3(),o.getAltDate3())) diffs.add("ALT_DATE3");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
