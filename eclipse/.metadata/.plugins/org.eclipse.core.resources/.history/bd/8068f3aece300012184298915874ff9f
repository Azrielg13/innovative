/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util;

import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.text.NumberFormat;

import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

import com.sce.esp.dialog.ErrorDialog;

/**
 * <p>Title: SwingHelper</p>
 * <p>Description: Utility methods for Swing.</p>
 *
 * @author Frank M. Gonzales
 * @version 1.0
 */
public class SwingHelper {

    private SwingHelper() {
    }

    /**
     * Creates a <code>JMenuItem</code> object.
     *
     * @param aTitle    The title of the menu.
     * @param aAction   The action command.
     * @param aListener The action listener.
     * @return A JMenuItem object.
     */
    public static JMenuItem createJMenuItem(final String aTitle, final String aAction,
                                            final ActionListener aListener, final int aKeyEvent) {
        return createJMenuItem(aTitle, null, aAction, aListener, aKeyEvent);
    }

    /**
     * Creates a <code>JMenuItem</code> object.
     *
     * @param aTitle    The title of the menu.
     * @param aIcon     The icon.
     * @param aAction   The action command.
     * @param aListener The action listener.
     * @return A JMenuItem object.
     */
    public static JMenuItem createJMenuItem(final String aTitle, final Icon aIcon, final String aAction,
                                            final ActionListener aListener, final int aKeyEvent) {
        JMenuItem item = new JMenuItem(aTitle);
        item.setActionCommand(aAction);
        item.addActionListener(aListener);
        item.setIcon(aIcon);
        if (aKeyEvent >= 0) {
            item.setMnemonic(aKeyEvent);
        }
        return item;
    }

    /**
     * Creates a <code>JLabel</code> object.
     *
     * @param aText         The text of the label.
     * @param aIsAlignRight Set to <code>true</code> to align the text right on the
     *                      label; <code>false</code> to not.
     * @return Returns a JLabel object.
     */
    public static JLabel createJLabel(final String aText, final boolean aIsAlignRight) {
        return createJLabel(aText, aIsAlignRight, false);
    }

    /**
     * Creates a <code>JLabel</code> object.
     *
     * @param aText        The text of the label.
     * @param isAlignRight Set to <code>true</code> to align the text right on the
     *                     label; <code>false</code> to not.
     * @param aIsBold      Set to <code>true</code> to bold the text;
     *                     <code>false</code> to not.
     * @return Returns a JLabel object.
     */
    public static JLabel createJLabel(final String aText, final boolean isAlignRight, final boolean aIsBold) {
        JLabel l = new JLabel();
        if (aIsBold) {
            makeFontBold(l);
        }
        l.setText(aText);
        l.setHorizontalAlignment(isAlignRight ? SwingConstants.RIGHT : SwingConstants.LEFT);
        return l;
    }

    public static JLabel createJLabel(final String aText, final int aOrientation, final boolean aIsBold) {
        JLabel l = new JLabel();
        if (aIsBold) {
            makeFontBold(l);
        }
        l.setText(aText);
        l.setHorizontalAlignment(aOrientation);
        return l;
    }

    /**
     * Creates a JCheckBox object.
     *
     * @param aText   The text of the object.
     * @param aIsBold Set to <code>true</code> to bold the text;
     *                <code>false</code> to not.
     * @return A JCheckBox object.
     */
    public static JCheckBox createJCheckBox(final String aText, final boolean aIsBold) {
        JCheckBox checkBox = new JCheckBox();
        if (aIsBold) {
            makeFontBold(checkBox);
        }
        checkBox.setText(aText);
        return checkBox;
    }

    /**
     * Creates a JCheckBox object. By default, the text will not be bolded.
     *
     * @param aText The text of the object.
     * @return A JCheckBox object.
     */
    public static JCheckBox createJCheckBox(final String aText) {
        return createJCheckBox(aText, false);
    }

    /**
     * Changes the font of the component to bold.
     *
     * @param aComp The component.
     */
    public static void makeFontBold(final Component aComp) {
        Font oldFont = aComp.getFont();
        Font newFont = new Font(oldFont.getName(), Font.BOLD, oldFont.getSize());
        aComp.setFont(newFont);
    }

    /**
     * Changes the font of the component to normal.
     *
     * @param aComp The component.
     */
    public static void makeFontNormal(final Component aComp) {
        Font oldFont = aComp.getFont();
        Font newFont = new Font(oldFont.getName(), Font.PLAIN, oldFont.getSize());
        aComp.setFont(newFont);
    }

    /**
     * Shows the Error window.
     *
     * @param aParent    The parent window to show the error from.
     * @param aThrowable The <code>Throwable</code> object. This is used to display
     *                   the stack trace.
     * @param aIsFatal   If <code>true</code> a window with an error message and a
     *                   stack trace will be displayed. If <code>false</code>, only
     *                   the message will be displayed.
     */
    public static void showError(Component aParent, String aTitle, Throwable aThrowable, final boolean aIsFatal) {
    	if (aIsFatal)
    		ErrorDialog.showError(aParent, aTitle, aThrowable);
    	else
    		JOptionPane.showMessageDialog(aParent, aThrowable.getMessage(), aTitle, JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Prompts the user to exit the application.
     *
     * @param container The container to place the message box.
     * @return Returns <code>true</code> if the user wants to exit;
     *         <code>false</code> if not.
     */
    public static boolean isExitApplication(Container container) {
        int confirm = JOptionPane.showOptionDialog(container, "Would you like to exit?", "Exit Confirmation",
                                                   JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null,
                                                   null);
        return confirm == 0;
    }

    /**
     * Creates a EtchedBorder for the Panel containing caption.
     *
     * @param aPanel   The panel.
     * @param aCaption The caption.
     */
    public static void createGroupBox(JPanel aPanel, String aCaption) {
        aPanel.setBorder(new TitledBorder(new EtchedBorder(), aCaption));
    }

    /**
     * Gets the format for display money.
     *
     * @return Returns a <code>DecimalFormat</code>.
     */
    public static DecimalFormat getMoneyFormat() {
        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance();
        df.applyPattern("###########0.00");
        return df;
    }

    /**
     * Gets the format for display a number.
     *
     * @return Returns a <code>DecimalFormat</code>.
     */
    public static DecimalFormat getNumberFormat() {
        DecimalFormat df = (DecimalFormat) NumberFormat.getNumberInstance();
        df.applyPattern("###########0");
        return df;
    }

    /**
     * Creates a JTextArea object, setting it editable, setting line wrapping to
     * true, setting WrapStyleWord to true, and places it in a JScrollPane. This
     * method will set the GridBagConstraints <code>anchor</code> attribute to
     * GridBagConstraints.NORTHWEST, and the <code>fill</code> attribute to
     * GridBagConstraints.HORIZONTAL and set the constraints to the GridBag
     * object.
     * <p/>
     * This method will set the JTextArea box to have 5 rows and 20 columns.
     *
     * @param aGridBag         The GridBag object.
     * @param aConstraints     The GridBagConstraints object.
     * @param aIsTransferFocus Set to <code>true</code> to transfer focus to the next
     *                         object when the user presses the Tab button. Set to
     *                         <code>false</code> to include the tab character inside the
     *                         JTextArea.
     * @return Returns the JScrollPane containing the JTextArea object.
     */
    public static JScrollPane getTextAreaWithScroll(final GridBagLayout aGridBag,
                                                    final GridBagConstraints aConstraints,
                                                    final boolean aIsTransferFocus) {
        return getTextAreaWithScroll(aGridBag, aConstraints, 5, 20, aIsTransferFocus);
    }

    /**
     * Creates a JTextArea object, setting it editable, setting line wrapping to
     * true, setting WrapStyleWord to true, and places it in a JScrollPane. This
     * method will set the GridBagConstraints <code>anchor</code> attribute to
     * GridBagConstraints.NORTHWEST, and the <code>fill</code> attribute to
     * GridBagConstraints.HORIZONTAL and set the constraints to the GridBag
     * object.
     *
     * @param aGridBag         The GridBag object.
     * @param aConstraints     The GridBagConstraints object.
     * @param aRows            The number of rows for the JTextArea.
     * @param aCols            The number of columns for the JTextArea.
     * @param aIsTransferFocus Set to <code>true</code> to transfer focus to the next
     *                         object when the user presses the Tab button. Set to
     *                         <code>false</code> to include the tab character inside the
     *                         JTextArea.
     * @return Returns the JScrollPane containing the JTextArea object.
     */
    public static JScrollPane getTextAreaWithScroll(final GridBagLayout aGridBag,
                                                    final GridBagConstraints aConstraints, final int aRows, final int aCols,
                                                    final boolean aIsTransferFocus) {
        JScrollPane scroll = getTextAreaWithScroll(aRows, aCols, aIsTransferFocus);
        aConstraints.anchor = GridBagConstraints.NORTHWEST;
        aConstraints.fill = GridBagConstraints.HORIZONTAL;
        aGridBag.setConstraints(scroll, aConstraints);
        return scroll;
    }

    /**
     * Creates a JTextArea object, setting it editable, setting line wrapping to
     * true, setting WrapStyleWord to true, and places it in a JScrollPane.
     *
     * @param aRows            The number of rows for the JTextArea.
     * @param aCols            The number of columns for the JTextArea.
     * @param aIsTransferFocus Set to <code>true</code> to transfer focus to the next
     *                         object when the user presses the Tab button. Set to
     *                         <code>false</code> to include the tab character inside the
     *                         JTextArea.
     * @return Returns the JScrollPane containing the JTextArea object.
     */
    public static JScrollPane getTextAreaWithScroll(final int aRows, final int aCols,
                                                    final boolean aIsTransferFocus) {
        JTextArea txt = new JTextArea(aRows, aCols);
        txt.setEditable(true);
        txt.setLineWrap(true);
        txt.setWrapStyleWord(true);
        if (aIsTransferFocus) {
            txt.addKeyListener(new KeyAdapter() {
                public void keyPressed(KeyEvent e) {
                    if (e.getKeyCode() == KeyEvent.VK_TAB) {
                        e.getComponent().transferFocus();
                        e.consume();
                    }
                }
            });
        }
        return new JScrollPane(txt);
    }

    /**
     * Creates a JTextField to be placed in the GridBagLayout layout manager.
     * This method will set the GridBagConstraints <code>anchor</code>
     * attribute to GridBagConstraints.NORTHWEST, and the <code>fill</code>
     * attribute to GridBagConstraints.HORIZONTAL and set the constraints to the
     * GridBag object.
     * <p/>
     * This method sets the default column size of the JTextBox to 15.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @return Returns the JTextBox.
     */
    public static JTextField getTextField(final GridBagLayout aGridBag, final GridBagConstraints aConstraints) {
        return getTextField(aGridBag, aConstraints, 15);
    }

    /**
     * Creates a JTextField to be placed in the GridBagLayout layout manager.
     * This method will set the GridBagConstraints <code>anchor</code>
     * attribute to GridBagConstraints.NORTHWEST, and the <code>fill</code>
     * attribute to GridBagConstraints.HORIZONTAL and set the constraints to the
     * GridBag object.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @param aColumnSize  The default column size of the JTextBox.
     * @return Returns the JTextBox.
     */
    public static JTextField getTextField(final GridBagLayout aGridBag,
                                          final GridBagConstraints aConstraints, final int aColumnSize) {
        JTextField fld = new JTextField(aColumnSize);
        aConstraints.fill = GridBagConstraints.HORIZONTAL;
        aConstraints.anchor = GridBagConstraints.NORTHWEST;
        aGridBag.setConstraints(fld, aConstraints);
        return fld;
    }

    /**
     * Creates a JCheckBox to be placed in the GridBagLayout layout manager.
     * This method will set the GridBagConstraints <code>anchor</code>
     * attribute to GridBagConstraints.NORTHWEST, and the <code>fill</code>
     * attribute to GridBagConstraints.HORIZONTAL and set the constraints to the
     * GridBag object.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @param aLabel       The text to assign to the JLabel.
     * @return Returns the JCheckBox.
     */
    public static JCheckBox getCheckBox(final GridBagLayout aGridBag, final GridBagConstraints aConstraints,
                                        final String aLabel) {
        JCheckBox cb = new JCheckBox(aLabel);
        aConstraints.fill = GridBagConstraints.HORIZONTAL;
        aConstraints.anchor = GridBagConstraints.NORTHWEST;
        aGridBag.setConstraints(cb, aConstraints);
        return cb;
    }

    /**
     * Creates a JLabel to be placed in the GridBagLayout layout manager and
     * assigns a blank space to the text. This method will set the
     * GridBagConstraints <code>anchor</code> attribute to
     * GridBagConstraints.NORTHWEST, and the <code>fill</code> attribute to
     * GridBagConstraints.HORIZONTAL and set the constraints to the GridBag
     * object.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @return Returns the JLabel.
     */
    public static JLabel getFiller(final GridBagLayout aGridBag, final GridBagConstraints aConstraints) {
        JLabel filler = new JLabel("");
        filler.setFocusable(false);
        aConstraints.fill = GridBagConstraints.BOTH;
        aGridBag.setConstraints(filler, aConstraints);
        return filler;
    }

    /**
     * Creates a JLabel to be placed in the GridBagLayout layout manager and
     * assigns the aText value to the text. This method will set the
     * GridBagConstraints <code>anchor</code> attribute to
     * GridBagConstraints.NORTHWEST, and the <code>fill</code> attribute to
     * GridBagConstraints.HORIZONTAL and set the constraints to the GridBag
     * object.
     * <p/>
     * This method will align the text to the right and bold the text.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @return Returns the JLabel.
     */
    public static JLabel getLabelRtBd(final GridBagLayout aGridBag, final GridBagConstraints aConstraints,
                                      final String aText) {
        JLabel lbl = createJLabel(aText, true, true);
        return getLabel(aGridBag, aConstraints, lbl);
    }

    /**
     * Creates a JLabel to be placed in the GridBagLayout layout manager and
     * assigns the aText value to the text. This method will set the
     * GridBagConstraints <code>anchor</code> attribute to
     * GridBagConstraints.NORTHWEST, and the <code>fill</code> attribute to
     * GridBagConstraints.HORIZONTAL and set the constraints to the GridBag
     * object.
     * <p/>
     * This method will align the text to the right and NOT bold the text.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @return Returns the JLabel.
     */
    public static JLabel getLabelRt(final GridBagLayout aGridBag, final GridBagConstraints aConstraints,
                                    final String aText) {
        JLabel lbl = createJLabel(aText, true, false);
        return getLabel(aGridBag, aConstraints, lbl);
    }

    /**
     * Creates a JLabel to be placed in the GridBagLayout layout manager and
     * assigns the aText value to the text. This method will set the
     * GridBagConstraints <code>anchor</code> attribute to
     * GridBagConstraints.NORTHWEST, and the <code>fill</code> attribute to
     * GridBagConstraints.HORIZONTAL and set the constraints to the GridBag
     * object.
     * <p/>
     * This method will align the text to the center and bold the text.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @return Returns the JLabel.
     */
    public static JLabel getLabelCtBd(final GridBagLayout aGridBag, final GridBagConstraints aConstraints,
                                      final String aText) {
        JLabel l = new JLabel();
        makeFontBold(l);
        l.setText(aText);
        l.setHorizontalAlignment(SwingConstants.CENTER);
        return l;

    }

    /**
     * Creates a JLabel to be placed in the GridBagLayout layout manager and
     * assigns the aText value to the text. This method will set the
     * GridBagConstraints <code>anchor</code> attribute to
     * GridBagConstraints.NORTHWEST, and the <code>fill</code> attribute to
     * GridBagConstraints.HORIZONTAL and set the constraints to the GridBag
     * object.
     * <p/>
     * This method will align the text to the left and bold the text.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @return Returns the JLabel.
     */
    public static JLabel getLabelLfBd(final GridBagLayout aGridBag, final GridBagConstraints aConstraints,
                                      final String aText) {
        JLabel lbl = createJLabel(aText, false, true);
        return getLabel(aGridBag, aConstraints, lbl);
    }

    /**
     * Creates a JLabel to be placed in the GridBagLayout layout manager and
     * assigns the aText value to the text. This method will set the
     * GridBagConstraints <code>anchor</code> attribute to
     * GridBagConstraints.NORTHWEST, and the <code>fill</code> attribute to
     * GridBagConstraints.HORIZONTAL and set the constraints to the GridBag
     * object.
     * <p/>
     * This method will align the text to the left and NOT bold the text.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @return Returns the JLabel.
     */
    public static JLabel getLabelLf(final GridBagLayout aGridBag, final GridBagConstraints aConstraints,
                                    final String aText) {
        JLabel lbl = createJLabel(aText, false, false);
        return getLabel(aGridBag, aConstraints, lbl);
    }

    /**
     * Modifies the label aLbl to be placed in the GridBagLayout layout manager.
     * This method will set the GridBagConstraints <code>anchor</code>
     * attribute to GridBagConstraints.NORTHWEST, and the <code>fill</code>
     * attribute to GridBagConstraints.HORIZONTAL and set the constraints to the
     * GridBag object.
     *
     * @param aGridBag     The GridBag object.
     * @param aConstraints The GridBagConstraints object.
     * @return Returns the JLabel.
     */
    private static JLabel getLabel(final GridBagLayout aGridBag, final GridBagConstraints aConstraints,
                                   JLabel aLbl) {
        aLbl.setFocusable(false);
        aConstraints.fill = GridBagConstraints.HORIZONTAL;
        aConstraints.anchor = GridBagConstraints.NORTHEAST;
        aGridBag.setConstraints(aLbl, aConstraints);
        return aLbl;
    }

    /**
     * Centers the aContainer on the aParent.
     *
     * @param aContainer The container.
     * @param aParent    The container to center on aContainer.
     */
    public static void centerOnParent(final Container aContainer, final Container aParent) {
        aContainer.setLocation((aParent.getWidth() / 2) - (aContainer.getWidth() / 2),
                               (aParent.getHeight() / 2) - (aContainer.getHeight() / 2));
    }

    /**
     * Creates a group box around the aScroll containing the text in the aTitle
     * parameter. The group box is using the EtchedBorder and has an italic
     * font, using the GuiContants.BORDER_FONT size 12 font. The title color of
     * the group box will be the selection background color of the JTable.
     *
     * @param aScroll The JScrollPane to set the border to.
     * @param aTable  The JTable to use to get the selection background.
     * @param aTitle  The title to place on the group box.
     */
    public static void setTableBorder(final JScrollPane aScroll, final JTable aTable, final String aTitle) {
        TitledBorder b = new TitledBorder(new EtchedBorder(), aTitle);
        b.setTitleColor(aTable.getSelectionBackground());
        aScroll.setBorder(b);
    }

    /**
     * Assigns the DefaultTableCellRenderer implementation to each column in the
     * table. sets the orientation of each cell, and provides the ability to
     * stagger the background color of each row.
     *
     * @param aTable       The JTable.
     * @param aOrientation The Orientation. SwingConstants.LEFT, SwingConstants.RIGHT,
     *                     etc.
     */
    public static void setDefaultCellRenderer(final JTable aTable, final int aOrientation) {
        TableColumnModel model = aTable.getColumnModel();
        DefaultTableCellRenderer ren = new DefaultTableCellRenderer();
        ren.setHorizontalAlignment(aOrientation);
        for (int i = 0, n = model.getColumnCount(); i < n; i++) {
            TableColumn col = model.getColumn(i);
            col.setCellRenderer(ren);
        }
    }

    /**
     * Sets the progress bar's maximum value (stored in the progress bar's data
     * model) to aMaximum. This method wraps this event in a Runnable and sends
     * the request to the event-dispatching queue using
     * SwingUtilities.invokeLater.
     *
     * @param aProgressBar The progress bar to modify. Can be <code>null</code>. If
     *                     <code>null</code> then method ends.
     * @param aMaximum     The maximum value to set.
     */
    public static void setProgressMaximum(final JProgressBar aProgressBar, final int aMaximum) {
        if (aProgressBar == null) {
            return;
        }
        Runnable runner = new Runnable() {
            public void run() {
                aProgressBar.setMaximum(aMaximum);
            }
        };
        SwingUtilities.invokeLater(runner);
    }

    /**
     * Sets the progress bar's value (stored in the progress bar's data model)
     * to aValue. This method wraps this event in a Runnable and sends the
     * request to the event-dispatching queue using SwingUtilities.invokeLater.
     *
     * @param aProgressBar The progress bar to modify. Can be <code>null</code>. If
     *                     <code>null</code> then method ends.
     * @param aValue       The value to set to the Progress Bar.
     */
    public static void setProgressValue(final JProgressBar aProgressBar, final int aValue) {
        if (aProgressBar == null) {
            return;
        }
        Runnable runner = new Runnable() {
            public void run() {
                aProgressBar.setValue(aValue);
            }
        };
        SwingUtilities.invokeLater(runner);
    }

    /**
     * Sets the progress string value (stored in the progress bar's data model)
     * to aValue. This method wraps this event in a Runnable and sends the
     * request to the event-dispatching queue using SwingUtilities.invokeLater.
     *
     * @param aProgressBar The progress bar to modify. Can be <code>null</code>. If
     *                     <code>null</code> then method ends.
     * @param aValue       The String value to set to the Progress Bar.
     */
    public static void setProgressString(final JProgressBar aProgressBar, final String aValue) {
        Runnable runner = new Runnable() {
            public void run() {
                aProgressBar.setString(aValue);
            }
        };
        SwingUtilities.invokeLater(runner);
    }
}