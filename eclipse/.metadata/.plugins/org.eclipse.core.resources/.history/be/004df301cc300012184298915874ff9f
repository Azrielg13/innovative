package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.ElemEscRate;
import com.sce.esp.object.model.SceElem;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ElemEscRateDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,SCE_ELEM_ID,YEAR,EFF_DATE,LABOR_ESC_RATE,NON_LABOR_ESC_RATE};
	public final static int ID_LIMIT = 9;
	public final static int SCEELEMID_LIMIT = 9;
	public final static int YEAR_LIMIT = 9;
	public final static int EFFDATE_LIMIT = 7;
	public final static int LABORESCRATE_LIMIT = 24;
	public final static int NONLABORESCRATE_LIMIT = 24;
	private int id;
	private int sceElemId;
	private int year;
	private Calendar effDate;
	private double laborEscRate;
	private double nonLaborEscRate;
	private SceElem sceElem;
	public static ElemEscRate getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static ElemEscRate getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		ElemEscRate o = null;
		if(cache != null && cache.contains(ElemEscRate.class, pk))
			o = em.find(ElemEscRate.class, pk);
		if(o==null && getAICache().contains(ElemEscRate.class, pk))
			o = getAICache().find(ElemEscRate.class, pk);
		if(o==null && fetch)
			o = em.find(ElemEscRate.class, pk);
		if(o==null && fetch && ElemEscRate.class.getAnnotation(AutoInsertable.class) != null){
			o = new ElemEscRate(id);
			getAICache().cache(ElemEscRate.class, o);
		}
		return o;
	}
	public static Collection<ElemEscRate> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ElemEscRate> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ElemEscRate> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ElemEscRate o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ElemEscRate> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ElemEscRate> tq = em.createQuery(jpql,ElemEscRate.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ElemEscRate> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ElemEscRate> tq = em.createNamedQuery(name,ElemEscRate.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ElemEscRateDAO(){}
	public ElemEscRateDAO(int id){
		this.id=id;
	}
	public ElemEscRateDAO(ElemEscRateDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ElemEscRateDAO orig){
		this.sceElemId=orig.getSceElemId();
		this.year=orig.getYear();
		this.effDate=orig.getEffDate();
		this.laborEscRate=orig.getLaborEscRate();
		this.nonLaborEscRate=orig.getNonLaborEscRate();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT19_SEQ",sequenceName="MDIT19_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="SCE_ELEM_ID",nullable=false,length=9)
	public int getSceElemId(){
		return sceElemId;
	}
	public void setSceElemId(int sceElemId) throws java.sql.SQLException{
		if(isSame(sceElemId, getSceElemId()))return;
		int oldValue = getSceElemId();
		this.sceElemId=sceElemId;
		setProperty("SCE_ELEM_ID", sceElemId, oldValue);
		sceElem=null;
	}
	@Column(name="YEAR",nullable=false,length=9)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="EFF_DATE",nullable=false,length=7)
	public Calendar getEffDate(){
		return effDate;
	}
	public void setEffDate(Calendar effDate) throws java.sql.SQLException{
		if(isSame(effDate, getEffDate()))return;
		Calendar oldValue = getEffDate();
		this.effDate=effDate;
		setProperty("EFF_DATE", effDate, oldValue);
	}
	@Column(name="LABOR_ESC_RATE",nullable=true,length=24)
	public double getLaborEscRate(){
		return laborEscRate;
	}
	public void setLaborEscRate(double laborEscRate) throws java.sql.SQLException{
		if(isSame(laborEscRate, getLaborEscRate()))return;
		double oldValue = getLaborEscRate();
		this.laborEscRate=laborEscRate;
		setProperty("LABOR_ESC_RATE", laborEscRate, oldValue);
	}
	@Column(name="NON_LABOR_ESC_RATE",nullable=true,length=24)
	public double getNonLaborEscRate(){
		return nonLaborEscRate;
	}
	public void setNonLaborEscRate(double nonLaborEscRate) throws java.sql.SQLException{
		if(isSame(nonLaborEscRate, getNonLaborEscRate()))return;
		double oldValue = getNonLaborEscRate();
		this.nonLaborEscRate=nonLaborEscRate;
		setProperty("NON_LABOR_ESC_RATE", nonLaborEscRate, oldValue);
	}
	public SceElem getSceElem()throws java.sql.SQLException{
		if(sceElem==null)
			sceElem=SceElem.getInstance(getSceElemId());
		return sceElem;
	}
	public void setSceElem(SceElem sceElem)throws java.sql.SQLException{
		setSceElemId(sceElem==null?0:sceElem.getSceElemId());
		this.sceElem=sceElem;
	}
	public ElemEscRate copy()throws java.sql.SQLException{
		ElemEscRate cp = new ElemEscRate((ElemEscRate)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ElemEscRateDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ElemEscRateDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getSceElemId(),o.getSceElemId())) diffs.add("SCE_ELEM_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getEffDate(),o.getEffDate())) diffs.add("EFF_DATE");
		if(!isSame(getLaborEscRate(),o.getLaborEscRate())) diffs.add("LABOR_ESC_RATE");
		if(!isSame(getNonLaborEscRate(),o.getNonLaborEscRate())) diffs.add("NON_LABOR_ESC_RATE");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(sceElem != null && sceElem.isNewInstance())
				sceElem.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
