/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util.ui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.jidesoft.combobox.ColorComboBox;


public abstract class FreeHand extends JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 7051960129586803537L;
	BufferedImage image;
	Color color;
	Stroke stroke;

	public FreeHand(){
		color = Color.black;
		stroke = new BasicStroke(1f, BasicStroke.CAP_BUTT,
				BasicStroke.JOIN_MITER);
		this.setBackground(Color.white);
		loadImage();

	}

	public BufferedImage getImage(){
		return image;
	}

	public void setImage(BufferedImage image){
		this.image = image;
	}

	protected void paintComponent(Graphics g){
		super.paintComponent(g);
		if(image == null)
			initImage();
		g.drawImage(image, 0, 0, this);
	}

	public void draw(Point start, Point end){
		Graphics2D g2 = image.createGraphics();
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2.setPaint(color);
		g2.setStroke(stroke);
		g2.draw(new Line2D.Double(start, end));
		g2.dispose();
		repaint();
	}

	private void clearImage(){
		initImage();
		repaint();
	}

	public abstract void saveImage();

	public abstract void loadImage();

	private void initImage(){

		int w = getWidth();
		int h = getHeight();
		image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
		Graphics2D g2 = image.createGraphics();
		g2.setPaint(getBackground());
		g2.fillRect(0,0,w,h);

		// X and line for signature
		g2.setPaint(Color.black);
		g2.drawLine(10, h-20, w-10, h-20);
		g2.drawString(" X ", 10, h-25);

		g2.dispose();
	}

	public JPanel getColorPanel(){

		Color[] colors = {Color.black, Color.blue, Color.red};
		String[] colorNames = {"Black", "Blue", "Red"};

		ActionListener l = new ActionListener(){
			public void actionPerformed(ActionEvent e){
				JButton button = (JButton)e.getSource();
				color = button.getForeground();
			}

		};

		JPanel panel = new JPanel(new GridLayout(1,0));
		panel.add(new JLabel("Pen Color:"));

		for(int j = 0; j < colors.length; j++){

			JButton button = new JButton(" "+colorNames[j]);
			button.setFocusPainted(false); 
			//	            button.setBackground(colors[j]);
			button.setForeground(colors[j]); 
			button.addActionListener(l);
			panel.add(button);
		}

		final ColorComboBox colorComboBox = new ColorComboBox();
		colorComboBox.setSelectedColor(Color.black);
		colorComboBox.setColorValueVisible(false);
		colorComboBox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				color = colorComboBox.getSelectedColor();
			}
		});

		panel.add(colorComboBox);


		return panel;
	}

	public JPanel getControlPanel(){

		JButton save = new JButton("Save");
		save.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				saveImage();
			}
		});

		JButton clear = new JButton("Clear");
		clear.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
				clearImage();
			}
		});
		final JSlider slider = new JSlider(JSlider.HORIZONTAL, 1, 6, 1);
		slider.addChangeListener(new ChangeListener(){
			public void stateChanged(ChangeEvent e){
				float value = ((Integer)slider.getValue()).floatValue();
				stroke = new BasicStroke(value, BasicStroke.CAP_BUTT, BasicStroke.JOIN_MITER);
			}

		});
		JPanel panel = new JPanel();
		panel.add(new JLabel("Pen Thickness"));
		panel.add(slider);
		panel.add(clear);
		panel.add(save);
		return panel;
	}


}
