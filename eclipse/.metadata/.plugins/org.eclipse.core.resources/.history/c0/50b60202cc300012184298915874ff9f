package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.Simulation;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.SubVar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SubVarDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,CAP_ID};
	public static enum PROPERTY{PLANYEAR,CAP_ID,SUB_ID,CAP_NUM,HIGHSIDE,CAP_TYPE,KVAR,DISABLED,CAP_DP,NOTE,SIM_ID,IN_SERVICE_PROJ_ID,OUT_SERVICE_PROJ_ID,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int CAPID_LIMIT = 9;
	public final static int SUBID_LIMIT = 9;
	public final static int CAPNUM_LIMIT = 10;
	public final static int HIGHSIDE_LIMIT = 1;
	public final static int CAPTYPE_LIMIT = 2;
	public final static int KVAR_LIMIT = 6;
	public final static int DISABLED_LIMIT = 1;
	public final static int CAPDP_LIMIT = 64;
	public final static int NOTE_LIMIT = 256;
	public final static int SIMID_LIMIT = 9;
	public final static int INSERVICEPROJID_LIMIT = 9;
	public final static int OUTSERVICEPROJID_LIMIT = 9;
	private SubVar ptr;
	private int planyear;
	private int capId;
	private int subId;
	private String capNum;
	private boolean highside;
	private int capType;
	private int kvar;
	private boolean disabled;
	private String capDp;
	private String note;
	private int simId = 0;
	private int inServiceProjId;
	private int outServiceProjId;
	private Proj proj;
	private Proj proj2;
	private Simulation simulation;
	private Sub sub;
	public static SubVar getInstance(int planyear, int simId, int capId)throws java.sql.SQLException{
		return getInstance(planyear, simId, capId, true);
	}
	public static SubVar getInstance(int planyear, int simId, int capId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, capId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, capId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SubVar o = null;
		if(cache != null && cache.contains(SubVar.class, pk))
			o = em.find(SubVar.class, pk);
		if(o==null && getAICache().contains(SubVar.class, pk))
			o = getAICache().find(SubVar.class, pk);
		if(o==null && fetch)
			o = em.find(SubVar.class, pk);
		if(o==null && fetch && SubVar.class.getAnnotation(AutoInsertable.class) != null){
			o = new SubVar(planyear, simId, capId);
			getAICache().cache(SubVar.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<SubVar> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SubVar> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SubVar> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SubVar o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SubVar> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubVar> tq = em.createQuery(jpql,SubVar.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SubVar> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubVar> tq = em.createNamedQuery(name,SubVar.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SubVarDAO(){}
	public SubVarDAO(int planyear, int simId, int capId){
		this.planyear=planyear;
		this.simId=simId;
		this.capId=capId;
	}
	public SubVarDAO(SubVarDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		copyFrom(orig);
	}
	public void copyFrom(SubVarDAO orig){
		this.subId=orig.getSubId();
		this.capNum=orig.getCapNum();
		this.highside=orig.isHighside();
		this.capType=orig.getCapType();
		this.kvar=orig.getKvar();
		this.disabled=orig.isDisabled();
		this.capDp=orig.getCapDp();
		this.note=orig.getNote();
		this.inServiceProjId=orig.getInServiceProjId();
		this.outServiceProjId=orig.getOutServiceProjId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, capId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public SubVar getPtr(){
		return ptr;
	}
	public void setPtr(SubVar ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getCapId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI460_SEQ",sequenceName="MDI460_SEQ")
	@Column(name="CAP_ID",nullable=false,length=9)
	public int getCapId(){
		return capId;
	}
	public void setCapId(int capId) throws java.sql.SQLException{
		if(isSame(capId, getCapId()))return;
		int oldValue = getCapId();
		this.capId=capId;
		setProperty("CAP_ID", capId, oldValue);
	}
	@Column(name="SUB_ID",nullable=false,length=9)
	public int getSubId(){
		if(getPtr()!=null)
			return getPtr().getSubId();
		return subId;
	}
	public void setSubId(int subId) throws java.sql.SQLException{
		if(isSame(subId, getSubId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getSubId();
		this.subId=subId;
		setProperty("SUB_ID", subId, oldValue);
		sub=null;
	}
	@Column(name="CAP_NUM",nullable=false,length=10)
	public String getCapNum(){
		if(getPtr()!=null)
			return getPtr().getCapNum();
		return capNum;
	}
	public void setCapNum(String capNum) throws java.sql.SQLException{
		if(isSame(capNum, getCapNum()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getCapNum();
		this.capNum=capNum;
		setProperty("CAP_NUM", capNum, oldValue);
	}
	@Column(name="HIGHSIDE",nullable=true,length=1)
	public boolean isHighside(){
		if(getPtr()!=null)
			return getPtr().isHighside();
		return highside;
	}
	public void setHighside(boolean highside) throws java.sql.SQLException{
		if(isSame(highside, isHighside()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isHighside();
		this.highside=highside;
		setProperty("HIGHSIDE", highside, oldValue);
	}
	@Column(name="CAP_TYPE",nullable=false,length=2)
	public int getCapType(){
		if(getPtr()!=null)
			return getPtr().getCapType();
		return capType;
	}
	public void setCapType(int capType) throws java.sql.SQLException{
		if(isSame(capType, getCapType()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getCapType();
		this.capType=capType;
		setProperty("CAP_TYPE", capType, oldValue);
	}
	@Column(name="KVAR",nullable=true,length=6)
	public int getKvar(){
		if(getPtr()!=null)
			return getPtr().getKvar();
		return kvar;
	}
	public void setKvar(int kvar) throws java.sql.SQLException{
		if(isSame(kvar, getKvar()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getKvar();
		this.kvar=kvar;
		setProperty("KVAR", kvar, oldValue);
	}
	@Column(name="DISABLED",nullable=true,length=1)
	public boolean isDisabled(){
		if(getPtr()!=null)
			return getPtr().isDisabled();
		return disabled;
	}
	public void setDisabled(boolean disabled) throws java.sql.SQLException{
		if(isSame(disabled, isDisabled()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		boolean oldValue = isDisabled();
		this.disabled=disabled;
		setProperty("DISABLED", disabled, oldValue);
	}
	@Column(name="CAP_DP",nullable=true,length=64)
	public String getCapDp(){
		if(getPtr()!=null)
			return getPtr().getCapDp();
		return capDp;
	}
	public void setCapDp(String capDp) throws java.sql.SQLException{
		if(isSame(capDp, getCapDp()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getCapDp();
		this.capDp=capDp;
		setProperty("CAP_DP", capDp, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		if(getPtr()!=null)
			return getPtr().getNote();
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
		simulation=null;
	}
	@Column(name="IN_SERVICE_PROJ_ID",nullable=true,length=9)
	public int getInServiceProjId(){
		if(getPtr()!=null)
			return getPtr().getInServiceProjId();
		return inServiceProjId;
	}
	public void setInServiceProjId(int inServiceProjId) throws java.sql.SQLException{
		if(isSame(inServiceProjId, getInServiceProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getInServiceProjId();
		this.inServiceProjId=inServiceProjId;
		setProperty("IN_SERVICE_PROJ_ID", inServiceProjId, oldValue);
		proj=null;
	}
	@Column(name="OUT_SERVICE_PROJ_ID",nullable=true,length=9)
	public int getOutServiceProjId(){
		if(getPtr()!=null)
			return getPtr().getOutServiceProjId();
		return outServiceProjId;
	}
	public void setOutServiceProjId(int outServiceProjId) throws java.sql.SQLException{
		if(isSame(outServiceProjId, getOutServiceProjId()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getOutServiceProjId();
		this.outServiceProjId=outServiceProjId;
		setProperty("OUT_SERVICE_PROJ_ID", outServiceProjId, oldValue);
		proj2=null;
	}
	public Proj getProj()throws java.sql.SQLException{
		if(proj==null)
			proj=Proj.getInstance(getPlanyear(), getSimId(), getInServiceProjId());
		return proj;
	}
	public void setProj(Proj proj)throws java.sql.SQLException{
		setInServiceProjId(proj==null?0:proj.getProjId());
		this.proj=proj;
	}
	public Proj getProj2()throws java.sql.SQLException{
		if(proj2==null)
			proj2=Proj.getInstance(getPlanyear(), getSimId(), getOutServiceProjId());
		return proj2;
	}
	public void setProj2(Proj proj2)throws java.sql.SQLException{
		setOutServiceProjId(proj2==null?0:proj2.getProjId());
		this.proj2=proj2;
	}
	public Simulation getSimulation()throws java.sql.SQLException{
		if(simulation==null)
			simulation=Simulation.getInstance(getPlanyear(), getSimId());
		return simulation;
	}
	public void setSimulation(Simulation simulation)throws java.sql.SQLException{
		setSimId(simulation==null?0:simulation.getSimId());
		this.simulation=simulation;
	}
	public Sub getSub()throws java.sql.SQLException{
		if(sub==null)
			sub=Sub.getInstance(getPlanyear(), getSubId());
		return sub;
	}
	public void setSub(Sub sub)throws java.sql.SQLException{
		setSubId(sub==null?0:sub.getSubId());
		this.sub=sub;
	}
	public SubVar copy()throws java.sql.SQLException{
		SubVar cp = new SubVar((SubVar)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SubVarDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SubVarDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getCapId(),o.getCapId())) diffs.add("CAP_ID");
		if(!isSame(getSubId(),o.getSubId())) diffs.add("SUB_ID");
		if(!isSame(getCapNum(),o.getCapNum())) diffs.add("CAP_NUM");
		if(!isSame(isHighside(),o.isHighside())) diffs.add("HIGHSIDE");
		if(!isSame(getCapType(),o.getCapType())) diffs.add("CAP_TYPE");
		if(!isSame(getKvar(),o.getKvar())) diffs.add("KVAR");
		if(!isSame(isDisabled(),o.isDisabled())) diffs.add("DISABLED");
		if(!isSame(getCapDp(),o.getCapDp())) diffs.add("CAP_DP");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getInServiceProjId(),o.getInServiceProjId())) diffs.add("IN_SERVICE_PROJ_ID");
		if(!isSame(getOutServiceProjId(),o.getOutServiceProjId())) diffs.add("OUT_SERVICE_PROJ_ID");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
