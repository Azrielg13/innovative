/**
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.ProgramDAO;
@Entity
@Table(schema="MDI",name="MDIS20_PROGRAM")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Program o WHERE o.PROGRAM_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Program o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Program o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIS20_PROGRAM o WHERE o.PROGRAM_ID=?"),//AUTO-GENERATED
})
public class Program extends ProgramDAO implements SceProjCollection, Serializable{

	private static final long serialVersionUID = -7163011318224411828L;

	public final static int PRINTABLE=-2;

	public static final int DSP = 1;
	//	public static final int TSP = 2; //Removed 7/28/2010 BJS EMM for TSP_Abank
	public static final int TRANS = 3;

	public static final int DSERP = 4;

	public static final int SCE_AF = 5; 
	public static final int SCE_IF = 6;

	//	public static final int D_IR = 7; //DELETED
	public static final int SUB_IR = 8;
	public static final int RD = 9;
	public static final int SAS = 10;

	public static final int MISC = 11;

	public static final int CUST_AF = 12;
	public static final int CUST_IF = 13;

	public static final int D_IR_CABLE = 14;
	public static final int D_IR_MISC = 15;
	public static final int D_IR_WCR = 16;
	//public static final int OTHER = 17;
	public static final int TSP_ABANK = 18;
	public static final int TSP_STL = 19;
	public static final int TSP_STV = 20;
	public static final int DSP_CLRP = 21;
	public static final int BBANK_N1 = 22;
	public static final int Dist_IR = 23;	
	
//----------------------- QC ------------------//
	public static final int QC1_Phase1 = 24;
	public static final int QC2_Phase1 = 25;
	public static final int QC1_QC2_Phase2 = 26;
	public static final int QC3_Phase1 = 27;
	public static final int QC3_Phase2 = 28;
	public static final int QC3_Phase3 = 29;
	public static final int QC4_Phase1 = 30;
	public static final int QC4_Phase2 = 31;
	public static final int QC4_Phase3 = 32;
	public static final int QC4_Phase4 = 33;
	
	public final static int BOTH_TYPES = 0;

	/** The Constant BBANK_TYPE. */
	public final static int BBANK_TYPE = 1;

	/** The Constant ABANK_TYPE. */
	public final static int ABANK_TYPE = 2;

	public Program(){
		super(0);
	}

	public Program(int programId) {
		super(programId);
	}

	public Program(Program program) {
		super(program);
	}

	public String toString() {
		return getName();
	}
	public TreeSet<SceProj> getSceProjs(Calendar asOf, int allowedStates, Simulation simulation)throws SQLException{
		TreeSet<SceProj> projs = new TreeSet<SceProj>();
		for(SceProjRev projRev : getSceProjRevs())
			if(!projRev.getSceProj().isDeleted() && projRev.getSceProj().getCurRev(asOf, allowedStates, simulation) != null && projRev.getSceProj().getCurRev(asOf, allowedStates, simulation).getProgramId() == getProgramId())
				projs.add(projRev.getSceProj());
		return projs;
	}

	public User getApprover() throws SQLException{
		return User.getInstance(getApproverUserId());
	}

	public void setApprover(User approver) throws SQLException{
		if(approver==null)
			setApproverUserId(0);
		else
			setApproverUserId(approver.getUsernameId());
	}

	public int getProposedTotalCost() throws SQLException {
		int total = 0;
		for(SceProj proj : getSceProjs(null, SceProjRev.APPROVED, Simulation.getInstance(Department.getActivePlanYear(), 0))){
			total += proj.getCurRev(SceProjRev.APPROVED).getTotalCost(CostStage.Type.Proposed);
		}
		return total;
	}	

	public int getApprovedTotalCost() throws SQLException {
		int total = 0;
		for(SceProj proj : getSceProjs(null, SceProjRev.APPROVED, Simulation.getInstance(Department.getActivePlanYear(), 0))){
			total += proj.getCurRev(SceProjRev.APPROVED).getTotalCost(CostStage.Type.Approved);
		}
		return total;
	}

	public TreeSet<Integer> getYearsWithCost() throws SQLException {
		TreeSet<Integer> years = new TreeSet<Integer>();

		for(SceProj proj : getSceProjs(null, SceProjRev.APPROVED, Simulation.getInstance(Department.getActivePlanYear(), 0))){
			for(SceProjElemCost pec : proj.getCurRev(SceProjRev.APPROVED).getSceProjElemCosts()){
				if(pec.isUseUnitCost()){
					for(ScopeItem si:pec.getScopeItems())
						if(si.isEnabledBl())
							for(ScopeItemCostYear sicy : si.getScopeItemCostYears())
								years.add(sicy.getYear());
				}else{
					for(SceProjElemCostYear pecy:pec.getSceProjElemCostYears()){
						if(pecy.getCost()>0)
							years.add(pecy.getYear());
					}
				}
			}
		}
		return years;
	}

	public int getPriorCost() throws SQLException {
		int total = 0;
		for(SceProj proj : getSceProjs(null, SceProjRev.APPROVED, Simulation.getInstance(Department.getActivePlanYear(), 0))){
			total += proj.getCurRev(SceProjRev.APPROVED).getPriorCost(CostStage.Type.Proposed);
		}
		return total;
	}

	public int getProposedTotalCost(int year) throws SQLException  {
		int total = 0;
		for(SceProj proj : getSceProjs(null, SceProjRev.APPROVED, Simulation.getInstance(Department.getActivePlanYear(), 0))){
			total += proj.getCurRev(SceProjRev.APPROVED).getTotalCost(CostStage.Type.Proposed,year);
		}
		return total;
	}

	public int getApprovedTotalCost(int year) throws SQLException {
		int total = 0;
		for(SceProj proj : getSceProjs(null, SceProjRev.APPROVED, Simulation.getInstance(Department.getActivePlanYear(), 0))){
			total += proj.getCurRev(SceProjRev.APPROVED).getTotalCost(CostStage.Type.Approved,year);
		}
		return total;
	}

	public int getApprovedProjCount(int year) throws SQLException {
		int total = 0;
		for(SceProj proj : getSceProjs(null, SceProjRev.APPROVED, Simulation.getInstance(Department.getActivePlanYear(), 0))){
			if(proj.getCurRev(SceProjRev.APPROVED).getTotalCost(CostStage.Type.Proposed,year)>0)
				total++;
		}
		return total;
	}

	public boolean isPrintable(){
		return (getAltVarchar1() != null && getAltVarchar1().equals("1"));
	}
	
	public void setPrintable(boolean printable) throws SQLException{
		setAltVarchar1(printable?"1":"0");
	}

	public static TreeSet<Program> getPrintableProgs() throws SQLException{
		TreeSet<Program> progs = new TreeSet<Program>(); 
		for(Program p: getAllActive())
			if(p.isPrintable())
				progs.add(p);
		return progs;
	}

	public int getSubType(){
		return (int)getAltDouble1();
	}
	public void setSubType(int subType) throws SQLException{
		setAltDouble1(subType);
	}
	public synchronized Collection<SceProjRev> getSceProjRevs()throws SQLException{
		return SceProjRev.getCollection(new String[]{"PROGRAM_ID"},getProgramId());
	}
	public double getEscalationRate(int year, Calendar effDate) throws SQLException{
		return getEscalationRate(null,year,effDate,true);
	}
	public double getEscalationRate(SceElem elem, int year, Calendar effDate) throws SQLException{
		return getEscalationRate(elem,year,effDate,true);
	}
	public double getEscalationRate(SceElem elem, int year, Calendar effDate, boolean findBestMatch) throws SQLException{
		EscalationRate er = EscalationRate.getInstance(getProgramId(), elem==null?1:elem.getSceElemId(), year, effDate, findBestMatch);
		if(er != null)
			return er.getEscalationRate();
		return 0;
	}
	public void setEscalationRate(int year, Calendar effDate, double escalationRate) throws SQLException{
		setEscalationRate(SceElem.getInstance(1),year,effDate,escalationRate);
	}
	public void setEscalationRate(SceElem elem, int year, Calendar effDate, double escalationRate) throws SQLException{
		if(getEscalationRate(elem,year,effDate) == escalationRate)return;
		EscalationRate er = new EscalationRate(0);
		er.setProgram(this);
		er.setSceElem(elem);
		er.setYear(year);
		er.setEffDate(effDate);
		er.setEscalationRate(escalationRate);
		er.insert();
	}
	public boolean isDEProgram() {
		if(getProgramId() == Program.DSP || getProgramId() == Program.TSP_ABANK || getProgramId() == Program.DSERP //|| getProgramId() == Program.MISC
				||	getProgramId() == Program.TSP_STL || getProgramId() == Program.TSP_STV || getProgramId() == Program.DSP_CLRP)
			return true;
		return false;
	}

	public static TreeSet<Program> getAllQc() throws SQLException {
		TreeSet<Program> progs = new TreeSet<Program>();
		for(Program p:getAllActive())
			progs.add(p);
		return null;
	}
}
