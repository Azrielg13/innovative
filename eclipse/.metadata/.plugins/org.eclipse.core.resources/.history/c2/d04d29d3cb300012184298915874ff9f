/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.hst;


import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;


/**
 * 
 * @author Distribution Staff Engineering
 */
public class DataSetFactory{

		
		//Construtor
		public DataSetFactory(){}


		public static double[][] createInputSet(Effect effect,String[][] data) {
			int monthEffect=0;
			int weekdayEffect=0;
			int weekendEffect=0;
			int hourEffect=0;	
			int tempratureEffect=0;
			int windEffect=0;

			if(effect.getMonthEffect()) monthEffect=1;
			if(effect.getWeekdayEffect()) weekdayEffect=1;
			if(effect.getWeekendEffect()) weekendEffect=1 ;
			if(effect.getHourEffect()) hourEffect=1;
			if(effect.getTempratureEffect()) tempratureEffect=1;
			if(effect.getWindEffect()) windEffect=1;		

			int columns = monthEffect+weekdayEffect+weekendEffect+hourEffect+tempratureEffect+windEffect;
			double[][] input=new double[data.length][columns];
			Calendar calendar = new GregorianCalendar();
		 	calendar.setTimeZone(TimeZone.getDefault());
			SimpleDateFormat formatter = new SimpleDateFormat ("MM-dd-yyyy",Locale.US);
			formatter.setTimeZone(TimeZone.getDefault());


			for(int i=0;i<data.length;i++){
			  	ParsePosition pos = new ParsePosition(0);
		        Date startDate = formatter.parse(data[i][0], pos);
				calendar.setTime(startDate);
				if(monthEffect==1)
					input[i][0]=calendar.get(Calendar.MONTH);
				if(weekdayEffect==1)
				 	input[i][monthEffect]=calendar.get(Calendar.DAY_OF_WEEK);
				 if(weekendEffect==1){
				 	if(calendar.get(Calendar.DAY_OF_WEEK)==1||calendar.get(Calendar.DAY_OF_WEEK)==7)
					 	input[i][monthEffect+weekdayEffect] = 1;
					else
	 	  			 	input[i][monthEffect+weekdayEffect] = 0;
				 }
				if(hourEffect==1)
	  			 	input[i][monthEffect+weekdayEffect+weekendEffect] = Integer.valueOf(data[i][1]).intValue();
				
				if(tempratureEffect==1){
	  			 	input[i][monthEffect+weekdayEffect+weekendEffect+hourEffect] =Double.valueOf(data[i][2]).doubleValue();
				}
				if(windEffect==1){
	  			 	input[i][monthEffect+weekdayEffect+weekendEffect+hourEffect+tempratureEffect] = Double.valueOf(data[i][3]).doubleValue();
				}
			} 
			return input;
		 }



		public static double[][] createOutputSet(String[][] data) {
			double[][] output=new double[data.length][1];
			for(int i=0;i<data.length;i++){
				if(data[i][4]!=null)
					output[i][0] = Double.valueOf(data[i][4]).doubleValue();
				else
					output[i][0] = 0;
			} 
			return output;
		 }

		public static double[] createIndexSet(String[][] data) {
			double[] index=new double[data.length];
			for(int i=0;i<data.length;i++){
	  			index[i] = i;
			} 
			return index;
		 }


		public static double[] createTimeSet(String[][] data) {
			double[] timeSet = new double[data.length];
			Calendar calendar = new GregorianCalendar();
		 	calendar.setTimeZone(TimeZone.getDefault());
			SimpleDateFormat formatter = new SimpleDateFormat ("MM-dd-yyyy HH",Locale.US);
			formatter.setTimeZone(TimeZone.getDefault());

			for(int i=0;i<data.length;i++){
			  	ParsePosition pos = new ParsePosition(0);
			  	System.out.println(data[i][0]+" "+data[i][1]);
		        Date startDate = formatter.parse(data[i][0]+" "+data[i][1], pos);
				timeSet[i]=startDate.getTime()/1000;
			} 
			return timeSet;
		 }


		public static String[] getTimeString(String[][] data) {
			String[]  timeString = new String[data.length];
			for(int i=0;i<data.length;i++){
		        timeString[i] = data[i][0]+" "+data[i][1]+":00";
			} 
			return timeString;
		 }


	}
