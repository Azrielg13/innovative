package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostType;
import com.sce.esp.object.model.CostTypeRate;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.ProjCostRate;
import com.sce.esp.object.model.SceProjElemLabor;
import com.sce.esp.object.model.ScopeItemLabor;
import com.sce.esp.object.model.ScopeItemPerUnit;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CostTypeDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,COST_GROUP_ID,NAME,DESCRIPTION};
	public final static int ID_LIMIT = 9;
	public final static int COSTGROUPID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 256;
	private int id;
	private int costGroupId;
	private String name;
	private String description;
	private Collection<CostTypeRate> costTypeRates;
	private Collection<ProjCostRate> projCostRates;
	private Collection<SceProjElemLabor> sceProjElemLabors;
	private Collection<ScopeItemLabor> scopeItemLabors;
	private Collection<ScopeItemPerUnit> scopeItemPerUnits;
	private LookUp type;
	public static CostType getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static CostType getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		CostType o = null;
		if(cache != null && cache.contains(CostType.class, pk))
			o = em.find(CostType.class, pk);
		if(o==null && getAICache().contains(CostType.class, pk))
			o = getAICache().find(CostType.class, pk);
		if(o==null && fetch)
			o = em.find(CostType.class, pk);
		if(o==null && fetch && CostType.class.getAnnotation(AutoInsertable.class) != null){
			o = new CostType(id);
			getAICache().cache(CostType.class, o);
		}
		return o;
	}
	public static Collection<CostType> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CostType> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CostType> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CostType o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CostType> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostType> tq = em.createQuery(jpql,CostType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CostType> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CostType> tq = em.createNamedQuery(name,CostType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CostTypeDAO(){}
	public CostTypeDAO(int id){
		this.id=id;
	}
	public CostTypeDAO(CostTypeDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CostTypeDAO orig){
		this.costGroupId=orig.getCostGroupId();
		this.name=orig.getName();
		this.description=orig.getDescription();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIU25_SEQ",sequenceName="MDIU25_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="COST_GROUP_ID",nullable=false,length=9)
	public int getCostGroupId(){
		return costGroupId;
	}
	public void setCostGroupId(int costGroupId) throws java.sql.SQLException{
		if(isSame(costGroupId, getCostGroupId()))return;
		int oldValue = getCostGroupId();
		this.costGroupId=costGroupId;
		setProperty("COST_GROUP_ID", costGroupId, oldValue);
		type=null;
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	public LookUp getType()throws java.sql.SQLException{
		if(type==null)
			type=LookUp.getInstance(getCostGroupId());
		return type;
	}
	public void setType(LookUp type)throws java.sql.SQLException{
		setCostGroupId(type==null?0:type.getId());
		this.type=type;
	}
	public Collection<CostTypeRate> getCostTypeRates()throws java.sql.SQLException{
		if(isNewInstance() || costTypeRates != null){
			if(costTypeRates == null)
				costTypeRates = new TreeSet<CostTypeRate>();
			return costTypeRates;
		}
		return CostTypeRate.getNamedCollection("findByCostType",getId());
	}
	public void addCostTypeRate(CostTypeRate costTypeRate)throws java.sql.SQLException{
		costTypeRate.setCostType((CostType)this);
		if(isNewInstance() || costTypeRates != null)
			getCostTypeRates().add(costTypeRate);
		else
			costTypeRate.insert();
	}
	public void removeCostTypeRate(CostTypeRate costTypeRate)throws java.sql.SQLException{
		if(isNewInstance() || costTypeRates != null)
			getCostTypeRates().remove(costTypeRate);
		else
			costTypeRate.delete();
	}
	public Collection<ProjCostRate> getProjCostRates()throws java.sql.SQLException{
		if(isNewInstance() || projCostRates != null){
			if(projCostRates == null)
				projCostRates = new TreeSet<ProjCostRate>();
			return projCostRates;
		}
		return ProjCostRate.getNamedCollection("findByCostType",getId());
	}
	public void addProjCostRate(ProjCostRate projCostRate)throws java.sql.SQLException{
		projCostRate.setCostType((CostType)this);
		if(isNewInstance() || projCostRates != null)
			getProjCostRates().add(projCostRate);
		else
			projCostRate.insert();
	}
	public void removeProjCostRate(ProjCostRate projCostRate)throws java.sql.SQLException{
		if(isNewInstance() || projCostRates != null)
			getProjCostRates().remove(projCostRate);
		else
			projCostRate.delete();
	}
	public Collection<SceProjElemLabor> getSceProjElemLabors()throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemLabors != null){
			if(sceProjElemLabors == null)
				sceProjElemLabors = new TreeSet<SceProjElemLabor>();
			return sceProjElemLabors;
		}
		return SceProjElemLabor.getNamedCollection("findByCostType",getId());
	}
	public void addSceProjElemLabor(SceProjElemLabor sceProjElemLabor)throws java.sql.SQLException{
		sceProjElemLabor.setCostType((CostType)this);
		if(isNewInstance() || sceProjElemLabors != null)
			getSceProjElemLabors().add(sceProjElemLabor);
		else
			sceProjElemLabor.insert();
	}
	public void removeSceProjElemLabor(SceProjElemLabor sceProjElemLabor)throws java.sql.SQLException{
		if(isNewInstance() || sceProjElemLabors != null)
			getSceProjElemLabors().remove(sceProjElemLabor);
		else
			sceProjElemLabor.delete();
	}
	public Collection<ScopeItemLabor> getScopeItemLabors()throws java.sql.SQLException{
		if(isNewInstance() || scopeItemLabors != null){
			if(scopeItemLabors == null)
				scopeItemLabors = new TreeSet<ScopeItemLabor>();
			return scopeItemLabors;
		}
		return ScopeItemLabor.getNamedCollection("findByCostType",getId());
	}
	public void addScopeItemLabor(ScopeItemLabor scopeItemLabor)throws java.sql.SQLException{
		scopeItemLabor.setCostType((CostType)this);
		if(isNewInstance() || scopeItemLabors != null)
			getScopeItemLabors().add(scopeItemLabor);
		else
			scopeItemLabor.insert();
	}
	public void removeScopeItemLabor(ScopeItemLabor scopeItemLabor)throws java.sql.SQLException{
		if(isNewInstance() || scopeItemLabors != null)
			getScopeItemLabors().remove(scopeItemLabor);
		else
			scopeItemLabor.delete();
	}
	public Collection<ScopeItemPerUnit> getScopeItemPerUnits()throws java.sql.SQLException{
		if(isNewInstance() || scopeItemPerUnits != null){
			if(scopeItemPerUnits == null)
				scopeItemPerUnits = new TreeSet<ScopeItemPerUnit>();
			return scopeItemPerUnits;
		}
		return ScopeItemPerUnit.getNamedCollection("findByCostType",getId());
	}
	public void addScopeItemPerUnit(ScopeItemPerUnit scopeItemPerUnit)throws java.sql.SQLException{
		scopeItemPerUnit.setCostType((CostType)this);
		if(isNewInstance() || scopeItemPerUnits != null)
			getScopeItemPerUnits().add(scopeItemPerUnit);
		else
			scopeItemPerUnit.insert();
	}
	public void removeScopeItemPerUnit(ScopeItemPerUnit scopeItemPerUnit)throws java.sql.SQLException{
		if(isNewInstance() || scopeItemPerUnits != null)
			getScopeItemPerUnits().remove(scopeItemPerUnit);
		else
			scopeItemPerUnit.delete();
	}
	public CostType copy()throws java.sql.SQLException{
		CostType cp = new CostType((CostType)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CostTypeDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(CostTypeRate child:getCostTypeRates())
			cp.addCostTypeRate(child.copy());
		for(ProjCostRate child:getProjCostRates())
			cp.addProjCostRate(child.copy());
		for(SceProjElemLabor child:getSceProjElemLabors())
			cp.addSceProjElemLabor(child.copy());
		for(ScopeItemLabor child:getScopeItemLabors())
			cp.addScopeItemLabor(child.copy());
		for(ScopeItemPerUnit child:getScopeItemPerUnits())
			cp.addScopeItemPerUnit(child.copy());
	}
	public Vector<String> getDifference(CostTypeDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getCostGroupId(),o.getCostGroupId())) diffs.add("COST_GROUP_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
	}
	public void insertChildren()throws java.sql.SQLException{
		if(costTypeRates != null){
			for(CostTypeRate costTypeRate:getCostTypeRates())
				costTypeRate.setCostType((CostType)this);
		}
		if(projCostRates != null){
			for(ProjCostRate projCostRate:getProjCostRates())
				projCostRate.setCostType((CostType)this);
		}
		if(sceProjElemLabors != null){
			for(SceProjElemLabor sceProjElemLabor:getSceProjElemLabors())
				sceProjElemLabor.setCostType((CostType)this);
		}
		if(scopeItemLabors != null){
			for(ScopeItemLabor scopeItemLabor:getScopeItemLabors())
				scopeItemLabor.setCostType((CostType)this);
		}
		if(scopeItemPerUnits != null){
			for(ScopeItemPerUnit scopeItemPerUnit:getScopeItemPerUnits())
				scopeItemPerUnit.setCostType((CostType)this);
		}
		if(costTypeRates != null){
			for(CostTypeRate costTypeRate:getCostTypeRates())
				if(costTypeRate.isNewInstance())
					costTypeRate.insert();
			costTypeRates = null;
		}
		if(projCostRates != null){
			for(ProjCostRate projCostRate:getProjCostRates())
				if(projCostRate.isNewInstance())
					projCostRate.insert();
			projCostRates = null;
		}
		if(sceProjElemLabors != null){
			for(SceProjElemLabor sceProjElemLabor:getSceProjElemLabors())
				if(sceProjElemLabor.isNewInstance())
					sceProjElemLabor.insert();
			sceProjElemLabors = null;
		}
		if(scopeItemLabors != null){
			for(ScopeItemLabor scopeItemLabor:getScopeItemLabors())
				if(scopeItemLabor.isNewInstance())
					scopeItemLabor.insert();
			scopeItemLabors = null;
		}
		if(scopeItemPerUnits != null){
			for(ScopeItemPerUnit scopeItemPerUnit:getScopeItemPerUnits())
				if(scopeItemPerUnit.isNewInstance())
					scopeItemPerUnit.insert();
			scopeItemPerUnits = null;
		}
	}
}
