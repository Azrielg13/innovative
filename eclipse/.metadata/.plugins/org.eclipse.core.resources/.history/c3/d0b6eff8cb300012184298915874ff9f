package com.sce.esp.object.model;

import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.TestScriptDAO;
@Entity
@Table(schema="MDI",name="MDI991_TEST_SCRIPT")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM TestScript o WHERE o.SCRIPT_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM TestScript o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM TestScript o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI991_TEST_SCRIPT o WHERE o.SCRIPT_ID=?"),//AUTO-GENERATED
})
public class TestScript extends TestScriptDAO{
	
	public TestScript(){
		super(0);
	}
	public TestScript(int scriptId){
		super(scriptId);
	}
	
	public TestScript(TestScript testScript) {
		super(testScript);
	}
	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		return MDITask.getInstance(getTask()).getName()+"-"+getScriptId();
	}
	/**
	 * Gets the creator.
	 * 
	 * @return the creator
	 * 
	 * @throws SQLException the SQL exception
	 */
	public User getCreator()throws SQLException{
		return User.getInstance(getCreatorUsernameId());
	}
	
	public int getPlanyear(){
    	return Department.getActivePlanYear();
    }
}
