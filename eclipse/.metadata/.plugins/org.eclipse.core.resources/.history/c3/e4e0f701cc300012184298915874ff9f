package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostType;
import com.sce.esp.object.model.ScopeItem;
import com.sce.esp.object.model.ScopeItemForecast;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ScopeItemForecastDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCOPE_ITEM_ID,COST_TYPE_ID,YEAR};
	public static enum PROPERTY{SCOPE_ITEM_ID,COST_TYPE_ID,YEAR,PERCENT};
	public final static int SCOPEITEMID_LIMIT = 9;
	public final static int COSTTYPEID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int PERCENT_LIMIT = 24;
	private int scopeItemId;
	private int costTypeId;
	private int year;
	private double percent;
	private ScopeItem scopeItem;
	private CostType costType;
	public static ScopeItemForecast getInstance(int scopeItemId, int costTypeId, int year)throws java.sql.SQLException{
		return getInstance(scopeItemId, costTypeId, year, true);
	}
	public static ScopeItemForecast getInstance(int scopeItemId, int costTypeId, int year, boolean fetch)throws java.sql.SQLException{
		if(isNull(scopeItemId, costTypeId, year))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scopeItemId, costTypeId, year);
		Cache cache = em.getEntityManagerFactory().getCache();
		ScopeItemForecast o = null;
		if(cache != null && cache.contains(ScopeItemForecast.class, pk))
			o = em.find(ScopeItemForecast.class, pk);
		if(o==null && getAICache().contains(ScopeItemForecast.class, pk))
			o = getAICache().find(ScopeItemForecast.class, pk);
		if(o==null && fetch)
			o = em.find(ScopeItemForecast.class, pk);
		if(o==null && fetch && ScopeItemForecast.class.getAnnotation(AutoInsertable.class) != null){
			o = new ScopeItemForecast(scopeItemId, costTypeId, year);
			getAICache().cache(ScopeItemForecast.class, o);
		}
		return o;
	}
	public static Collection<ScopeItemForecast> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ScopeItemForecast> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ScopeItemForecast> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ScopeItemForecast o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ScopeItemForecast> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeItemForecast> tq = em.createQuery(jpql,ScopeItemForecast.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ScopeItemForecast> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeItemForecast> tq = em.createNamedQuery(name,ScopeItemForecast.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ScopeItemForecastDAO(){}
	public ScopeItemForecastDAO(int scopeItemId, int costTypeId, int year){
		this.scopeItemId=scopeItemId;
		this.costTypeId=costTypeId;
		this.year=year;
	}
	public ScopeItemForecastDAO(ScopeItemForecastDAO orig){
		super(orig);
		this.scopeItemId=orig.getScopeItemId();
		this.costTypeId=orig.getCostTypeId();
		this.year=orig.getYear();
		copyFrom(orig);
	}
	public void copyFrom(ScopeItemForecastDAO orig){
		this.percent=orig.getPercent();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scopeItemId, costTypeId, year};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="SCOPE_ITEM_ID",nullable=false,length=9)
	public int getScopeItemId(){
		return scopeItemId;
	}
	public void setScopeItemId(int scopeItemId) throws java.sql.SQLException{
		if(isSame(scopeItemId, getScopeItemId()))return;
		int oldValue = getScopeItemId();
		this.scopeItemId=scopeItemId;
		setProperty("SCOPE_ITEM_ID", scopeItemId, oldValue);
		scopeItem=null;
	}
	@Id
	@Column(name="COST_TYPE_ID",nullable=false,length=9)
	public int getCostTypeId(){
		return costTypeId;
	}
	public void setCostTypeId(int costTypeId) throws java.sql.SQLException{
		if(isSame(costTypeId, getCostTypeId()))return;
		int oldValue = getCostTypeId();
		this.costTypeId=costTypeId;
		setProperty("COST_TYPE_ID", costTypeId, oldValue);
		costType=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="PERCENT",nullable=true,length=24)
	public double getPercent(){
		return percent;
	}
	public void setPercent(double percent) throws java.sql.SQLException{
		if(isSame(percent, getPercent()))return;
		double oldValue = getPercent();
		this.percent=percent;
		setProperty("PERCENT", percent, oldValue);
	}
	public ScopeItem getScopeItem()throws java.sql.SQLException{
		if(scopeItem==null)
			scopeItem=ScopeItem.getInstance(getScopeItemId());
		return scopeItem;
	}
	public void setScopeItem(ScopeItem scopeItem)throws java.sql.SQLException{
		setScopeItemId(scopeItem==null?0:scopeItem.getScopeItemId());
		this.scopeItem=scopeItem;
	}
	public CostType getCostType()throws java.sql.SQLException{
		if(costType==null)
			costType=CostType.getInstance(getCostTypeId());
		return costType;
	}
	public void setCostType(CostType costType)throws java.sql.SQLException{
		setCostTypeId(costType==null?0:costType.getId());
		this.costType=costType;
	}
	public ScopeItemForecast copy()throws java.sql.SQLException{
		ScopeItemForecast cp = new ScopeItemForecast((ScopeItemForecast)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ScopeItemForecastDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ScopeItemForecastDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScopeItemId(),o.getScopeItemId())) diffs.add("SCOPE_ITEM_ID");
		if(!isSame(getCostTypeId(),o.getCostTypeId())) diffs.add("COST_TYPE_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getPercent(),o.getPercent())) diffs.add("PERCENT");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(scopeItem != null && scopeItem.isNewInstance())
				scopeItem.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
