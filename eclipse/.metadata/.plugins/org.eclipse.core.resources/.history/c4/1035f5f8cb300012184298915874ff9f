package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Collection;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.TspocDAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDIS51_TSPOC")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Tspoc o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Tspoc o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Tspoc o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIS51_TSPOC o WHERE o.ID=?"),//AUTO-GENERATED
})

/**
 * Transmission Substation Projects Oversite Committee (per Hiro)
 * @author munizas
 *
 */
public class Tspoc extends TspocDAO{
	public Tspoc(){
	}
	public Tspoc(int id){
		super(id);
	}
	public Tspoc(Tspoc orig){
		super(orig);
	}
	
	/**
	 * This method attempts to retrieve a tspoc instance for a given sce proj rev.  If the tspoc instance does not exist then
	 * a new instance is created.
	 * @param rev - the given sce proj rev
	 * @return a tspoc instance that is tied with the given sce proj rev.
	 * @throws SQLException
	 */
	public static Tspoc getTspoc(SceProjRev rev) throws SQLException {
		Tspoc t;
		Collection<Tspoc> c = Tspoc.getCollection(new String[]{"SCE_PROJ_REV_ID", "DELETED_TS"}, rev.getSceProjRevId(), null);
		if(c.size() > 0)
			t = c.iterator().next();
		else {
			t = new Tspoc();
			t.setSceProjRev(rev);
		}
		return t;
	}
	
	public Collection<Trend> getTrends() throws SQLException {
		Collection<Trend> trends = (Collection<Trend>) getCachedValue("getTrendsByTspoc", this);
		if(trends == null) {
			trends = Trend.getCollection(new String[]{"TSPOC_ID", "DELETED_TS"}, getId(), null);
			if(trends.size() > 0)
				setCachedValue(trends, "getTrendsByTspoc", this);
		}
		return trends;
	}
	
	public Collection<ChangeRequest> getChangeRequests() throws SQLException {
		Collection<ChangeRequest> changeRequests = (Collection<ChangeRequest>) getCachedValue("getChangeRequestsByTspoc", this);
		if(changeRequests == null) {
			changeRequests = ChangeRequest.getCollection(new String[]{"TSPOC_ID", "DELETED_TS"}, getId(), null);
			if(changeRequests.size() > 0)
				setCachedValue(changeRequests, "getChangeRequestsByTspoc", this);
		}
		return changeRequests;
	}
	
	LookUp refLookUp;
	public LookUp getTspocListCategory() throws SQLException {
		if(refLookUp != null) return refLookUp;
		refLookUp = getRefList()!=null ? getRefList().getLookUp() : null;
		return refLookUp;
//		return getRefList()!=null ? getRefList().getLookUp() : null;
	}
}
