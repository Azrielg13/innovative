package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Cable;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CableDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,CABLE_ID};
	public static enum PROPERTY{PLANYEAR,CABLE_ID,CABLE_SIZE,RATING,MATERIAL,CONSTRUCTION,INSUL_MATERIAL,INSUL_CONST,USAMP_ID,SCE_MATCODE,COND_DIAM_DC,THICK_SHLD_TCS,THICK_INSUL_TIN,THICK_INSUL_SHLD_TCS,THICK_JACKET_TJ,COND_DCRES_RDC,SHLD_DIAM_D,SHLD_WIRES_N,LAY_FACTOR_LF,SKIN_EFFECT_KS,PROX_EFFECT_KP,CABLE_COUNT_N,THERM_RES_INSUL_PI,THERM_RES_JACKET_PJ,INSUL_SIC_ER,DISSIP_FACTOR_COS,SHIELD_TEMP_TS,QS_CONSTANT_A,COND_SPACE_S,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,SAP_NUM};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int CABLEID_LIMIT = 9;
	public final static int CABLESIZE_LIMIT = 10;
	public final static int RATING_LIMIT = 10;
	public final static int MATERIAL_LIMIT = 10;
	public final static int CONSTRUCTION_LIMIT = 10;
	public final static int INSULMATERIAL_LIMIT = 50;
	public final static int INSULCONST_LIMIT = 50;
	public final static int USAMPID_LIMIT = 10;
	public final static int SCEMATCODE_LIMIT = 10;
	public final static int CONDDIAMDC_LIMIT = 24;
	public final static int THICKSHLDTCS_LIMIT = 24;
	public final static int THICKINSULTIN_LIMIT = 24;
	public final static int THICKINSULSHLDTCS_LIMIT = 24;
	public final static int THICKJACKETTJ_LIMIT = 24;
	public final static int CONDDCRESRDC_LIMIT = 24;
	public final static int SHLDDIAMD_LIMIT = 24;
	public final static int SHLDWIRESN_LIMIT = 24;
	public final static int LAYFACTORLF_LIMIT = 24;
	public final static int SKINEFFECTKS_LIMIT = 24;
	public final static int PROXEFFECTKP_LIMIT = 24;
	public final static int CABLECOUNTN_LIMIT = 24;
	public final static int THERMRESINSULPI_LIMIT = 24;
	public final static int THERMRESJACKETPJ_LIMIT = 24;
	public final static int INSULSICER_LIMIT = 24;
	public final static int DISSIPFACTORCOS_LIMIT = 24;
	public final static int SHIELDTEMPTS_LIMIT = 24;
	public final static int QSCONSTANTA_LIMIT = 24;
	public final static int CONDSPACES_LIMIT = 24;
	public final static int SAPNUM_LIMIT = 32;
	private int planyear;
	private int cableId;
	private String cableSize;
	private String rating;
	private String material;
	private String construction;
	private String insulMaterial;
	private String insulConst;
	private String usampId;
	private String sceMatcode;
	private double condDiamDc;
	private double thickShldTcs;
	private double thickInsulTin;
	private double thickInsulShldTcs;
	private double thickJacketTj;
	private double condDcresRdc;
	private double shldDiamD;
	private double shldWiresN;
	private double layFactorLf;
	private double skinEffectKs;
	private double proxEffectKp;
	private double cableCountN;
	private double thermResInsulPi;
	private double thermResJacketPj;
	private double insulSicEr;
	private double dissipFactorCos;
	private double shieldTempTs;
	private double qsConstantA;
	private double condSpaceS;
	private String sapNum;
	private Department department;
	public static Cable getInstance(int planyear, int cableId)throws java.sql.SQLException{
		return getInstance(planyear, cableId, true);
	}
	public static Cable getInstance(int planyear, int cableId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, cableId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, cableId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Cable o = null;
		if(cache != null && cache.contains(Cable.class, pk))
			o = em.find(Cable.class, pk);
		if(o==null && getAICache().contains(Cable.class, pk))
			o = getAICache().find(Cable.class, pk);
		if(o==null && fetch)
			o = em.find(Cable.class, pk);
		if(o==null && fetch && Cable.class.getAnnotation(AutoInsertable.class) != null){
			o = new Cable(planyear, cableId);
			getAICache().cache(Cable.class, o);
		}
		return o;
	}
	public static Collection<Cable> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Cable> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Cable> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Cable o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Cable> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Cable> tq = em.createQuery(jpql,Cable.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Cable> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Cable> tq = em.createNamedQuery(name,Cable.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CableDAO(){}
	public CableDAO(int planyear, int cableId){
		this.planyear=planyear;
		this.cableId=cableId;
	}
	public CableDAO(CableDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(CableDAO orig){
		this.cableSize=orig.getCableSize();
		this.rating=orig.getRating();
		this.material=orig.getMaterial();
		this.construction=orig.getConstruction();
		this.insulMaterial=orig.getInsulMaterial();
		this.insulConst=orig.getInsulConst();
		this.usampId=orig.getUsampId();
		this.sceMatcode=orig.getSceMatcode();
		this.condDiamDc=orig.getCondDiamDc();
		this.thickShldTcs=orig.getThickShldTcs();
		this.thickInsulTin=orig.getThickInsulTin();
		this.thickInsulShldTcs=orig.getThickInsulShldTcs();
		this.thickJacketTj=orig.getThickJacketTj();
		this.condDcresRdc=orig.getCondDcresRdc();
		this.shldDiamD=orig.getShldDiamD();
		this.shldWiresN=orig.getShldWiresN();
		this.layFactorLf=orig.getLayFactorLf();
		this.skinEffectKs=orig.getSkinEffectKs();
		this.proxEffectKp=orig.getProxEffectKp();
		this.cableCountN=orig.getCableCountN();
		this.thermResInsulPi=orig.getThermResInsulPi();
		this.thermResJacketPj=orig.getThermResJacketPj();
		this.insulSicEr=orig.getInsulSicEr();
		this.dissipFactorCos=orig.getDissipFactorCos();
		this.shieldTempTs=orig.getShieldTempTs();
		this.qsConstantA=orig.getQsConstantA();
		this.condSpaceS=orig.getCondSpaceS();
		this.sapNum=orig.getSapNum();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, cableId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI710_SEQ",sequenceName="MDI710_SEQ")
	@Column(name="CABLE_ID",nullable=false,length=9)
	public int getCableId(){
		return cableId;
	}
	public void setCableId(int cableId) throws java.sql.SQLException{
		if(isSame(cableId, getCableId()))return;
		int oldValue = getCableId();
		this.cableId=cableId;
		setProperty("CABLE_ID", cableId, oldValue);
	}
	@Column(name="CABLE_SIZE",nullable=true,length=10)
	public String getCableSize(){
		return cableSize;
	}
	public void setCableSize(String cableSize) throws java.sql.SQLException{
		if(isSame(cableSize, getCableSize()))return;
		String oldValue = getCableSize();
		this.cableSize=cableSize;
		setProperty("CABLE_SIZE", cableSize, oldValue);
	}
	@Column(name="RATING",nullable=true,length=10)
	public String getRating(){
		return rating;
	}
	public void setRating(String rating) throws java.sql.SQLException{
		if(isSame(rating, getRating()))return;
		String oldValue = getRating();
		this.rating=rating;
		setProperty("RATING", rating, oldValue);
	}
	@Column(name="MATERIAL",nullable=true,length=10)
	public String getMaterial(){
		return material;
	}
	public void setMaterial(String material) throws java.sql.SQLException{
		if(isSame(material, getMaterial()))return;
		String oldValue = getMaterial();
		this.material=material;
		setProperty("MATERIAL", material, oldValue);
	}
	@Column(name="CONSTRUCTION",nullable=true,length=10)
	public String getConstruction(){
		return construction;
	}
	public void setConstruction(String construction) throws java.sql.SQLException{
		if(isSame(construction, getConstruction()))return;
		String oldValue = getConstruction();
		this.construction=construction;
		setProperty("CONSTRUCTION", construction, oldValue);
	}
	@Column(name="INSUL_MATERIAL",nullable=true,length=50)
	public String getInsulMaterial(){
		return insulMaterial;
	}
	public void setInsulMaterial(String insulMaterial) throws java.sql.SQLException{
		if(isSame(insulMaterial, getInsulMaterial()))return;
		String oldValue = getInsulMaterial();
		this.insulMaterial=insulMaterial;
		setProperty("INSUL_MATERIAL", insulMaterial, oldValue);
	}
	@Column(name="INSUL_CONST",nullable=true,length=50)
	public String getInsulConst(){
		return insulConst;
	}
	public void setInsulConst(String insulConst) throws java.sql.SQLException{
		if(isSame(insulConst, getInsulConst()))return;
		String oldValue = getInsulConst();
		this.insulConst=insulConst;
		setProperty("INSUL_CONST", insulConst, oldValue);
	}
	@Column(name="USAMP_ID",nullable=true,length=10)
	public String getUsampId(){
		return usampId;
	}
	public void setUsampId(String usampId) throws java.sql.SQLException{
		if(isSame(usampId, getUsampId()))return;
		String oldValue = getUsampId();
		this.usampId=usampId;
		setProperty("USAMP_ID", usampId, oldValue);
	}
	@Column(name="SCE_MATCODE",nullable=true,length=10)
	public String getSceMatcode(){
		return sceMatcode;
	}
	public void setSceMatcode(String sceMatcode) throws java.sql.SQLException{
		if(isSame(sceMatcode, getSceMatcode()))return;
		String oldValue = getSceMatcode();
		this.sceMatcode=sceMatcode;
		setProperty("SCE_MATCODE", sceMatcode, oldValue);
	}
	@Column(name="COND_DIAM_DC",nullable=true,length=24)
	public double getCondDiamDc(){
		return condDiamDc;
	}
	public void setCondDiamDc(double condDiamDc) throws java.sql.SQLException{
		if(isSame(condDiamDc, getCondDiamDc()))return;
		double oldValue = getCondDiamDc();
		this.condDiamDc=condDiamDc;
		setProperty("COND_DIAM_DC", condDiamDc, oldValue);
	}
	@Column(name="THICK_SHLD_TCS",nullable=true,length=24)
	public double getThickShldTcs(){
		return thickShldTcs;
	}
	public void setThickShldTcs(double thickShldTcs) throws java.sql.SQLException{
		if(isSame(thickShldTcs, getThickShldTcs()))return;
		double oldValue = getThickShldTcs();
		this.thickShldTcs=thickShldTcs;
		setProperty("THICK_SHLD_TCS", thickShldTcs, oldValue);
	}
	@Column(name="THICK_INSUL_TIN",nullable=true,length=24)
	public double getThickInsulTin(){
		return thickInsulTin;
	}
	public void setThickInsulTin(double thickInsulTin) throws java.sql.SQLException{
		if(isSame(thickInsulTin, getThickInsulTin()))return;
		double oldValue = getThickInsulTin();
		this.thickInsulTin=thickInsulTin;
		setProperty("THICK_INSUL_TIN", thickInsulTin, oldValue);
	}
	@Column(name="THICK_INSUL_SHLD_TCS",nullable=true,length=24)
	public double getThickInsulShldTcs(){
		return thickInsulShldTcs;
	}
	public void setThickInsulShldTcs(double thickInsulShldTcs) throws java.sql.SQLException{
		if(isSame(thickInsulShldTcs, getThickInsulShldTcs()))return;
		double oldValue = getThickInsulShldTcs();
		this.thickInsulShldTcs=thickInsulShldTcs;
		setProperty("THICK_INSUL_SHLD_TCS", thickInsulShldTcs, oldValue);
	}
	@Column(name="THICK_JACKET_TJ",nullable=true,length=24)
	public double getThickJacketTj(){
		return thickJacketTj;
	}
	public void setThickJacketTj(double thickJacketTj) throws java.sql.SQLException{
		if(isSame(thickJacketTj, getThickJacketTj()))return;
		double oldValue = getThickJacketTj();
		this.thickJacketTj=thickJacketTj;
		setProperty("THICK_JACKET_TJ", thickJacketTj, oldValue);
	}
	@Column(name="COND_DCRES_RDC",nullable=true,length=24)
	public double getCondDcresRdc(){
		return condDcresRdc;
	}
	public void setCondDcresRdc(double condDcresRdc) throws java.sql.SQLException{
		if(isSame(condDcresRdc, getCondDcresRdc()))return;
		double oldValue = getCondDcresRdc();
		this.condDcresRdc=condDcresRdc;
		setProperty("COND_DCRES_RDC", condDcresRdc, oldValue);
	}
	@Column(name="SHLD_DIAM_D",nullable=true,length=24)
	public double getShldDiamD(){
		return shldDiamD;
	}
	public void setShldDiamD(double shldDiamD) throws java.sql.SQLException{
		if(isSame(shldDiamD, getShldDiamD()))return;
		double oldValue = getShldDiamD();
		this.shldDiamD=shldDiamD;
		setProperty("SHLD_DIAM_D", shldDiamD, oldValue);
	}
	@Column(name="SHLD_WIRES_N",nullable=true,length=24)
	public double getShldWiresN(){
		return shldWiresN;
	}
	public void setShldWiresN(double shldWiresN) throws java.sql.SQLException{
		if(isSame(shldWiresN, getShldWiresN()))return;
		double oldValue = getShldWiresN();
		this.shldWiresN=shldWiresN;
		setProperty("SHLD_WIRES_N", shldWiresN, oldValue);
	}
	@Column(name="LAY_FACTOR_LF",nullable=true,length=24)
	public double getLayFactorLf(){
		return layFactorLf;
	}
	public void setLayFactorLf(double layFactorLf) throws java.sql.SQLException{
		if(isSame(layFactorLf, getLayFactorLf()))return;
		double oldValue = getLayFactorLf();
		this.layFactorLf=layFactorLf;
		setProperty("LAY_FACTOR_LF", layFactorLf, oldValue);
	}
	@Column(name="SKIN_EFFECT_KS",nullable=true,length=24)
	public double getSkinEffectKs(){
		return skinEffectKs;
	}
	public void setSkinEffectKs(double skinEffectKs) throws java.sql.SQLException{
		if(isSame(skinEffectKs, getSkinEffectKs()))return;
		double oldValue = getSkinEffectKs();
		this.skinEffectKs=skinEffectKs;
		setProperty("SKIN_EFFECT_KS", skinEffectKs, oldValue);
	}
	@Column(name="PROX_EFFECT_KP",nullable=true,length=24)
	public double getProxEffectKp(){
		return proxEffectKp;
	}
	public void setProxEffectKp(double proxEffectKp) throws java.sql.SQLException{
		if(isSame(proxEffectKp, getProxEffectKp()))return;
		double oldValue = getProxEffectKp();
		this.proxEffectKp=proxEffectKp;
		setProperty("PROX_EFFECT_KP", proxEffectKp, oldValue);
	}
	@Column(name="CABLE_COUNT_N",nullable=true,length=24)
	public double getCableCountN(){
		return cableCountN;
	}
	public void setCableCountN(double cableCountN) throws java.sql.SQLException{
		if(isSame(cableCountN, getCableCountN()))return;
		double oldValue = getCableCountN();
		this.cableCountN=cableCountN;
		setProperty("CABLE_COUNT_N", cableCountN, oldValue);
	}
	@Column(name="THERM_RES_INSUL_PI",nullable=true,length=24)
	public double getThermResInsulPi(){
		return thermResInsulPi;
	}
	public void setThermResInsulPi(double thermResInsulPi) throws java.sql.SQLException{
		if(isSame(thermResInsulPi, getThermResInsulPi()))return;
		double oldValue = getThermResInsulPi();
		this.thermResInsulPi=thermResInsulPi;
		setProperty("THERM_RES_INSUL_PI", thermResInsulPi, oldValue);
	}
	@Column(name="THERM_RES_JACKET_PJ",nullable=true,length=24)
	public double getThermResJacketPj(){
		return thermResJacketPj;
	}
	public void setThermResJacketPj(double thermResJacketPj) throws java.sql.SQLException{
		if(isSame(thermResJacketPj, getThermResJacketPj()))return;
		double oldValue = getThermResJacketPj();
		this.thermResJacketPj=thermResJacketPj;
		setProperty("THERM_RES_JACKET_PJ", thermResJacketPj, oldValue);
	}
	@Column(name="INSUL_SIC_ER",nullable=true,length=24)
	public double getInsulSicEr(){
		return insulSicEr;
	}
	public void setInsulSicEr(double insulSicEr) throws java.sql.SQLException{
		if(isSame(insulSicEr, getInsulSicEr()))return;
		double oldValue = getInsulSicEr();
		this.insulSicEr=insulSicEr;
		setProperty("INSUL_SIC_ER", insulSicEr, oldValue);
	}
	@Column(name="DISSIP_FACTOR_COS",nullable=true,length=24)
	public double getDissipFactorCos(){
		return dissipFactorCos;
	}
	public void setDissipFactorCos(double dissipFactorCos) throws java.sql.SQLException{
		if(isSame(dissipFactorCos, getDissipFactorCos()))return;
		double oldValue = getDissipFactorCos();
		this.dissipFactorCos=dissipFactorCos;
		setProperty("DISSIP_FACTOR_COS", dissipFactorCos, oldValue);
	}
	@Column(name="SHIELD_TEMP_TS",nullable=true,length=24)
	public double getShieldTempTs(){
		return shieldTempTs;
	}
	public void setShieldTempTs(double shieldTempTs) throws java.sql.SQLException{
		if(isSame(shieldTempTs, getShieldTempTs()))return;
		double oldValue = getShieldTempTs();
		this.shieldTempTs=shieldTempTs;
		setProperty("SHIELD_TEMP_TS", shieldTempTs, oldValue);
	}
	@Column(name="QS_CONSTANT_A",nullable=true,length=24)
	public double getQsConstantA(){
		return qsConstantA;
	}
	public void setQsConstantA(double qsConstantA) throws java.sql.SQLException{
		if(isSame(qsConstantA, getQsConstantA()))return;
		double oldValue = getQsConstantA();
		this.qsConstantA=qsConstantA;
		setProperty("QS_CONSTANT_A", qsConstantA, oldValue);
	}
	@Column(name="COND_SPACE_S",nullable=true,length=24)
	public double getCondSpaceS(){
		return condSpaceS;
	}
	public void setCondSpaceS(double condSpaceS) throws java.sql.SQLException{
		if(isSame(condSpaceS, getCondSpaceS()))return;
		double oldValue = getCondSpaceS();
		this.condSpaceS=condSpaceS;
		setProperty("COND_SPACE_S", condSpaceS, oldValue);
	}
	@Column(name="SAP_NUM",nullable=true,length=32)
	public String getSapNum(){
		return sapNum;
	}
	public void setSapNum(String sapNum) throws java.sql.SQLException{
		if(isSame(sapNum, getSapNum()))return;
		String oldValue = getSapNum();
		this.sapNum=sapNum;
		setProperty("SAP_NUM", sapNum, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public Cable copy()throws java.sql.SQLException{
		Cable cp = new Cable((Cable)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CableDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CableDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getCableId(),o.getCableId())) diffs.add("CABLE_ID");
		if(!isSame(getCableSize(),o.getCableSize())) diffs.add("CABLE_SIZE");
		if(!isSame(getRating(),o.getRating())) diffs.add("RATING");
		if(!isSame(getMaterial(),o.getMaterial())) diffs.add("MATERIAL");
		if(!isSame(getConstruction(),o.getConstruction())) diffs.add("CONSTRUCTION");
		if(!isSame(getInsulMaterial(),o.getInsulMaterial())) diffs.add("INSUL_MATERIAL");
		if(!isSame(getInsulConst(),o.getInsulConst())) diffs.add("INSUL_CONST");
		if(!isSame(getUsampId(),o.getUsampId())) diffs.add("USAMP_ID");
		if(!isSame(getSceMatcode(),o.getSceMatcode())) diffs.add("SCE_MATCODE");
		if(!isSame(getCondDiamDc(),o.getCondDiamDc())) diffs.add("COND_DIAM_DC");
		if(!isSame(getThickShldTcs(),o.getThickShldTcs())) diffs.add("THICK_SHLD_TCS");
		if(!isSame(getThickInsulTin(),o.getThickInsulTin())) diffs.add("THICK_INSUL_TIN");
		if(!isSame(getThickInsulShldTcs(),o.getThickInsulShldTcs())) diffs.add("THICK_INSUL_SHLD_TCS");
		if(!isSame(getThickJacketTj(),o.getThickJacketTj())) diffs.add("THICK_JACKET_TJ");
		if(!isSame(getCondDcresRdc(),o.getCondDcresRdc())) diffs.add("COND_DCRES_RDC");
		if(!isSame(getShldDiamD(),o.getShldDiamD())) diffs.add("SHLD_DIAM_D");
		if(!isSame(getShldWiresN(),o.getShldWiresN())) diffs.add("SHLD_WIRES_N");
		if(!isSame(getLayFactorLf(),o.getLayFactorLf())) diffs.add("LAY_FACTOR_LF");
		if(!isSame(getSkinEffectKs(),o.getSkinEffectKs())) diffs.add("SKIN_EFFECT_KS");
		if(!isSame(getProxEffectKp(),o.getProxEffectKp())) diffs.add("PROX_EFFECT_KP");
		if(!isSame(getCableCountN(),o.getCableCountN())) diffs.add("CABLE_COUNT_N");
		if(!isSame(getThermResInsulPi(),o.getThermResInsulPi())) diffs.add("THERM_RES_INSUL_PI");
		if(!isSame(getThermResJacketPj(),o.getThermResJacketPj())) diffs.add("THERM_RES_JACKET_PJ");
		if(!isSame(getInsulSicEr(),o.getInsulSicEr())) diffs.add("INSUL_SIC_ER");
		if(!isSame(getDissipFactorCos(),o.getDissipFactorCos())) diffs.add("DISSIP_FACTOR_COS");
		if(!isSame(getShieldTempTs(),o.getShieldTempTs())) diffs.add("SHIELD_TEMP_TS");
		if(!isSame(getQsConstantA(),o.getQsConstantA())) diffs.add("QS_CONSTANT_A");
		if(!isSame(getCondSpaceS(),o.getCondSpaceS())) diffs.add("COND_SPACE_S");
		if(!isSame(getSapNum(),o.getSapNum())) diffs.add("SAP_NUM");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
