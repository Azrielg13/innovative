/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.Calendar;

import com.jidesoft.combobox.DateComboBox;
import com.sce.esp.security.TopFlight;
import com.sce.esp.security.UserRole;

public abstract class DynamicDateComboBox extends DateComboBox
		implements
			FocusListener,
			ItemListener {
	/**
	 * 
	 */
	private static final long serialVersionUID = 5124431811006713144L;
	private Object obj;
	private boolean update = true;
	private Object editingO;
	private int userRole;
	private Component c; // The form that is to repaint on updates (i.e.
							// MainForm)

	public DynamicDateComboBox(Component c, Object obj) {
		this(c, obj, UserRole.MDI_R_USER);
	}
	public DynamicDateComboBox(Component c, Object obj, int userRole) {
		this.c = c;
		this.obj = obj;
		this.userRole = userRole;
		this.setDisabledForeground(Color.BLACK);
		addItemListener(this);
	}

	public Object getObject() {
		return obj;
	}

	// I think this was fixed in a JIDE update
	// Known error, when manually typing into the input box (not using the
	// calendar) then mouse over the down arrow repaint sets the calendar back
	// (no focus lost called)
	public void paintComponent(Graphics g) {
		Object o = getObject();
		try {
			Calendar value = null;
			if (o != null)
				value = getObjectValue();
			if (!hasFocus() && o != null && value != getCalendar()) { // (value==null
																		// &&
																		// getCalendar()
																		// !=
																		// null
																		// ||
																		// value
																		// !=
																		// null
																		// &&
																		// value
																		// !=
																		// getCalendar())){
				update = false;
				setCalendar(value);
				update = true;
			}
			if (shouldBeEnabled() != isEnabled())
				setEnabled(shouldBeEnabled());
		} catch (Exception e) {
			e.printStackTrace();
		}
		super.paintComponent(g);
	}

	public void itemStateChanged(ItemEvent ie) {
		try {
			if (update && ie.getStateChange() == ItemEvent.SELECTED) {
				updateObject(getCalendar());
				if (c != null)
					c.repaint();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	public void focusGained(FocusEvent fe) {
		if (fe.getOppositeComponent() != null)
			editingO = getObject();
		// editingO = getObject();
	}

	public void focusLost(FocusEvent fe) {
		try {
			if (update && getDate() != null) {
				Calendar cal = Calendar.getInstance();
				cal.setTime(getDate());
				updateObject(cal);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		if (c != null)
			c.repaint();
	}

	public boolean shouldBeEnabled() throws SQLException {
		return getObject() != null && hasPermission();
	}

	public boolean hasPermission() throws SQLException {
		return TopFlight.getInstance().hasAccessRight(userRole);
	}

	public abstract Calendar getObjectValue() throws SQLException;

	public abstract void updateObject(Calendar cal) throws SQLException;

	public Object getEditingObject() {
		return editingO;
	}
}