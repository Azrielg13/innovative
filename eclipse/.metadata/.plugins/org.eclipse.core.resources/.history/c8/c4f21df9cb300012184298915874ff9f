package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.ScopeItemCostYearDAO;
@Entity
@Table(schema="MDI",name="MDISX4_SCOPE_ITEM_COST_YEAR")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ScopeItemCostYear o WHERE o.SCOPE_ITEM_ID=?1 AND o.YEAR=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ScopeItemCostYear o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ScopeItemCostYear o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByScopeItem", query="SELECT o FROM ScopeItemCostYear o WHERE o.SCOPE_ITEM_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDISX4_SCOPE_ITEM_COST_YEAR o WHERE o.SCOPE_ITEM_ID=? AND o.YEAR=?"),//AUTO-GENERATED
})
public class ScopeItemCostYear extends ScopeItemCostYearDAO implements Serializable{

	private static final long serialVersionUID = 898362721668255594L;
	private static final String BSS_FIELDS = "COST,INSERT_TS,DELETED_TS";
	public ScopeItemCostYear(){
	}
	public ScopeItemCostYear(int scopeItemId, int year) {
		super(scopeItemId, year);
	}
	public ScopeItemCostYear(ScopeItemCostYear scopeItemCostYear) {
		super(scopeItemCostYear);
	}
	public boolean isEditable(int simId, String field) throws SQLException{
		if(getScopeItem() != null && getScopeItem().getSceProjElemCost() != null && getScopeItem().getSceProjElemCost().getSceProjRev() != null){
			if(BSS_FIELDS.contains(field))return getScopeItem().getSceProjElemCost().getSceProjRev().isBSSEditable(simId);
		}
		else
			return true;
		throw new SQLException("Unknown Field: "+field);
	}
	
	public double getTotalEscalation(int newYear) throws SQLException{
		if(newYear < getYear())return getTotalDescalation(newYear);
		Program program = getScopeItem().getSceProjElemCost().getSceProjRev().getProgram();
		SceElem sceElem = getScopeItem().getSceProjElemCost().getSceElem();
		Calendar unitCostBasisDate = getScopeItem().getUnitCostBasisDate();
		double te = 1;
		for(int year=getYear()+1; year<=newYear; year++){
			EscalationRate er = EscalationRate.getInstance(program, sceElem, year, unitCostBasisDate, true);
			if(er != null)
				te *= 1+er.getEscalationRate();
		}
		return te;
	}
	
	public double getTotalDescalation(int newYear) throws SQLException{
		Program program = getScopeItem().getSceProjElemCost().getSceProjRev().getProgram();
		SceElem sceElem = getScopeItem().getSceProjElemCost().getSceElem();
		Calendar unitCostBasisDate = getScopeItem().getUnitCostBasisDate();
		double te = 1;
		for(int year=newYear+1; year<=getYear(); year++){
			EscalationRate er = EscalationRate.getInstance(program, sceElem, year, unitCostBasisDate, true);
			if(er != null)
				te *= 1/(1+er.getEscalationRate());
		}
		return te;
	}
	/**
	 * Returns the cost
	 * @param ifYear 
	 * @return The cost
	 */
	public int getCost(int ifYear)throws SQLException{
		return (int)Math.round(getCost()*getTotalEscalation(ifYear));
	}
}
