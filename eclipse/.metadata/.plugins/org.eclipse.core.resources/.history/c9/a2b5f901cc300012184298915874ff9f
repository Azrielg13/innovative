package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AbstractTask;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.ProjTask;
import com.sce.esp.object.model.ScheduleTask;
import com.sce.esp.object.model.TaskType;
import com.sce.esp.object.model.TtResource;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class TaskTypeDAO extends AbstractTask<TtResource>{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,NAME,DESCRIPTION,PARENT_ID,EST_EFFORT,SHIFT,EST_DURATION,DELIVERABLE,PERF_CRIT,DATA,COLOR,WORK_TYPE_ID};
	public final static int ID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 512;
	public final static int PARENTID_LIMIT = 9;
	public final static int ESTEFFORT_LIMIT = 24;
	public final static int SHIFT_LIMIT = 24;
	public final static int ESTDURATION_LIMIT = 24;
	public final static int DELIVERABLE_LIMIT = 256;
	public final static int PERFCRIT_LIMIT = 256;
	public final static int DATA_LIMIT = 2048;
	public final static int COLOR_LIMIT = 8;
	public final static int WORKTYPEID_LIMIT = 9;
	private int id;
	private String name;
	private String description;
	private int parentId;
	private double estEffort;
	private double shift;
	private double estDuration;
	private String deliverable;
	private String perfCrit;
	private String data;
	private int color = 6929132;
	private int workTypeId;
	private Collection<TaskType> taskTypes;
	private Collection<TtResource> resources;
	private Collection<ProjTask> projTasks;
	private Collection<ScheduleTask> scheduleTasks;
	private TaskType parent;
	private LookUp workType;
	public static TaskType getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static TaskType getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		TaskType o = null;
		if(cache != null && cache.contains(TaskType.class, pk))
			o = em.find(TaskType.class, pk);
		if(o==null && getAICache().contains(TaskType.class, pk))
			o = getAICache().find(TaskType.class, pk);
		if(o==null && fetch)
			o = em.find(TaskType.class, pk);
		if(o==null && fetch && TaskType.class.getAnnotation(AutoInsertable.class) != null){
			o = new TaskType(id);
			getAICache().cache(TaskType.class, o);
		}
		return o;
	}
	public static Collection<TaskType> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<TaskType> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<TaskType> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM TaskType o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<TaskType> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TaskType> tq = em.createQuery(jpql,TaskType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<TaskType> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TaskType> tq = em.createNamedQuery(name,TaskType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TaskTypeDAO(){}
	public TaskTypeDAO(int id){
		this.id=id;
	}
	public TaskTypeDAO(TaskTypeDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(TaskTypeDAO orig){
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.parentId=orig.getParentId();
		this.estEffort=orig.getEstEffort();
		this.shift=orig.getShift();
		this.estDuration=orig.getEstDuration();
		this.deliverable=orig.getDeliverable();
		this.perfCrit=orig.getPerfCrit();
		this.data=orig.getData();
		this.color=orig.getColor();
		this.workTypeId=orig.getWorkTypeId();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT00_SEQ",sequenceName="MDIT00_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=512)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="PARENT_ID",nullable=true,length=9)
	public int getParentId(){
		return parentId;
	}
	public void setParentId(int parentId) throws java.sql.SQLException{
		if(isSame(parentId, getParentId()))return;
		int oldValue = getParentId();
		this.parentId=parentId;
		setProperty("PARENT_ID", parentId, oldValue);
		parent=null;
	}
	@Column(name="EST_EFFORT",nullable=true,length=24)
	public double getEstEffort(){
		return estEffort;
	}
	public void setEstEffort(double estEffort) throws java.sql.SQLException{
		if(isSame(estEffort, getEstEffort()))return;
		double oldValue = getEstEffort();
		this.estEffort=estEffort;
		setProperty("EST_EFFORT", estEffort, oldValue);
	}
	@Column(name="SHIFT",nullable=true,length=24)
	public double getShift(){
		return shift;
	}
	public void setShift(double shift) throws java.sql.SQLException{
		if(isSame(shift, getShift()))return;
		double oldValue = getShift();
		this.shift=shift;
		setProperty("SHIFT", shift, oldValue);
	}
	@Column(name="EST_DURATION",nullable=true,length=24)
	public double getEstDuration(){
		return estDuration;
	}
	public void setEstDuration(double estDuration) throws java.sql.SQLException{
		if(isSame(estDuration, getEstDuration()))return;
		double oldValue = getEstDuration();
		this.estDuration=estDuration;
		setProperty("EST_DURATION", estDuration, oldValue);
	}
	@Column(name="DELIVERABLE",nullable=true,length=256)
	public String getDeliverable(){
		return deliverable;
	}
	public void setDeliverable(String deliverable) throws java.sql.SQLException{
		if(isSame(deliverable, getDeliverable()))return;
		String oldValue = getDeliverable();
		this.deliverable=deliverable;
		setProperty("DELIVERABLE", deliverable, oldValue);
	}
	@Column(name="PERF_CRIT",nullable=true,length=256)
	public String getPerfCrit(){
		return perfCrit;
	}
	public void setPerfCrit(String perfCrit) throws java.sql.SQLException{
		if(isSame(perfCrit, getPerfCrit()))return;
		String oldValue = getPerfCrit();
		this.perfCrit=perfCrit;
		setProperty("PERF_CRIT", perfCrit, oldValue);
	}
	@Column(name="DATA",nullable=true,length=2048)
	public String getData(){
		return data;
	}
	public void setData(String data) throws java.sql.SQLException{
		if(isSame(data, getData()))return;
		String oldValue = getData();
		this.data=data;
		setProperty("DATA", data, oldValue);
	}
	@Column(name="COLOR",nullable=true,length=8)
	public int getColor(){
		return color;
	}
	public void setColor(int color) throws java.sql.SQLException{
		if(isSame(color, getColor()))return;
		int oldValue = getColor();
		this.color=color;
		setProperty("COLOR", color, oldValue);
	}
	@Column(name="WORK_TYPE_ID",nullable=true,length=9)
	public int getWorkTypeId(){
		return workTypeId;
	}
	public void setWorkTypeId(int workTypeId) throws java.sql.SQLException{
		if(isSame(workTypeId, getWorkTypeId()))return;
		int oldValue = getWorkTypeId();
		this.workTypeId=workTypeId;
		setProperty("WORK_TYPE_ID", workTypeId, oldValue);
		workType=null;
	}
	public TaskType getParent()throws java.sql.SQLException{
		if(parent==null)
			parent=TaskType.getInstance(getParentId());
		return parent;
	}
	public void setParent(TaskType parent)throws java.sql.SQLException{
		setParentId(parent==null?0:parent.getId());
		this.parent=parent;
	}
	public LookUp getWorkType()throws java.sql.SQLException{
		if(workType==null)
			workType=LookUp.getInstance(getWorkTypeId());
		return workType;
	}
	public void setWorkType(LookUp workType)throws java.sql.SQLException{
		setWorkTypeId(workType==null?0:workType.getId());
		this.workType=workType;
	}
	public Collection<TaskType> getTaskTypes()throws java.sql.SQLException{
		if(isNewInstance() || taskTypes != null){
			if(taskTypes == null)
				taskTypes = new TreeSet<TaskType>();
			return taskTypes;
		}
		return TaskType.getNamedCollection("findByParent",getId());
	}
	public void addTaskType(TaskType taskType)throws java.sql.SQLException{
		taskType.setParent((TaskType)this);
		if(isNewInstance() || taskTypes != null)
			getTaskTypes().add(taskType);
		else
			taskType.insert();
	}
	public void removeTaskType(TaskType taskType)throws java.sql.SQLException{
		if(isNewInstance() || taskTypes != null)
			getTaskTypes().remove(taskType);
		else
			taskType.delete();
	}
	public Collection<TtResource> getResources()throws java.sql.SQLException{
		if(isNewInstance() || resources != null){
			if(resources == null)
				resources = new TreeSet<TtResource>();
			return resources;
		}
		return TtResource.getNamedCollection("findByTaskType",getId());
	}
	public void addResource(TtResource resource)throws java.sql.SQLException{
		resource.setTaskType((TaskType)this);
		if(isNewInstance() || resources != null)
			getResources().add(resource);
		else
			resource.insert();
	}
	public void removeResource(TtResource resource)throws java.sql.SQLException{
		if(isNewInstance() || resources != null)
			getResources().remove(resource);
		else
			resource.delete();
	}
	public Collection<ProjTask> getProjTasks()throws java.sql.SQLException{
		if(isNewInstance() || projTasks != null){
			if(projTasks == null)
				projTasks = new TreeSet<ProjTask>();
			return projTasks;
		}
		return ProjTask.getNamedCollection("findByTaskType",getId());
	}
	public void addProjTask(ProjTask projTask)throws java.sql.SQLException{
		projTask.setTaskType((TaskType)this);
		if(isNewInstance() || projTasks != null)
			getProjTasks().add(projTask);
		else
			projTask.insert();
	}
	public void removeProjTask(ProjTask projTask)throws java.sql.SQLException{
		if(isNewInstance() || projTasks != null)
			getProjTasks().remove(projTask);
		else
			projTask.delete();
	}
	public Collection<ScheduleTask> getScheduleTasks()throws java.sql.SQLException{
		if(isNewInstance() || scheduleTasks != null){
			if(scheduleTasks == null)
				scheduleTasks = new TreeSet<ScheduleTask>();
			return scheduleTasks;
		}
		return ScheduleTask.getNamedCollection("findByTaskType",getId());
	}
	public void addScheduleTask(ScheduleTask scheduleTask)throws java.sql.SQLException{
		scheduleTask.setTaskType((TaskType)this);
		if(isNewInstance() || scheduleTasks != null)
			getScheduleTasks().add(scheduleTask);
		else
			scheduleTask.insert();
	}
	public void removeScheduleTask(ScheduleTask scheduleTask)throws java.sql.SQLException{
		if(isNewInstance() || scheduleTasks != null)
			getScheduleTasks().remove(scheduleTask);
		else
			scheduleTask.delete();
	}
	public TaskType copy()throws java.sql.SQLException{
		TaskType cp = new TaskType((TaskType)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TaskTypeDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(TaskType child:getTaskTypes())
			cp.addTaskType(child.copy());
		for(TtResource child:getResources())
			cp.addResource(child.copy());
		for(ProjTask child:getProjTasks())
			cp.addProjTask(child.copy());
		for(ScheduleTask child:getScheduleTasks())
			cp.addScheduleTask(child.copy());
	}
	public Vector<String> getDifference(TaskTypeDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getParentId(),o.getParentId())) diffs.add("PARENT_ID");
		if(!isSame(getEstEffort(),o.getEstEffort())) diffs.add("EST_EFFORT");
		if(!isSame(getShift(),o.getShift())) diffs.add("SHIFT");
		if(!isSame(getEstDuration(),o.getEstDuration())) diffs.add("EST_DURATION");
		if(!isSame(getDeliverable(),o.getDeliverable())) diffs.add("DELIVERABLE");
		if(!isSame(getPerfCrit(),o.getPerfCrit())) diffs.add("PERF_CRIT");
		if(!isSame(getData(),o.getData())) diffs.add("DATA");
		if(!isSame(getColor(),o.getColor())) diffs.add("COLOR");
		if(!isSame(getWorkTypeId(),o.getWorkTypeId())) diffs.add("WORK_TYPE_ID");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(parent != null && parent.isNewInstance())
				parent.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(taskTypes != null){
			for(TaskType taskType:getTaskTypes())
				taskType.setParent((TaskType)this);
		}
		if(resources != null){
			for(TtResource resource:getResources())
				resource.setTaskType((TaskType)this);
		}
		if(projTasks != null){
			for(ProjTask projTask:getProjTasks())
				projTask.setTaskType((TaskType)this);
		}
		if(scheduleTasks != null){
			for(ScheduleTask scheduleTask:getScheduleTasks())
				scheduleTask.setTaskType((TaskType)this);
		}
		if(taskTypes != null){
			for(TaskType taskType:getTaskTypes())
				if(taskType.isNewInstance())
					taskType.insert();
			taskTypes = null;
		}
		if(resources != null){
			for(TtResource resource:getResources())
				if(resource.isNewInstance())
					resource.insert();
			resources = null;
		}
		if(projTasks != null){
			for(ProjTask projTask:getProjTasks())
				if(projTask.isNewInstance())
					projTask.insert();
			projTasks = null;
		}
		if(scheduleTasks != null){
			for(ScheduleTask scheduleTask:getScheduleTasks())
				if(scheduleTask.isNewInstance())
					scheduleTask.insert();
			scheduleTasks = null;
		}
	}
}
