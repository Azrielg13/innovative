package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.ESPTestCase;


public class CktTest extends ESPTestCase{
	public void testGetInstance() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		assertNotNull(c);
		EspLogger.message(this, c);
	}
	public void testGetInstance2() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		assertNotNull(c);
		EspLogger.message(this, c);
	}
	public void testGetInstanceByName() throws SQLException{
		Ckt c = Ckt.getInstanceByName(2011, "Augusta");
		assertNotNull(c);
		EspLogger.message(this, c);
	}
	public void testGetCktGrowths() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		Collection<CktGrowth> cgs = c.getCktGrowths();
		assertNotSame(0,cgs.size());
		EspLogger.message(this, c+" Ckt Growths: "+cgs.size());
	}
	public void testGetCktGrowths2() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		Collection<CktGrowth> cgs = c.getCktGrowths();
		assertNotSame(0,cgs.size());
		EspLogger.message(this, c+" Ckt Growths: "+cgs.size());
	}
	public void testGetCktGrowths_Int() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		Collection<CktGrowth> cgs = c.getCktGrowths(0);
		assertNotSame(0,cgs.size());
		EspLogger.message(this, c+" Ckt Growths: "+cgs.size());
	}
	public void testGetCktGrowths_Int2() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		Collection<CktGrowth> cgs = c.getCktGrowths(0);
		assertNotSame(0,cgs.size());
		EspLogger.message(this, c+" Ckt Growths: "+cgs.size());
	}
	public void testGetCktGrowthsByYear() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		for(int year=2020; year>2010; year--){
			Collection<CktGrowth> cgs = new TreeSet<CktGrowth>();
			for(CktGrowth cg:c.getCktGrowths(0))
				if(cg.getYear()==year)
					cgs.add(cg);
			assertNotSame(0,cgs.size());
			EspLogger.message(this, c+" "+year+" Ckt Growths: "+cgs.size());
		}
	}
	public void testGetCktGrowthsByYear2() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		for(int year=2020; year>2010; year--){
			Collection<CktGrowth> cgs = new TreeSet<CktGrowth>();
			for(CktGrowth cg:c.getCktGrowths(0))
				if(cg.getYear()==year)
					cgs.add(cg);
			assertNotSame(0,cgs.size());
			EspLogger.message(this, c+" "+year+" Ckt Growths: "+cgs.size());
		}
	}
	public void testGetCktGrowth() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		for(int year=2020; year>2010; year--){
			int growth = (int)Math.round(c.getMVAFactor()*c.getYear(0, year).getGrowth());
			assertNotSame(0,growth);
			EspLogger.message(this, c+" "+year+" Growth: "+growth);
		}
	}
	public void testGetCktGrowth2() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		for(int year=2020; year>2010; year--){
			int growth = (int)Math.round(c.getMVAFactor()*c.getYear(0, year).getGrowth());
			assertNotSame(0,growth);
			EspLogger.message(this, c+" "+year+" Growth: "+growth);
		}
	}
	public void testGetCktGrowth3() throws SQLException{
		Ckt.AG_CACHE_ENABLED=false;
		Ckt c = Ckt.getInstance(2011, 4340);
		for(int year=2020; year>2010; year--){
			int growth = (int)Math.round(c.getMVAFactor()*c.getYear(0, year).getGrowth());
			assertNotSame(0,growth);
			EspLogger.message(this, c+" "+year+" Growth: "+growth);
		}
		Ckt.AG_CACHE_ENABLED=true;
	}
	public void testGetCktGrowth4() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		for(int year=2020; year>2010; year--){
			int growth = (int)Math.round(c.getMVAFactor()*c.getYear(0, year).getGrowth());
			assertNotSame(0,growth);
			EspLogger.message(this, c+" "+year+" Growth: "+growth);
		}
	}
	public void testGetCktProjLoad() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		for(int year=2020; year>2010; year--){
			int projLoad = (int)Math.round(c.getMVAFactor()*c.getYear(0, year).getProjLoad());
			assertNotSame(0,projLoad);
			EspLogger.message(this, c+" "+year+" Projected Load: "+projLoad);
		}
	}
	public void testGetCktProjLoad2() throws SQLException{
		Ckt c = Ckt.getInstance(2011, 4340);
		for(int year=2020; year>2010; year--){
			int projLoad = (int)Math.round(c.getMVAFactor()*c.getYear(0, year).getProjLoad());
			assertNotSame(0,projLoad);
			EspLogger.message(this, c+" "+year+" Projected Load: "+projLoad);
		}
	}
}