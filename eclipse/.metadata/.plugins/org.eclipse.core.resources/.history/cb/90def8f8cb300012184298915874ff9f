/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.TimeCrisisDAO;
@Entity
@Table(schema="MDI",name="MDI018_TIME_CRISIS")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM TimeCrisis o WHERE o.TRANS_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM TimeCrisis o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM TimeCrisis o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByUser", query="SELECT o FROM TimeCrisis o WHERE o.USERNAME_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI018_TIME_CRISIS o WHERE o.TRANS_ID=?"),//AUTO-GENERATED
})
public class TimeCrisis extends TimeCrisisDAO{
	
	/**
	 * The Constructor.
	 */
	public TimeCrisis(){
		super(0);
	}
	
	/**
	 * The Constructor.
	 * 
	 * @param transId the trans id
	 */
	public TimeCrisis(int transId){
		super(transId);
	}

	public TimeCrisis(TimeCrisis timeCrisis) {
		super(timeCrisis);
	}

	/**
	 * Returns the starttime.
	 * 
	 * @return The starttime
	 */
	public java.util.Calendar getStartTimeCal(){
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(getStartTime());
		return cal;
	}

	/**
	 * Sets the starttime.
	 * 
	 * @param The new starttime
	 * @param starttime the starttime
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setStartTime(java.util.Calendar starttime)throws SQLException{
		setStartTime(starttime.getTimeInMillis());
	}

	/**
	 * Returns the endtime.
	 * 
	 * @return The endtime
	 */
	public java.util.Calendar getEndTimeCal(){
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(getEndTime());
		return cal;
	}

	/**
	 * Sets the endtime.
	 * 
	 * @param endtime the endtime
	 * @param The new endtime
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setEndTime(java.util.Calendar endtime)throws SQLException{
		setEndTime(endtime.getTimeInMillis());
	}
	
	/**
	 * Gets the total time in millis.
	 * 
	 * @return the total time in millis
	 */
	public long getTotalTimeInMillis(){
		return getEndTime() - getStartTime();
	}
	
	/**
	 * Gets the total time str.
	 * 
	 * @return the total time str
	 */
	public String getTotalTimeStr(){
		return "Total Time ("+getCoreObject()+", "+getTask()+") : "+(getTotalTimeInMillis()/1000.0)+" secs";
	}
	
	
	/**
	 * Compare to.
	 * 
	 * @param o the o
	 * 
	 * @return the int
	 */
	public int compareTo(Object o){
		if(o instanceof TimeCrisis)
			return getEndTimeCal().compareTo(((TimeCrisis)o).getEndTimeCal())*-1;
		return super.compareTo(o);
	}
	
	public int getPlanyear(){
    	return Department.getActivePlanYear();
    }
}
