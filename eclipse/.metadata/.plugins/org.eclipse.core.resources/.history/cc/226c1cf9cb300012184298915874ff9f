/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;
import java.io.Serializable;
import java.sql.SQLException;
import java.util.Vector;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.ProjElemCostDAO;
@Entity
@Table(schema="MDI",name="MDI560_PROJ_ELEM_COST")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ProjElemCost o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.COST_ID=?3"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ProjElemCost o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ProjElemCost o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByProjElem", query="SELECT o FROM ProjElemCost o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.PROJ_ID=?3 AND o.ELEM_ID=?4 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI560_PROJ_ELEM_COST o WHERE o.PLANYEAR=? AND o.SIM_ID=? AND o.COST_ID=?"),//AUTO-GENERATED
})
public class ProjElemCost extends ProjElemCostDAO implements Serializable{

	private static final long serialVersionUID = 7884469767755512176L;
	public final static int COST_SEARCH_RANGE=15;

	public ProjElemCost() {
		super(0,0,0);
	}

	public ProjElemCost(int planyear) {
		super(planyear,0,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 * @param simId the sim id
	 */
	public ProjElemCost(int planyear, int simId) {
		super(planyear,simId,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 * @param simId the sim id
	 * @param costId the cost id
	 */
	public ProjElemCost(int planyear, int simId, int costId){
		super(planyear,simId,costId);
	}

	public ProjElemCost(ProjElemCost projElemCost) {
		super (projElemCost);
	}

	/**
	 * Returns the Element Title for display on the Cost Panels
	 * 
	 * @return String title, number, or miscellaneous
	 * @throws SQLException 
	 * 
	 */	
	public String getStageTitle() throws SQLException{
		switch(getStage()){
			case ProjElem.PLAN_EST:
				if(isUseCalc() && getSubUnitCost()!=null)
					return getSubUnitCost().getTitle();
			case ProjElem.PWEE_COST:
				if(getPweeId() != null && getPweeId().length() > 0)	
					return getPweeId();
			case ProjElem.WO_COST:
				if(getWo() != null && getWo().length() > 0)	
					return getWo();
			case ProjElem.APPROVED:
				//do nothing BJS
		}
		if(getTitle() != null && getTitle().length() > 0)	
			return getTitle();
		return "Miscellaneous";
	}	


	/**
	 * PEC Stage with Stage name included
	 * @return String
	 */
	public String getScopeWithStage(){
		String s="N/A";
		if(getScope()!=null)
			s=getScope();
		return s+" ("+		
		ProjElem.STAGE_NAME[getStage()]+
		(getStage()==ProjElem.PWEE_COST && getPweeId()!=null?" "+getPweeId():"")+
		(getStage()==ProjElem.WO_COST && getWo()!=null ?" "+getWo():"")+      
		")";
	}



	/**
	 * Gets the cost.
	 * 
	 * @param year the year
	 * 
	 * @return planyear, simId costId,year
	 * 
	 * @throws SQLException the SQL exception
	 */
	public ProjElemCostYear getProjElemCostYear(int year)throws SQLException{
		return ProjElemCostYear.getInstance(getPlanyear(),getSimId(),getCostId(),year);
	}

	/**
	 * Gets the proj.
	 * 
	 * @return the proj
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Proj getProj()throws SQLException {
		return Proj.getInstance(getPlanyear(), getSimId(), getProjId());
	}	

	public boolean isApproved()throws SQLException{
		return getProj().isApproved();
	}

	public Vector<String> getInsertStatus(){
		Vector<String> errors = new Vector<String>();
		if(isNull(getProjId())) errors.add("PROJ ID is Required.");
		if(isNull(getElemId())) errors.add("ELEM ID is Required.");
		return errors;
	}
}
