package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;

import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;

import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.CktSwt;
import com.sce.esp.object.model.CktTie;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;

public abstract class CktTieDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,ID};
	public static enum PROPERTY{PLANYEAR,ID,EFF_DATE,FROM_CKT_ID,TO_CKT_ID,CKT_SWT_TYPE_ID,SWT_NUM,ENABLED,LIMITING_FACTOR,CABLE,NOTE,TO_MAX_XFR,FROM_MAX_XFR};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int ID_LIMIT = 9;
	public final static int EFFDATE_LIMIT = 7;
	public final static int FROMCKTID_LIMIT = 9;
	public final static int TOCKTID_LIMIT = 9;
	public final static int CKTSWTTYPEID_LIMIT = 9;
	public final static int SWTNUM_LIMIT = 16;
	public final static int ENABLED_LIMIT = 1;
	public final static int LIMITINGFACTOR_LIMIT = 128;
	public final static int CABLE_LIMIT = 32;
	public final static int NOTE_LIMIT = 128;
	public final static int TOMAXXFR_LIMIT = 24;
	public final static int FROMMAXXFR_LIMIT = 24;
	private int planyear;
	private int id;
	private Calendar effDate;
	private int fromCktId;
	private int toCktId;
	private int cktSwtTypeId;
	private String swtNum;
	private boolean enabled;
	private String limitingFactor;
	private String cable;
	private String note;
	private double toMaxXfr;
	private double fromMaxXfr;
	private Department department;
	private Ckt ckt;
	private Ckt ckt2;
	private CktSwt cktSwt;
	public static CktTie getInstance(int planyear, int id)throws java.sql.SQLException{
		return getInstance(planyear, id, true);
	}
	public static CktTie getInstance(int planyear, int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, id);
		Cache cache = em.getEntityManagerFactory().getCache();
		CktTie o = null;
		if(cache != null && cache.contains(CktTie.class, pk))
			o = em.find(CktTie.class, pk);
		if(o==null && getAICache().contains(CktTie.class, pk))
			o = getAICache().find(CktTie.class, pk);
		if(o==null && fetch)
			o = em.find(CktTie.class, pk);
		if(o==null && fetch && CktTie.class.getAnnotation(AutoInsertable.class) != null){
			o = new CktTie(planyear, id);
			getAICache().cache(CktTie.class, o);
		}
		return o;
	}
	public static Collection<CktTie> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CktTie> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CktTie> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CktTie o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CktTie> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktTie> tq = em.createQuery(jpql,CktTie.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CktTie> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktTie> tq = em.createNamedQuery(name,CktTie.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CktTieDAO(){}
	public CktTieDAO(int planyear, int id){
		this.planyear=planyear;
		this.id=id;
	}
	public CktTieDAO(CktTieDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(CktTieDAO orig){
		this.effDate=orig.getEffDate();
		this.fromCktId=orig.getFromCktId();
		this.toCktId=orig.getToCktId();
		this.cktSwtTypeId=orig.getCktSwtTypeId();
		this.swtNum=orig.getSwtNum();
		this.enabled=orig.isEnabled();
		this.limitingFactor=orig.getLimitingFactor();
		this.cable=orig.getCable();
		this.note=orig.getNote();
		this.toMaxXfr=orig.getToMaxXfr();
		this.fromMaxXfr=orig.getFromMaxXfr();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI252_SEQ",sequenceName="MDI252_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="EFF_DATE",nullable=false,length=7)
	public Calendar getEffDate(){
		return effDate;
	}
	public void setEffDate(Calendar effDate) throws java.sql.SQLException{
		if(isSame(effDate, getEffDate()))return;
		Calendar oldValue = getEffDate();
		this.effDate=effDate;
		setProperty("EFF_DATE", effDate, oldValue);
	}
	@Column(name="FROM_CKT_ID",nullable=true,length=9)
	public int getFromCktId(){
		return fromCktId;
	}
	public void setFromCktId(int fromCktId) throws java.sql.SQLException{
		if(isSame(fromCktId, getFromCktId()))return;
		int oldValue = getFromCktId();
		this.fromCktId=fromCktId;
		setProperty("FROM_CKT_ID", fromCktId, oldValue);
		ckt=null;
	}
	@Column(name="TO_CKT_ID",nullable=true,length=9)
	public int getToCktId(){
		return toCktId;
	}
	public void setToCktId(int toCktId) throws java.sql.SQLException{
		if(isSame(toCktId, getToCktId()))return;
		int oldValue = getToCktId();
		this.toCktId=toCktId;
		setProperty("TO_CKT_ID", toCktId, oldValue);
		ckt2=null;
	}
	@Column(name="CKT_SWT_TYPE_ID",nullable=true,length=9)
	public int getCktSwtTypeId(){
		return cktSwtTypeId;
	}
	public void setCktSwtTypeId(int cktSwtTypeId) throws java.sql.SQLException{
		if(isSame(cktSwtTypeId, getCktSwtTypeId()))return;
		int oldValue = getCktSwtTypeId();
		this.cktSwtTypeId=cktSwtTypeId;
		setProperty("CKT_SWT_TYPE_ID", cktSwtTypeId, oldValue);
		cktSwt=null;
	}
	@Column(name="SWT_NUM",nullable=true,length=16)
	public String getSwtNum(){
		return swtNum;
	}
	public void setSwtNum(String swtNum) throws java.sql.SQLException{
		if(isSame(swtNum, getSwtNum()))return;
		String oldValue = getSwtNum();
		this.swtNum=swtNum;
		setProperty("SWT_NUM", swtNum, oldValue);
	}
	@Column(name="ENABLED",nullable=true,length=1)
	public boolean isEnabled(){
		return enabled;
	}
	public void setEnabled(boolean enabled) throws java.sql.SQLException{
		if(isSame(enabled, isEnabled()))return;
		boolean oldValue = isEnabled();
		this.enabled=enabled;
		setProperty("ENABLED", enabled, oldValue);
	}
	@Column(name="LIMITING_FACTOR",nullable=true,length=128)
	public String getLimitingFactor(){
		return limitingFactor;
	}
	public void setLimitingFactor(String limitingFactor) throws java.sql.SQLException{
		if(isSame(limitingFactor, getLimitingFactor()))return;
		String oldValue = getLimitingFactor();
		this.limitingFactor=limitingFactor;
		setProperty("LIMITING_FACTOR", limitingFactor, oldValue);
	}
	@Column(name="CABLE",nullable=true,length=32)
	public String getCable(){
		return cable;
	}
	public void setCable(String cable) throws java.sql.SQLException{
		if(isSame(cable, getCable()))return;
		String oldValue = getCable();
		this.cable=cable;
		setProperty("CABLE", cable, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=128)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="TO_MAX_XFR",nullable=true,length=24)
	public double getToMaxXfr(){
		return toMaxXfr;
	}
	public void setToMaxXfr(double toMaxXfr) throws java.sql.SQLException{
		if(isSame(toMaxXfr, getToMaxXfr()))return;
		double oldValue = getToMaxXfr();
		this.toMaxXfr=toMaxXfr;
		setProperty("TO_MAX_XFR", toMaxXfr, oldValue);
	}
	@Column(name="FROM_MAX_XFR",nullable=true,length=24)
	public double getFromMaxXfr(){
		return fromMaxXfr;
	}
	public void setFromMaxXfr(double fromMaxXfr) throws java.sql.SQLException{
		if(isSame(fromMaxXfr, getFromMaxXfr()))return;
		double oldValue = getFromMaxXfr();
		this.fromMaxXfr=fromMaxXfr;
		setProperty("FROM_MAX_XFR", fromMaxXfr, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getFromCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setFromCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public Ckt getCkt2()throws java.sql.SQLException{
		if(ckt2==null)
			ckt2=Ckt.getInstance(getPlanyear(), getToCktId());
		return ckt2;
	}
	public void setCkt2(Ckt ckt2)throws java.sql.SQLException{
		setToCktId(ckt2==null?0:ckt2.getCktId());
		this.ckt2=ckt2;
	}
	public CktSwt getCktSwt()throws java.sql.SQLException{
		if(cktSwt==null)
			cktSwt=CktSwt.getInstance(getPlanyear(), getCktSwtTypeId());
		return cktSwt;
	}
	public void setCktSwt(CktSwt cktSwt)throws java.sql.SQLException{
		setCktSwtTypeId(cktSwt==null?0:cktSwt.getSwtTypeId());
		this.cktSwt=cktSwt;
	}
	public CktTie copy()throws java.sql.SQLException{
		CktTie cp = new CktTie((CktTie)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CktTieDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CktTieDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getEffDate(),o.getEffDate())) diffs.add("EFF_DATE");
		if(!isSame(getFromCktId(),o.getFromCktId())) diffs.add("FROM_CKT_ID");
		if(!isSame(getToCktId(),o.getToCktId())) diffs.add("TO_CKT_ID");
		if(!isSame(getCktSwtTypeId(),o.getCktSwtTypeId())) diffs.add("CKT_SWT_TYPE_ID");
		if(!isSame(getSwtNum(),o.getSwtNum())) diffs.add("SWT_NUM");
		if(!isSame(isEnabled(),o.isEnabled())) diffs.add("ENABLED");
		if(!isSame(getLimitingFactor(),o.getLimitingFactor())) diffs.add("LIMITING_FACTOR");
		if(!isSame(getCable(),o.getCable())) diffs.add("CABLE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getToMaxXfr(),o.getToMaxXfr())) diffs.add("TO_MAX_XFR");
		if(!isSame(getFromMaxXfr(),o.getFromMaxXfr())) diffs.add("FROM_MAX_XFR");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
