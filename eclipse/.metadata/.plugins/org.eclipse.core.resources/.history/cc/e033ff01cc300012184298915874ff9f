package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PifBi;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PifBiDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,BI_ID};
	public static enum PROPERTY{PLANYEAR,BI_ID,BI,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,DESCRIPTION,WBS_ELEM,PIF_BI_RGT};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int BIID_LIMIT = 9;
	public final static int BI_LIMIT = 250;
	public final static int DESCRIPTION_LIMIT = 256;
	public final static int WBSELEM_LIMIT = 256;
	public final static int PIFBIRGT_LIMIT = 1;
	private int planyear;
	private int biId;
	private String bi;
	private String description;
	private String wbsElem;
	private boolean pifBiRgt;
	private Department department;
	public static PifBi getInstance(int planyear, int biId)throws java.sql.SQLException{
		return getInstance(planyear, biId, true);
	}
	public static PifBi getInstance(int planyear, int biId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, biId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, biId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifBi o = null;
		if(cache != null && cache.contains(PifBi.class, pk))
			o = em.find(PifBi.class, pk);
		if(o==null && getAICache().contains(PifBi.class, pk))
			o = getAICache().find(PifBi.class, pk);
		if(o==null && fetch)
			o = em.find(PifBi.class, pk);
		if(o==null && fetch && PifBi.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifBi(planyear, biId);
			getAICache().cache(PifBi.class, o);
		}
		return o;
	}
	public static Collection<PifBi> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifBi> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifBi> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifBi o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifBi> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifBi> tq = em.createQuery(jpql,PifBi.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifBi> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifBi> tq = em.createNamedQuery(name,PifBi.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifBiDAO(){}
	public PifBiDAO(int planyear, int biId){
		this.planyear=planyear;
		this.biId=biId;
	}
	public PifBiDAO(PifBiDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(PifBiDAO orig){
		this.bi=orig.getBi();
		this.description=orig.getDescription();
		this.wbsElem=orig.getWbsElem();
		this.pifBiRgt=orig.isPifBiRgt();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, biId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI620_SEQ",sequenceName="MDI620_SEQ")
	@Column(name="BI_ID",nullable=false,length=9)
	public int getBiId(){
		return biId;
	}
	public void setBiId(int biId) throws java.sql.SQLException{
		if(isSame(biId, getBiId()))return;
		int oldValue = getBiId();
		this.biId=biId;
		setProperty("BI_ID", biId, oldValue);
	}
	@Column(name="BI",nullable=false,length=250)
	public String getBi(){
		return bi;
	}
	public void setBi(String bi) throws java.sql.SQLException{
		if(isSame(bi, getBi()))return;
		String oldValue = getBi();
		this.bi=bi;
		setProperty("BI", bi, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="WBS_ELEM",nullable=true,length=256)
	public String getWbsElem(){
		return wbsElem;
	}
	public void setWbsElem(String wbsElem) throws java.sql.SQLException{
		if(isSame(wbsElem, getWbsElem()))return;
		String oldValue = getWbsElem();
		this.wbsElem=wbsElem;
		setProperty("WBS_ELEM", wbsElem, oldValue);
	}
	@Column(name="PIF_BI_RGT",nullable=true,length=1)
	public boolean isPifBiRgt(){
		return pifBiRgt;
	}
	public void setPifBiRgt(boolean pifBiRgt) throws java.sql.SQLException{
		if(isSame(pifBiRgt, isPifBiRgt()))return;
		boolean oldValue = isPifBiRgt();
		this.pifBiRgt=pifBiRgt;
		setProperty("PIF_BI_RGT", pifBiRgt, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public PifBi copy()throws java.sql.SQLException{
		PifBi cp = new PifBi((PifBi)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifBiDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PifBiDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getBiId(),o.getBiId())) diffs.add("BI_ID");
		if(!isSame(getBi(),o.getBi())) diffs.add("BI");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getWbsElem(),o.getWbsElem())) diffs.add("WBS_ELEM");
		if(!isSame(isPifBiRgt(),o.isPifBiRgt())) diffs.add("PIF_BI_RGT");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
