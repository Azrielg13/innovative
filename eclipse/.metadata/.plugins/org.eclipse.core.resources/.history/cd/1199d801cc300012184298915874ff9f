package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CprPlant;
import com.sce.esp.object.model.CprPrime;
import com.sce.esp.object.model.CprSub;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CprPlantDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,NAME,DESCRIPTION};
	public final static int ID_LIMIT = 9;
	public final static int NAME_LIMIT = 32;
	public final static int DESCRIPTION_LIMIT = 128;
	private int id;
	private String name;
	private String description;
	private Collection<CprPrime> cprPrimes;
	private Collection<CprSub> cprSubs;
	public static CprPlant getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static CprPlant getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		CprPlant o = null;
		if(cache != null && cache.contains(CprPlant.class, pk))
			o = em.find(CprPlant.class, pk);
		if(o==null && getAICache().contains(CprPlant.class, pk))
			o = getAICache().find(CprPlant.class, pk);
		if(o==null && fetch)
			o = em.find(CprPlant.class, pk);
		if(o==null && fetch && CprPlant.class.getAnnotation(AutoInsertable.class) != null){
			o = new CprPlant(id);
			getAICache().cache(CprPlant.class, o);
		}
		return o;
	}
	public static Collection<CprPlant> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CprPlant> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CprPlant> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CprPlant o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CprPlant> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CprPlant> tq = em.createQuery(jpql,CprPlant.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CprPlant> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CprPlant> tq = em.createNamedQuery(name,CprPlant.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CprPlantDAO(){}
	public CprPlantDAO(int id){
		this.id=id;
	}
	public CprPlantDAO(CprPlantDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(CprPlantDAO orig){
		this.name=orig.getName();
		this.description=orig.getDescription();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDISC0_SEQ",sequenceName="MDISC0_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="NAME",nullable=false,length=32)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=false,length=128)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	public Collection<CprPrime> getCprPrimes()throws java.sql.SQLException{
		if(isNewInstance() || cprPrimes != null){
			if(cprPrimes == null)
				cprPrimes = new TreeSet<CprPrime>();
			return cprPrimes;
		}
		return CprPrime.getNamedCollection("findByCprPlant",getId());
	}
	public void addCprPrime(CprPrime cprPrime)throws java.sql.SQLException{
		cprPrime.setCprPlant((CprPlant)this);
		if(isNewInstance() || cprPrimes != null)
			getCprPrimes().add(cprPrime);
		else
			cprPrime.insert();
	}
	public void removeCprPrime(CprPrime cprPrime)throws java.sql.SQLException{
		if(isNewInstance() || cprPrimes != null)
			getCprPrimes().remove(cprPrime);
		else
			cprPrime.delete();
	}
	public Collection<CprSub> getCprSubs()throws java.sql.SQLException{
		if(isNewInstance() || cprSubs != null){
			if(cprSubs == null)
				cprSubs = new TreeSet<CprSub>();
			return cprSubs;
		}
		return CprSub.getNamedCollection("findByCprPlant",getId());
	}
	public void addCprSub(CprSub cprSub)throws java.sql.SQLException{
		cprSub.setCprPlant((CprPlant)this);
		if(isNewInstance() || cprSubs != null)
			getCprSubs().add(cprSub);
		else
			cprSub.insert();
	}
	public void removeCprSub(CprSub cprSub)throws java.sql.SQLException{
		if(isNewInstance() || cprSubs != null)
			getCprSubs().remove(cprSub);
		else
			cprSub.delete();
	}
	public CprPlant copy()throws java.sql.SQLException{
		CprPlant cp = new CprPlant((CprPlant)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CprPlantDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(CprPrime child:getCprPrimes())
			cp.addCprPrime(child.copy());
		for(CprSub child:getCprSubs())
			cp.addCprSub(child.copy());
	}
	public Vector<String> getDifference(CprPlantDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
	}
	public void insertChildren()throws java.sql.SQLException{
		if(cprPrimes != null){
			for(CprPrime cprPrime:getCprPrimes())
				cprPrime.setCprPlant((CprPlant)this);
		}
		if(cprSubs != null){
			for(CprSub cprSub:getCprSubs())
				cprSub.setCprPlant((CprPlant)this);
		}
		if(cprPrimes != null){
			for(CprPrime cprPrime:getCprPrimes())
				if(cprPrime.isNewInstance())
					cprPrime.insert();
			cprPrimes = null;
		}
		if(cprSubs != null){
			for(CprSub cprSub:getCprSubs())
				if(cprSub.isNewInstance())
					cprSub.insert();
			cprSubs = null;
		}
	}
}
