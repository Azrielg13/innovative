/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.CktMonthlyDAO;
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.util.db.PDBConnection;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI235_CKT_MONTHLY")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM CktMonthly o WHERE o.PLANYEAR=?1 AND o.CKT_ID=?2 AND o.YEAR=?3 AND o.MONTH=?4"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM CktMonthly o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM CktMonthly o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI235_CKT_MONTHLY o WHERE o.PLANYEAR=? AND o.CKT_ID=? AND o.YEAR=? AND o.MONTH=?"),//AUTO-GENERATED
})
public class CktMonthly extends CktMonthlyDAO implements MonthlyPeak, Serializable{
	/**
	 * 
	 */
	private static final long serialVersionUID = 828673474981180430L;
	private boolean userSpec;
	private Calendar maxDate;
	private Calendar peakDate;

	/**
	 * The Constructor.
	 * 
	 * @param cktId the ckt id
	 * @param month the month
	 * @param planyear the planyear
	 * @param year the year
	 */
	public CktMonthly(){
	}
	public CktMonthly(int planyear, int cktId, int year, int month){
		super(planyear,cktId,year,month);
	}

	public CktMonthly(CktMonthly cktMonthly) {
		super(cktMonthly);
	}

	/**
	 * Gets the max daily peak.
	 * 
	 * @return the max daily peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public CktDaily getMaxDailyPeak()throws SQLException{
		return CktDaily.getInstance(getPlanyear(),getCktId(),getMaxDate());
	}

	/**
	 * Gets the max value.
	 * 
	 * @return the max value
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getMaxValue()throws SQLException{
		return getMaxDailyPeak().getActualPeak();
	}
	
	/**
	 * Gets the daily peak.
	 * 
	 * @return the daily peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public CktDaily getDailyPeak()throws SQLException{
		return CktDaily.getInstance(getPlanyear(),getCktId(),getPeakDate());
	}

	/**
	 * Refresh.
	 * 
	 * @param rs the rs
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void refresh(ResultSet rs) throws SQLException {
		throw new SQLException("This method should never be called");
	}

	/**
	 * FIXME mdi 2.3 add NPE check
	 * Gets the peak value.
	 * 
	 * @return the peak value
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getPeakValue()throws SQLException{
		if(getDailyPeak()!=null)
			return getDailyPeak().getActualPeak();
		return 0;
	}

	/**
	 * Sets the peak value.
	 * 
	 * @param value the value
	 * @param planyear the planyear
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setPeakValue(double value)throws SQLException{
		DailyPeak dp = getDailyPeak();
		double peakAdj = value-(dp.getRecordedPeak()+dp.getGenAdjustment());
		dp.setPeakAdj((int)Math.round(peakAdj*getCkt().getMVAFactor()));
		//If we are adjusting down we will hard code the date as the peak
		if(peakAdj < 0)
			setPeakDate(dp.getDate());
	}
	public Calendar getPeakDate(){
		if(peakDate == null)
			try {
				return getMaxDate();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		return peakDate;
	}
	public void setPeakDate(Calendar peakDate) throws SQLException{
		super.setPeakDate(peakDate);
		this.peakDate = peakDate;
	}
	/**
	 * Refresh.
	 *
	 * @return true, if refresh
	 *
	 * @throws SQLException the SQL exception
	 */
	public void refresh()throws SQLException{
		Connection con = PDBConnection.getInstance().getConnection();
		CallableStatement cs = con.prepareCall("{call P_CKT_MONTHLY(?,?,?,?,?,?,?)}");
		cs.setInt(1, getPlanyear());
		cs.setInt(2, getCktId());
		cs.setInt(3, getYear());
		cs.setInt(4, getMonth());
		cs.registerOutParameter(5, Types.DATE);
		cs.registerOutParameter(6, Types.INTEGER);
		cs.registerOutParameter(7, Types.DATE);
		cs.execute();
		if(cs.getDate(5) != null){
			if(peakDate == null)
				peakDate = Calendar.getInstance();
			peakDate.setTime(cs.getDate(5));
			userSpec = cs.getBoolean(6);
			if(maxDate == null)
				maxDate = Calendar.getInstance();
			maxDate.setTime(cs.getDate(7));
		}
		cs.close();
	}
	public boolean isUserSpec(){
		return userSpec;
	}
	public Calendar getMaxDate() throws SQLException{
		if(maxDate==null)
			refresh();
		return maxDate;
	}
}
