package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.CostTypeDAO;
import com.sce.esp.util.Calculate;
@Entity
@Table(schema="MDI",name="MDIU25_COST_TYPE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM CostType o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM CostType o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM CostType o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIU25_COST_TYPE o WHERE o.ID=?"),//AUTO-GENERATED
})
public class CostType extends CostTypeDAO{
	public static final int MATERIAL = 1;
	public static final int SUB_CONT = 2;
	public static final int OTHER_COST = 21;
	public static final int MATERIAL_GROUP = 220;
	public static final int SUB_CONT_GROUP = 221;
	public static final int CRAFT_GROUP = 222;
	public static final int NON_CRAFT_GROUP = 223;
	
	public static Collection<CostType> getMaterialCostTypes() throws SQLException{
		return getCostTypes(MATERIAL_GROUP);
	}
	public static Collection<CostType> getSubContractCostTypes() throws SQLException{
		return getCostTypes(SUB_CONT_GROUP);
	}
	public static Collection<CostType> getCraftCostTypes() throws SQLException{
		return getCostTypes(CRAFT_GROUP);
	}
	public static Collection<CostType> getNonCraftCostTypes() throws SQLException{
		return getCostTypes(NON_CRAFT_GROUP);
	}
	public CostType(){
	}
	public CostType(int id){
		super(id);
	}
	public CostType(CostType orig){
		super(orig);
	}
	public String toString(){
		return getName();
	}
	private CostTypeRate getCostTypeRate(Calendar effDate) throws SQLException {
		for(CostTypeRate ctr:getCostTypeRates())
			if(effDate==null || !ctr.getEffDate().after(effDate))
				return ctr;
		return null;
	}
	private CostTypeRate getCostTypeRate4Edit(Calendar effDate) throws SQLException {
		CostTypeRate ctr = getCostTypeRate(effDate);
		if(ctr==null){
			ctr = new CostTypeRate();
			ctr.setEffDate(effDate);
			addCostTypeRate(ctr);
		}
		else if(effDate.getTimeInMillis()-ctr.getEffDate().getTimeInMillis()>Calculate.ONE_DAY){
			ctr = ctr.copy();
			ctr.setEffDate(effDate);
			addCostTypeRate(ctr);
		}
		return ctr;
	}
	public double getRateSce(Calendar asOf) throws SQLException {
		CostTypeRate ctr = getCostTypeRate(asOf);
		if(ctr!=null)
			return ctr.getRateSce();
		return 1;
	}
	public void setRateSce(Calendar asOf, double rateSce) throws SQLException {
		getCostTypeRate4Edit(asOf).setRateSce(rateSce);
	}
	public double getRateCont(Calendar asOf) throws SQLException {
		CostTypeRate ctr = getCostTypeRate(asOf);
		if(ctr!=null)
			return ctr.getRateCont();
		return 1;
	}
	public void setRateCont(Calendar asOf, double rateCont) throws SQLException {
		getCostTypeRate4Edit(asOf).setRateCont(rateCont);
	}
	public int getEstYear(Calendar asOf) throws SQLException {
		CostTypeRate ctr = getCostTypeRate(asOf);
		if(ctr!=null)
			return ctr.getEstYear();
		return 0;
	}
	public void setEstYear(Calendar asOf, int estYear) throws SQLException {
		getCostTypeRate4Edit(asOf).setEstYear(estYear);
	}
	public Calendar getEffDate(Calendar asOf) throws SQLException {
		CostTypeRate ctr = getCostTypeRate(asOf);
		if(ctr!=null)
			return ctr.getEffDate();
		return null;
	}
	public double getContFactor(Calendar effDate) throws SQLException {
		CostTypeRate ctr = getCostTypeRate(effDate);
		if(ctr!=null)
			return ctr.getContFactor();
		return 0;
	}
	public void setContFactor(Calendar asOf, double contFactor) throws SQLException {
		getCostTypeRate4Edit(asOf).setContFactor(contFactor);
	}
	
	public static Collection<CostType> getCostTypes(int group) throws SQLException{
		return getCollection(new String[]{"COST_GROUP_ID","DELETED_TS"},group,null);
	}
	public double getNTRatio(Calendar effDate) throws SQLException {
		CostTypeRate ctr = getCostTypeRate(effDate);
		if(ctr!=null)
			return ctr.getNTRatio();
		return 0;
	}
	public void setNTRatio(Calendar asOf, double nTRatio) throws SQLException {
		getCostTypeRate4Edit(asOf).setNTRatio(nTRatio);
	}
}
