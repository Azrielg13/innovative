package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AgObject;
import com.sce.esp.object.model.District;
import com.sce.esp.object.model.Region;
import com.sce.esp.object.model.Sys;
import com.sce.esp.object.model.Zone;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class RegionDAO extends AgObject{
	public static enum KEY_PROPERTY{PLANYEAR,REGION_ID};
	public static enum PROPERTY{PLANYEAR,REGION_ID,ZONE_ID,REGION_NUM,REGION_NAME,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int REGIONID_LIMIT = 9;
	public final static int ZONEID_LIMIT = 9;
	public final static int REGIONNUM_LIMIT = 4;
	public final static int REGIONNAME_LIMIT = 20;
	private int planyear;
	private int regionId;
	private int zoneId;
	private int regionNum;
	private String regionName;
	private Collection<District> districts;
	private Collection<Sys> syss;
	private Zone zone;
	public static Region getInstance(int planyear, int regionId)throws java.sql.SQLException{
		return getInstance(planyear, regionId, true);
	}
	public static Region getInstance(int planyear, int regionId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, regionId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, regionId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Region o = null;
		if(cache != null && cache.contains(Region.class, pk))
			o = em.find(Region.class, pk);
		if(o==null && getAICache().contains(Region.class, pk))
			o = getAICache().find(Region.class, pk);
		if(o==null && fetch)
			o = em.find(Region.class, pk);
		if(o==null && fetch && Region.class.getAnnotation(AutoInsertable.class) != null){
			o = new Region(planyear, regionId);
			getAICache().cache(Region.class, o);
		}
		return o;
	}
	public static Collection<Region> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Region> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Region> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Region o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Region> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Region> tq = em.createQuery(jpql,Region.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Region> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Region> tq = em.createNamedQuery(name,Region.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public RegionDAO(){}
	public RegionDAO(int planyear, int regionId){
		this.planyear=planyear;
		this.regionId=regionId;
	}
	public RegionDAO(RegionDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(RegionDAO orig){
		this.zoneId=orig.getZoneId();
		this.regionNum=orig.getRegionNum();
		this.regionName=orig.getRegionName();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, regionId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI040_SEQ",sequenceName="MDI040_SEQ")
	@Column(name="REGION_ID",nullable=false,length=9)
	public int getRegionId(){
		return regionId;
	}
	public void setRegionId(int regionId) throws java.sql.SQLException{
		if(isSame(regionId, getRegionId()))return;
		int oldValue = getRegionId();
		this.regionId=regionId;
		setProperty("REGION_ID", regionId, oldValue);
	}
	@Column(name="ZONE_ID",nullable=false,length=9)
	public int getZoneId(){
		return zoneId;
	}
	public void setZoneId(int zoneId) throws java.sql.SQLException{
		if(isSame(zoneId, getZoneId()))return;
		int oldValue = getZoneId();
		this.zoneId=zoneId;
		setProperty("ZONE_ID", zoneId, oldValue);
		zone=null;
	}
	@Column(name="REGION_NUM",nullable=true,length=4)
	public int getRegionNum(){
		return regionNum;
	}
	public void setRegionNum(int regionNum) throws java.sql.SQLException{
		if(isSame(regionNum, getRegionNum()))return;
		int oldValue = getRegionNum();
		this.regionNum=regionNum;
		setProperty("REGION_NUM", regionNum, oldValue);
	}
	@Column(name="REGION_NAME",nullable=false,length=20)
	public String getRegionName(){
		return regionName;
	}
	public void setRegionName(String regionName) throws java.sql.SQLException{
		if(isSame(regionName, getRegionName()))return;
		String oldValue = getRegionName();
		this.regionName=regionName;
		setProperty("REGION_NAME", regionName, oldValue);
	}
	public Zone getZone()throws java.sql.SQLException{
		if(zone==null)
			zone=Zone.getInstance(getPlanyear(), getZoneId());
		return zone;
	}
	public void setZone(Zone zone)throws java.sql.SQLException{
		setZoneId(zone==null?0:zone.getZoneId());
		this.zone=zone;
	}
	public Collection<District> getDistricts()throws java.sql.SQLException{
		if(isNewInstance() || districts != null){
			if(districts == null)
				districts = new TreeSet<District>();
			return districts;
		}
		return District.getNamedCollection("findByRegion",getPlanyear(), getRegionId());
	}
	public void addDistrict(District district)throws java.sql.SQLException{
		district.setRegion((Region)this);
		if(isNewInstance() || districts != null)
			getDistricts().add(district);
		else
			district.insert();
	}
	public void removeDistrict(District district)throws java.sql.SQLException{
		if(isNewInstance() || districts != null)
			getDistricts().remove(district);
		else
			district.delete();
	}
	public Collection<Sys> getSyss()throws java.sql.SQLException{
		if(isNewInstance() || syss != null){
			if(syss == null)
				syss = new TreeSet<Sys>();
			return syss;
		}
		return Sys.getNamedCollection("findByRegion",getPlanyear(), getRegionId());
	}
	public void addSys(Sys sys)throws java.sql.SQLException{
		sys.setRegion((Region)this);
		if(isNewInstance() || syss != null)
			getSyss().add(sys);
		else
			sys.insert();
	}
	public void removeSys(Sys sys)throws java.sql.SQLException{
		if(isNewInstance() || syss != null)
			getSyss().remove(sys);
		else
			sys.delete();
	}
	public Region copy()throws java.sql.SQLException{
		Region cp = new Region((Region)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(RegionDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(District child:getDistricts())
			cp.addDistrict(child.copy());
		for(Sys child:getSyss())
			cp.addSys(child.copy());
	}
	public Vector<String> getDifference(RegionDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getRegionId(),o.getRegionId())) diffs.add("REGION_ID");
		if(!isSame(getZoneId(),o.getZoneId())) diffs.add("ZONE_ID");
		if(!isSame(getRegionNum(),o.getRegionNum())) diffs.add("REGION_NUM");
		if(!isSame(getRegionName(),o.getRegionName())) diffs.add("REGION_NAME");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(districts != null){
			for(District district:getDistricts()){
				if(district.isNewInstance())
					district.setRegion((Region)this);
				district.insert();
			}
			districts = null;
		}
		if(syss != null){
			for(Sys sys:getSyss()){
				if(sys.isNewInstance())
					sys.setRegion((Region)this);
				sys.insert();
			}
			syss = null;
		}
	}
}
