package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.BbankTie;
import com.sce.esp.object.model.BbankTrans;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Simulation;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class BbankTransDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,TIE_ID,YEAR};
	public static enum PROPERTY{PLANYEAR,SIM_ID,TIE_ID,YEAR,TRANSFER,CONFIRM,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int TIEID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int TRANSFER_LIMIT = 24;
	public final static int CONFIRM_LIMIT = 2;
	private BbankTrans ptr;
	private int planyear;
	private int simId;
	private int tieId;
	private int year;
	private double transfer;
	private int confirm;
	private BbankTie bbankTie;
	public static BbankTrans getInstance(int planyear, int simId, int tieId, int year)throws java.sql.SQLException{
		return getInstance(planyear, simId, tieId, year, true);
	}
	public static BbankTrans getInstance(int planyear, int simId, int tieId, int year, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, tieId, year))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, tieId, year);
		Cache cache = em.getEntityManagerFactory().getCache();
		BbankTrans o = null;
		if(cache != null && cache.contains(BbankTrans.class, pk))
			o = em.find(BbankTrans.class, pk);
		if(o==null && getAICache().contains(BbankTrans.class, pk))
			o = getAICache().find(BbankTrans.class, pk);
		if(o==null && fetch)
			o = em.find(BbankTrans.class, pk);
		if(o==null && fetch && BbankTrans.class.getAnnotation(AutoInsertable.class) != null){
			o = new BbankTrans(planyear, simId, tieId, year);
			getAICache().cache(BbankTrans.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<BbankTrans> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<BbankTrans> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<BbankTrans> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM BbankTrans o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<BbankTrans> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<BbankTrans> tq = em.createQuery(jpql,BbankTrans.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<BbankTrans> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<BbankTrans> tq = em.createNamedQuery(name,BbankTrans.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public BbankTransDAO(){}
	public BbankTransDAO(int planyear, int simId, int tieId, int year){
		this.planyear=planyear;
		this.simId=simId;
		this.tieId=tieId;
		this.year=year;
	}
	public BbankTransDAO(BbankTransDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		this.tieId=orig.getTieId();
		this.year=orig.getYear();
		copyFrom(orig);
	}
	public void copyFrom(BbankTransDAO orig){
		this.transfer=orig.getTransfer();
		this.confirm=orig.getConfirm();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, tieId, year};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public BbankTrans getPtr(){
		return ptr;
	}
	public void setPtr(BbankTrans ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getTieId(), getYear()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Id
	@Column(name="TIE_ID",nullable=false,length=9)
	public int getTieId(){
		return tieId;
	}
	public void setTieId(int tieId) throws java.sql.SQLException{
		if(isSame(tieId, getTieId()))return;
		int oldValue = getTieId();
		this.tieId=tieId;
		setProperty("TIE_ID", tieId, oldValue);
		bbankTie=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Column(name="TRANSFER",nullable=false,length=24)
	public double getTransfer(){
		if(getPtr()!=null)
			return getPtr().getTransfer();
		return transfer;
	}
	public void setTransfer(double transfer) throws java.sql.SQLException{
		if(isSame(transfer, getTransfer()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		double oldValue = getTransfer();
		this.transfer=transfer;
		setProperty("TRANSFER", transfer, oldValue);
	}
	@Column(name="CONFIRM",nullable=true,length=2)
	public int getConfirm(){
		if(getPtr()!=null)
			return getPtr().getConfirm();
		return confirm;
	}
	public void setConfirm(int confirm) throws java.sql.SQLException{
		if(isSame(confirm, getConfirm()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getConfirm();
		this.confirm=confirm;
		setProperty("CONFIRM", confirm, oldValue);
	}
	public BbankTie getBbankTie()throws java.sql.SQLException{
		if(bbankTie==null)
			bbankTie=BbankTie.getInstance(getPlanyear(), getSimId(), getTieId());
		return bbankTie;
	}
	public void setBbankTie(BbankTie bbankTie)throws java.sql.SQLException{
		setTieId(bbankTie==null?0:bbankTie.getTieId());
		this.bbankTie=bbankTie;
	}
	public BbankTrans copy()throws java.sql.SQLException{
		BbankTrans cp = new BbankTrans((BbankTrans)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(BbankTransDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(BbankTransDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getTieId(),o.getTieId())) diffs.add("TIE_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getTransfer(),o.getTransfer())) diffs.add("TRANSFER");
		if(!isSame(getConfirm(),o.getConfirm())) diffs.add("CONFIRM");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
