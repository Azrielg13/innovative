/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.BbankTransN1DAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI200_BBANK_TRANS_N1")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM BbankTransN1 o WHERE o.PLANYEAR=?1 AND o.BBANK_SUB_ID=?2 AND o.TIE_ID=?3 AND o.YEAR=?4"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM BbankTransN1 o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM BbankTransN1 o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByBbank", query="SELECT o FROM BbankTransN1 o WHERE o.PLANYEAR=?1 AND o.BBANK_SUB_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI200_BBANK_TRANS_N1 o WHERE o.PLANYEAR=? AND o.BBANK_SUB_ID=? AND o.TIE_ID=? AND o.YEAR=?"),//AUTO-GENERATED
})
public class BbankTransN1 extends BbankTransN1DAO implements Serializable{


	/**
	 * 
	 */
	private static final long serialVersionUID = 594058558643006769L;

	/**
	 * The Constructor.
	 * 
	 * @param subId the sub id
	 * @param planyear the planyear
	 * @param year the year
	 * @param tieId the tie id
	 */
	public BbankTransN1(){
	}
	public BbankTransN1(int planyear, int subId, int tieId, int year){
		super(planyear,subId,tieId,year);
	}


	public BbankTransN1(BbankTransN1 bbankTransN1) {
		super(bbankTransN1);
	}

	/**
	 * Gets the n1 trans flag.
	 * 
	 * @return the n1 trans flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getN1TransFlag()throws SQLException{
		if(getTransfer() > 0){
			Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_XFER_FLAG);
			if(flag!=null && !flag.isDisabled() && flag.isShowFlag()){
				Bbank bbank = getBbank();
				if(bbank != null){
					if(bbank.getYear(getSimId(),getYear()).getN1Reserve() - getTransfer() > bbank.getYear(getSimId(),getYear()).getN1()*flag.getValue())
						return flag.getFlagId();
				}
			}
		}
		return 0;
	}

	/**
	 * Gets the tie.
	 * 
	 * @return the tie
	 * 
	 * @throws SQLException the SQL exception
	 */
	public BbankTie getTie() throws SQLException{
		return getBbankTie();
	}

	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString() {
		try {
			int dir = 1;
			Sub fromSub = getTie().getFromSub();
			Sub toSub = getTie().getToSub(); 
			if(getTransfer()<0) {
				fromSub = getTie().getToSub();
				toSub = getTie().getFromSub();
				dir=-1;
			}
			double transfer = getTransfer()*fromSub.getMVAFactor()*dir;
			return getYear()+" - "+fromSub.getName()+" from "+toSub.getName()+" ("+Math.round(transfer)+" A)";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
}
