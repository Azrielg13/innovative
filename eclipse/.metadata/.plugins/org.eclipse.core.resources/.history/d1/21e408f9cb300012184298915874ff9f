/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Collection;
import java.util.Vector;

import javax.swing.Icon;
import javax.swing.ImageIcon;

import com.sce.esp.util.IconsFactory;


/**
 * The Class MDITask.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class MDITask {

	/** The Constant DASHBOARD. */
	public final static int DASHBOARD=0;
	
	/** Task List *. */	 
	public final static int TEMPERATURE=1;
	
	/** The Constant PEAK_ANALYSIS. */
	public final static int PEAK_ANALYSIS=2;
	
	/** The Constant GROWTH. */
	public final static int GROWTH=3;
	
	/** The Constant SUB_STATUS. */
	public final static int SUB_STATUS=4;
	
	/** The Constant CKT_STATUS. */
	public final static int CKT_STATUS=5;
	
	/** The Constant PROJECT. */
	public final static int PROJECT=6;
	
	/** The Constant PIF. */
	public final static int PIF=7;
	
	/** The Constant EXCEPTION. */
	public final static int EXCEPTION=8;
	
	/** The Constant CONTINGENCY. */
	public final static int CONTINGENCY=9;
	
	/** The Constant VAR. */
	public final static int VAR=10;
	
	/** The Constant NMINUS1. */
	public final static int NMINUS1=11;
	
	/** The Constant POWER_QTY. */
	public final static int POWER_QTY=12;
	
	/** The Constant HST. */
	public final static int HST=13;
	
	/** The Constant MONTHLY_PEAKS. */
	public final static int MONTHLY_PEAKS=14;
	
	/** The Constant SUB_PROPERTIES. */
	public final static int SUB_PROPERTIES=15;
	
	/** Task Names *. */	
	private final static String[] TASKS = new String[]{
		"Dashboard"					//TASK 0 13 
		,"Temperature Analysis"		//TASK 1 0
		,"Peak Analysis"			//TASK 2 1
		,"Load Growth"				//TASK 3 2
		,"Substation Status"		//TASK 4 3
		,"Circuit Status"			//TASK 5 6
		,"Project Analysis"			//TASK 6 4
		,"PIF"						//TASK 7 8		
		,"Exception Analysis"		//TASK 8 10
		,"Contingency Analysis"		//TASK 9 9
		,"VAR Analysis"				//TASK 10 5		
		,"N-1 Analysis"				//TASK 11 7
		,"PQ / RTVI"			//TASK 12 12		
		,"Heat Storm Tracker"		//TASK 13 14
		,"Monthly Peaks"			//TASK 14 11
		,"Substation Properties"	//TASK 15 15
		,"Issue Tracker"
	};
	
	/** The Constant SIMS. */
	private final static int SIMS = 1+8+16+64+256;
	
    /** The Constant IMAGES. */
    private final static String[] IMAGES = new String[]{
    	IconsFactory.Form.DASHBOARD 
    	,IconsFactory.Form.TEMPERATURE
		,IconsFactory.Form.PEAK_ANALYSIS
		,IconsFactory.Form.GROWTH
		,IconsFactory.Form.SUB_STATUS
		,IconsFactory.Form.CKT_STATUS
		,IconsFactory.Form.PROJECT
		,IconsFactory.Form.PIF
		,IconsFactory.Form.EXCEPTION
		,IconsFactory.Form.CONTINGENCY
		,IconsFactory.Form.VAR
		,IconsFactory.Form.NMINUS1
		,IconsFactory.Form.PQ
		,IconsFactory.Form.HST    		
		,IconsFactory.Form.MONTHLY_PEAKS
		,IconsFactory.Form.SUB_PROPERTIES
		,IconsFactory.Form.SUB_PROPERTIES
	};

	public static final int Issue_Tracker = 16;
	
	/** The task id. */
	private int taskId;
	
	/**
	 * Gets the instance.
	 * 
	 * @param taskId the task id
	 * 
	 * @return the instance
	 */
	public static MDITask getInstance(int taskId) {
		return new MDITask(taskId);
	}
	
	/**
	 * The Constructor.
	 * 
	 * @param taskId the task id
	 */
	private MDITask(int taskId) {
		this.taskId=taskId;
	}
	
	/**
	 * Gets the task id.
	 * 
	 * @return the task id
	 */
	public int getTaskId() {
		return taskId;
	}
	
	/**
	 * Gets the name.
	 * 
	 * @return the name
	 */
	public String getName() {
		return TASKS[taskId];
	}
	
	/**
	 * Checks if is simmable.
	 * 
	 * @return true, if is simmable
	 */
	public boolean isSimmable() {
		return ((int)Math.pow(2,taskId)&SIMS)>0;
	}
	
	/**
	 * Gets the all.
	 * 
	 * @return the all
	 */
	public static Vector<MDITask> getAll() {
		Vector<MDITask> tasks = new Vector<MDITask>();
		for(int i=0; i<TASKS.length; i++)
			tasks.add(MDITask.getInstance(i));
		return tasks;
	}
	
	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString() {
		return getName();
	}
	
	/**
	 * Gets the image icon.
	 * 
	 * @return the image icon
	 */
	public ImageIcon getImageIcon() {
		//EspLogger.log(EspLogger.DEBUG, this, taskId);
		return IconsFactory.getScaledImageIcon(IMAGES[taskId],16);
	}

	/**
	 * Gets the rollover icon.
	 * 
	 * @return the rollover icon
	 */
	public Icon getRolloverIcon() {
		if(isSimmable())
			return IconsFactory.ICON_SIM_BIG;
		return getImageIcon();
	}
	
	public Collection<Flag> getFlags()throws SQLException{
		return Flag.getCollection(new String[]{"PLANYEAR","TASK","DISABLED"}, User.getActiveUser().getPlanYearUserBased(),taskId,0);
	}
}
