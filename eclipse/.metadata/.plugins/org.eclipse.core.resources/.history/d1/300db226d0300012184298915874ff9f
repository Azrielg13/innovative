/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp;

import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.sql.SQLException;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;

import com.jidesoft.plaf.GanttUIDefaultsCustomizer;
import com.jidesoft.plaf.LookAndFeelFactory;
import com.jidesoft.utils.SystemInfo;
import com.sce.esp.dialog.ESPDialog;
import com.sce.esp.dialog.NewUserDialog;
import com.sce.esp.jortho.FileUserDictionary;
import com.sce.esp.jortho.SpellChecker;
import com.sce.esp.log.EspLogger;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.model.User;
import com.sce.esp.prefs.ESPPreferences;
import com.sce.esp.security.JDBCLoginService;
import com.sce.esp.security.JXLoginPane;
import com.sce.esp.security.JXLoginPane.JXLoginFrame;
import com.sce.esp.security.LoginService;
import com.sce.esp.security.ServerLocation;
import com.sce.esp.util.ESPProperties;
import com.sce.esp.util.ESPWebStartProperties;
import com.sce.esp.util.SoundsFactory;
import com.sce.esp.util.SoundsFactory.HST;


public abstract class MainApp {
	

	private static String homeDirectory = null;
	private static final String DIR_NAME = "ESP_SUITE";
	public static final String ALARM = "alarm.log";
	
	private static File alarmLog;

	public static final boolean UAT_MODE = false;
	public static boolean ADMIN_EDIT_PREV_PYS = false;
	public static final boolean TIME_ME = true;	

	protected JXLoginFrame frame;
	protected JXLoginPane loginPanel;

	public abstract String getAppAcronym();
	public abstract String getAppName();
	public abstract String getMajorVersion();
	public abstract String getMinorVersion();
	public abstract ImageIcon getBannerIcon();
	public abstract void deploy();

	public void initApp(String[] args){
		
		
			setLNF();
		getPreferences();

		if(args.length > 0 && args[0].contains("local")){
			ESPProperties.getInstance().setRunningInstance(ESPProperties.LOCAL_DEV);
		}
		else if(args.length > 0 && args[0].contains("uat")){
			ESPProperties.getInstance().setRunningInstance(ESPProperties.UAT);
		}
		else{
			ESPProperties.getInstance().setRunningInstance(ESPProperties.WEB_START);
		}

		ESPProperties.getInstance().setAppInstance(getAppAcronym());

		checkJRE();

		if(!getAppAcronym().equalsIgnoreCase("psp")){
			SpellChecker.setUserDictionaryProvider( new FileUserDictionary() );
			SpellChecker.registerDictionaries( null, null );
		}

		//init integrated browser
		//		if(SystemInfo.isWindowsXP() || (!SystemInfo.isAnyMac()||!SystemInfo.isLinux())){
		//			WebBrowser.initNativeInterface();
		//		}


		//======================================================================================
		//INITIATE LOGGING SYSTEM
		Writer stream=null;
		try{
			stream = new BufferedWriter(new FileWriter(getHomeDirectory() + getAppAcronym()+".log"));
		}
		catch(Exception e){
			e.printStackTrace();
			stream = null;
		}
		//------------------------ Check Alarm Setting --------------------//FIXME
		initAlarmLog();
		//-----------------------------------------------------------------//

		if(!System.getProperty("user.name").equals("gonzalf1"))
			ESPWebStartProperties.checkProxy(args);
		EspLogger.init(true,(ESPProperties.getInstance().getRunningInstance()==ESPProperties.LOCAL_DEV)?EspLogger.LEVEL.MESSAGE:EspLogger.LEVEL.MESSAGE);
		ESPWebStartProperties.checkProxy(args);	
	}
	

	public static void main(String[] argv) {
		
		System.out.println(MainApp.getHomeDirectory()+ALARM+"");
		try {
			File alarmLog = new File(getHomeDirectory()+ALARM);
			if(!alarmLog.exists())
				alarmLog.createNewFile();
			
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
	
	private static void initAlarmLog(){
		try {
			alarmLog = new File(getHomeDirectory()+ALARM);
			if(!alarmLog.exists())
				alarmLog.createNewFile();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static File getAlarmLogFile(){
		if(alarmLog==null)	initAlarmLog();	
		return alarmLog;
	}
	//======================================================================================
	
	/**
	 * Return the location of the application home directory
	 * for the ESP Suite.
	 * @return path string ended with the path separator
	 */
	public static String getHomeDirectory() {
		if (homeDirectory == null)
			initializeHomeDirectory();		
		return homeDirectory;
	}

	private static void initializeHomeDirectory() {
		File dir = new File(System.getProperty("user.home")+"\\Application Data" + File.separatorChar  + DIR_NAME + File.separatorChar);
		if(dir.exists() || dir.mkdir()){
			homeDirectory = System.getProperty("user.home")+"\\Application Data" + File.separatorChar  + DIR_NAME + File.separatorChar;
		}
	}



	/**
	 * Create the applications look and feel
	 */
	private static void setLNF(){
		String[] li = { "Licensee=Jyloo Software", "LicenseRegistrationNumber=------", "Product=Synthetica", "LicenseType=For internal tests only", "ExpireDate=--.--.----", "MaxVersion=2.999.999" };
		UIManager.put("Synthetica.license.info", li);
		UIManager.put("Synthetica.license.key", "E1CBD033-B07718A2-1E181B5F-A78A6DFF-813D8FB4");
		String[] li2 = { "Licensee=Jyloo Software", "LicenseRegistrationNumber=------", "Product=SyntheticaAddons", "LicenseType=For internal tests only", "ExpireDate=--.--.----", "MaxVersion=1.999.999" };
		UIManager.put("SyntheticaAddons.license.info", li2);
		UIManager.put("SyntheticaAddons.license.key", "082D964F-DFD26320-E2F98FD7-11964A55-1BFC2BBC"); 
		com.jidesoft.utils.Lm.verifyLicense("Southern California Edison", "MDI", "JsG5JpcDR.eLtDhvTX04TKrH.z:KrM71");

//		LookAndFeelFactory.addUIDefaultsInitializer(new LookAndFeelFactory.SyntheticaInitializer());
//		LookAndFeelFactory.addUIDefaultsCustomizer(new LookAndFeelFactory.SyntheticaCustomizer());
//
//		try {
//			UIManager.setLookAndFeel(new SyntheticaBlueSteelLookAndFeel());
//		} catch (UnsupportedLookAndFeelException e) {
//			e.printStackTrace();
//		} catch (ParseException e) {
//			e.printStackTrace();
//		}
//		UIManager.put("Synthetica.translucency4DisabledIcons.enabled", Boolean.valueOf(true));
//		UIDefaults uiDefaults = UIManager.getDefaults();
//		uiDefaults.remove("LoginPaneUI");
		 LookAndFeelFactory.addUIDefaultsCustomizer(new GanttUIDefaultsCustomizer());
		LookAndFeelFactory.installDefaultLookAndFeelAndExtension();
		ToolTipManager.sharedInstance().setDismissDelay(10000);
		LookAndFeelFactory.installJideExtension();
	}


	private static void checkJRE(){
		/*Determine JDK requirements; this can probably be removed
    	  if it will be handled through java web start.
		 */
		if (!SystemInfo.isJdk6Above()) {
			Toolkit.getDefaultToolkit().beep();
			ESPDialog.showConfirmDialog(null, "JDK 1.6 or above is required for this application.", " ", JOptionPane.WARNING_MESSAGE);
			System.exit(0);
		}
		if (SystemInfo.isMacOSX()) {
			/*set special properties for Mac OS X*/
			System.setProperty("apple.laf.useScreenMenuBar", "true");
			System.setProperty("apple.awt.brushMetalLook", "true");
		}
	}

	private static void getPreferences(){
		ESPPreferences.getInstance();
	}

	public static LoginService getLoginService(final boolean isLGP){
		LoginService serv =	new JDBCLoginService(ESPProperties.getInstance().getDriverUrl()) {
			public boolean authenticate(String username, char[] password, ServerLocation server) {
				// perform authentication and return true on success.
				if(!isLGP && username.equalsIgnoreCase("mdi_grow") ){
					return false;//do not allow LGP users to login to MDI
				}
				try {
					if(!isLGP) {
						EntityManagerHelper.init(server.getUrl(), username, new String(password),System.getProperty("user.name").toLowerCase());
					} else {
						EntityManagerHelper.init(server.getUrl(), username, new String(password),System.getProperty("user.name").toLowerCase());
					}
					{//made connection
						if(username.equalsIgnoreCase("mdi_grow") || username.equalsIgnoreCase("mdi_proj") || username.equalsIgnoreCase("mdi_inq")){
							username = System.getProperty("user.name");
							//username = "mrgates";
						}
						User.setActiveUser(username);
						if(User.getActiveUser()==null){
							User newUser = new User();
							newUser.setUsername(username);
							new NewUserDialog(null, newUser);
							User.setActiveUser(newUser.getUsername());
							if(User.getActiveUser()==null) {
								setErrorCode(3);
								return false;
								//return 3;
							}
						}

						else if(User.getActiveUser().isDisabled()){
							setErrorCode(2);
							return false;
							//return 2; //DISABLED
						}
						else if(User.getActiveUser().getUserRole()==null){
							//User.setActiveUser(null);
							setErrorCode(4);
							return false;
							//return 4;
						}
					}
				} catch (SQLException e) {
					e.printStackTrace();
					setErrorCode(e.getErrorCode());
					return false;
				}catch (Exception e) {
					e.printStackTrace();
					return false;
				}
				return true;
			}
		} ;
		return serv;
	}
}
