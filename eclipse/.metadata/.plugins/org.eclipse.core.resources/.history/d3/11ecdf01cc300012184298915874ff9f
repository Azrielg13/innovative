package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.PortGroupArea;
import com.sce.esp.object.model.Portfolio;
import com.sce.esp.object.model.SceProjElemCost;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PortGroupAreaDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{AREA_ID,PORTFOLIO_ID,COST_ID};
	public static enum PROPERTY{AREA_ID,PORTFOLIO_ID,COST_ID,AREA_NAME,AREA_ALLOCATION,UPGRADE_TYPE,STUDY_TYPE,ALT_DOUBLE1,ALT_INT1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_T,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int AREAID_LIMIT = 9;
	public final static int PORTFOLIOID_LIMIT = 9;
	public final static int COSTID_LIMIT = 9;
	public final static int AREANAME_LIMIT = 256;
	public final static int AREAALLOCATION_LIMIT = 24;
	public final static int UPGRADETYPE_LIMIT = 2;
	public final static int STUDYTYPE_LIMIT = 2;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTINT1_LIMIT = 9;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int MODIFIEDT_LIMIT = 7;
	private int areaId;
	private int portfolioId;
	private int costId;
	private String areaName;
	private double areaAllocation;
	private int upgradeType;
	private int studyType;
	private double altDouble1;
	private int altInt1;
	private String altVarchar1;
	private Calendar altDate1;
	private Calendar modifiedT;
	private Portfolio portfolio;
	private SceProjElemCost sceProjElemCost;
	public static PortGroupArea getInstance(int areaId, int portfolioId, int costId)throws java.sql.SQLException{
		return getInstance(areaId, portfolioId, costId, true);
	}
	public static PortGroupArea getInstance(int areaId, int portfolioId, int costId, boolean fetch)throws java.sql.SQLException{
		if(isNull(areaId, portfolioId, costId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(areaId, portfolioId, costId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PortGroupArea o = null;
		if(cache != null && cache.contains(PortGroupArea.class, pk))
			o = em.find(PortGroupArea.class, pk);
		if(o==null && getAICache().contains(PortGroupArea.class, pk))
			o = getAICache().find(PortGroupArea.class, pk);
		if(o==null && fetch)
			o = em.find(PortGroupArea.class, pk);
		if(o==null && fetch && PortGroupArea.class.getAnnotation(AutoInsertable.class) != null){
			o = new PortGroupArea(areaId, portfolioId, costId);
			getAICache().cache(PortGroupArea.class, o);
		}
		return o;
	}
	public static Collection<PortGroupArea> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PortGroupArea> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PortGroupArea> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PortGroupArea o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PortGroupArea> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PortGroupArea> tq = em.createQuery(jpql,PortGroupArea.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PortGroupArea> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PortGroupArea> tq = em.createNamedQuery(name,PortGroupArea.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PortGroupAreaDAO(){}
	public PortGroupAreaDAO(int areaId, int portfolioId, int costId){
		this.areaId=areaId;
		this.portfolioId=portfolioId;
		this.costId=costId;
	}
	public PortGroupAreaDAO(PortGroupAreaDAO orig){
		super(orig);
		this.portfolioId=orig.getPortfolioId();
		this.costId=orig.getCostId();
		copyFrom(orig);
	}
	public void copyFrom(PortGroupAreaDAO orig){
		this.areaName=orig.getAreaName();
		this.areaAllocation=orig.getAreaAllocation();
		this.upgradeType=orig.getUpgradeType();
		this.studyType=orig.getStudyType();
		this.altDouble1=orig.getAltDouble1();
		this.altInt1=orig.getAltInt1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
		this.modifiedT=orig.getModifiedT();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{areaId, portfolioId, costId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIS34_SEQ",sequenceName="MDIS34_SEQ")
	@Column(name="AREA_ID",nullable=false,length=9)
	public int getAreaId(){
		return areaId;
	}
	public void setAreaId(int areaId) throws java.sql.SQLException{
		if(isSame(areaId, getAreaId()))return;
		int oldValue = getAreaId();
		this.areaId=areaId;
		setProperty("AREA_ID", areaId, oldValue);
	}
	@Id
	@Column(name="PORTFOLIO_ID",nullable=false,length=9)
	public int getPortfolioId(){
		return portfolioId;
	}
	public void setPortfolioId(int portfolioId) throws java.sql.SQLException{
		if(isSame(portfolioId, getPortfolioId()))return;
		int oldValue = getPortfolioId();
		this.portfolioId=portfolioId;
		setProperty("PORTFOLIO_ID", portfolioId, oldValue);
		portfolio=null;
	}
	@Id
	@Column(name="COST_ID",nullable=false,length=9)
	public int getCostId(){
		return costId;
	}
	public void setCostId(int costId) throws java.sql.SQLException{
		if(isSame(costId, getCostId()))return;
		int oldValue = getCostId();
		this.costId=costId;
		setProperty("COST_ID", costId, oldValue);
		sceProjElemCost=null;
	}
	@Column(name="AREA_NAME",nullable=true,length=256)
	public String getAreaName(){
		return areaName;
	}
	public void setAreaName(String areaName) throws java.sql.SQLException{
		if(isSame(areaName, getAreaName()))return;
		String oldValue = getAreaName();
		this.areaName=areaName;
		setProperty("AREA_NAME", areaName, oldValue);
	}
	@Column(name="AREA_ALLOCATION",nullable=true,length=24)
	public double getAreaAllocation(){
		return areaAllocation;
	}
	public void setAreaAllocation(double areaAllocation) throws java.sql.SQLException{
		if(isSame(areaAllocation, getAreaAllocation()))return;
		double oldValue = getAreaAllocation();
		this.areaAllocation=areaAllocation;
		setProperty("AREA_ALLOCATION", areaAllocation, oldValue);
	}
	@Column(name="UPGRADE_TYPE",nullable=true,length=2)
	public int getUpgradeType(){
		return upgradeType;
	}
	public void setUpgradeType(int upgradeType) throws java.sql.SQLException{
		if(isSame(upgradeType, getUpgradeType()))return;
		int oldValue = getUpgradeType();
		this.upgradeType=upgradeType;
		setProperty("UPGRADE_TYPE", upgradeType, oldValue);
	}
	@Column(name="STUDY_TYPE",nullable=true,length=2)
	public int getStudyType(){
		return studyType;
	}
	public void setStudyType(int studyType) throws java.sql.SQLException{
		if(isSame(studyType, getStudyType()))return;
		int oldValue = getStudyType();
		this.studyType=studyType;
		setProperty("STUDY_TYPE", studyType, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_INT1",nullable=true,length=9)
	public int getAltInt1(){
		return altInt1;
	}
	public void setAltInt1(int altInt1) throws java.sql.SQLException{
		if(isSame(altInt1, getAltInt1()))return;
		int oldValue = getAltInt1();
		this.altInt1=altInt1;
		setProperty("ALT_INT1", altInt1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="MODIFIED_T",nullable=true,length=7)
	public Calendar getModifiedT(){
		return modifiedT;
	}
	public void setModifiedT(Calendar modifiedT) throws java.sql.SQLException{
		if(isSame(modifiedT, getModifiedT()))return;
		Calendar oldValue = getModifiedT();
		this.modifiedT=modifiedT;
		setProperty("MODIFIED_T", modifiedT, oldValue);
	}
	public Portfolio getPortfolio()throws java.sql.SQLException{
		if(portfolio==null)
			portfolio=Portfolio.getInstance(getPortfolioId());
		return portfolio;
	}
	public void setPortfolio(Portfolio portfolio)throws java.sql.SQLException{
		setPortfolioId(portfolio==null?0:portfolio.getPortfolioId());
		this.portfolio=portfolio;
	}
	public SceProjElemCost getSceProjElemCost()throws java.sql.SQLException{
		if(sceProjElemCost==null)
			sceProjElemCost=SceProjElemCost.getInstance(getCostId());
		return sceProjElemCost;
	}
	public void setSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		setCostId(sceProjElemCost==null?0:sceProjElemCost.getCostId());
		this.sceProjElemCost=sceProjElemCost;
	}
	public PortGroupArea copy()throws java.sql.SQLException{
		PortGroupArea cp = new PortGroupArea((PortGroupArea)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PortGroupAreaDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PortGroupAreaDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getAreaId(),o.getAreaId())) diffs.add("AREA_ID");
		if(!isSame(getPortfolioId(),o.getPortfolioId())) diffs.add("PORTFOLIO_ID");
		if(!isSame(getCostId(),o.getCostId())) diffs.add("COST_ID");
		if(!isSame(getAreaName(),o.getAreaName())) diffs.add("AREA_NAME");
		if(!isSame(getAreaAllocation(),o.getAreaAllocation())) diffs.add("AREA_ALLOCATION");
		if(!isSame(getUpgradeType(),o.getUpgradeType())) diffs.add("UPGRADE_TYPE");
		if(!isSame(getStudyType(),o.getStudyType())) diffs.add("STUDY_TYPE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltInt1(),o.getAltInt1())) diffs.add("ALT_INT1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getModifiedT(),o.getModifiedT())) diffs.add("MODIFIED_T");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
