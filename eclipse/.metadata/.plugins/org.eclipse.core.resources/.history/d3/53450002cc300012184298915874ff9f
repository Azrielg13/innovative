package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.PortfolioProj;
import com.sce.esp.object.model.SceProj;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PortfolioProjDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PORTFOLIO_ID,PLAN_ID};
	public static enum PROPERTY{PORTFOLIO_ID,PLAN_ID,PARENT_ID,PLAN_DESCRIPTION,PLAN_TYPE,SCE_PROJ_ID,PLAN_VERSION,NEED_DATE,PLAN_COST,PLAN_LOCKED,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PORTFOLIOID_LIMIT = 9;
	public final static int PLANID_LIMIT = 9;
	public final static int PARENTID_LIMIT = 9;
	public final static int PLANDESCRIPTION_LIMIT = 64;
	public final static int PLANTYPE_LIMIT = 2;
	public final static int SCEPROJID_LIMIT = 9;
	public final static int PLANVERSION_LIMIT = 9;
	public final static int NEEDDATE_LIMIT = 7;
	public final static int PLANCOST_LIMIT = 9;
	public final static int PLANLOCKED_LIMIT = 1;
	private int portfolioId;
	private int planId;
	private int parentId;
	private String planDescription;
	private int planType;
	private int sceProjId;
	private int planVersion;
	private Calendar needDate;
	private int planCost;
	private boolean planLocked;
	private SceProj sceProj;
	public static PortfolioProj getInstance(int portfolioId, int planId)throws java.sql.SQLException{
		return getInstance(portfolioId, planId, true);
	}
	public static PortfolioProj getInstance(int portfolioId, int planId, boolean fetch)throws java.sql.SQLException{
		if(isNull(portfolioId, planId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(portfolioId, planId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PortfolioProj o = null;
		if(cache != null && cache.contains(PortfolioProj.class, pk))
			o = em.find(PortfolioProj.class, pk);
		if(o==null && getAICache().contains(PortfolioProj.class, pk))
			o = getAICache().find(PortfolioProj.class, pk);
		if(o==null && fetch)
			o = em.find(PortfolioProj.class, pk);
		if(o==null && fetch && PortfolioProj.class.getAnnotation(AutoInsertable.class) != null){
			o = new PortfolioProj(portfolioId, planId);
			getAICache().cache(PortfolioProj.class, o);
		}
		return o;
	}
	public static Collection<PortfolioProj> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PortfolioProj> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PortfolioProj> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PortfolioProj o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public static Collection<PortfolioProj> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PortfolioProj> tq = em.createQuery(jpql,PortfolioProj.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public static Collection<PortfolioProj> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PortfolioProj> tq = em.createNamedQuery(name,PortfolioProj.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PortfolioProjDAO(){}
	public PortfolioProjDAO(int portfolioId, int planId){
		this.portfolioId=portfolioId;
		this.planId=planId;
	}
	public PortfolioProjDAO(PortfolioProjDAO orig){
		super(orig);
		this.portfolioId=orig.getPortfolioId();
		this.parentId=orig.getParentId();
		this.planDescription=orig.getPlanDescription();
		this.planType=orig.getPlanType();
		this.sceProjId=orig.getSceProjId();
		this.planVersion=orig.getPlanVersion();
		this.needDate=orig.getNeedDate();
		this.planCost=orig.getPlanCost();
		this.planLocked=orig.isPlanLocked();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{portfolioId, planId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PORTFOLIO_ID",nullable=false,length=9)
	public int getPortfolioId(){
		return portfolioId;
	}
	public void setPortfolioId(int portfolioId) throws java.sql.SQLException{
		if(isSame(portfolioId, getPortfolioId()))return;
		int oldValue = getPortfolioId();
		this.portfolioId=portfolioId;
		setProperty("PORTFOLIO_ID", portfolioId, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDIS34_SEQ",sequenceName="MDIS34_SEQ")
	@Column(name="PLAN_ID",nullable=false,length=9)
	public int getPlanId(){
		return planId;
	}
	public void setPlanId(int planId) throws java.sql.SQLException{
		if(isSame(planId, getPlanId()))return;
		int oldValue = getPlanId();
		this.planId=planId;
		setProperty("PLAN_ID", planId, oldValue);
	}
	@Column(name="PARENT_ID",nullable=true,length=9)
	public int getParentId(){
		return parentId;
	}
	public void setParentId(int parentId) throws java.sql.SQLException{
		if(isSame(parentId, getParentId()))return;
		int oldValue = getParentId();
		this.parentId=parentId;
		setProperty("PARENT_ID", parentId, oldValue);
	}
	@Column(name="PLAN_DESCRIPTION",nullable=true,length=64)
	public String getPlanDescription(){
		return planDescription;
	}
	public void setPlanDescription(String planDescription) throws java.sql.SQLException{
		if(isSame(planDescription, getPlanDescription()))return;
		String oldValue = getPlanDescription();
		this.planDescription=planDescription;
		setProperty("PLAN_DESCRIPTION", planDescription, oldValue);
	}
	@Column(name="PLAN_TYPE",nullable=false,length=2)
	public int getPlanType(){
		return planType;
	}
	public void setPlanType(int planType) throws java.sql.SQLException{
		if(isSame(planType, getPlanType()))return;
		int oldValue = getPlanType();
		this.planType=planType;
		setProperty("PLAN_TYPE", planType, oldValue);
	}
	@Column(name="SCE_PROJ_ID",nullable=true,length=9)
	public int getSceProjId(){
		return sceProjId;
	}
	public void setSceProjId(int sceProjId) throws java.sql.SQLException{
		if(isSame(sceProjId, getSceProjId()))return;
		int oldValue = getSceProjId();
		this.sceProjId=sceProjId;
		setProperty("SCE_PROJ_ID", sceProjId, oldValue);
	}
	@Column(name="PLAN_VERSION",nullable=true,length=9)
	public int getPlanVersion(){
		return planVersion;
	}
	public void setPlanVersion(int planVersion) throws java.sql.SQLException{
		if(isSame(planVersion, getPlanVersion()))return;
		int oldValue = getPlanVersion();
		this.planVersion=planVersion;
		setProperty("PLAN_VERSION", planVersion, oldValue);
	}
	@Column(name="NEED_DATE",nullable=true,length=7)
	public Calendar getNeedDate(){
		return needDate;
	}
	public void setNeedDate(Calendar needDate) throws java.sql.SQLException{
		if(isSame(needDate, getNeedDate()))return;
		Calendar oldValue = getNeedDate();
		this.needDate=needDate;
		setProperty("NEED_DATE", needDate, oldValue);
	}
	@Column(name="PLAN_COST",nullable=true,length=9)
	public int getPlanCost(){
		return planCost;
	}
	public void setPlanCost(int planCost) throws java.sql.SQLException{
		if(isSame(planCost, getPlanCost()))return;
		int oldValue = getPlanCost();
		this.planCost=planCost;
		setProperty("PLAN_COST", planCost, oldValue);
	}
	@Column(name="PLAN_LOCKED",nullable=true,length=1)
	public boolean isPlanLocked(){
		return planLocked;
	}
	public void setPlanLocked(boolean planLocked) throws java.sql.SQLException{
		if(isSame(planLocked, isPlanLocked()))return;
		boolean oldValue = isPlanLocked();
		this.planLocked=planLocked;
		setProperty("PLAN_LOCKED", planLocked, oldValue);
	}
	public SceProj getSceProj()throws java.sql.SQLException{
		if(sceProj==null)
			sceProj=SceProj.getInstance(getSceProjId());
		return sceProj;
	}
	public void setSceProj(SceProj sceProj)throws java.sql.SQLException{
		if(sceProj==null)
			setSceProjId(0);
		else
			setSceProjId(sceProj.getSceProjId());
		this.sceProj=sceProj;
	}
	public PortfolioProj copy()throws java.sql.SQLException{
		PortfolioProj cp = new PortfolioProj((PortfolioProj)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PortfolioProjDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PortfolioProjDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPortfolioId(),o.getPortfolioId())) diffs.add("PORTFOLIO_ID");
		if(!isSame(getPlanId(),o.getPlanId())) diffs.add("PLAN_ID");
		if(!isSame(getParentId(),o.getParentId())) diffs.add("PARENT_ID");
		if(!isSame(getPlanDescription(),o.getPlanDescription())) diffs.add("PLAN_DESCRIPTION");
		if(!isSame(getPlanType(),o.getPlanType())) diffs.add("PLAN_TYPE");
		if(!isSame(getSceProjId(),o.getSceProjId())) diffs.add("SCE_PROJ_ID");
		if(!isSame(getPlanVersion(),o.getPlanVersion())) diffs.add("PLAN_VERSION");
		if(!isSame(getNeedDate(),o.getNeedDate())) diffs.add("NEED_DATE");
		if(!isSame(getPlanCost(),o.getPlanCost())) diffs.add("PLAN_COST");
		if(!isSame(isPlanLocked(),o.isPlanLocked())) diffs.add("PLAN_LOCKED");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
