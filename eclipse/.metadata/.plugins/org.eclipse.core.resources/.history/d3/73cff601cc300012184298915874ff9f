package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.ProjResourceEval;
import com.sce.esp.object.model.ProjWorkGroup;
import com.sce.esp.object.model.ProjWorkGroupDis;
import com.sce.esp.object.model.User;
import com.sce.esp.object.model.WorkGroup;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ProjWorkGroupDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{RESOURCE_EVAL_ID,WORK_GROUP_ID,TYPE};
	public static enum PROPERTY{RESOURCE_EVAL_ID,WORK_GROUP_ID,TYPE,REQUIRED,DURATION,NOTE,ASSIGN_USER_ID,SENT_TS,NEED_TS,RECV_TS,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1};
	public final static int RESOURCEEVALID_LIMIT = 9;
	public final static int WORKGROUPID_LIMIT = 9;
	public final static int TYPE_LIMIT = 2;
	public final static int REQUIRED_LIMIT = 1;
	public final static int DURATION_LIMIT = 6;
	public final static int NOTE_LIMIT = 256;
	public final static int ASSIGNUSERID_LIMIT = 9;
	public final static int SENTTS_LIMIT = 7;
	public final static int NEEDTS_LIMIT = 7;
	public final static int RECVTS_LIMIT = 7;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int resourceEvalId;
	private int workGroupId;
	private int type;
	private boolean required = false;
	private int duration;
	private String note;
	private int assignUserId;
	private Calendar sentTs;
	private Calendar needTs;
	private Calendar recvTs;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Collection<ProjWorkGroupDis> projWorkGroupDiss;
	private ProjResourceEval projResourceEval;
	private WorkGroup workGroup;
	private User user;
	public static ProjWorkGroup getInstance(int resourceEvalId, int workGroupId, int type)throws java.sql.SQLException{
		return getInstance(resourceEvalId, workGroupId, type, true);
	}
	public static ProjWorkGroup getInstance(int resourceEvalId, int workGroupId, int type, boolean fetch)throws java.sql.SQLException{
		if(isNull(resourceEvalId, workGroupId, type))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(resourceEvalId, workGroupId, type);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProjWorkGroup o = null;
		if(cache != null && cache.contains(ProjWorkGroup.class, pk))
			o = em.find(ProjWorkGroup.class, pk);
		if(o==null && getAICache().contains(ProjWorkGroup.class, pk))
			o = getAICache().find(ProjWorkGroup.class, pk);
		if(o==null && fetch)
			o = em.find(ProjWorkGroup.class, pk);
		if(o==null && fetch && ProjWorkGroup.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProjWorkGroup(resourceEvalId, workGroupId, type);
			getAICache().cache(ProjWorkGroup.class, o);
		}
		return o;
	}
	public static Collection<ProjWorkGroup> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProjWorkGroup> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProjWorkGroup> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProjWorkGroup o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProjWorkGroup> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjWorkGroup> tq = em.createQuery(jpql,ProjWorkGroup.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProjWorkGroup> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjWorkGroup> tq = em.createNamedQuery(name,ProjWorkGroup.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProjWorkGroupDAO(){}
	public ProjWorkGroupDAO(int resourceEvalId, int workGroupId, int type){
		this.resourceEvalId=resourceEvalId;
		this.workGroupId=workGroupId;
		this.type=type;
	}
	public ProjWorkGroupDAO(ProjWorkGroupDAO orig){
		super(orig);
		this.resourceEvalId=orig.getResourceEvalId();
		this.workGroupId=orig.getWorkGroupId();
		this.type=orig.getType();
		copyFrom(orig);
	}
	public void copyFrom(ProjWorkGroupDAO orig){
		this.required=orig.isRequired();
		this.duration=orig.getDuration();
		this.note=orig.getNote();
		this.assignUserId=orig.getAssignUserId();
		this.sentTs=orig.getSentTs();
		this.needTs=orig.getNeedTs();
		this.recvTs=orig.getRecvTs();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{resourceEvalId, workGroupId, type};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="RESOURCE_EVAL_ID",nullable=false,length=9)
	public int getResourceEvalId(){
		return resourceEvalId;
	}
	public void setResourceEvalId(int resourceEvalId) throws java.sql.SQLException{
		if(isSame(resourceEvalId, getResourceEvalId()))return;
		int oldValue = getResourceEvalId();
		this.resourceEvalId=resourceEvalId;
		setProperty("RESOURCE_EVAL_ID", resourceEvalId, oldValue);
		projResourceEval=null;
	}
	@Id
	@Column(name="WORK_GROUP_ID",nullable=false,length=9)
	public int getWorkGroupId(){
		return workGroupId;
	}
	public void setWorkGroupId(int workGroupId) throws java.sql.SQLException{
		if(isSame(workGroupId, getWorkGroupId()))return;
		int oldValue = getWorkGroupId();
		this.workGroupId=workGroupId;
		setProperty("WORK_GROUP_ID", workGroupId, oldValue);
		workGroup=null;
	}
	@Id
	@Column(name="TYPE",nullable=false,length=2)
	public int getType(){
		return type;
	}
	public void setType(int type) throws java.sql.SQLException{
		if(isSame(type, getType()))return;
		int oldValue = getType();
		this.type=type;
		setProperty("TYPE", type, oldValue);
	}
	@Column(name="REQUIRED",nullable=true,length=1)
	public boolean isRequired(){
		return required;
	}
	public void setRequired(boolean required) throws java.sql.SQLException{
		if(isSame(required, isRequired()))return;
		boolean oldValue = isRequired();
		this.required=required;
		setProperty("REQUIRED", required, oldValue);
	}
	@Column(name="DURATION",nullable=true,length=6)
	public int getDuration(){
		return duration;
	}
	public void setDuration(int duration) throws java.sql.SQLException{
		if(isSame(duration, getDuration()))return;
		int oldValue = getDuration();
		this.duration=duration;
		setProperty("DURATION", duration, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="ASSIGN_USER_ID",nullable=true,length=9)
	public int getAssignUserId(){
		return assignUserId;
	}
	public void setAssignUserId(int assignUserId) throws java.sql.SQLException{
		if(isSame(assignUserId, getAssignUserId()))return;
		int oldValue = getAssignUserId();
		this.assignUserId=assignUserId;
		setProperty("ASSIGN_USER_ID", assignUserId, oldValue);
		user=null;
	}
	@Column(name="SENT_TS",nullable=true,length=7)
	public Calendar getSentTs(){
		return sentTs;
	}
	public void setSentTs(Calendar sentTs) throws java.sql.SQLException{
		if(isSame(sentTs, getSentTs()))return;
		Calendar oldValue = getSentTs();
		this.sentTs=sentTs;
		setProperty("SENT_TS", sentTs, oldValue);
	}
	@Column(name="NEED_TS",nullable=true,length=7)
	public Calendar getNeedTs(){
		return needTs;
	}
	public void setNeedTs(Calendar needTs) throws java.sql.SQLException{
		if(isSame(needTs, getNeedTs()))return;
		Calendar oldValue = getNeedTs();
		this.needTs=needTs;
		setProperty("NEED_TS", needTs, oldValue);
	}
	@Column(name="RECV_TS",nullable=true,length=7)
	public Calendar getRecvTs(){
		return recvTs;
	}
	public void setRecvTs(Calendar recvTs) throws java.sql.SQLException{
		if(isSame(recvTs, getRecvTs()))return;
		Calendar oldValue = getRecvTs();
		this.recvTs=recvTs;
		setProperty("RECV_TS", recvTs, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public ProjResourceEval getProjResourceEval()throws java.sql.SQLException{
		if(projResourceEval==null)
			projResourceEval=ProjResourceEval.getInstance(getResourceEvalId());
		return projResourceEval;
	}
	public void setProjResourceEval(ProjResourceEval projResourceEval)throws java.sql.SQLException{
		setResourceEvalId(projResourceEval==null?0:projResourceEval.getResourceEvalId());
		this.projResourceEval=projResourceEval;
	}
	public WorkGroup getWorkGroup()throws java.sql.SQLException{
		if(workGroup==null)
			workGroup=WorkGroup.getInstance(getWorkGroupId());
		return workGroup;
	}
	public void setWorkGroup(WorkGroup workGroup)throws java.sql.SQLException{
		setWorkGroupId(workGroup==null?0:workGroup.getWorkGroupId());
		this.workGroup=workGroup;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getAssignUserId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setAssignUserId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public Collection<ProjWorkGroupDis> getProjWorkGroupDiss()throws java.sql.SQLException{
		if(isNewInstance() || projWorkGroupDiss != null){
			if(projWorkGroupDiss == null)
				projWorkGroupDiss = new TreeSet<ProjWorkGroupDis>();
			return projWorkGroupDiss;
		}
		return ProjWorkGroupDis.getNamedCollection("findByProjWorkGroup",getResourceEvalId(), getWorkGroupId(), getType());
	}
	public void addProjWorkGroupDis(ProjWorkGroupDis projWorkGroupDis)throws java.sql.SQLException{
		projWorkGroupDis.setProjWorkGroup((ProjWorkGroup)this);
		if(isNewInstance() || projWorkGroupDiss != null)
			getProjWorkGroupDiss().add(projWorkGroupDis);
		else
			projWorkGroupDis.insert();
	}
	public void removeProjWorkGroupDis(ProjWorkGroupDis projWorkGroupDis)throws java.sql.SQLException{
		if(isNewInstance() || projWorkGroupDiss != null)
			getProjWorkGroupDiss().remove(projWorkGroupDis);
		else
			projWorkGroupDis.delete();
	}
	public ProjWorkGroup copy()throws java.sql.SQLException{
		ProjWorkGroup cp = new ProjWorkGroup((ProjWorkGroup)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProjWorkGroupDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(ProjWorkGroupDis child:getProjWorkGroupDiss())
			cp.addProjWorkGroupDis(child.copy());
	}
	public Vector<String> getDifference(ProjWorkGroupDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getResourceEvalId(),o.getResourceEvalId())) diffs.add("RESOURCE_EVAL_ID");
		if(!isSame(getWorkGroupId(),o.getWorkGroupId())) diffs.add("WORK_GROUP_ID");
		if(!isSame(getType(),o.getType())) diffs.add("TYPE");
		if(!isSame(isRequired(),o.isRequired())) diffs.add("REQUIRED");
		if(!isSame(getDuration(),o.getDuration())) diffs.add("DURATION");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getAssignUserId(),o.getAssignUserId())) diffs.add("ASSIGN_USER_ID");
		if(!isSame(getSentTs(),o.getSentTs())) diffs.add("SENT_TS");
		if(!isSame(getNeedTs(),o.getNeedTs())) diffs.add("NEED_TS");
		if(!isSame(getRecvTs(),o.getRecvTs())) diffs.add("RECV_TS");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(projWorkGroupDiss != null){
			for(ProjWorkGroupDis projWorkGroupDis:getProjWorkGroupDiss()){
				if(projWorkGroupDis.isNewInstance())
					projWorkGroupDis.setProjWorkGroup((ProjWorkGroup)this);
				projWorkGroupDis.insert();
			}
			projWorkGroupDiss = null;
		}
	}
}
