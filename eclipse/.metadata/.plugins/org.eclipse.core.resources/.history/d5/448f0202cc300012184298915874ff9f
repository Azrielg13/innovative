package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Elem;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.MvaFactor;
import com.sce.esp.object.model.SubUnitCost;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SubUnitCostDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,EQUIP_ID};
	public static enum PROPERTY{PLANYEAR,EQUIP_ID,ELEM_ID,VOLTAGE_KV,TITLE,DESCRIPTION,UNIT_COST,EST_YEAR,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int EQUIPID_LIMIT = 9;
	public final static int ELEMID_LIMIT = 9;
	public final static int VOLTAGEKV_LIMIT = 5;
	public final static int TITLE_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 128;
	public final static int UNITCOST_LIMIT = 6;
	public final static int ESTYEAR_LIMIT = 4;
	private int planyear;
	private int equipId;
	private int elemId;
	private double voltageKv;
	private String title;
	private String description;
	private int unitCost;
	private int estYear;
	private Elem elem;
	private MvaFactor mvaFactor;
	public static SubUnitCost getInstance(int planyear, int equipId)throws java.sql.SQLException{
		return getInstance(planyear, equipId, true);
	}
	public static SubUnitCost getInstance(int planyear, int equipId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, equipId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, equipId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SubUnitCost o = null;
		if(cache != null && cache.contains(SubUnitCost.class, pk))
			o = em.find(SubUnitCost.class, pk);
		if(o==null && getAICache().contains(SubUnitCost.class, pk))
			o = getAICache().find(SubUnitCost.class, pk);
		if(o==null && fetch)
			o = em.find(SubUnitCost.class, pk);
		if(o==null && fetch && SubUnitCost.class.getAnnotation(AutoInsertable.class) != null){
			o = new SubUnitCost(planyear, equipId);
			getAICache().cache(SubUnitCost.class, o);
		}
		return o;
	}
	public static Collection<SubUnitCost> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SubUnitCost> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SubUnitCost> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SubUnitCost o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SubUnitCost> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubUnitCost> tq = em.createQuery(jpql,SubUnitCost.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SubUnitCost> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubUnitCost> tq = em.createNamedQuery(name,SubUnitCost.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SubUnitCostDAO(){}
	public SubUnitCostDAO(int planyear, int equipId){
		this.planyear=planyear;
		this.equipId=equipId;
	}
	public SubUnitCostDAO(SubUnitCostDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(SubUnitCostDAO orig){
		this.elemId=orig.getElemId();
		this.voltageKv=orig.getVoltageKv();
		this.title=orig.getTitle();
		this.description=orig.getDescription();
		this.unitCost=orig.getUnitCost();
		this.estYear=orig.getEstYear();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, equipId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI555_SEQ",sequenceName="MDI555_SEQ")
	@Column(name="EQUIP_ID",nullable=false,length=9)
	public int getEquipId(){
		return equipId;
	}
	public void setEquipId(int equipId) throws java.sql.SQLException{
		if(isSame(equipId, getEquipId()))return;
		int oldValue = getEquipId();
		this.equipId=equipId;
		setProperty("EQUIP_ID", equipId, oldValue);
	}
	@Column(name="ELEM_ID",nullable=false,length=9)
	public int getElemId(){
		return elemId;
	}
	public void setElemId(int elemId) throws java.sql.SQLException{
		if(isSame(elemId, getElemId()))return;
		int oldValue = getElemId();
		this.elemId=elemId;
		setProperty("ELEM_ID", elemId, oldValue);
		elem=null;
	}
	@Column(name="VOLTAGE_KV",nullable=false,length=5)
	public double getVoltageKv(){
		return voltageKv;
	}
	public void setVoltageKv(double voltageKv) throws java.sql.SQLException{
		if(isSame(voltageKv, getVoltageKv()))return;
		double oldValue = getVoltageKv();
		this.voltageKv=voltageKv;
		setProperty("VOLTAGE_KV", voltageKv, oldValue);
		mvaFactor=null;
	}
	@Column(name="TITLE",nullable=false,length=64)
	public String getTitle(){
		return title;
	}
	public void setTitle(String title) throws java.sql.SQLException{
		if(isSame(title, getTitle()))return;
		String oldValue = getTitle();
		this.title=title;
		setProperty("TITLE", title, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=false,length=128)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="UNIT_COST",nullable=false,length=6)
	public int getUnitCost(){
		return unitCost;
	}
	public void setUnitCost(int unitCost) throws java.sql.SQLException{
		if(isSame(unitCost, getUnitCost()))return;
		int oldValue = getUnitCost();
		this.unitCost=unitCost;
		setProperty("UNIT_COST", unitCost, oldValue);
	}
	@Column(name="EST_YEAR",nullable=false,length=4)
	public int getEstYear(){
		return estYear;
	}
	public void setEstYear(int estYear) throws java.sql.SQLException{
		if(isSame(estYear, getEstYear()))return;
		int oldValue = getEstYear();
		this.estYear=estYear;
		setProperty("EST_YEAR", estYear, oldValue);
	}
	public Elem getElem()throws java.sql.SQLException{
		if(elem==null)
			elem=Elem.getInstance(getPlanyear(), getElemId());
		return elem;
	}
	public void setElem(Elem elem)throws java.sql.SQLException{
		setElemId(elem==null?0:elem.getElemId());
		this.elem=elem;
	}
	public MvaFactor getMvaFactor()throws java.sql.SQLException{
		if(mvaFactor==null)
			mvaFactor=MvaFactor.getInstance(getPlanyear(), getVoltageKv());
		return mvaFactor;
	}
	public void setMvaFactor(MvaFactor mvaFactor)throws java.sql.SQLException{
		setVoltageKv(mvaFactor==null?0:mvaFactor.getVoltageKv());
		this.mvaFactor=mvaFactor;
	}
	public SubUnitCost copy()throws java.sql.SQLException{
		SubUnitCost cp = new SubUnitCost((SubUnitCost)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SubUnitCostDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SubUnitCostDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getEquipId(),o.getEquipId())) diffs.add("EQUIP_ID");
		if(!isSame(getElemId(),o.getElemId())) diffs.add("ELEM_ID");
		if(!isSame(getVoltageKv(),o.getVoltageKv())) diffs.add("VOLTAGE_KV");
		if(!isSame(getTitle(),o.getTitle())) diffs.add("TITLE");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getUnitCost(),o.getUnitCost())) diffs.add("UNIT_COST");
		if(!isSame(getEstYear(),o.getEstYear())) diffs.add("EST_YEAR");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
