package com.sce.esp.object.dao;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import com.sce.esp.object.model.AaModel;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.Trans;
import com.sce.esp.util.db.ESPHashtable;

public abstract class TransDAO extends MDIObject implements Serializable {
	
	private static final long serialVersionUID = 1L;
	private static ESPHashtable<String,Trans> hash = new ESPHashtable<String,Trans>("Trans");
	public final static String[] PRIMARY_KEY=new String[]{"PLANYEAR","ID"};
	private TreeSet<AaModel> aAModels;
	private int planyear,id,type;

	public TransDAO(int planyear, int id) {
		super();
		this.planyear = planyear;
		this.id = id;
	}
	
	public static Trans getInstance(String key){
		return getHashtable().get(key);
	}	
	
	public static Trans getInstance(int planyear, int id)throws SQLException{
		return getInstance(planyear, id, true);
	}
	public static Trans getInstance(int planyear, int id, boolean fetch)throws SQLException{
		if(isNull(new Object[]{planyear, id}))return null;
		String key = getHashKey(new Object[]{planyear, id});
		Trans o = getInstance(key);
		if(o == null && fetch){
			o = new Trans(planyear, id);
			//if(o.isRealRecord())
				//return null;
			//o.newInstance = false;
			getHashtable().put(key,o);
		}
		return o;
	}
	
	public static ESPHashtable<String,Trans> getHashtable(){
		return hash;
	}
	
//	@Override
//	public String[] getPKSet() {
//		return PRIMARY_KEY;
//	}

	@Override
	public String getHashKey() {
		return getHashKey(new Object[]{getPlanyear(), getId()});
	}

//	@Override
//	public void setPSKeys(PreparedStatement ps, int startIndex)
//			throws SQLException {
//		
//	}
//
//	@Override
//	public String getDBTable() {
//		return null;
//	}

	public int getPlanyear() {
		return planyear;
	}

	public void setPlanyear(int planyear) {
		this.planyear = planyear;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getType() {
		return type;
	}

	public void setType(int type) {
		this.type = type;
	}
	
	public Sub getSub() throws SQLException{
		return Sub.getInstance(getPlanyear(), getId());
	}
	
	public boolean hasAAModelBeenRead(){
		return aAModels!=null;
	}
	public synchronized Collection<AaModel> getAAModels()throws SQLException{
		if(isNewInstance() || aAModels != null){
			if(aAModels == null)
				aAModels = new TreeSet<AaModel>();
			return aAModels;
		}
		return AaModel.getCollection(new String[]{"SUB_ID"},getSub().getSubId());
	}

}
