package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.SubType;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SubTypeDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SUB_TYPE_ID};
	public static enum PROPERTY{PLANYEAR,SUB_TYPE_ID,SUB_TYPE,GEN,LOAD_SERVER,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SUBTYPEID_LIMIT = 9;
	public final static int SUBTYPE_LIMIT = 40;
	public final static int GEN_LIMIT = 1;
	public final static int LOADSERVER_LIMIT = 1;
	private int planyear;
	private int subTypeId;
	private String subType;
	private boolean gen;
	private boolean loadServer = true;
	private Department department;
	public static SubType getInstance(int planyear, int subTypeId)throws java.sql.SQLException{
		return getInstance(planyear, subTypeId, true);
	}
	public static SubType getInstance(int planyear, int subTypeId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, subTypeId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, subTypeId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SubType o = null;
		if(cache != null && cache.contains(SubType.class, pk))
			o = em.find(SubType.class, pk);
		if(o==null && getAICache().contains(SubType.class, pk))
			o = getAICache().find(SubType.class, pk);
		if(o==null && fetch)
			o = em.find(SubType.class, pk);
		if(o==null && fetch && SubType.class.getAnnotation(AutoInsertable.class) != null){
			o = new SubType(planyear, subTypeId);
			getAICache().cache(SubType.class, o);
		}
		return o;
	}
	public static Collection<SubType> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SubType> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SubType> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SubType o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SubType> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubType> tq = em.createQuery(jpql,SubType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SubType> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SubType> tq = em.createNamedQuery(name,SubType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SubTypeDAO(){}
	public SubTypeDAO(int planyear, int subTypeId){
		this.planyear=planyear;
		this.subTypeId=subTypeId;
	}
	public SubTypeDAO(SubTypeDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(SubTypeDAO orig){
		this.subType=orig.getSubType();
		this.gen=orig.isGen();
		this.loadServer=orig.isLoadServer();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, subTypeId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI090_SEQ",sequenceName="MDI090_SEQ")
	@Column(name="SUB_TYPE_ID",nullable=false,length=9)
	public int getSubTypeId(){
		return subTypeId;
	}
	public void setSubTypeId(int subTypeId) throws java.sql.SQLException{
		if(isSame(subTypeId, getSubTypeId()))return;
		int oldValue = getSubTypeId();
		this.subTypeId=subTypeId;
		setProperty("SUB_TYPE_ID", subTypeId, oldValue);
	}
	@Column(name="SUB_TYPE",nullable=false,length=40)
	public String getSubType(){
		return subType;
	}
	public void setSubType(String subType) throws java.sql.SQLException{
		if(isSame(subType, getSubType()))return;
		String oldValue = getSubType();
		this.subType=subType;
		setProperty("SUB_TYPE", subType, oldValue);
	}
	@Column(name="GEN",nullable=true,length=1)
	public boolean isGen(){
		return gen;
	}
	public void setGen(boolean gen) throws java.sql.SQLException{
		if(isSame(gen, isGen()))return;
		boolean oldValue = isGen();
		this.gen=gen;
		setProperty("GEN", gen, oldValue);
	}
	@Column(name="LOAD_SERVER",nullable=true,length=1)
	public boolean isLoadServer(){
		return loadServer;
	}
	public void setLoadServer(boolean loadServer) throws java.sql.SQLException{
		if(isSame(loadServer, isLoadServer()))return;
		boolean oldValue = isLoadServer();
		this.loadServer=loadServer;
		setProperty("LOAD_SERVER", loadServer, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public SubType copy()throws java.sql.SQLException{
		SubType cp = new SubType((SubType)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SubTypeDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SubTypeDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSubTypeId(),o.getSubTypeId())) diffs.add("SUB_TYPE_ID");
		if(!isSame(getSubType(),o.getSubType())) diffs.add("SUB_TYPE");
		if(!isSame(isGen(),o.isGen())) diffs.add("GEN");
		if(!isSame(isLoadServer(),o.isLoadServer())) diffs.add("LOAD_SERVER");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
