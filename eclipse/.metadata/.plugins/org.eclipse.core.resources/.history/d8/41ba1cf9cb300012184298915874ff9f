/**
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.ProjWorkGroupDAO;
@Entity
@Table(schema="MDI",name="MDIS55_PROJ_WORK_GROUP")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ProjWorkGroup o WHERE o.RESOURCE_EVAL_ID=?1 AND o.WORK_GROUP_ID=?2 AND o.TYPE=?3"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ProjWorkGroup o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ProjWorkGroup o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByProjResourceEval", query="SELECT o FROM ProjWorkGroup o WHERE o.RESOURCE_EVAL_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIS55_PROJ_WORK_GROUP o WHERE o.RESOURCE_EVAL_ID=? AND o.WORK_GROUP_ID=? AND o.TYPE=?"),//AUTO-GENERATED
})
public class ProjWorkGroup extends ProjWorkGroupDAO implements Serializable{

	private static final long serialVersionUID = -4330510075105251530L;
	
	public ProjWorkGroup(){
		super(0,0,0);
	}
	public ProjWorkGroup(int resourceEvalId, int workGroupId, int type) {
		super(resourceEvalId, workGroupId, type);
	}
	
	public ProjWorkGroup(ProjWorkGroup projWorkGroup) {
		super(projWorkGroup);
	}
	
	public User getAssignedUser() throws SQLException{
		return User.getInstance(getAssignUserId());
	}
	
	public void setAssignedUser(User assUser) throws SQLException{
		if(assUser==null)
			setAssignUserId(0);
		else
			setAssignUserId(assUser.getUsernameId());
	}
	
	public String toString(){
		try {
			//BME ESP Change name? 
			return getProjResourceEval() + " - " +getWorkGroup() + " - "+ (getType()>0?WorkGroup.TYPES[getType()-1]:"N/A");
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return super.toString();
	}
	
	//BME ESP Testing???
	public String getStatus() {
		if(getRecvTs()!=null)		
			return "Completed";
		if(this.getSentTs()!=null)
			return "Sent";
		return "Not Sent";
	}
	
	/**
	 * Sums the Work Days for all of added Disciplines 
	 * @return int sum
	 * @throws SQLException
	 */
	public int getDisciplineTotal() throws SQLException {
		int sum = 0;
		for(ProjWorkGroupDis pwgd: getProjWorkGroupDiss())
			sum += pwgd.getWorkDays();
		return sum;
	}
	public String getTypeName() {
		return WorkGroup.TYPES[getType()-1];
	}
	
	public void insert() throws SQLException{
		if(getProjResourceEval()!=null && !getProjResourceEval().isNewInstance())
			super.insert();
	}
}
