package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.SceProjElemCost;
import com.sce.esp.object.model.SceProjElemPriority;
import com.sce.esp.object.model.User;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class SceProjElemPriorityDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{COST_ID,YEAR,PRIORITY_TS};
	public static enum PROPERTY{COST_ID,YEAR,PRIORITY_TS,PRIORITY,PRIORITY_USER_ID,PRIORITY_ALT0,PRIORITY_ALT1,PRIORITY_ALT2,PRIORITY_ALT3,PRIORITY_ALT4,PRIORITY_ALT5,PRIORITY_ALT6,PRIORITY_ALT7,PRIORITY_ALT8,PRIORITY_ALT9,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_VARCHAR1,ALT_VARCHAR2,ALT_VARCHAR3,ALT_DATE1,ALT_DATE2,ALT_DATE3};
	public final static int COSTID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int PRIORITYTS_LIMIT = 7;
	public final static int PRIORITY_LIMIT = 9;
	public final static int PRIORITYUSERID_LIMIT = 9;
	public final static int PRIORITYALT0_LIMIT = 24;
	public final static int PRIORITYALT1_LIMIT = 24;
	public final static int PRIORITYALT2_LIMIT = 24;
	public final static int PRIORITYALT3_LIMIT = 24;
	public final static int PRIORITYALT4_LIMIT = 24;
	public final static int PRIORITYALT5_LIMIT = 24;
	public final static int PRIORITYALT6_LIMIT = 24;
	public final static int PRIORITYALT7_LIMIT = 24;
	public final static int PRIORITYALT8_LIMIT = 24;
	public final static int PRIORITYALT9_LIMIT = 24;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTDATE2_LIMIT = 7;
	public final static int ALTDATE3_LIMIT = 7;
	private int costId;
	private int year;
	private Calendar priorityTs;
	private int priority;
	private int priorityUserId;
	private double priorityAlt0;
	private double priorityAlt1;
	private double priorityAlt2;
	private double priorityAlt3;
	private double priorityAlt4;
	private double priorityAlt5;
	private double priorityAlt6;
	private double priorityAlt7;
	private double priorityAlt8;
	private double priorityAlt9;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private String altVarchar1;
	private String altVarchar2;
	private String altVarchar3;
	private Calendar altDate1;
	private Calendar altDate2;
	private Calendar altDate3;
	private SceProjElemCost sceProjElemCost;
	private User user;
	public static SceProjElemPriority getInstance(int costId, int year, Calendar priorityTs)throws java.sql.SQLException{
		return getInstance(costId, year, priorityTs, true);
	}
	public static SceProjElemPriority getInstance(int costId, int year, Calendar priorityTs, boolean fetch)throws java.sql.SQLException{
		if(isNull(costId, year, priorityTs))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(costId, year, priorityTs);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjElemPriority o = null;
		if(cache != null && cache.contains(SceProjElemPriority.class, pk))
			o = em.find(SceProjElemPriority.class, pk);
		if(o==null && getAICache().contains(SceProjElemPriority.class, pk))
			o = getAICache().find(SceProjElemPriority.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjElemPriority.class, pk);
		if(o==null && fetch && SceProjElemPriority.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjElemPriority(costId, year, priorityTs);
			getAICache().cache(SceProjElemPriority.class, o);
		}
		return o;
	}
	public static Collection<SceProjElemPriority> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjElemPriority> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjElemPriority> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjElemPriority o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjElemPriority> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjElemPriority> tq = em.createQuery(jpql,SceProjElemPriority.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjElemPriority> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjElemPriority> tq = em.createNamedQuery(name,SceProjElemPriority.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjElemPriorityDAO(){}
	public SceProjElemPriorityDAO(int costId, int year, Calendar priorityTs){
		this.costId=costId;
		this.year=year;
		this.priorityTs=priorityTs;
	}
	public SceProjElemPriorityDAO(SceProjElemPriorityDAO orig){
		super(orig);
		this.costId=orig.getCostId();
		this.year=orig.getYear();
		this.priorityTs=orig.getPriorityTs();
		copyFrom(orig);
	}
	public void copyFrom(SceProjElemPriorityDAO orig){
		this.priority=orig.getPriority();
		this.priorityUserId=orig.getPriorityUserId();
		this.priorityAlt0=orig.getPriorityAlt0();
		this.priorityAlt1=orig.getPriorityAlt1();
		this.priorityAlt2=orig.getPriorityAlt2();
		this.priorityAlt3=orig.getPriorityAlt3();
		this.priorityAlt4=orig.getPriorityAlt4();
		this.priorityAlt5=orig.getPriorityAlt5();
		this.priorityAlt6=orig.getPriorityAlt6();
		this.priorityAlt7=orig.getPriorityAlt7();
		this.priorityAlt8=orig.getPriorityAlt8();
		this.priorityAlt9=orig.getPriorityAlt9();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altVarchar1=orig.getAltVarchar1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altDate1=orig.getAltDate1();
		this.altDate2=orig.getAltDate2();
		this.altDate3=orig.getAltDate3();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{costId, year, priorityTs};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="COST_ID",nullable=false,length=9)
	public int getCostId(){
		return costId;
	}
	public void setCostId(int costId) throws java.sql.SQLException{
		if(isSame(costId, getCostId()))return;
		int oldValue = getCostId();
		this.costId=costId;
		setProperty("COST_ID", costId, oldValue);
		sceProjElemCost=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Id
	@Column(name="PRIORITY_TS",nullable=false,length=7)
	public Calendar getPriorityTs(){
		return priorityTs;
	}
	public void setPriorityTs(Calendar priorityTs) throws java.sql.SQLException{
		if(isSame(priorityTs, getPriorityTs()))return;
		Calendar oldValue = getPriorityTs();
		this.priorityTs=priorityTs;
		setProperty("PRIORITY_TS", priorityTs, oldValue);
	}
	@Column(name="PRIORITY",nullable=true,length=9)
	public int getPriority(){
		return priority;
	}
	public void setPriority(int priority) throws java.sql.SQLException{
		if(isSame(priority, getPriority()))return;
		int oldValue = getPriority();
		this.priority=priority;
		setProperty("PRIORITY", priority, oldValue);
	}
	@Column(name="PRIORITY_USER_ID",nullable=true,length=9)
	public int getPriorityUserId(){
		return priorityUserId;
	}
	public void setPriorityUserId(int priorityUserId) throws java.sql.SQLException{
		if(isSame(priorityUserId, getPriorityUserId()))return;
		int oldValue = getPriorityUserId();
		this.priorityUserId=priorityUserId;
		setProperty("PRIORITY_USER_ID", priorityUserId, oldValue);
		user=null;
	}
	@Column(name="PRIORITY_ALT0",nullable=true,length=24)
	public double getPriorityAlt0(){
		return priorityAlt0;
	}
	public void setPriorityAlt0(double priorityAlt0) throws java.sql.SQLException{
		if(isSame(priorityAlt0, getPriorityAlt0()))return;
		double oldValue = getPriorityAlt0();
		this.priorityAlt0=priorityAlt0;
		setProperty("PRIORITY_ALT0", priorityAlt0, oldValue);
	}
	@Column(name="PRIORITY_ALT1",nullable=true,length=24)
	public double getPriorityAlt1(){
		return priorityAlt1;
	}
	public void setPriorityAlt1(double priorityAlt1) throws java.sql.SQLException{
		if(isSame(priorityAlt1, getPriorityAlt1()))return;
		double oldValue = getPriorityAlt1();
		this.priorityAlt1=priorityAlt1;
		setProperty("PRIORITY_ALT1", priorityAlt1, oldValue);
	}
	@Column(name="PRIORITY_ALT2",nullable=true,length=24)
	public double getPriorityAlt2(){
		return priorityAlt2;
	}
	public void setPriorityAlt2(double priorityAlt2) throws java.sql.SQLException{
		if(isSame(priorityAlt2, getPriorityAlt2()))return;
		double oldValue = getPriorityAlt2();
		this.priorityAlt2=priorityAlt2;
		setProperty("PRIORITY_ALT2", priorityAlt2, oldValue);
	}
	@Column(name="PRIORITY_ALT3",nullable=true,length=24)
	public double getPriorityAlt3(){
		return priorityAlt3;
	}
	public void setPriorityAlt3(double priorityAlt3) throws java.sql.SQLException{
		if(isSame(priorityAlt3, getPriorityAlt3()))return;
		double oldValue = getPriorityAlt3();
		this.priorityAlt3=priorityAlt3;
		setProperty("PRIORITY_ALT3", priorityAlt3, oldValue);
	}
	@Column(name="PRIORITY_ALT4",nullable=true,length=24)
	public double getPriorityAlt4(){
		return priorityAlt4;
	}
	public void setPriorityAlt4(double priorityAlt4) throws java.sql.SQLException{
		if(isSame(priorityAlt4, getPriorityAlt4()))return;
		double oldValue = getPriorityAlt4();
		this.priorityAlt4=priorityAlt4;
		setProperty("PRIORITY_ALT4", priorityAlt4, oldValue);
	}
	@Column(name="PRIORITY_ALT5",nullable=true,length=24)
	public double getPriorityAlt5(){
		return priorityAlt5;
	}
	public void setPriorityAlt5(double priorityAlt5) throws java.sql.SQLException{
		if(isSame(priorityAlt5, getPriorityAlt5()))return;
		double oldValue = getPriorityAlt5();
		this.priorityAlt5=priorityAlt5;
		setProperty("PRIORITY_ALT5", priorityAlt5, oldValue);
	}
	@Column(name="PRIORITY_ALT6",nullable=true,length=24)
	public double getPriorityAlt6(){
		return priorityAlt6;
	}
	public void setPriorityAlt6(double priorityAlt6) throws java.sql.SQLException{
		if(isSame(priorityAlt6, getPriorityAlt6()))return;
		double oldValue = getPriorityAlt6();
		this.priorityAlt6=priorityAlt6;
		setProperty("PRIORITY_ALT6", priorityAlt6, oldValue);
	}
	@Column(name="PRIORITY_ALT7",nullable=true,length=24)
	public double getPriorityAlt7(){
		return priorityAlt7;
	}
	public void setPriorityAlt7(double priorityAlt7) throws java.sql.SQLException{
		if(isSame(priorityAlt7, getPriorityAlt7()))return;
		double oldValue = getPriorityAlt7();
		this.priorityAlt7=priorityAlt7;
		setProperty("PRIORITY_ALT7", priorityAlt7, oldValue);
	}
	@Column(name="PRIORITY_ALT8",nullable=true,length=24)
	public double getPriorityAlt8(){
		return priorityAlt8;
	}
	public void setPriorityAlt8(double priorityAlt8) throws java.sql.SQLException{
		if(isSame(priorityAlt8, getPriorityAlt8()))return;
		double oldValue = getPriorityAlt8();
		this.priorityAlt8=priorityAlt8;
		setProperty("PRIORITY_ALT8", priorityAlt8, oldValue);
	}
	@Column(name="PRIORITY_ALT9",nullable=true,length=24)
	public double getPriorityAlt9(){
		return priorityAlt9;
	}
	public void setPriorityAlt9(double priorityAlt9) throws java.sql.SQLException{
		if(isSame(priorityAlt9, getPriorityAlt9()))return;
		double oldValue = getPriorityAlt9();
		this.priorityAlt9=priorityAlt9;
		setProperty("PRIORITY_ALT9", priorityAlt9, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_DATE2",nullable=true,length=7)
	public Calendar getAltDate2(){
		return altDate2;
	}
	public void setAltDate2(Calendar altDate2) throws java.sql.SQLException{
		if(isSame(altDate2, getAltDate2()))return;
		Calendar oldValue = getAltDate2();
		this.altDate2=altDate2;
		setProperty("ALT_DATE2", altDate2, oldValue);
	}
	@Column(name="ALT_DATE3",nullable=true,length=7)
	public Calendar getAltDate3(){
		return altDate3;
	}
	public void setAltDate3(Calendar altDate3) throws java.sql.SQLException{
		if(isSame(altDate3, getAltDate3()))return;
		Calendar oldValue = getAltDate3();
		this.altDate3=altDate3;
		setProperty("ALT_DATE3", altDate3, oldValue);
	}
	public SceProjElemCost getSceProjElemCost()throws java.sql.SQLException{
		if(sceProjElemCost==null)
			sceProjElemCost=SceProjElemCost.getInstance(getCostId());
		return sceProjElemCost;
	}
	public void setSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		setCostId(sceProjElemCost==null?0:sceProjElemCost.getCostId());
		this.sceProjElemCost=sceProjElemCost;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getPriorityUserId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setPriorityUserId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public SceProjElemPriority copy()throws java.sql.SQLException{
		SceProjElemPriority cp = new SceProjElemPriority((SceProjElemPriority)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjElemPriorityDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SceProjElemPriorityDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getCostId(),o.getCostId())) diffs.add("COST_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getPriorityTs(),o.getPriorityTs())) diffs.add("PRIORITY_TS");
		if(!isSame(getPriority(),o.getPriority())) diffs.add("PRIORITY");
		if(!isSame(getPriorityUserId(),o.getPriorityUserId())) diffs.add("PRIORITY_USER_ID");
		if(!isSame(getPriorityAlt0(),o.getPriorityAlt0())) diffs.add("PRIORITY_ALT0");
		if(!isSame(getPriorityAlt1(),o.getPriorityAlt1())) diffs.add("PRIORITY_ALT1");
		if(!isSame(getPriorityAlt2(),o.getPriorityAlt2())) diffs.add("PRIORITY_ALT2");
		if(!isSame(getPriorityAlt3(),o.getPriorityAlt3())) diffs.add("PRIORITY_ALT3");
		if(!isSame(getPriorityAlt4(),o.getPriorityAlt4())) diffs.add("PRIORITY_ALT4");
		if(!isSame(getPriorityAlt5(),o.getPriorityAlt5())) diffs.add("PRIORITY_ALT5");
		if(!isSame(getPriorityAlt6(),o.getPriorityAlt6())) diffs.add("PRIORITY_ALT6");
		if(!isSame(getPriorityAlt7(),o.getPriorityAlt7())) diffs.add("PRIORITY_ALT7");
		if(!isSame(getPriorityAlt8(),o.getPriorityAlt8())) diffs.add("PRIORITY_ALT8");
		if(!isSame(getPriorityAlt9(),o.getPriorityAlt9())) diffs.add("PRIORITY_ALT9");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltDate2(),o.getAltDate2())) diffs.add("ALT_DATE2");
		if(!isSame(getAltDate3(),o.getAltDate3())) diffs.add("ALT_DATE3");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(sceProjElemCost != null && sceProjElemCost.isNewInstance())
				sceProjElemCost.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
