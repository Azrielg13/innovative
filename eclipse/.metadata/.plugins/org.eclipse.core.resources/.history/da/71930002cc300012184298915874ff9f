package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PqReasonType;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PqReasonTypeDAO extends MDIObject{
	public static enum KEY_PROPERTY{REASON_ID};
	public static enum PROPERTY{REASON_ID,REASON_TYPE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int REASONID_LIMIT = 9;
	public final static int REASONTYPE_LIMIT = 32;
	private int reasonId;
	private String reasonType;
	public static PqReasonType getInstance(int reasonId)throws java.sql.SQLException{
		return getInstance(reasonId, true);
	}
	public static PqReasonType getInstance(int reasonId, boolean fetch)throws java.sql.SQLException{
		if(isNull(reasonId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(reasonId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PqReasonType o = null;
		if(cache != null && cache.contains(PqReasonType.class, pk))
			o = em.find(PqReasonType.class, pk);
		if(o==null && getAICache().contains(PqReasonType.class, pk))
			o = getAICache().find(PqReasonType.class, pk);
		if(o==null && fetch)
			o = em.find(PqReasonType.class, pk);
		if(o==null && fetch && PqReasonType.class.getAnnotation(AutoInsertable.class) != null){
			o = new PqReasonType(reasonId);
			getAICache().cache(PqReasonType.class, o);
		}
		return o;
	}
	public static Collection<PqReasonType> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PqReasonType> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PqReasonType> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PqReasonType o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PqReasonType> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqReasonType> tq = em.createQuery(jpql,PqReasonType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PqReasonType> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqReasonType> tq = em.createNamedQuery(name,PqReasonType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PqReasonTypeDAO(){}
	public PqReasonTypeDAO(int reasonId){
		this.reasonId=reasonId;
	}
	public PqReasonTypeDAO(PqReasonTypeDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(PqReasonTypeDAO orig){
		this.reasonType=orig.getReasonType();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{reasonId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDI970_SEQ",sequenceName="MDI970_SEQ")
	@Column(name="REASON_ID",nullable=false,length=9)
	public int getReasonId(){
		return reasonId;
	}
	public void setReasonId(int reasonId) throws java.sql.SQLException{
		if(isSame(reasonId, getReasonId()))return;
		int oldValue = getReasonId();
		this.reasonId=reasonId;
		setProperty("REASON_ID", reasonId, oldValue);
	}
	@Column(name="REASON_TYPE",nullable=false,length=32)
	public String getReasonType(){
		return reasonType;
	}
	public void setReasonType(String reasonType) throws java.sql.SQLException{
		if(isSame(reasonType, getReasonType()))return;
		String oldValue = getReasonType();
		this.reasonType=reasonType;
		setProperty("REASON_TYPE", reasonType, oldValue);
	}
	public PqReasonType copy()throws java.sql.SQLException{
		PqReasonType cp = new PqReasonType((PqReasonType)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PqReasonTypeDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PqReasonTypeDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getReasonId(),o.getReasonId())) diffs.add("REASON_ID");
		if(!isSame(getReasonType(),o.getReasonType())) diffs.add("REASON_TYPE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
