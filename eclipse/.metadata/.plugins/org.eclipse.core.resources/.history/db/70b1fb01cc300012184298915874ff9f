package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.CktCont;
import com.sce.esp.object.model.CktContShed;
import com.sce.esp.object.model.CktContTrans;
import com.sce.esp.object.model.MDIObject;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class CktContDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,CKT_ID};
	public static enum PROPERTY{PLANYEAR,CKT_ID,REASON,NOTE,FINALIZED,APPROVED,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int CKTID_LIMIT = 9;
	public final static int REASON_LIMIT = 256;
	public final static int NOTE_LIMIT = 512;
	public final static int FINALIZED_LIMIT = 1;
	public final static int APPROVED_LIMIT = 1;
	private int planyear;
	private int cktId;
	private String reason;
	private String note;
	private boolean finalized;
	private boolean approved;
	private Collection<CktContShed> cktContSheds;
	private Collection<CktContTrans> cktContTranss;
	private Ckt ckt;
	public static CktCont getInstance(int planyear, int cktId)throws java.sql.SQLException{
		return getInstance(planyear, cktId, true);
	}
	public static CktCont getInstance(int planyear, int cktId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, cktId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, cktId);
		Cache cache = em.getEntityManagerFactory().getCache();
		CktCont o = null;
		if(cache != null && cache.contains(CktCont.class, pk))
			o = em.find(CktCont.class, pk);
		if(o==null && getAICache().contains(CktCont.class, pk))
			o = getAICache().find(CktCont.class, pk);
		if(o==null && fetch)
			o = em.find(CktCont.class, pk);
		if(o==null && fetch && CktCont.class.getAnnotation(AutoInsertable.class) != null){
			o = new CktCont(planyear, cktId);
			getAICache().cache(CktCont.class, o);
		}
		return o;
	}
	public static Collection<CktCont> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CktCont> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CktCont> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CktCont o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CktCont> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktCont> tq = em.createQuery(jpql,CktCont.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CktCont> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktCont> tq = em.createNamedQuery(name,CktCont.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CktContDAO(){}
	public CktContDAO(int planyear, int cktId){
		this.planyear=planyear;
		this.cktId=cktId;
	}
	public CktContDAO(CktContDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.cktId=orig.getCktId();
		copyFrom(orig);
	}
	public void copyFrom(CktContDAO orig){
		this.reason=orig.getReason();
		this.note=orig.getNote();
		this.finalized=orig.isFinalized();
		this.approved=orig.isApproved();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, cktId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="CKT_ID",nullable=false,length=9)
	public int getCktId(){
		return cktId;
	}
	public void setCktId(int cktId) throws java.sql.SQLException{
		if(isSame(cktId, getCktId()))return;
		int oldValue = getCktId();
		this.cktId=cktId;
		setProperty("CKT_ID", cktId, oldValue);
		ckt=null;
	}
	@Column(name="REASON",nullable=true,length=256)
	public String getReason(){
		return reason;
	}
	public void setReason(String reason) throws java.sql.SQLException{
		if(isSame(reason, getReason()))return;
		String oldValue = getReason();
		this.reason=reason;
		setProperty("REASON", reason, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="FINALIZED",nullable=true,length=1)
	public boolean isFinalized(){
		return finalized;
	}
	public void setFinalized(boolean finalized) throws java.sql.SQLException{
		if(isSame(finalized, isFinalized()))return;
		boolean oldValue = isFinalized();
		this.finalized=finalized;
		setProperty("FINALIZED", finalized, oldValue);
	}
	@Column(name="APPROVED",nullable=true,length=1)
	public boolean isApproved(){
		return approved;
	}
	public void setApproved(boolean approved) throws java.sql.SQLException{
		if(isSame(approved, isApproved()))return;
		boolean oldValue = isApproved();
		this.approved=approved;
		setProperty("APPROVED", approved, oldValue);
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public Collection<CktContShed> getCktContSheds()throws java.sql.SQLException{
		if(isNewInstance() || cktContSheds != null){
			if(cktContSheds == null)
				cktContSheds = new TreeSet<CktContShed>();
			return cktContSheds;
		}
		return CktContShed.getNamedCollection("findByCktCont",getPlanyear(), getCktId());
	}
	public void addCktContShed(CktContShed cktContShed)throws java.sql.SQLException{
		cktContShed.setCktCont((CktCont)this);
		if(isNewInstance() || cktContSheds != null)
			getCktContSheds().add(cktContShed);
		else
			cktContShed.insert();
	}
	public void removeCktContShed(CktContShed cktContShed)throws java.sql.SQLException{
		if(isNewInstance() || cktContSheds != null)
			getCktContSheds().remove(cktContShed);
		else
			cktContShed.delete();
	}
	public Collection<CktContTrans> getCktContTranss()throws java.sql.SQLException{
		if(isNewInstance() || cktContTranss != null){
			if(cktContTranss == null)
				cktContTranss = new TreeSet<CktContTrans>();
			return cktContTranss;
		}
		return CktContTrans.getNamedCollection("findByCktCont",getPlanyear(), getCktId());
	}
	public void addCktContTrans(CktContTrans cktContTrans)throws java.sql.SQLException{
		cktContTrans.setCktCont((CktCont)this);
		if(isNewInstance() || cktContTranss != null)
			getCktContTranss().add(cktContTrans);
		else
			cktContTrans.insert();
	}
	public void removeCktContTrans(CktContTrans cktContTrans)throws java.sql.SQLException{
		if(isNewInstance() || cktContTranss != null)
			getCktContTranss().remove(cktContTrans);
		else
			cktContTrans.delete();
	}
	public CktCont copy()throws java.sql.SQLException{
		CktCont cp = new CktCont((CktCont)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CktContDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(CktContShed child:getCktContSheds())
			cp.addCktContShed(child.copy());
		for(CktContTrans child:getCktContTranss())
			cp.addCktContTrans(child.copy());
	}
	public Vector<String> getDifference(CktContDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getCktId(),o.getCktId())) diffs.add("CKT_ID");
		if(!isSame(getReason(),o.getReason())) diffs.add("REASON");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(isFinalized(),o.isFinalized())) diffs.add("FINALIZED");
		if(!isSame(isApproved(),o.isApproved())) diffs.add("APPROVED");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(cktContSheds != null){
			for(CktContShed cktContShed:getCktContSheds()){
				if(cktContShed.isNewInstance())
					cktContShed.setCktCont((CktCont)this);
				cktContShed.insert();
			}
			cktContSheds = null;
		}
		if(cktContTranss != null){
			for(CktContTrans cktContTrans:getCktContTranss()){
				if(cktContTrans.isNewInstance())
					cktContTrans.setCktCont((CktCont)this);
				cktContTrans.insert();
			}
			cktContTranss = null;
		}
	}
}
