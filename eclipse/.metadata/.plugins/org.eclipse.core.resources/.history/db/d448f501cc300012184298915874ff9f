package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PifMajorCustType;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PifMajorCustTypeDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,PIF_MAJOR_CUST_TYPE_ID};
	public static enum PROPERTY{PLANYEAR,PIF_MAJOR_CUST_TYPE_ID,CUST_NAME,DESCRIPTION,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int PIFMAJORCUSTTYPEID_LIMIT = 9;
	public final static int CUSTNAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 256;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int planyear;
	private int pifMajorCustTypeId;
	private String custName;
	private String description;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Department department;
	public static PifMajorCustType getInstance(int planyear, int pifMajorCustTypeId)throws java.sql.SQLException{
		return getInstance(planyear, pifMajorCustTypeId, true);
	}
	public static PifMajorCustType getInstance(int planyear, int pifMajorCustTypeId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, pifMajorCustTypeId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, pifMajorCustTypeId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifMajorCustType o = null;
		if(cache != null && cache.contains(PifMajorCustType.class, pk))
			o = em.find(PifMajorCustType.class, pk);
		if(o==null && getAICache().contains(PifMajorCustType.class, pk))
			o = getAICache().find(PifMajorCustType.class, pk);
		if(o==null && fetch)
			o = em.find(PifMajorCustType.class, pk);
		if(o==null && fetch && PifMajorCustType.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifMajorCustType(planyear, pifMajorCustTypeId);
			getAICache().cache(PifMajorCustType.class, o);
		}
		return o;
	}
	public static Collection<PifMajorCustType> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifMajorCustType> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifMajorCustType> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifMajorCustType o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifMajorCustType> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifMajorCustType> tq = em.createQuery(jpql,PifMajorCustType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifMajorCustType> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifMajorCustType> tq = em.createNamedQuery(name,PifMajorCustType.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifMajorCustTypeDAO(){}
	public PifMajorCustTypeDAO(int planyear, int pifMajorCustTypeId){
		this.planyear=planyear;
		this.pifMajorCustTypeId=pifMajorCustTypeId;
	}
	public PifMajorCustTypeDAO(PifMajorCustTypeDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(PifMajorCustTypeDAO orig){
		this.custName=orig.getCustName();
		this.description=orig.getDescription();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, pifMajorCustTypeId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI679_SEQ",sequenceName="MDI679_SEQ")
	@Column(name="PIF_MAJOR_CUST_TYPE_ID",nullable=false,length=9)
	public int getPifMajorCustTypeId(){
		return pifMajorCustTypeId;
	}
	public void setPifMajorCustTypeId(int pifMajorCustTypeId) throws java.sql.SQLException{
		if(isSame(pifMajorCustTypeId, getPifMajorCustTypeId()))return;
		int oldValue = getPifMajorCustTypeId();
		this.pifMajorCustTypeId=pifMajorCustTypeId;
		setProperty("PIF_MAJOR_CUST_TYPE_ID", pifMajorCustTypeId, oldValue);
	}
	@Column(name="CUST_NAME",nullable=false,length=64)
	public String getCustName(){
		return custName;
	}
	public void setCustName(String custName) throws java.sql.SQLException{
		if(isSame(custName, getCustName()))return;
		String oldValue = getCustName();
		this.custName=custName;
		setProperty("CUST_NAME", custName, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=256)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public PifMajorCustType copy()throws java.sql.SQLException{
		PifMajorCustType cp = new PifMajorCustType((PifMajorCustType)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifMajorCustTypeDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PifMajorCustTypeDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getPifMajorCustTypeId(),o.getPifMajorCustTypeId())) diffs.add("PIF_MAJOR_CUST_TYPE_ID");
		if(!isSame(getCustName(),o.getCustName())) diffs.add("CUST_NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
