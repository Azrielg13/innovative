package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AbankN1Tie;
import com.sce.esp.object.model.AbankTrans;
import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Stl;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class AbankTransDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,TIE_ID,YEAR,TRANS_SUB_ID};
	public static enum PROPERTY{PLANYEAR,TIE_ID,YEAR,TRANS_SUB_ID,STL_ID,DISABLED,NOTE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int TIEID_LIMIT = 9;
	public final static int YEAR_LIMIT = 4;
	public final static int TRANSSUBID_LIMIT = 9;
	public final static int STLID_LIMIT = 9;
	public final static int DISABLED_LIMIT = 1;
	public final static int NOTE_LIMIT = 512;
	private int planyear;
	private int tieId;
	private int year;
	private int transSubId;
	private int stlId;
	private boolean disabled;
	private String note;
	private AbankN1Tie abankN1Tie;
	private Bbank bbank;
	private Stl stl;
	public static AbankTrans getInstance(int planyear, int tieId, int year, int transSubId)throws java.sql.SQLException{
		return getInstance(planyear, tieId, year, transSubId, true);
	}
	public static AbankTrans getInstance(int planyear, int tieId, int year, int transSubId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, tieId, year, transSubId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, tieId, year, transSubId);
		Cache cache = em.getEntityManagerFactory().getCache();
		AbankTrans o = null;
		if(cache != null && cache.contains(AbankTrans.class, pk))
			o = em.find(AbankTrans.class, pk);
		if(o==null && getAICache().contains(AbankTrans.class, pk))
			o = getAICache().find(AbankTrans.class, pk);
		if(o==null && fetch)
			o = em.find(AbankTrans.class, pk);
		if(o==null && fetch && AbankTrans.class.getAnnotation(AutoInsertable.class) != null){
			o = new AbankTrans(planyear, tieId, year, transSubId);
			getAICache().cache(AbankTrans.class, o);
		}
		return o;
	}
	public static Collection<AbankTrans> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<AbankTrans> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<AbankTrans> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM AbankTrans o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<AbankTrans> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<AbankTrans> tq = em.createQuery(jpql,AbankTrans.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<AbankTrans> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<AbankTrans> tq = em.createNamedQuery(name,AbankTrans.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public AbankTransDAO(){}
	public AbankTransDAO(int planyear, int tieId, int year, int transSubId){
		this.planyear=planyear;
		this.tieId=tieId;
		this.year=year;
		this.transSubId=transSubId;
	}
	public AbankTransDAO(AbankTransDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.tieId=orig.getTieId();
		this.year=orig.getYear();
		this.transSubId=orig.getTransSubId();
		copyFrom(orig);
	}
	public void copyFrom(AbankTransDAO orig){
		this.stlId=orig.getStlId();
		this.disabled=orig.isDisabled();
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, tieId, year, transSubId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="TIE_ID",nullable=false,length=9)
	public int getTieId(){
		return tieId;
	}
	public void setTieId(int tieId) throws java.sql.SQLException{
		if(isSame(tieId, getTieId()))return;
		int oldValue = getTieId();
		this.tieId=tieId;
		setProperty("TIE_ID", tieId, oldValue);
		abankN1Tie=null;
	}
	@Id
	@Column(name="YEAR",nullable=false,length=4)
	public int getYear(){
		return year;
	}
	public void setYear(int year) throws java.sql.SQLException{
		if(isSame(year, getYear()))return;
		int oldValue = getYear();
		this.year=year;
		setProperty("YEAR", year, oldValue);
	}
	@Id
	@Column(name="TRANS_SUB_ID",nullable=false,length=9)
	public int getTransSubId(){
		return transSubId;
	}
	public void setTransSubId(int transSubId) throws java.sql.SQLException{
		if(isSame(transSubId, getTransSubId()))return;
		int oldValue = getTransSubId();
		this.transSubId=transSubId;
		setProperty("TRANS_SUB_ID", transSubId, oldValue);
		bbank=null;
	}
	@Column(name="STL_ID",nullable=false,length=9)
	public int getStlId(){
		return stlId;
	}
	public void setStlId(int stlId) throws java.sql.SQLException{
		if(isSame(stlId, getStlId()))return;
		int oldValue = getStlId();
		this.stlId=stlId;
		setProperty("STL_ID", stlId, oldValue);
		stl=null;
	}
	@Column(name="DISABLED",nullable=true,length=1)
	public boolean isDisabled(){
		return disabled;
	}
	public void setDisabled(boolean disabled) throws java.sql.SQLException{
		if(isSame(disabled, isDisabled()))return;
		boolean oldValue = isDisabled();
		this.disabled=disabled;
		setProperty("DISABLED", disabled, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public AbankN1Tie getAbankN1Tie()throws java.sql.SQLException{
		if(abankN1Tie==null)
			abankN1Tie=AbankN1Tie.getInstance(getPlanyear(), getTieId());
		return abankN1Tie;
	}
	public void setAbankN1Tie(AbankN1Tie abankN1Tie)throws java.sql.SQLException{
		setTieId(abankN1Tie==null?0:abankN1Tie.getTieId());
		this.abankN1Tie=abankN1Tie;
	}
	public Bbank getBbank()throws java.sql.SQLException{
		if(bbank==null)
			bbank=Bbank.getInstance(getPlanyear(), getTransSubId());
		return bbank;
	}
	public void setBbank(Bbank bbank)throws java.sql.SQLException{
		setTransSubId(bbank==null?0:bbank.getBbankSubId());
		this.bbank=bbank;
	}
	public Stl getStl()throws java.sql.SQLException{
		if(stl==null)
			stl=Stl.getInstance(getPlanyear(), getStlId());
		return stl;
	}
	public void setStl(Stl stl)throws java.sql.SQLException{
		setStlId(stl==null?0:stl.getStlId());
		this.stl=stl;
	}
	public AbankTrans copy()throws java.sql.SQLException{
		AbankTrans cp = new AbankTrans((AbankTrans)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(AbankTransDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(AbankTransDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getTieId(),o.getTieId())) diffs.add("TIE_ID");
		if(!isSame(getYear(),o.getYear())) diffs.add("YEAR");
		if(!isSame(getTransSubId(),o.getTransSubId())) diffs.add("TRANS_SUB_ID");
		if(!isSame(getStlId(),o.getStlId())) diffs.add("STL_ID");
		if(!isSame(isDisabled(),o.isDisabled())) diffs.add("DISABLED");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
