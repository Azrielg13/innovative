package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;

import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;

import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Bbank;
import com.sce.esp.object.model.Ckt;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Pif;
import com.sce.esp.object.model.PifBi;
import com.sce.esp.object.model.PifBudgetCat;
import com.sce.esp.object.model.PifCategory;
import com.sce.esp.object.model.PifCktJust;
import com.sce.esp.object.model.PifCompRisk;
import com.sce.esp.object.model.PifCrewType;
import com.sce.esp.object.model.PifCustType;
import com.sce.esp.object.model.PifGwCat;
import com.sce.esp.object.model.PifImpact;
import com.sce.esp.object.model.PifLabor;
import com.sce.esp.object.model.PifLineJust;
import com.sce.esp.object.model.PifMajorCustType;
import com.sce.esp.object.model.PifPriority;
import com.sce.esp.object.model.PifProjDriver;
import com.sce.esp.object.model.PifStatus;
import com.sce.esp.object.model.PifSubJust;
import com.sce.esp.object.model.PifVoltJust;
import com.sce.esp.object.model.PifWo;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.SceProj;
import com.sce.esp.object.model.User;
public abstract class PifDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,PIF_ID};
	public static enum PROPERTY{PLANYEAR,PIF_ID,BBANK_SUB_ID,CKT_ID,PROJ_ID,SIM_ID,PIF_NUM,OP_DATE,LOCATION,DESCRIPTION,SCOPE,NOTE,PRIORITY_ID,STATUS_ID,CATEGORY_ID,BI_ID,USER_ESTIMATE,LABOR_TYPE_ID,USERNAME_ID,CREATOR_USERNAME_ID,APP_DATE,ESTIMATE_SOURCE,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_DOUBLE4,ALT_VARCHAR1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID,SCE_PROJ_ID,ALT_DOUBLE5,ALT_DOUBLE6,ALT_DOUBLE7,ALT_VARCHAR2,ALT_VARCHAR3,ALT_VARCHAR4,RGT_FUNDED,SOURCE_BI_ID,BUDGET_YEAR,REQUEST_NUM,OTHER_CUST_TYPE,OTHER_BI,OTHER_PROJ_DRIVER,OTHER_MAJOR_CUST_TYPE,PIF_BUDGET_CAT_ID,PIF_COMP_RISK_ID,PIF_CREW_TYPE_ID,PIF_FINANCE_CONFIRM_ID,PIF_PROJ_DRIVER_ID,PIF_CUST_TYPE_ID,PIF_MAJOR_CUST_TYPE_ID,PIF_GW_CAT_ID,DISTRICT_SPONSOR,OTHER_GW};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int PIFID_LIMIT = 9;
	public final static int BBANKSUBID_LIMIT = 9;
	public final static int CKTID_LIMIT = 9;
	public final static int PROJID_LIMIT = 9;
	public final static int SIMID_LIMIT = 9;
	public final static int PIFNUM_LIMIT = 10;
	public final static int OPDATE_LIMIT = 7;
	public final static int LOCATION_LIMIT = 512;
	public final static int DESCRIPTION_LIMIT = 1024;
	public final static int SCOPE_LIMIT = 2048;
	public final static int NOTE_LIMIT = 2048;
	public final static int PRIORITYID_LIMIT = 9;
	public final static int STATUSID_LIMIT = 9;
	public final static int CATEGORYID_LIMIT = 9;
	public final static int BIID_LIMIT = 9;
	public final static int USERESTIMATE_LIMIT = 9;
	public final static int LABORTYPEID_LIMIT = 9;
	public final static int USERNAMEID_LIMIT = 9;
	public final static int CREATORUSERNAMEID_LIMIT = 9;
	public final static int APPDATE_LIMIT = 7;
	public final static int ESTIMATESOURCE_LIMIT = 128;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTDOUBLE4_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 512;
	public final static int SCEPROJID_LIMIT = 9;
	public final static int ALTDOUBLE5_LIMIT = 126;
	public final static int ALTDOUBLE6_LIMIT = 126;
	public final static int ALTDOUBLE7_LIMIT = 126;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTVARCHAR4_LIMIT = 256;
	public final static int RGTFUNDED_LIMIT = 1;
	public final static int SOURCEBIID_LIMIT = 9;
	public final static int BUDGETYEAR_LIMIT = 4;
	public final static int REQUESTNUM_LIMIT = 50;
	public final static int OTHERCUSTTYPE_LIMIT = 256;
	public final static int OTHERBI_LIMIT = 256;
	public final static int OTHERPROJDRIVER_LIMIT = 256;
	public final static int OTHERMAJORCUSTTYPE_LIMIT = 256;
	public final static int PIFBUDGETCATID_LIMIT = 9;
	public final static int PIFCOMPRISKID_LIMIT = 9;
	public final static int PIFCREWTYPEID_LIMIT = 9;
	public final static int PIFFINANCECONFIRMID_LIMIT = 1;
	public final static int PIFPROJDRIVERID_LIMIT = 9;
	public final static int PIFCUSTTYPEID_LIMIT = 9;
	public final static int PIFMAJORCUSTTYPEID_LIMIT = 9;
	public final static int PIFGWCATID_LIMIT = 9;
	public final static int DISTRICTSPONSOR_LIMIT = 64;
	public final static int OTHERGW_LIMIT = 256;
	private int planyear;
	private int pifId;
	private int bbankSubId;
	private int cktId;
	private int projId;
	private int simId;
	private String pifNum;
	private Calendar opDate;
	private String location;
	private String description;
	private String scope;
	private String note;
	private int priorityId;
	private int statusId;
	private int categoryId;
	private int biId;
	private int userEstimate;
	private int laborTypeId;
	private int usernameId;
	private int creatorUsernameId;
	private Calendar appDate;
	private String estimateSource;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private double altDouble4;
	private String altVarchar1;
	private int sceProjId;
	private double altDouble5;
	private double altDouble6;
	private double altDouble7;
	private String altVarchar2;
	private String altVarchar3;
	private String altVarchar4;
	private boolean rgtFunded;
	private int sourceBiId;
	private int budgetYear;
	private String requestNum;
	private String otherCustType;
	private String otherBi;
	private String otherProjDriver;
	private String otherMajorCustType;
	private int pifBudgetCatId;
	private int pifCompRiskId;
	private int pifCrewTypeId;
	private boolean pifFinanceConfirmId;
	private int pifProjDriverId;
	private int pifCustTypeId;
	private int pifMajorCustTypeId;
	private int pifGwCatId;
	private String districtSponsor;
	private String otherGw;
	private Collection<PifCktJust> pifCktJusts;
	private Collection<PifImpact> pifImpacts;
	private Collection<PifLineJust> pifLineJusts;
	private Collection<PifSubJust> pifSubJusts;
	private Collection<PifVoltJust> pifVoltJusts;
	private Collection<PifWo> pifWos;
	private Bbank bbank;
	private Ckt ckt;
	private PifBi pifBi;
	private PifBi pifBi2;
	private PifBudgetCat pifBudgetCat;
	private PifCategory pifCategory;
	private PifCompRisk pifCompRisk;
	private PifCrewType pifCrewType;
	private PifCustType pifCustType;
	private PifGwCat pifGwCat;
	private PifLabor pifLabor;
	private PifMajorCustType pifMajorCustType;
	private PifPriority pifPriority;
	private PifProjDriver pifProjDriver;
	private PifStatus pifStatus;
	private Proj proj;
	private SceProj sceProj;
	private User user;
	private User user2;
	public static Pif getInstance(int planyear, int pifId)throws java.sql.SQLException{
		return getInstance(planyear, pifId, true);
	}
	public static Pif getInstance(int planyear, int pifId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, pifId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, pifId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Pif o = null;
		if(cache != null && cache.contains(Pif.class, pk))
			o = em.find(Pif.class, pk);
		if(o==null && getAICache().contains(Pif.class, pk))
			o = getAICache().find(Pif.class, pk);
		if(o==null && fetch)
			o = em.find(Pif.class, pk);
		if(o==null && fetch && Pif.class.getAnnotation(AutoInsertable.class) != null){
			o = new Pif(planyear, pifId);
			getAICache().cache(Pif.class, o);
		}
		return o;
	}
	public static Collection<Pif> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Pif> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Pif> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Pif o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Pif> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Pif> tq = em.createQuery(jpql,Pif.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Pif> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Pif> tq = em.createNamedQuery(name,Pif.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifDAO(){}
	public PifDAO(int planyear, int pifId){
		this.planyear=planyear;
		this.pifId=pifId;
	}
	public PifDAO(PifDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.pifId=orig.getPifId();
		copyFrom(orig);
	}
	public void copyFrom(PifDAO orig){
		this.bbankSubId=orig.getBbankSubId();
		this.cktId=orig.getCktId();
		this.projId=orig.getProjId();
		this.simId=orig.getSimId();
		this.pifNum=orig.getPifNum();
		this.opDate=orig.getOpDate();
		this.location=orig.getLocation();
		this.description=orig.getDescription();
		this.scope=orig.getScope();
		this.note=orig.getNote();
		this.priorityId=orig.getPriorityId();
		this.statusId=orig.getStatusId();
		this.categoryId=orig.getCategoryId();
		this.biId=orig.getBiId();
		this.userEstimate=orig.getUserEstimate();
		this.laborTypeId=orig.getLaborTypeId();
		this.usernameId=orig.getUsernameId();
		this.creatorUsernameId=orig.getCreatorUsernameId();
		this.appDate=orig.getAppDate();
		this.estimateSource=orig.getEstimateSource();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altDouble4=orig.getAltDouble4();
		this.altVarchar1=orig.getAltVarchar1();
		this.sceProjId=orig.getSceProjId();
		this.altDouble5=orig.getAltDouble5();
		this.altDouble6=orig.getAltDouble6();
		this.altDouble7=orig.getAltDouble7();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altVarchar4=orig.getAltVarchar4();
		this.rgtFunded=orig.isRgtFunded();
		this.sourceBiId=orig.getSourceBiId();
		this.budgetYear=orig.getBudgetYear();
		this.requestNum=orig.getRequestNum();
		this.otherCustType=orig.getOtherCustType();
		this.otherBi=orig.getOtherBi();
		this.otherProjDriver=orig.getOtherProjDriver();
		this.otherMajorCustType=orig.getOtherMajorCustType();
		this.pifBudgetCatId=orig.getPifBudgetCatId();
		this.pifCompRiskId=orig.getPifCompRiskId();
		this.pifCrewTypeId=orig.getPifCrewTypeId();
		this.pifFinanceConfirmId=orig.isPifFinanceConfirmId();
		this.pifProjDriverId=orig.getPifProjDriverId();
		this.pifCustTypeId=orig.getPifCustTypeId();
		this.pifMajorCustTypeId=orig.getPifMajorCustTypeId();
		this.pifGwCatId=orig.getPifGwCatId();
		this.districtSponsor=orig.getDistrictSponsor();
		this.otherGw=orig.getOtherGw();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, pifId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI670_SEQ",sequenceName="MDI670_SEQ")
	@Column(name="PIF_ID",nullable=false,length=9)
	public int getPifId(){
		return pifId;
	}
	public void setPifId(int pifId) throws java.sql.SQLException{
		if(isSame(pifId, getPifId()))return;
		int oldValue = getPifId();
		this.pifId=pifId;
		setProperty("PIF_ID", pifId, oldValue);
	}
	@Column(name="BBANK_SUB_ID",nullable=false,length=9)
	public int getBbankSubId(){
		return bbankSubId;
	}
	public void setBbankSubId(int bbankSubId) throws java.sql.SQLException{
		if(isSame(bbankSubId, getBbankSubId()))return;
		int oldValue = getBbankSubId();
		this.bbankSubId=bbankSubId;
		setProperty("BBANK_SUB_ID", bbankSubId, oldValue);
		bbank=null;
	}
	@Column(name="CKT_ID",nullable=true,length=9)
	public int getCktId(){
		return cktId;
	}
	public void setCktId(int cktId) throws java.sql.SQLException{
		if(isSame(cktId, getCktId()))return;
		int oldValue = getCktId();
		this.cktId=cktId;
		setProperty("CKT_ID", cktId, oldValue);
		ckt=null;
	}
	@Column(name="PROJ_ID",nullable=true,length=9)
	public int getProjId(){
		return projId;
	}
	public void setProjId(int projId) throws java.sql.SQLException{
		if(isSame(projId, getProjId()))return;
		int oldValue = getProjId();
		this.projId=projId;
		setProperty("PROJ_ID", projId, oldValue);
		proj=null;
	}
	@Column(name="SIM_ID",nullable=true,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Column(name="PIF_NUM",nullable=false,length=10)
	public String getPifNum(){
		return pifNum;
	}
	public void setPifNum(String pifNum) throws java.sql.SQLException{
		if(isSame(pifNum, getPifNum()))return;
		String oldValue = getPifNum();
		this.pifNum=pifNum;
		setProperty("PIF_NUM", pifNum, oldValue);
	}
	@Column(name="OP_DATE",nullable=true,length=7)
	public Calendar getOpDate(){
		return opDate;
	}
	public void setOpDate(Calendar opDate) throws java.sql.SQLException{
		if(isSame(opDate, getOpDate()))return;
		Calendar oldValue = getOpDate();
		this.opDate=opDate;
		setProperty("OP_DATE", opDate, oldValue);
	}
	@Column(name="LOCATION",nullable=true,length=512)
	public String getLocation(){
		return location;
	}
	public void setLocation(String location) throws java.sql.SQLException{
		if(isSame(location, getLocation()))return;
		String oldValue = getLocation();
		this.location=location;
		setProperty("LOCATION", location, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=1024)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="SCOPE",nullable=true,length=2048)
	public String getScope(){
		return scope;
	}
	public void setScope(String scope) throws java.sql.SQLException{
		if(isSame(scope, getScope()))return;
		String oldValue = getScope();
		this.scope=scope;
		setProperty("SCOPE", scope, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=2048)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="PRIORITY_ID",nullable=true,length=9)
	public int getPriorityId(){
		return priorityId;
	}
	public void setPriorityId(int priorityId) throws java.sql.SQLException{
		if(isSame(priorityId, getPriorityId()))return;
		int oldValue = getPriorityId();
		this.priorityId=priorityId;
		setProperty("PRIORITY_ID", priorityId, oldValue);
		pifPriority=null;
	}
	@Column(name="STATUS_ID",nullable=true,length=9)
	public int getStatusId(){
		return statusId;
	}
	public void setStatusId(int statusId) throws java.sql.SQLException{
		if(isSame(statusId, getStatusId()))return;
		int oldValue = getStatusId();
		this.statusId=statusId;
		setProperty("STATUS_ID", statusId, oldValue);
		pifStatus=null;
	}
	@Column(name="CATEGORY_ID",nullable=true,length=9)
	public int getCategoryId(){
		return categoryId;
	}
	public void setCategoryId(int categoryId) throws java.sql.SQLException{
		if(isSame(categoryId, getCategoryId()))return;
		int oldValue = getCategoryId();
		this.categoryId=categoryId;
		setProperty("CATEGORY_ID", categoryId, oldValue);
		pifCategory=null;
	}
	@Column(name="BI_ID",nullable=true,length=9)
	public int getBiId(){
		return biId;
	}
	public void setBiId(int biId) throws java.sql.SQLException{
		if(isSame(biId, getBiId()))return;
		int oldValue = getBiId();
		this.biId=biId;
		setProperty("BI_ID", biId, oldValue);
		pifBi=null;
	}
	@Column(name="USER_ESTIMATE",nullable=true,length=9)
	public int getUserEstimate(){
		return userEstimate;
	}
	public void setUserEstimate(int userEstimate) throws java.sql.SQLException{
		if(isSame(userEstimate, getUserEstimate()))return;
		int oldValue = getUserEstimate();
		this.userEstimate=userEstimate;
		setProperty("USER_ESTIMATE", userEstimate, oldValue);
	}
	@Column(name="LABOR_TYPE_ID",nullable=true,length=9)
	public int getLaborTypeId(){
		return laborTypeId;
	}
	public void setLaborTypeId(int laborTypeId) throws java.sql.SQLException{
		if(isSame(laborTypeId, getLaborTypeId()))return;
		int oldValue = getLaborTypeId();
		this.laborTypeId=laborTypeId;
		setProperty("LABOR_TYPE_ID", laborTypeId, oldValue);
		pifLabor=null;
	}
	@Column(name="USERNAME_ID",nullable=true,length=9)
	public int getUsernameId(){
		return usernameId;
	}
	public void setUsernameId(int usernameId) throws java.sql.SQLException{
		if(isSame(usernameId, getUsernameId()))return;
		int oldValue = getUsernameId();
		this.usernameId=usernameId;
		setProperty("USERNAME_ID", usernameId, oldValue);
		user=null;
	}
	@Column(name="CREATOR_USERNAME_ID",nullable=true,length=9)
	public int getCreatorUsernameId(){
		return creatorUsernameId;
	}
	public void setCreatorUsernameId(int creatorUsernameId) throws java.sql.SQLException{
		if(isSame(creatorUsernameId, getCreatorUsernameId()))return;
		int oldValue = getCreatorUsernameId();
		this.creatorUsernameId=creatorUsernameId;
		setProperty("CREATOR_USERNAME_ID", creatorUsernameId, oldValue);
		user2=null;
	}
	@Column(name="APP_DATE",nullable=true,length=7)
	public Calendar getAppDate(){
		return appDate;
	}
	public void setAppDate(Calendar appDate) throws java.sql.SQLException{
		if(isSame(appDate, getAppDate()))return;
		Calendar oldValue = getAppDate();
		this.appDate=appDate;
		setProperty("APP_DATE", appDate, oldValue);
	}
	@Column(name="ESTIMATE_SOURCE",nullable=true,length=128)
	public String getEstimateSource(){
		return estimateSource;
	}
	public void setEstimateSource(String estimateSource) throws java.sql.SQLException{
		if(isSame(estimateSource, getEstimateSource()))return;
		String oldValue = getEstimateSource();
		this.estimateSource=estimateSource;
		setProperty("ESTIMATE_SOURCE", estimateSource, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_DOUBLE4",nullable=true,length=24)
	public double getAltDouble4(){
		return altDouble4;
	}
	public void setAltDouble4(double altDouble4) throws java.sql.SQLException{
		if(isSame(altDouble4, getAltDouble4()))return;
		double oldValue = getAltDouble4();
		this.altDouble4=altDouble4;
		setProperty("ALT_DOUBLE4", altDouble4, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=512)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="SCE_PROJ_ID",nullable=true,length=9)
	public int getSceProjId(){
		return sceProjId;
	}
	public void setSceProjId(int sceProjId) throws java.sql.SQLException{
		if(isSame(sceProjId, getSceProjId()))return;
		int oldValue = getSceProjId();
		this.sceProjId=sceProjId;
		setProperty("SCE_PROJ_ID", sceProjId, oldValue);
		sceProj=null;
	}
	@Column(name="ALT_DOUBLE5",nullable=true,length=126)
	public double getAltDouble5(){
		return altDouble5;
	}
	public void setAltDouble5(double altDouble5) throws java.sql.SQLException{
		if(isSame(altDouble5, getAltDouble5()))return;
		double oldValue = getAltDouble5();
		this.altDouble5=altDouble5;
		setProperty("ALT_DOUBLE5", altDouble5, oldValue);
	}
	@Column(name="ALT_DOUBLE6",nullable=true,length=126)
	public double getAltDouble6(){
		return altDouble6;
	}
	public void setAltDouble6(double altDouble6) throws java.sql.SQLException{
		if(isSame(altDouble6, getAltDouble6()))return;
		double oldValue = getAltDouble6();
		this.altDouble6=altDouble6;
		setProperty("ALT_DOUBLE6", altDouble6, oldValue);
	}
	@Column(name="ALT_DOUBLE7",nullable=true,length=126)
	public double getAltDouble7(){
		return altDouble7;
	}
	public void setAltDouble7(double altDouble7) throws java.sql.SQLException{
		if(isSame(altDouble7, getAltDouble7()))return;
		double oldValue = getAltDouble7();
		this.altDouble7=altDouble7;
		setProperty("ALT_DOUBLE7", altDouble7, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_VARCHAR4",nullable=true,length=256)
	public String getAltVarchar4(){
		return altVarchar4;
	}
	public void setAltVarchar4(String altVarchar4) throws java.sql.SQLException{
		if(isSame(altVarchar4, getAltVarchar4()))return;
		String oldValue = getAltVarchar4();
		this.altVarchar4=altVarchar4;
		setProperty("ALT_VARCHAR4", altVarchar4, oldValue);
	}
	@Column(name="RGT_FUNDED",nullable=true,length=1)
	public boolean isRgtFunded(){
		return rgtFunded;
	}
	public void setRgtFunded(boolean rgtFunded) throws java.sql.SQLException{
		if(isSame(rgtFunded, isRgtFunded()))return;
		boolean oldValue = isRgtFunded();
		this.rgtFunded=rgtFunded;
		setProperty("RGT_FUNDED", rgtFunded, oldValue);
	}
	@Column(name="SOURCE_BI_ID",nullable=true,length=9)
	public int getSourceBiId(){
		return sourceBiId;
	}
	public void setSourceBiId(int sourceBiId) throws java.sql.SQLException{
		if(isSame(sourceBiId, getSourceBiId()))return;
		int oldValue = getSourceBiId();
		this.sourceBiId=sourceBiId;
		setProperty("SOURCE_BI_ID", sourceBiId, oldValue);
		pifBi2=null;
	}
	@Column(name="BUDGET_YEAR",nullable=true,length=4)
	public int getBudgetYear(){
		return budgetYear;
	}
	public void setBudgetYear(int budgetYear) throws java.sql.SQLException{
		if(isSame(budgetYear, getBudgetYear()))return;
		int oldValue = getBudgetYear();
		this.budgetYear=budgetYear;
		setProperty("BUDGET_YEAR", budgetYear, oldValue);
	}
	@Column(name="REQUEST_NUM",nullable=true,length=50)
	public String getRequestNum(){
		return requestNum;
	}
	public void setRequestNum(String requestNum) throws java.sql.SQLException{
		if(isSame(requestNum, getRequestNum()))return;
		String oldValue = getRequestNum();
		this.requestNum=requestNum;
		setProperty("REQUEST_NUM", requestNum, oldValue);
	}
	@Column(name="OTHER_CUST_TYPE",nullable=true,length=256)
	public String getOtherCustType(){
		return otherCustType;
	}
	public void setOtherCustType(String otherCustType) throws java.sql.SQLException{
		if(isSame(otherCustType, getOtherCustType()))return;
		String oldValue = getOtherCustType();
		this.otherCustType=otherCustType;
		setProperty("OTHER_CUST_TYPE", otherCustType, oldValue);
	}
	@Column(name="OTHER_BI",nullable=true,length=256)
	public String getOtherBi(){
		return otherBi;
	}
	public void setOtherBi(String otherBi) throws java.sql.SQLException{
		if(isSame(otherBi, getOtherBi()))return;
		String oldValue = getOtherBi();
		this.otherBi=otherBi;
		setProperty("OTHER_BI", otherBi, oldValue);
	}
	@Column(name="OTHER_PROJ_DRIVER",nullable=true,length=256)
	public String getOtherProjDriver(){
		return otherProjDriver;
	}
	public void setOtherProjDriver(String otherProjDriver) throws java.sql.SQLException{
		if(isSame(otherProjDriver, getOtherProjDriver()))return;
		String oldValue = getOtherProjDriver();
		this.otherProjDriver=otherProjDriver;
		setProperty("OTHER_PROJ_DRIVER", otherProjDriver, oldValue);
	}
	@Column(name="OTHER_MAJOR_CUST_TYPE",nullable=true,length=256)
	public String getOtherMajorCustType(){
		return otherMajorCustType;
	}
	public void setOtherMajorCustType(String otherMajorCustType) throws java.sql.SQLException{
		if(isSame(otherMajorCustType, getOtherMajorCustType()))return;
		String oldValue = getOtherMajorCustType();
		this.otherMajorCustType=otherMajorCustType;
		setProperty("OTHER_MAJOR_CUST_TYPE", otherMajorCustType, oldValue);
	}
	@Column(name="PIF_BUDGET_CAT_ID",nullable=true,length=9)
	public int getPifBudgetCatId(){
		return pifBudgetCatId;
	}
	public void setPifBudgetCatId(int pifBudgetCatId) throws java.sql.SQLException{
		if(isSame(pifBudgetCatId, getPifBudgetCatId()))return;
		int oldValue = getPifBudgetCatId();
		this.pifBudgetCatId=pifBudgetCatId;
		setProperty("PIF_BUDGET_CAT_ID", pifBudgetCatId, oldValue);
		pifBudgetCat=null;
	}
	@Column(name="PIF_COMP_RISK_ID",nullable=true,length=9)
	public int getPifCompRiskId(){
		return pifCompRiskId;
	}
	public void setPifCompRiskId(int pifCompRiskId) throws java.sql.SQLException{
		if(isSame(pifCompRiskId, getPifCompRiskId()))return;
		int oldValue = getPifCompRiskId();
		this.pifCompRiskId=pifCompRiskId;
		setProperty("PIF_COMP_RISK_ID", pifCompRiskId, oldValue);
		pifCompRisk=null;
	}
	@Column(name="PIF_CREW_TYPE_ID",nullable=true,length=9)
	public int getPifCrewTypeId(){
		return pifCrewTypeId;
	}
	public void setPifCrewTypeId(int pifCrewTypeId) throws java.sql.SQLException{
		if(isSame(pifCrewTypeId, getPifCrewTypeId()))return;
		int oldValue = getPifCrewTypeId();
		this.pifCrewTypeId=pifCrewTypeId;
		setProperty("PIF_CREW_TYPE_ID", pifCrewTypeId, oldValue);
		pifCrewType=null;
	}
	@Column(name="PIF_FINANCE_CONFIRM_ID",nullable=true,length=1)
	public boolean isPifFinanceConfirmId(){
		return pifFinanceConfirmId;
	}
	public void setPifFinanceConfirmId(boolean pifFinanceConfirmId) throws java.sql.SQLException{
		if(isSame(pifFinanceConfirmId, isPifFinanceConfirmId()))return;
		boolean oldValue = isPifFinanceConfirmId();
		this.pifFinanceConfirmId=pifFinanceConfirmId;
		setProperty("PIF_FINANCE_CONFIRM_ID", pifFinanceConfirmId, oldValue);
	}
	@Column(name="PIF_PROJ_DRIVER_ID",nullable=true,length=9)
	public int getPifProjDriverId(){
		return pifProjDriverId;
	}
	public void setPifProjDriverId(int pifProjDriverId) throws java.sql.SQLException{
		if(isSame(pifProjDriverId, getPifProjDriverId()))return;
		int oldValue = getPifProjDriverId();
		this.pifProjDriverId=pifProjDriverId;
		setProperty("PIF_PROJ_DRIVER_ID", pifProjDriverId, oldValue);
		pifProjDriver=null;
	}
	@Column(name="PIF_CUST_TYPE_ID",nullable=true,length=9)
	public int getPifCustTypeId(){
		return pifCustTypeId;
	}
	public void setPifCustTypeId(int pifCustTypeId) throws java.sql.SQLException{
		if(isSame(pifCustTypeId, getPifCustTypeId()))return;
		int oldValue = getPifCustTypeId();
		this.pifCustTypeId=pifCustTypeId;
		setProperty("PIF_CUST_TYPE_ID", pifCustTypeId, oldValue);
		pifCustType=null;
	}
	@Column(name="PIF_MAJOR_CUST_TYPE_ID",nullable=true,length=9)
	public int getPifMajorCustTypeId(){
		return pifMajorCustTypeId;
	}
	public void setPifMajorCustTypeId(int pifMajorCustTypeId) throws java.sql.SQLException{
		if(isSame(pifMajorCustTypeId, getPifMajorCustTypeId()))return;
		int oldValue = getPifMajorCustTypeId();
		this.pifMajorCustTypeId=pifMajorCustTypeId;
		setProperty("PIF_MAJOR_CUST_TYPE_ID", pifMajorCustTypeId, oldValue);
		pifMajorCustType=null;
	}
	@Column(name="PIF_GW_CAT_ID",nullable=true,length=9)
	public int getPifGwCatId(){
		return pifGwCatId;
	}
	public void setPifGwCatId(int pifGwCatId) throws java.sql.SQLException{
		if(isSame(pifGwCatId, getPifGwCatId()))return;
		int oldValue = getPifGwCatId();
		this.pifGwCatId=pifGwCatId;
		setProperty("PIF_GW_CAT_ID", pifGwCatId, oldValue);
		pifGwCat=null;
	}
	@Column(name="DISTRICT_SPONSOR",nullable=true,length=64)
	public String getDistrictSponsor(){
		return districtSponsor;
	}
	public void setDistrictSponsor(String districtSponsor) throws java.sql.SQLException{
		if(isSame(districtSponsor, getDistrictSponsor()))return;
		String oldValue = getDistrictSponsor();
		this.districtSponsor=districtSponsor;
		setProperty("DISTRICT_SPONSOR", districtSponsor, oldValue);
	}
	@Column(name="OTHER_GW",nullable=true,length=256)
	public String getOtherGw(){
		return otherGw;
	}
	public void setOtherGw(String otherGw) throws java.sql.SQLException{
		if(isSame(otherGw, getOtherGw()))return;
		String oldValue = getOtherGw();
		this.otherGw=otherGw;
		setProperty("OTHER_GW", otherGw, oldValue);
	}
	public Bbank getBbank()throws java.sql.SQLException{
		if(bbank==null)
			bbank=Bbank.getInstance(getPlanyear(), getBbankSubId());
		return bbank;
	}
	public void setBbank(Bbank bbank)throws java.sql.SQLException{
		setBbankSubId(bbank==null?0:bbank.getBbankSubId());
		this.bbank=bbank;
	}
	public Ckt getCkt()throws java.sql.SQLException{
		if(ckt==null)
			ckt=Ckt.getInstance(getPlanyear(), getCktId());
		return ckt;
	}
	public void setCkt(Ckt ckt)throws java.sql.SQLException{
		setCktId(ckt==null?0:ckt.getCktId());
		this.ckt=ckt;
	}
	public PifBi getPifBi()throws java.sql.SQLException{
		if(pifBi==null)
			pifBi=PifBi.getInstance(getPlanyear(), getBiId());
		return pifBi;
	}
	public void setPifBi(PifBi pifBi)throws java.sql.SQLException{
		setBiId(pifBi==null?0:pifBi.getBiId());
		this.pifBi=pifBi;
	}
	public PifBi getPifBi2()throws java.sql.SQLException{
		if(pifBi2==null)
			pifBi2=PifBi.getInstance(getPlanyear(), getSourceBiId());
		return pifBi2;
	}
	public void setPifBi2(PifBi pifBi2)throws java.sql.SQLException{
		setSourceBiId(pifBi2==null?0:pifBi2.getBiId());
		this.pifBi2=pifBi2;
	}
	public PifBudgetCat getPifBudgetCat()throws java.sql.SQLException{
		if(pifBudgetCat==null)
			pifBudgetCat=PifBudgetCat.getInstance(getPlanyear(), getPifBudgetCatId());
		return pifBudgetCat;
	}
	public void setPifBudgetCat(PifBudgetCat pifBudgetCat)throws java.sql.SQLException{
		setPifBudgetCatId(pifBudgetCat==null?0:pifBudgetCat.getPifBudgetCatId());
		this.pifBudgetCat=pifBudgetCat;
	}
	public PifCategory getPifCategory()throws java.sql.SQLException{
		if(pifCategory==null)
			pifCategory=PifCategory.getInstance(getPlanyear(), getCategoryId());
		return pifCategory;
	}
	public void setPifCategory(PifCategory pifCategory)throws java.sql.SQLException{
		setCategoryId(pifCategory==null?0:pifCategory.getCategoryId());
		this.pifCategory=pifCategory;
	}
	public PifCompRisk getPifCompRisk()throws java.sql.SQLException{
		if(pifCompRisk==null)
			pifCompRisk=PifCompRisk.getInstance(getPlanyear(), getPifCompRiskId());
		return pifCompRisk;
	}
	public void setPifCompRisk(PifCompRisk pifCompRisk)throws java.sql.SQLException{
		setPifCompRiskId(pifCompRisk==null?0:pifCompRisk.getPifCompRiskId());
		this.pifCompRisk=pifCompRisk;
	}
	public PifCrewType getPifCrewType()throws java.sql.SQLException{
		if(pifCrewType==null)
			pifCrewType=PifCrewType.getInstance(getPlanyear(), getPifCrewTypeId());
		return pifCrewType;
	}
	public void setPifCrewType(PifCrewType pifCrewType)throws java.sql.SQLException{
		setPifCrewTypeId(pifCrewType==null?0:pifCrewType.getPifCrewTypeId());
		this.pifCrewType=pifCrewType;
	}
	public PifCustType getPifCustType()throws java.sql.SQLException{
		if(pifCustType==null)
			pifCustType=PifCustType.getInstance(getPlanyear(), getPifCustTypeId());
		return pifCustType;
	}
	public void setPifCustType(PifCustType pifCustType)throws java.sql.SQLException{
		setPifCustTypeId(pifCustType==null?0:pifCustType.getPifCustTypeId());
		this.pifCustType=pifCustType;
	}
	public PifGwCat getPifGwCat()throws java.sql.SQLException{
		if(pifGwCat==null)
			pifGwCat=PifGwCat.getInstance(getPlanyear(), getPifGwCatId());
		return pifGwCat;
	}
	public void setPifGwCat(PifGwCat pifGwCat)throws java.sql.SQLException{
		setPifGwCatId(pifGwCat==null?0:pifGwCat.getPifGwCatId());
		this.pifGwCat=pifGwCat;
	}
	public PifLabor getPifLabor()throws java.sql.SQLException{
		if(pifLabor==null)
			pifLabor=PifLabor.getInstance(getPlanyear(), getLaborTypeId());
		return pifLabor;
	}
	public void setPifLabor(PifLabor pifLabor)throws java.sql.SQLException{
		setLaborTypeId(pifLabor==null?0:pifLabor.getLaborTypeId());
		this.pifLabor=pifLabor;
	}
	public PifMajorCustType getPifMajorCustType()throws java.sql.SQLException{
		if(pifMajorCustType==null)
			pifMajorCustType=PifMajorCustType.getInstance(getPlanyear(), getPifMajorCustTypeId());
		return pifMajorCustType;
	}
	public void setPifMajorCustType(PifMajorCustType pifMajorCustType)throws java.sql.SQLException{
		setPifMajorCustTypeId(pifMajorCustType==null?0:pifMajorCustType.getPifMajorCustTypeId());
		this.pifMajorCustType=pifMajorCustType;
	}
	public PifPriority getPifPriority()throws java.sql.SQLException{
		if(pifPriority==null)
			pifPriority=PifPriority.getInstance(getPlanyear(), getPriorityId());
		return pifPriority;
	}
	public void setPifPriority(PifPriority pifPriority)throws java.sql.SQLException{
		setPriorityId(pifPriority==null?0:pifPriority.getPriorityId());
		this.pifPriority=pifPriority;
	}
	public PifProjDriver getPifProjDriver()throws java.sql.SQLException{
		if(pifProjDriver==null)
			pifProjDriver=PifProjDriver.getInstance(getPlanyear(), getPifProjDriverId());
		return pifProjDriver;
	}
	public void setPifProjDriver(PifProjDriver pifProjDriver)throws java.sql.SQLException{
		setPifProjDriverId(pifProjDriver==null?0:pifProjDriver.getPifProjDriverId());
		this.pifProjDriver=pifProjDriver;
	}
	public PifStatus getPifStatus()throws java.sql.SQLException{
		if(pifStatus==null)
			pifStatus=PifStatus.getInstance(getPlanyear(), getStatusId());
		return pifStatus;
	}
	public void setPifStatus(PifStatus pifStatus)throws java.sql.SQLException{
		setStatusId(pifStatus==null?0:pifStatus.getStatusId());
		this.pifStatus=pifStatus;
	}
	public Proj getProj()throws java.sql.SQLException{
		if(proj==null)
			proj=Proj.getInstance(getPlanyear(), getSimId(), getProjId());
		return proj;
	}
	public void setProj(Proj proj)throws java.sql.SQLException{
		setProjId(proj==null?0:proj.getProjId());
		this.proj=proj;
	}
	public SceProj getSceProj()throws java.sql.SQLException{
		if(sceProj==null)
			sceProj=SceProj.getInstance(getSceProjId());
		return sceProj;
	}
	public void setSceProj(SceProj sceProj)throws java.sql.SQLException{
		setSceProjId(sceProj==null?0:sceProj.getSceProjId());
		this.sceProj=sceProj;
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getUsernameId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setUsernameId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public User getUser2()throws java.sql.SQLException{
		if(user2==null)
			user2=User.getInstance(getCreatorUsernameId());
		return user2;
	}
	public void setUser2(User user2)throws java.sql.SQLException{
		setCreatorUsernameId(user2==null?0:user2.getUsernameId());
		this.user2=user2;
	}
	public Collection<PifCktJust> getPifCktJusts()throws java.sql.SQLException{
		if(isNewInstance() || pifCktJusts != null){
			if(pifCktJusts == null)
				pifCktJusts = new TreeSet<PifCktJust>();
			return pifCktJusts;
		}
		return PifCktJust.getNamedCollection("findByPif",getPlanyear(), getPifId());
	}
	public void addPifCktJust(PifCktJust pifCktJust)throws java.sql.SQLException{
		pifCktJust.setPif((Pif)this);
		if(isNewInstance() || pifCktJusts != null)
			getPifCktJusts().add(pifCktJust);
		else
			pifCktJust.insert();
	}
	public void removePifCktJust(PifCktJust pifCktJust)throws java.sql.SQLException{
		if(isNewInstance() || pifCktJusts != null)
			getPifCktJusts().remove(pifCktJust);
		else
			pifCktJust.delete();
	}
	public Collection<PifImpact> getPifImpacts()throws java.sql.SQLException{
		if(isNewInstance() || pifImpacts != null){
			if(pifImpacts == null)
				pifImpacts = new TreeSet<PifImpact>();
			return pifImpacts;
		}
		return PifImpact.getNamedCollection("findByPif",getPlanyear(), getPifId());
	}
	public void addPifImpact(PifImpact pifImpact)throws java.sql.SQLException{
		pifImpact.setPif((Pif)this);
		if(isNewInstance() || pifImpacts != null)
			getPifImpacts().add(pifImpact);
		else
			pifImpact.insert();
	}
	public void removePifImpact(PifImpact pifImpact)throws java.sql.SQLException{
		if(isNewInstance() || pifImpacts != null)
			getPifImpacts().remove(pifImpact);
		else
			pifImpact.delete();
	}
	public Collection<PifLineJust> getPifLineJusts()throws java.sql.SQLException{
		if(isNewInstance() || pifLineJusts != null){
			if(pifLineJusts == null)
				pifLineJusts = new TreeSet<PifLineJust>();
			return pifLineJusts;
		}
		return PifLineJust.getNamedCollection("findByPif",getPlanyear(), getPifId());
	}
	public void addPifLineJust(PifLineJust pifLineJust)throws java.sql.SQLException{
		pifLineJust.setPif((Pif)this);
		if(isNewInstance() || pifLineJusts != null)
			getPifLineJusts().add(pifLineJust);
		else
			pifLineJust.insert();
	}
	public void removePifLineJust(PifLineJust pifLineJust)throws java.sql.SQLException{
		if(isNewInstance() || pifLineJusts != null)
			getPifLineJusts().remove(pifLineJust);
		else
			pifLineJust.delete();
	}
	public Collection<PifSubJust> getPifSubJusts()throws java.sql.SQLException{
		if(isNewInstance() || pifSubJusts != null){
			if(pifSubJusts == null)
				pifSubJusts = new TreeSet<PifSubJust>();
			return pifSubJusts;
		}
		return PifSubJust.getNamedCollection("findByPif",getPlanyear(), getPifId());
	}
	public void addPifSubJust(PifSubJust pifSubJust)throws java.sql.SQLException{
		pifSubJust.setPif((Pif)this);
		if(isNewInstance() || pifSubJusts != null)
			getPifSubJusts().add(pifSubJust);
		else
			pifSubJust.insert();
	}
	public void removePifSubJust(PifSubJust pifSubJust)throws java.sql.SQLException{
		if(isNewInstance() || pifSubJusts != null)
			getPifSubJusts().remove(pifSubJust);
		else
			pifSubJust.delete();
	}
	public Collection<PifVoltJust> getPifVoltJusts()throws java.sql.SQLException{
		if(isNewInstance() || pifVoltJusts != null){
			if(pifVoltJusts == null)
				pifVoltJusts = new TreeSet<PifVoltJust>();
			return pifVoltJusts;
		}
		return PifVoltJust.getNamedCollection("findByPif",getPlanyear(), getPifId());
	}
	public void addPifVoltJust(PifVoltJust pifVoltJust)throws java.sql.SQLException{
		pifVoltJust.setPif((Pif)this);
		if(isNewInstance() || pifVoltJusts != null)
			getPifVoltJusts().add(pifVoltJust);
		else
			pifVoltJust.insert();
	}
	public void removePifVoltJust(PifVoltJust pifVoltJust)throws java.sql.SQLException{
		if(isNewInstance() || pifVoltJusts != null)
			getPifVoltJusts().remove(pifVoltJust);
		else
			pifVoltJust.delete();
	}
	public Collection<PifWo> getPifWos()throws java.sql.SQLException{
		if(isNewInstance() || pifWos != null){
			if(pifWos == null)
				pifWos = new TreeSet<PifWo>();
			return pifWos;
		}
		return PifWo.getNamedCollection("findByPif",getPlanyear(), getPifId());
	}
	public void addPifWo(PifWo pifWo)throws java.sql.SQLException{
		pifWo.setPif((Pif)this);
		if(isNewInstance() || pifWos != null)
			getPifWos().add(pifWo);
		else
			pifWo.insert();
	}
	public void removePifWo(PifWo pifWo)throws java.sql.SQLException{
		if(isNewInstance() || pifWos != null)
			getPifWos().remove(pifWo);
		else
			pifWo.delete();
	}
	public Pif copy()throws java.sql.SQLException{
		Pif cp = new Pif((Pif)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(PifCktJust child:getPifCktJusts())
			cp.addPifCktJust(child.copy());
		for(PifImpact child:getPifImpacts())
			cp.addPifImpact(child.copy());
		for(PifLineJust child:getPifLineJusts())
			cp.addPifLineJust(child.copy());
		for(PifSubJust child:getPifSubJusts())
			cp.addPifSubJust(child.copy());
		for(PifVoltJust child:getPifVoltJusts())
			cp.addPifVoltJust(child.copy());
		for(PifWo child:getPifWos())
			cp.addPifWo(child.copy());
	}
	public Vector<String> getDifference(PifDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getPifId(),o.getPifId())) diffs.add("PIF_ID");
		if(!isSame(getBbankSubId(),o.getBbankSubId())) diffs.add("BBANK_SUB_ID");
		if(!isSame(getCktId(),o.getCktId())) diffs.add("CKT_ID");
		if(!isSame(getProjId(),o.getProjId())) diffs.add("PROJ_ID");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getPifNum(),o.getPifNum())) diffs.add("PIF_NUM");
		if(!isSame(getOpDate(),o.getOpDate())) diffs.add("OP_DATE");
		if(!isSame(getLocation(),o.getLocation())) diffs.add("LOCATION");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getScope(),o.getScope())) diffs.add("SCOPE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getPriorityId(),o.getPriorityId())) diffs.add("PRIORITY_ID");
		if(!isSame(getStatusId(),o.getStatusId())) diffs.add("STATUS_ID");
		if(!isSame(getCategoryId(),o.getCategoryId())) diffs.add("CATEGORY_ID");
		if(!isSame(getBiId(),o.getBiId())) diffs.add("BI_ID");
		if(!isSame(getUserEstimate(),o.getUserEstimate())) diffs.add("USER_ESTIMATE");
		if(!isSame(getLaborTypeId(),o.getLaborTypeId())) diffs.add("LABOR_TYPE_ID");
		if(!isSame(getUsernameId(),o.getUsernameId())) diffs.add("USERNAME_ID");
		if(!isSame(getCreatorUsernameId(),o.getCreatorUsernameId())) diffs.add("CREATOR_USERNAME_ID");
		if(!isSame(getAppDate(),o.getAppDate())) diffs.add("APP_DATE");
		if(!isSame(getEstimateSource(),o.getEstimateSource())) diffs.add("ESTIMATE_SOURCE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltDouble4(),o.getAltDouble4())) diffs.add("ALT_DOUBLE4");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getSceProjId(),o.getSceProjId())) diffs.add("SCE_PROJ_ID");
		if(!isSame(getAltDouble5(),o.getAltDouble5())) diffs.add("ALT_DOUBLE5");
		if(!isSame(getAltDouble6(),o.getAltDouble6())) diffs.add("ALT_DOUBLE6");
		if(!isSame(getAltDouble7(),o.getAltDouble7())) diffs.add("ALT_DOUBLE7");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltVarchar4(),o.getAltVarchar4())) diffs.add("ALT_VARCHAR4");
		if(!isSame(isRgtFunded(),o.isRgtFunded())) diffs.add("RGT_FUNDED");
		if(!isSame(getSourceBiId(),o.getSourceBiId())) diffs.add("SOURCE_BI_ID");
		if(!isSame(getBudgetYear(),o.getBudgetYear())) diffs.add("BUDGET_YEAR");
		if(!isSame(getRequestNum(),o.getRequestNum())) diffs.add("REQUEST_NUM");
		if(!isSame(getOtherCustType(),o.getOtherCustType())) diffs.add("OTHER_CUST_TYPE");
		if(!isSame(getOtherBi(),o.getOtherBi())) diffs.add("OTHER_BI");
		if(!isSame(getOtherProjDriver(),o.getOtherProjDriver())) diffs.add("OTHER_PROJ_DRIVER");
		if(!isSame(getOtherMajorCustType(),o.getOtherMajorCustType())) diffs.add("OTHER_MAJOR_CUST_TYPE");
		if(!isSame(getPifBudgetCatId(),o.getPifBudgetCatId())) diffs.add("PIF_BUDGET_CAT_ID");
		if(!isSame(getPifCompRiskId(),o.getPifCompRiskId())) diffs.add("PIF_COMP_RISK_ID");
		if(!isSame(getPifCrewTypeId(),o.getPifCrewTypeId())) diffs.add("PIF_CREW_TYPE_ID");
		if(!isSame(isPifFinanceConfirmId(),o.isPifFinanceConfirmId())) diffs.add("PIF_FINANCE_CONFIRM_ID");
		if(!isSame(getPifProjDriverId(),o.getPifProjDriverId())) diffs.add("PIF_PROJ_DRIVER_ID");
		if(!isSame(getPifCustTypeId(),o.getPifCustTypeId())) diffs.add("PIF_CUST_TYPE_ID");
		if(!isSame(getPifMajorCustTypeId(),o.getPifMajorCustTypeId())) diffs.add("PIF_MAJOR_CUST_TYPE_ID");
		if(!isSame(getPifGwCatId(),o.getPifGwCatId())) diffs.add("PIF_GW_CAT_ID");
		if(!isSame(getDistrictSponsor(),o.getDistrictSponsor())) diffs.add("DISTRICT_SPONSOR");
		if(!isSame(getOtherGw(),o.getOtherGw())) diffs.add("OTHER_GW");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(pifCktJusts != null){
			for(PifCktJust pifCktJust:getPifCktJusts()){
				if(pifCktJust.isNewInstance())
					pifCktJust.setPif((Pif)this);
				pifCktJust.insert();
			}
			pifCktJusts = null;
		}
		if(pifImpacts != null){
			for(PifImpact pifImpact:getPifImpacts()){
				if(pifImpact.isNewInstance())
					pifImpact.setPif((Pif)this);
				pifImpact.insert();
			}
			pifImpacts = null;
		}
		if(pifLineJusts != null){
			for(PifLineJust pifLineJust:getPifLineJusts()){
				if(pifLineJust.isNewInstance())
					pifLineJust.setPif((Pif)this);
				pifLineJust.insert();
			}
			pifLineJusts = null;
		}
		if(pifSubJusts != null){
			for(PifSubJust pifSubJust:getPifSubJusts()){
				if(pifSubJust.isNewInstance())
					pifSubJust.setPif((Pif)this);
				pifSubJust.insert();
			}
			pifSubJusts = null;
		}
		if(pifVoltJusts != null){
			for(PifVoltJust pifVoltJust:getPifVoltJusts()){
				if(pifVoltJust.isNewInstance())
					pifVoltJust.setPif((Pif)this);
				pifVoltJust.insert();
			}
			pifVoltJusts = null;
		}
		if(pifWos != null){
			for(PifWo pifWo:getPifWos()){
				if(pifWo.isNewInstance())
					pifWo.setPif((Pif)this);
				pifWo.insert();
			}
			pifWos = null;
		}
	}
}
