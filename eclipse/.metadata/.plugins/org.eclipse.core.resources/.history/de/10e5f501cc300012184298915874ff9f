package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.PqCustomerSegment;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PqCustomerSegmentDAO extends MDIObject{
	public static enum KEY_PROPERTY{SEGMENT_ID};
	public static enum PROPERTY{SEGMENT_ID,TYPE,DESCRIPTION,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SEGMENTID_LIMIT = 9;
	public final static int TYPE_LIMIT = 32;
	public final static int DESCRIPTION_LIMIT = 128;
	private int segmentId;
	private String type;
	private String description;
	public static PqCustomerSegment getInstance(int segmentId)throws java.sql.SQLException{
		return getInstance(segmentId, true);
	}
	public static PqCustomerSegment getInstance(int segmentId, boolean fetch)throws java.sql.SQLException{
		if(isNull(segmentId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(segmentId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PqCustomerSegment o = null;
		if(cache != null && cache.contains(PqCustomerSegment.class, pk))
			o = em.find(PqCustomerSegment.class, pk);
		if(o==null && getAICache().contains(PqCustomerSegment.class, pk))
			o = getAICache().find(PqCustomerSegment.class, pk);
		if(o==null && fetch)
			o = em.find(PqCustomerSegment.class, pk);
		if(o==null && fetch && PqCustomerSegment.class.getAnnotation(AutoInsertable.class) != null){
			o = new PqCustomerSegment(segmentId);
			getAICache().cache(PqCustomerSegment.class, o);
		}
		return o;
	}
	public static Collection<PqCustomerSegment> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PqCustomerSegment> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PqCustomerSegment> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PqCustomerSegment o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PqCustomerSegment> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqCustomerSegment> tq = em.createQuery(jpql,PqCustomerSegment.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PqCustomerSegment> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PqCustomerSegment> tq = em.createNamedQuery(name,PqCustomerSegment.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PqCustomerSegmentDAO(){}
	public PqCustomerSegmentDAO(int segmentId){
		this.segmentId=segmentId;
	}
	public PqCustomerSegmentDAO(PqCustomerSegmentDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(PqCustomerSegmentDAO orig){
		this.type=orig.getType();
		this.description=orig.getDescription();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{segmentId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDI940_SEQ",sequenceName="MDI940_SEQ")
	@Column(name="SEGMENT_ID",nullable=false,length=9)
	public int getSegmentId(){
		return segmentId;
	}
	public void setSegmentId(int segmentId) throws java.sql.SQLException{
		if(isSame(segmentId, getSegmentId()))return;
		int oldValue = getSegmentId();
		this.segmentId=segmentId;
		setProperty("SEGMENT_ID", segmentId, oldValue);
	}
	@Column(name="TYPE",nullable=false,length=32)
	public String getType(){
		return type;
	}
	public void setType(String type) throws java.sql.SQLException{
		if(isSame(type, getType()))return;
		String oldValue = getType();
		this.type=type;
		setProperty("TYPE", type, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=128)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	public PqCustomerSegment copy()throws java.sql.SQLException{
		PqCustomerSegment cp = new PqCustomerSegment((PqCustomerSegment)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PqCustomerSegmentDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PqCustomerSegmentDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getSegmentId(),o.getSegmentId())) diffs.add("SEGMENT_ID");
		if(!isSame(getType(),o.getType())) diffs.add("TYPE");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
