package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Pif;
import com.sce.esp.object.model.PifVoltJust;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class PifVoltJustDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,VOLT_ID,PIF_ID};
	public static enum PROPERTY{PLANYEAR,VOLT_ID,PIF_ID,LOCATION,BEFORE_VOLTAGE,AFTER_VOLTAGE,NOTE,ALT_DOUBLE1,ALT_DOUBLE2,ALT_DOUBLE3,ALT_DOUBLE4,ALT_VARCHAR1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int VOLTID_LIMIT = 9;
	public final static int PIFID_LIMIT = 9;
	public final static int LOCATION_LIMIT = 128;
	public final static int BEFOREVOLTAGE_LIMIT = 24;
	public final static int AFTERVOLTAGE_LIMIT = 24;
	public final static int NOTE_LIMIT = 512;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTDOUBLE4_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 512;
	private int planyear;
	private int voltId;
	private int pifId;
	private String location;
	private double beforeVoltage;
	private double afterVoltage;
	private String note;
	private double altDouble1;
	private double altDouble2;
	private double altDouble3;
	private double altDouble4;
	private String altVarchar1;
	private Pif pif;
	public static PifVoltJust getInstance(int planyear, int voltId, int pifId)throws java.sql.SQLException{
		return getInstance(planyear, voltId, pifId, true);
	}
	public static PifVoltJust getInstance(int planyear, int voltId, int pifId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, voltId, pifId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, voltId, pifId);
		Cache cache = em.getEntityManagerFactory().getCache();
		PifVoltJust o = null;
		if(cache != null && cache.contains(PifVoltJust.class, pk))
			o = em.find(PifVoltJust.class, pk);
		if(o==null && getAICache().contains(PifVoltJust.class, pk))
			o = getAICache().find(PifVoltJust.class, pk);
		if(o==null && fetch)
			o = em.find(PifVoltJust.class, pk);
		if(o==null && fetch && PifVoltJust.class.getAnnotation(AutoInsertable.class) != null){
			o = new PifVoltJust(planyear, voltId, pifId);
			getAICache().cache(PifVoltJust.class, o);
		}
		return o;
	}
	public static Collection<PifVoltJust> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<PifVoltJust> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<PifVoltJust> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM PifVoltJust o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<PifVoltJust> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifVoltJust> tq = em.createQuery(jpql,PifVoltJust.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<PifVoltJust> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<PifVoltJust> tq = em.createNamedQuery(name,PifVoltJust.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public PifVoltJustDAO(){}
	public PifVoltJustDAO(int planyear, int voltId, int pifId){
		this.planyear=planyear;
		this.voltId=voltId;
		this.pifId=pifId;
	}
	public PifVoltJustDAO(PifVoltJustDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.pifId=orig.getPifId();
		copyFrom(orig);
	}
	public void copyFrom(PifVoltJustDAO orig){
		this.location=orig.getLocation();
		this.beforeVoltage=orig.getBeforeVoltage();
		this.afterVoltage=orig.getAfterVoltage();
		this.note=orig.getNote();
		this.altDouble1=orig.getAltDouble1();
		this.altDouble2=orig.getAltDouble2();
		this.altDouble3=orig.getAltDouble3();
		this.altDouble4=orig.getAltDouble4();
		this.altVarchar1=orig.getAltVarchar1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, voltId, pifId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI697_SEQ",sequenceName="MDI697_SEQ")
	@Column(name="VOLT_ID",nullable=false,length=9)
	public int getVoltId(){
		return voltId;
	}
	public void setVoltId(int voltId) throws java.sql.SQLException{
		if(isSame(voltId, getVoltId()))return;
		int oldValue = getVoltId();
		this.voltId=voltId;
		setProperty("VOLT_ID", voltId, oldValue);
	}
	@Id
	@Column(name="PIF_ID",nullable=false,length=9)
	public int getPifId(){
		return pifId;
	}
	public void setPifId(int pifId) throws java.sql.SQLException{
		if(isSame(pifId, getPifId()))return;
		int oldValue = getPifId();
		this.pifId=pifId;
		setProperty("PIF_ID", pifId, oldValue);
		pif=null;
	}
	@Column(name="LOCATION",nullable=true,length=128)
	public String getLocation(){
		return location;
	}
	public void setLocation(String location) throws java.sql.SQLException{
		if(isSame(location, getLocation()))return;
		String oldValue = getLocation();
		this.location=location;
		setProperty("LOCATION", location, oldValue);
	}
	@Column(name="BEFORE_VOLTAGE",nullable=true,length=24)
	public double getBeforeVoltage(){
		return beforeVoltage;
	}
	public void setBeforeVoltage(double beforeVoltage) throws java.sql.SQLException{
		if(isSame(beforeVoltage, getBeforeVoltage()))return;
		double oldValue = getBeforeVoltage();
		this.beforeVoltage=beforeVoltage;
		setProperty("BEFORE_VOLTAGE", beforeVoltage, oldValue);
	}
	@Column(name="AFTER_VOLTAGE",nullable=true,length=24)
	public double getAfterVoltage(){
		return afterVoltage;
	}
	public void setAfterVoltage(double afterVoltage) throws java.sql.SQLException{
		if(isSame(afterVoltage, getAfterVoltage()))return;
		double oldValue = getAfterVoltage();
		this.afterVoltage=afterVoltage;
		setProperty("AFTER_VOLTAGE", afterVoltage, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_DOUBLE4",nullable=true,length=24)
	public double getAltDouble4(){
		return altDouble4;
	}
	public void setAltDouble4(double altDouble4) throws java.sql.SQLException{
		if(isSame(altDouble4, getAltDouble4()))return;
		double oldValue = getAltDouble4();
		this.altDouble4=altDouble4;
		setProperty("ALT_DOUBLE4", altDouble4, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=512)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	public Pif getPif()throws java.sql.SQLException{
		if(pif==null)
			pif=Pif.getInstance(getPlanyear(), getPifId());
		return pif;
	}
	public void setPif(Pif pif)throws java.sql.SQLException{
		setPifId(pif==null?0:pif.getPifId());
		this.pif=pif;
	}
	public PifVoltJust copy()throws java.sql.SQLException{
		PifVoltJust cp = new PifVoltJust((PifVoltJust)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(PifVoltJustDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(PifVoltJustDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getVoltId(),o.getVoltId())) diffs.add("VOLT_ID");
		if(!isSame(getPifId(),o.getPifId())) diffs.add("PIF_ID");
		if(!isSame(getLocation(),o.getLocation())) diffs.add("LOCATION");
		if(!isSame(getBeforeVoltage(),o.getBeforeVoltage())) diffs.add("BEFORE_VOLTAGE");
		if(!isSame(getAfterVoltage(),o.getAfterVoltage())) diffs.add("AFTER_VOLTAGE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltDouble4(),o.getAltDouble4())) diffs.add("ALT_DOUBLE4");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
