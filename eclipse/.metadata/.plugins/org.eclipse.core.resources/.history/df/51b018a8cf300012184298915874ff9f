/**
 * 
 */
package com.sce.esp.util.ui;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.StringTokenizer;
import java.util.prefs.Preferences;

import com.sce.esp.object.model.SceProj;
import com.sce.esp.prefs.PreferencesOption;


/**
 * @author TIG
 *
 */
public class UserPreference implements PreferencesOption {

	private static final String SAVE_LOC = "/mdi_psi";
	private static UserPreference instance;

	public static final String TREE_SELECTION = "TREE_SELECTION_TEST";
	public static final String IWP_DEL_PROJ_FILTER = "DEL_PROJ_FILTER"; //Show deleted projects
	public static final String IWP_IN_SERVICE_PROJ_FILTER = "COMPLETE_PROJ_FILTER"; //Show deleted projects
	public static final String IWP_CONCEPTUAL_PROJ_FILTER = "CONCEPTUAL_PROJ_FILTER"; //Show conceptual projects
	public static final String IWP_PROJ_SELECTION = "IWP_PROJ_SELECTION"; //last selected project IWP
	public static final String PSI_PROJ_SELECTION = "PSI_PROJ_SELECTION"; //last selected project PSI
	public static final String PSI_TAB_SELECTION = "TAB_SELECTION"; //last selected project
	public static final String IWP_LAST_PROJECTS = "IWP_LAST_PROJECTS"; //last 5 or 10 selected project
	public static final String PSI_LAST_PROJECTS = "PSI_LAST_PROJECTS"; //last 5 or 10 selected project
	public static final int LAST_PROJECTS_COUNT = 10; //last 5 or 10 selected project
	public static final String IWP_FILTER_SEARCH = "FILTER_SEARCH";
	public static final String IWP_TAB_SELECTION = "IWP_TAB_SEL";
	public static final String IWP_TAB_DEFAULT = "Project Details";
	//===========================================================================================================
	public static String SCMT_SHOW_CAL = "SCMT_PROJ_CAL";
	private static boolean SCMT_SHOW_CAL_DEFAULT = true;
	//===========================================================================================================
	private static int tree_default = 0;
	private static boolean del_default = false;
	private static boolean comp_default = false;
	
	private static boolean conc_default = false;
	private static int proj_default = 0;
	private static int tab_default = 0;

	private static String last_proj_default = "1";
	private static String filter_search_default = "";
	
	private Map<String,Object> valueMap;
	private LinkedList<SceProj> iwp_queue;
	private LinkedList<SceProj> psi_queue;

	static synchronized public UserPreference getInstance() {
		if (instance == null) {
			instance = new UserPreference();
		}
		return instance;
	}

	private UserPreference() {
		valueMap = new HashMap<String,Object>();
		load();
	}

	public void load() {
		Preferences prefs = Preferences.userRoot().node(SAVE_LOC); 

		valueMap.put(IWP_FILTER_SEARCH,new String(prefs.get(IWP_FILTER_SEARCH, filter_search_default)));

		valueMap.put(TREE_SELECTION,new Integer(prefs.getInt(TREE_SELECTION, tree_default)));
		valueMap.put(IWP_DEL_PROJ_FILTER,new Boolean(prefs.getBoolean(IWP_DEL_PROJ_FILTER, del_default)));
		valueMap.put(IWP_IN_SERVICE_PROJ_FILTER,new Boolean(prefs.getBoolean(IWP_IN_SERVICE_PROJ_FILTER, comp_default)));
		
		valueMap.put(IWP_CONCEPTUAL_PROJ_FILTER,new Boolean(prefs.getBoolean(IWP_CONCEPTUAL_PROJ_FILTER, conc_default)));
		
		valueMap.put(IWP_PROJ_SELECTION,new Integer(prefs.getInt(IWP_PROJ_SELECTION, proj_default)));
		valueMap.put(PSI_PROJ_SELECTION,new Integer(prefs.getInt(PSI_PROJ_SELECTION, proj_default)));
		
		valueMap.put(PSI_TAB_SELECTION,new Integer(prefs.getInt(PSI_TAB_SELECTION, tab_default)));

		valueMap.put(IWP_LAST_PROJECTS,new String(prefs.get(IWP_LAST_PROJECTS, last_proj_default)));
		valueMap.put(PSI_LAST_PROJECTS,new String(prefs.get(PSI_LAST_PROJECTS, last_proj_default)));
		
		valueMap.put(IWP_TAB_SELECTION,new String(prefs.get(IWP_TAB_SELECTION, IWP_TAB_DEFAULT)));

		valueMap.put(SCMT_SHOW_CAL,new Boolean(prefs.getBoolean(SCMT_SHOW_CAL, SCMT_SHOW_CAL_DEFAULT)));
	}

	public void save() {
		java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userRoot().node(SAVE_LOC);

		prefs.put(IWP_FILTER_SEARCH, valueMap.get(IWP_FILTER_SEARCH).toString());

		prefs.putInt(TREE_SELECTION, getInt(TREE_SELECTION));
		prefs.putBoolean(IWP_DEL_PROJ_FILTER, ((Boolean)valueMap.get(IWP_DEL_PROJ_FILTER)).booleanValue());
		prefs.putBoolean(IWP_IN_SERVICE_PROJ_FILTER, ((Boolean)valueMap.get(IWP_IN_SERVICE_PROJ_FILTER)).booleanValue());
		prefs.putInt(IWP_PROJ_SELECTION, getInt(IWP_PROJ_SELECTION));
		prefs.putInt(PSI_PROJ_SELECTION, getInt(PSI_PROJ_SELECTION));
		prefs.putInt(PSI_TAB_SELECTION, getInt(PSI_TAB_SELECTION));
		prefs.put(IWP_TAB_SELECTION, getString(IWP_TAB_SELECTION));
		prefs.putBoolean(SCMT_SHOW_CAL, ((Boolean)valueMap.get(SCMT_SHOW_CAL)).booleanValue());

		try {
			String projString = "";
			for(SceProj proj: getIWPProjQueue()){
				projString += proj.getSceProjId() +",";
			}
			prefs.put(IWP_LAST_PROJECTS, projString);
			
			
			String psiProjString = "";
			for(SceProj proj: getPSIProjQueue()){
				psiProjString += proj.getSceProjId() +",";
			}
			prefs.put(PSI_LAST_PROJECTS, psiProjString);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}


	public void putInt(String key, int value){
		valueMap.put(key, value);
	}

	/**
	 * Gets the string.
	 * 
	 * @param key the key
	 * 
	 * @return the string
	 */
	public String getString(String key) {
		return (String)valueMap.get(key);
	}

	public void putString(String key, String value){
		valueMap.put(key, value);
	}

	/**
	 * Gets the boolean.
	 * 
	 * @param key the key
	 * 
	 * @return the boolean
	 */
	public boolean getBoolean(String key) {
		return ((Boolean)valueMap.get(key)).booleanValue();
	}

	public void putBoolean(String key, boolean value) {
		valueMap.put(key, value);
	}

	public int getTreeOrder(){
		return getInt(TREE_SELECTION);
	}

	/**
	 * 
	 * @param key
	 * @return
	 */
	public int getInt(String key){
		return ((Integer)valueMap.get(key)).intValue();
	}

	public LinkedList<SceProj> getIWPProjQueue() throws Exception{
		if(iwp_queue==null){
			iwp_queue = new LinkedList<SceProj>(){
				public boolean add(SceProj proj){
					boolean ret = false;
					if(!contains(proj)){
						ret = super.add(proj);
						if(this.size()>LAST_PROJECTS_COUNT)
							this.poll();
					}
					return ret;
				}
			};
			StringTokenizer st = new StringTokenizer(getString(IWP_LAST_PROJECTS), ",");
			
			while(st.hasMoreTokens()){
				SceProj proj = SceProj.getInstance(Integer.parseInt(st.nextToken()));
				if(proj!=null)
					iwp_queue.addFirst(proj);
			}
		}
		return iwp_queue;
	}
	
	public LinkedList<SceProj> getPSIProjQueue() throws Exception{
		if(psi_queue==null){
			psi_queue = new LinkedList<SceProj>(){
				public boolean add(SceProj proj){
					boolean ret = false;
					if(!contains(proj)){
						ret = super.add(proj);
						if(this.size()>LAST_PROJECTS_COUNT)
							this.poll();
					}
					return ret;
				}
			};
			StringTokenizer st = new StringTokenizer(getString(PSI_LAST_PROJECTS), ",");
			while(st.hasMoreTokens()){
				SceProj proj = SceProj.getInstance(Integer.parseInt(st.nextToken()));
				if(proj!=null)
					psi_queue.addFirst(proj);
			}
		}
		return psi_queue;
	}
}