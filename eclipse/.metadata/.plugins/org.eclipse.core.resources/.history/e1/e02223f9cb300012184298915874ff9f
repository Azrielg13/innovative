/**

 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.swing.Icon;

import com.sce.esp.hst.ForecastCkt;
import com.sce.esp.hst.RealTimeCkt;
import com.sce.esp.object.dao.CktDAO;
import com.sce.esp.util.Calculate;
import com.sce.esp.util.IconsFactory;
@Entity
@Table(schema="MDI",name="MDI220_CKT")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Ckt o WHERE o.PLANYEAR=?1 AND o.CKT_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Ckt o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Ckt o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByBbank", query="SELECT o FROM Ckt o WHERE o.PLANYEAR=?1 AND o.BBANK_SUB_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByProj", query="SELECT o FROM Ckt o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.PROJ_ID=?3 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI220_CKT o WHERE o.PLANYEAR=? AND o.CKT_ID=?"),//AUTO-GENERATED
})
public class Ckt extends CktDAO implements LoadServingEntity, AutomatedEquipment, Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 2994582851198807620L;

	boolean errDisplay=false;
	
	/** The real-time object. */
	private RealTimeCkt realTimeCkt;

	/** The forecast object. */
	private ForecastCkt forcCkt;

	/**
	 * Public constructor for creating a generic Ckt
	 * object for record insertion through a wizard.
	 * WARNING!! This should not be used for anything else.
	 * 
	 * @param planyear - the desired planning year
	 */
	public Ckt(){
	}
	public Ckt(int planyear){
		super(planyear,0);
	}

	public int getCoTypeId(){
		return CoType.CIRCUIT;
	}

	/**
	 * The Constructor.
	 * 
	 * @param cktId the ckt id
	 * @param planyear the planyear
	 */
	public Ckt(int planyear, int cktId){
		super(planyear,cktId);
	}



	public Ckt(Ckt ckt) {
		super(ckt);
	}

	/**
	 * Sets the paFinalized.
	 * 
	 * @param paFinalized the pa finalized
	 * @param The new paFinalized
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setPaFinalized(int simId, boolean paFinalized)throws SQLException{
		setPaFinalized(paFinalized);
		for(Sys sys:getSyss(0))
			sys.getSimSys(0).calcFinApp();
	}

	/**
	 * Sets the paApproved.
	 * 
	 * @param The new paApproved
	 * @param simId the sim id
	 * @param paApproved the pa approved
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setPaApproved(int simId, boolean paApproved)throws SQLException{
		setPaApproved(paApproved);
	}

	/**
	 * Sets the lgFinalized.
	 * 
	 * @param The new lgFinalized
	 * @param simId the sim id
	 * @param lgFinalized the lg finalized
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setLgFinalized(int simId, boolean lgFinalized)throws SQLException{
		super.setLgFinalized(lgFinalized);
	}

	/**
	 * Sets the lgApproved.
	 * 
	 * @param The new lgApproved
	 * @param simId the sim id
	 * @param lgApproved the lg approved
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setLgApproved(int simId, boolean lgApproved)throws SQLException{
		super.setLgApproved(lgApproved);
	}
	
	/**
	 * Obtain scada peak.
	 * 
	 * @param cal the cal
	 * 
	 * @throws Exception the exception
	 */

	public void obtainScadaPeak(Calendar sDate, boolean overwrite){
		obtainScadaPeak(sDate, sDate, overwrite);
	}

	public void obtainScadaPeak(Calendar sDate, Calendar eDate, boolean overwrite){
		DailyPeak.obtainScadaPeak(this, sDate, eDate, overwrite);
	}

	/**
	 * Gets the monthly peak.
	 * 
	 * @param month the month beginning with 1.
	 * @param year the year
	 * 
	 * @return the monthly peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public CktMonthly getMonthlyPeak(int simId, int year, int month)throws SQLException{
		return getMonthlyPeak(simId, year,month,true);
	}

	/**
	 * Gets the monthly peak.
	 * 
	 * @param fetch the fetch
	 * @param month the month
	 * @param year the year
	 * 
	 * @return the monthly peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public CktMonthly getMonthlyPeak(int simId, int year, int month, boolean fetch)throws SQLException{
		return CktMonthly.getInstance(getPlanyear(), getCktId(), year, month, fetch);
	}

	public Bbank getCurrentBbank(int simId)throws SQLException{
//		EspLogger.debug(this, toString()+" ");
		//FIXME Eddie
		Bbank bb =  Bbank.getInstance(getPlanyear(), getBbankSubId());
		if(bb==null)
			if(getFacilityInstalledAt(simId) instanceof Bbank)
				return (Bbank)getFacilityInstalledAt(simId);
		return null;
	}
	
	public Bbank getBbank(int simId)throws SQLException{
		if(getFacilityInstalledAt(simId) instanceof Bbank)
			return (Bbank)getFacilityInstalledAt(simId);
		return null;
	}
	

	/**
	 * Gets the latitude.
	 * 
	 * @return the latitude
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getLatitude() throws SQLException {
		return getBbank(0).getLatitude();
	}

	/**
	 * Gets the longitude.
	 * 
	 * @return the longitude
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getLongitude() throws SQLException {
		return getBbank(0).getLongitude();
	}

	/**
	 * Checks if is automated.
	 * 
	 * @return true, if is automated
	 */
	public boolean isAutomated(){
		return isPAutomated() || isNAutomated();
	}

	/**
	 * Checks if hp, a, b , or c is automated.
	 * 
	 * @return true, if is automated
	 */
	public boolean isPAutomated() {
		return (getADp() != null && getADp().length() > 1) || (getBDp() != null && getBDp().length() > 1) || (getCDp() != null && getCDp().length() > 1);
	}

	/**
	 * Checks if N is automated.
	 * 
	 * @return true, if is automated
	 */
	public boolean isNAutomated() {
		return (getNDp() != null && getNDp().length() > 1);
	}

	/**
	 * Checks if mw or mvar is automated.
	 * 
	 * @return true, if is automated
	 */
	public boolean isVWAutomated() {
		return (getMvarDp() != null && getMvarDp().length() > 1) || (getMwDp() != null && getMwDp().length() > 1);
	}

	/**
	 * Checks if N is automated.
	 * 
	 * @return true, if is automated
	 */
	public boolean isKvAutomated() {
		return (getKvDp() != null && getKvDp().length() > 1);
	}

	/**
	 * Gets the temperature.
	 * 
	 * @param date the date
	 * 
	 * @return the temperature
	 * 
	 * @throws SQLException the SQL exception
	 */
	public AgTemperature getTemperature(Calendar date)throws SQLException{
		return AgTemperature.getInstance(getBbank(0),date);
	}

	/**
	 * Gets the weatherstations.
	 * 
	 * @return the weatherstations
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Vector<Weatherstation> getWeatherStations()throws SQLException{
		return getBbank(0).getWeatherStations();
	}

	/**
	 * Gets the ten year avg.
	 * 
	 * @return the ten year avg
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getTenYearAvg()throws SQLException{
		return getBbank(0).getTenYearAvg();
	}

	/**
	 * Gets the normalization date.
	 * 
	 * @return the normalization date
	 * 
	 * @throws SQLException the SQL exception
	 */
	public final Calendar getNormalizationDate() throws SQLException{   	
		return Department.getInstance(getPlanyear()).getNormalizationDate();
	}	


	/**
	 * Gets the starting point.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the starting point
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getStartingPoint(int simId)throws SQLException{ 
		if(isUseAlt())
			return getAltAdjPeak();
		return getNormStartingPoint();
	}
	
	@Column(name="USE_ALT",nullable=true,length=1)
	public boolean isUseAlt(){
		return (super.isUseAlt() || this.getPeakDate() == null);
	}

	/**
	 * Gets the norm starting point.
	 * 
	 * @return the norm starting point
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getNormStartingPoint()throws SQLException{
		Calendar peakDate = getPeakDate(0);
		if(peakDate != null){
			CktDaily peak = getDailyPeak(peakDate);
			if(peak!=null)			
				return peak.getAdjPeak();
		}
		return 0;
	}
	public double getNormStartingPoint(int simId)throws SQLException{
		return getNormStartingPoint();
	}


	/**
	 * Gets the year.
	 * 
	 * @param year the year
	 * @param simId the sim id
	 * 
	 * @return the year
	 * 
	 * @throws SQLException the SQL exception
	 */
	public CktYear getYear(int simId, int year)throws SQLException{
		return CktYear.getInstance(getPlanyear(),getCktId(),year);
	}

	/**
	 * Gets the secondary kv.
	 * 
	 * @return the secondary kv
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getSecondaryKv() throws SQLException{
		if(getBbank(0)!=null)
			return getBbank(0).getSecondaryKv();
		return 0;
	}

	/**
	 * Gets the daily peak.
	 * 
	 * @param date the date
	 * 
	 * @return the daily peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public CktDaily getDailyPeak(Calendar date) throws SQLException {
		return getDailyPeak(date,true);
	}

	/**
	 * Gets the daily peak.
	 * 
	 * @param fetch the fetch
	 * @param date the date
	 * 
	 * @return the daily peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public CktDaily getDailyPeak(Calendar date, boolean fetch) throws SQLException {
		return CktDaily.getInstance(getPlanyear(),getCktId(),date);
	}

	/**
	 * Gets the daily peaks.
	 * 
	 * @param startDate the start date
	 * @param endDate the end date
	 * 
	 * @return the daily peaks
	 * 
	 * @throws SQLException the SQL exception
	 */
	public CktDaily[] getDailyPeaks(Calendar startDate, Calendar endDate)throws SQLException{
		CktDaily[] peaks = new CktDaily[(int)Math.round((endDate.getTimeInMillis()-startDate.getTimeInMillis())/(1000.0*60*60*24)+1)];
		Calendar cal = (Calendar)startDate.clone();
		for(int p=0; p<peaks.length; p++){
			peaks[p] = getDailyPeak(cal);
			cal = (Calendar)cal.clone();
			cal.add(Calendar.DATE,1);
		}
		return peaks;
	}

	/**
	 * Gets the id.
	 * 
	 * @return cktId
	 */
	public int getId() {
		return getCktId();
	}

	/**
	 * Gets the instance.
	 * 
	 * @param planYear the plan year
	 * 
	 * @return the instance
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Ckt getSpecificInstance(int planYear) throws SQLException {
		return getInstance(planYear,getCktId());
	}

	/**
	 * Gets the MVA factor.
	 * 
	 * @return the MVA factor
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getMVAFactor() throws SQLException {
		Bbank b = getBbank(0);
		if(b!=null)
			return b.getMVAFactor();		
		return 999999999;
	}

	/**
	 * Gets the name.
	 * 
	 * @return the name
	 */
	public String getName() {
		return getCktName();
	}

	public void setName(String text) throws SQLException {
		setCktName(text);
	}

	/**
	 * Returns a string representation of the object.
	 * 
	 * @return a string representation of the object.
	 */
	public String toString(){
		return getCktName();
	}


	/**
	 * BJS 2 remove method ? use calculated ckt_year Coin Factor ? BJS
	 * Gets the coin factor.
	 * 
	 * @return the coin factor
	 * 
	 * @throws SQLExcpetion 	 * @throws SQLException the SQL exception
	 * @throws SQLException the SQL exception
	 */
	public double getCoinFactor() throws SQLException{
		if(getPeakDate(0) == null)
			return 1;
		return getDailyPeak(getPeakDate(0)).getCoinFactor();
	}

	/**
	 * Sets the coin factor.
	 * 
	 * @param coinFactor the coin factor
	 * 
	 * @throws SQLExcpetion 	 * @throws SQLException the SQL exception
	 * @throws SQLException the SQL exception
	 */
	public void setCoinFactor(double coinFactor) throws SQLException{
		if(getPeakDate(0)!=null)
			getDailyPeak(getPeakDate(0)).setCoinFactor(coinFactor);
	}

	/**
	 * This function returns the flag id if the
	 * temperature sensitivity is greater than a
	 * specified value.
	 * 
	 * @param simId the sim id
	 * 
	 * @return -
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getHighTempSensFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.HIGH_TEMP_SENS_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++)               
				if(getYear(simId, y).getHighTempSensFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * temperature sensitivity is less than a
	 * specified value.
	 * 
	 * @param simId the sim id
	 * 
	 * @return -
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getLowTempSensFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.LOW_TEMP_SENS_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++)
				if(getYear(simId, y).getLowTempSensFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * temp sensitivity changes from the previous year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return -
	 * 
	 * @throws SQLException the SQL exception
	 */	
	public int getTempSensYearFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.TEMP_SENS_YEAR_FLAG);		
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++)
				if(getYear(simId, y).getTempSensYearFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * temp sensitivity has changed from the previous
	 * plan for this year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getTempSensPYFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.TEMP_SENS_PY_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++)
				if(getYear(simId, y).getTempSensPYFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * DRF > value for a given year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getHighDRFFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.HIGH_DRF_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++)
				if(getYear(simId, y).getHighDRFFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * DRF < value for a given year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getLowDRFFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.LOW_DRF_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++)               
				if(getYear(simId, y).getLowDRFFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * ten yr avg contains a number that is outside of
	 * the set limits in the database.  It will return
	 * 0 if all effective peaks are within limits.
	 * 
	 * @param simId the sim id
	 * 
	 * @return -
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getTenYearAvgFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		return getBbank(simId).getTenYearAvgFlag(simId);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getTenYearAvgPeakEffFlag(int)
	 */
	/**
	 * Gets the ten year avg peak eff flag.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the ten year avg peak eff flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getTenYearAvgPeakEffFlag(int simId, int year) throws SQLException {
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		return getBbank(simId).getTenYearAvgPeakEffFlag(simId, year);
	}

	/**
	 * Gets the ten year avg peak eff flag.
	 * 
	 * @param year the year
	 * 
	 * @return the ten year avg peak eff flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getTenYearAvgPeakEffFlag(int year)throws SQLException{
		if(getBbank(0).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		return getTenYearAvgPeakEffFlag(0, year);		
	}

	/**
	 * This function returns the flag id if the
	 * temperature adjustment is outside of
	 * the set limits in the database.  It will return
	 * 0 if the temp adj is within limits.
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getTempAdjFlag() throws SQLException{
		if(getBbank(0).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.TEMP_ADJ_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			if(getPeakDate(0)!=null && getDailyPeak(getPeakDate(0)).getAdjFactor() > flag.getValue())				
				return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * starting point day occurs on an interruption
	 * day.
	 * 
	 * @param simId the sim id
	 * 
	 * @return -
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getIntFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.INT_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag() && getPeakDate(simId)!=null) { 
			if(getDailyPeak(getPeakDate(simId)).getIntStatus()>0)
				return flag.getFlagId();
		}
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * Selected Starting Point date is prior to the previous date normalization date or in the next year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getSPDateFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.SP_DATE_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag() && getPeakDate(simId)!=null) { 
			Calendar dateNormPrev = (Calendar)getNormalizationDate().clone();
			dateNormPrev.add(Calendar.YEAR, -1);
			if(getPeakDate(simId).getTimeInMillis()<dateNormPrev.getTimeInMillis() || getPeakDate(simId).get(Calendar.YEAR)>=getPlanyear())
				return flag.getFlagId();          
		}
		return 0;
	}

	/**
	 * This function returns the flag id if there
	 * is a high growth change from year to year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flag id or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getGrowthYearFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.GROWTH_YR_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear(); y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++)
				if(getYear(simId, y).getGrowthYearFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if there
	 * is a high total growth change from planning year
	 * to planning year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flag id or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getGrowthPYFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.GROWTH_PY_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag()) {
			Sub prevSub = getBbank(simId).getPrevInstance();
			if(prevSub!=null){				
				double prevGrowth=0;
				double curGrowth=0;
				for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++) {
					prevGrowth+=prevSub.getYear(simId,y).getGrowth();
					curGrowth+=getYear(simId,y).getGrowth();
				}
				if(prevGrowth==0 && curGrowth!=0)
					return flag.getFlagId();
				else if(prevGrowth!=0) {
					if(Math.abs((curGrowth/prevGrowth)-1) > flag.getValue())
						return flag.getFlagId();
				}
			}
		}
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * Planned Loading Limit < Nameplate for a given year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getCktPLLFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.CKT_PLL_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear()-1; y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(),simId); y++)
				if(getYear(simId, y).getCktPLLFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if a
	 * Ductbank > &value degrees C for normal loading exists.
	 * Flags for the specified window of planyear through planyear+2.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getDBNormalFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.CA_DB_NORM_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())			
			for(int y=getPlanyear(); y<getPlanyear()+User.getActiveUser().getPlanFor(User.getActiveUser().getPlanyear(), simId); y++)
				if(getYear(simId, y).getDBNormalFlag(simId)>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if a
	 * Ductbank > &value degrees C for emergency loading exists.
	 * Flags for the specified window of planyear through planyear+2.
	 * 
	 * @param simId the sim id
	 * 
	 * @return - flagId or 0
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getDBEmergencyFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.CA_DB_EMER_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear(); y<getPlanyear()+User.getActiveUser().getPlanFor(User.getActiveUser().getPlanyear(), simId); y++)
				if(getYear(simId, y).getDBEmergencyFlag(simId)>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * This function returns the flag id if the
	 * ckt has a negative reserve.  Flags for the specified
	 * window of planyear through planyear+2.
	 * 
	 * @param simId the sim id
	 * 
	 * @return -
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getCktReserveFlag(int simId) throws SQLException{
		if(getBbank(simId).getSubTypeId()==SubType.C) //Dont flag for customer subs
			return 0;
		
		Flag flag = Flag.getInstance(getPlanyear(), Flag.CKT_RESERVE_FLAG);
		if(flag!=null && !flag.isDisabled() && flag.isShowFlag())
			for(int y=getPlanyear(); y<getPlanyear()+User.getActiveUser().getPlanFor(User.getActiveUser().getPlanyear(), simId); y++)
				if(getYear(simId, y).getCktReserveFlag()>0)
					return flag.getFlagId();
		return 0;
	}

	/**
	 * Gets the flags.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the flags
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Referee> getFlags(int simId)throws SQLException{
		TreeSet<Referee> flags = new TreeSet<Referee>();

		int flagId = getHighTempSensFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getLowTempSensFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getTempSensYearFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getTempSensPYFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getHighDRFFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getLowDRFFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getTenYearAvgFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getTempAdjFlag();
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getIntFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getSPDateFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getGrowthYearFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getGrowthPYFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getCktPLLFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getDBNormalFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getDBEmergencyFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		flagId = getCktReserveFlag(simId);
		if(flagId > 0)
			flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

//		flagId = getVarReserveFlag(simId);
//		if(flagId > 0)
//		flags.add(new Referee(this,Flag.getInstance(getPlanyear(), flagId)));

		return flags;
	}


	/**
	 * Gets the A banks.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the A banks
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getAbanks(int)
	 */
	public Collection<Abank> getAbanks(int simId) throws SQLException {		
		return getBbank(simId).getAbanks(simId);
	}
	public Collection<Abank> getAbanks(int simId, SubFilter filter) throws SQLException {		
		return getBbank(simId).getAbanks(simId,filter);
	}

	/**
	 * Gets the B banks.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the B banks
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getBbanks(int)
	 */
	public Collection<Bbank> getBbanks(int simId) throws SQLException {		
		return new Vector<Bbank>();
	}
	public Collection<Bbank> getBbanks(int simId, SubFilter filter) throws SQLException {		
		return new Vector<Bbank>();
	}

	/**
	 * Gets the down stream subs.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the down stream subs
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getDownStreamSubs(int)
	 */
	public TreeSet<Sub> getDownStreamSubs(int simId) throws SQLException {
		return getDownStreamSubs(simId,null);
	}
	public TreeSet<Sub> getDownStreamSubs(int simId, SubFilter subFilter){
		return new TreeSet<Sub>();
	}

	/**
	 * Gets the syss.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the syss
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getSyss()
	 */
	public Collection<Sys> getSyss(int simId) throws SQLException {
		return getBbank(simId).getSyss(simId);
	}

	public Collection<Sys> getSyssSCE(int simId) throws SQLException {
		return getBbank(simId).getSyssSCE(simId);
	}

	/**
	 * Gets the weatherstations by instance.
	 * 
	 * @return the weatherstations by instance
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getWeatherStationsByInstance()
	 */
	public Collection<Weatherstation> getWeatherStationsByInstance() throws SQLException {	
		return getBbank(0).getWeatherStationsByInstance();
	}

	/**
	 * Gets the user filtered syss.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the user filtered syss
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getUserFilteredSyss()
	 */
	public Collection<Sys> getUserFilteredSyss(int simId) throws SQLException{
		if(User.getActiveUser().getUserSelect().getMultSys().size() == 0)
			return getSyss(simId);
		Vector<Sys> syss = new Vector<Sys>();
		for(Sys sys:getSyss(simId))
			if(User.getActiveUser().getUserSelect().getMultSys().contains(sys.getSysId()))
				syss.add(sys);
		return syss;
	}

/*	*//**
	 * Gets the input growth rate.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the input growth rate
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.CoreObject#getInputGrowthRate(int)
	 *//*
	public double getInputGrowthRate(int simId)throws SQLException{
		double sp = getYear(simId, getGrowthRateStartYear(simId)).getProjLoad();		   
		double tg = 0;		   
		for(int y=1; y<=getGrowthRateRange(simId); y++)		
			tg += getYear(simId,getGrowthRateStartYear(simId)+y).getInputGrowth();				
		if(sp!=0)
			return Math.pow((sp+tg)/sp,1.0/(getGrowthRateRange(simId)))-1;
		return 0;
	}*/

	/**
	 * Gets the growth rate.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the growth rate
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getGrowthRate(int)
	 */
	public double getGrowthRate(int simId) throws SQLException{
		double sp = getYear(simId, getGrowthRateStartYear(simId)).getProjLoad();	  
		double tg = 0;		   
		for(int y=1; y<=getGrowthRateRange(simId); y++)			
			tg += getYear(simId,getGrowthRateStartYear(simId)+y).getGrowth();
		if(sp!=0)
			return Math.pow((sp+tg)/sp,1.0/(getGrowthRateRange(simId)))-1;
		return 0;
	}	
	
	/**
	 * Gets the growth rate.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the growth rate
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getGrowthRate(int)
	 */
	public double getGrowthRateHC(int simId) throws SQLException{
		double sp = getYear(simId, getGrowthRateStartYear(simId)).getProjLoadHC();	  
		double tg = 0;		   
		for(int y=1; y<=getGrowthRateRange(simId); y++)			
			tg += getYear(simId,getGrowthRateStartYear(simId)+y).getGrowthHC();
		if(sp!=0)
			return Math.pow((sp+tg)/sp,1.0/(getGrowthRateRange(simId)))-1;
		return 0;
	}
	
	/**
	 * Gets the growth rate.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the growth rate
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getGrowthRate(int)
	 */
	public double getGrowthRateLC(int simId) throws SQLException{
		double sp = getYear(simId, getGrowthRateStartYear(simId)).getProjLoadLC();	  
		double tg = 0;		   
		for(int y=1; y<=getGrowthRateRange(simId); y++)			
			tg += getYear(simId,getGrowthRateStartYear(simId)+y).getGrowthLC();
		if(sp!=0)
			return Math.pow((sp+tg)/sp,1.0/(getGrowthRateRange(simId)))-1;
		return 0;
	}

	/**
	 * Gets the growth rate start year.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the growth rate start year
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getGrowthRateStartYear(int)
	 */
	public int getGrowthRateStartYear(int simId) throws SQLException{
		if(getInServiceDate(simId)!=null && getInServiceDate(simId).getTimeInMillis() > Department.getInstance(getPlanyear()).getNormalizationDate().getTimeInMillis())
			return getInServiceDate(simId).get(Calendar.YEAR);
		return Department.getInstance(getPlanyear()).getNormalizationDate().get(Calendar.YEAR);
	}

	/**
	 * Gets the growth rate range.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the growth rate range
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getGrowthRateRange(int)
	 */
	public int getGrowthRateRange(int simId) throws SQLException{
		return Simulation.getInstance(getPlanyear(), simId).getPlanFor() - (getGrowthRateStartYear(simId) - getPlanyear() + 1);
	}

	/**
	 * Gets the hp dp.
	 * 
	 * @return the hp dp
	 */
//	public String getHpDp() {
//	return null;
//	}

//	/**
//	* Sets the hp dp.
//	* 
//	* @param hpDp the hp dp
//	* 
//	* @throws SQLException the SQL exception
//	*/
//	public void setHpDp(String hpDp) throws SQLException {		
//	}

	/**
	 * Gets the ckt status.
	 * 
	 * @return the status
	 * @throws SQLException 
	 */
	private String cktStatus=null;
	public String getStatus() throws SQLException{	
		if(cktStatus==null)
			cktStatus = getYear(0,getPlanyear()-1).getStatus();
		return cktStatus;
	}

	/**
	 * Gimme percent instance.
	 * 
	 * @param ws the ws
	 * 
	 * @return the double
	 * 
	 * @throws SQLException the SQL exception
	 * 
	 * @see com.sce.esp.object.model.CoreObject#getPercentInstance(com.sce.esp.object.model.Weatherstation)
	 */
	public double getPercentInstance(Weatherstation ws) throws SQLException {			
		double pi = 0;
		for(Weatherstation ws2: getWeatherStationsByInstance())
			if(ws == ws2)
				pi++;   		
		return Calculate.round(pi/getWeatherStationsByInstance().size()*100,1);
	}

	/**
	 * @return the <code>RealTimeCkt</code> object
	 */
	public RealTimeCkt getRealTimeCkt() {
		if(realTimeCkt==null)
			realTimeCkt = new RealTimeCkt(this);
		return realTimeCkt;
	}

	/**
	 * @return the <code>ForecastCkt</code> object
	 */
	public ForecastCkt getForecastCkt(Calendar cal) {
		if(forcCkt==null||forcCkt.getDate()!=cal)
			forcCkt = new ForecastCkt(this,cal);
		return forcCkt;
	}

	/**
	 * Gets the level.
	 * 
	 * @return the level
	 */
	public int getLevel() {
		return CIRCUIT;
	}


	/**
	 * Gets the status finalized.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the status finalized
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isStatusFinalized(int simId) throws SQLException {
		return isCaFinalized();
	}

	/**
	 * Gets the status approved.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the status approved
	 * 
	 * @throws SQLException the SQL exception
	 */
	public boolean isStatusApproved(int simId) throws SQLException {
		return isCaApproved();
	}

	/**
	 * Sets the status finalized.
	 * 
	 * @param statusFinalized the status finalized
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setStatusFinalized(int simId, boolean statusFinalized) throws SQLException {
		setCaFinalized(statusFinalized);
	}

	/**
	 * Sets the status finalized.
	 * 
	 * @param statusFinalized the status finalized
	 * @param statusApproved the status approved
	 * @param simId the sim id
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setStatusApproved(int simId, boolean statusApproved) throws SQLException {
		setCaApproved(statusApproved);
	}

	/**
	 * Gets the total cust mvar.
	 * 
	 * @return the total cust mvar
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getTotalCustMvar() throws SQLException{
		double mvar=0;
		for(Cust cust : getCusts()) {
			mvar+=cust.getKvar()/1000;
		}
		return mvar;
	}

	/**
	 * Gets the total cust mw.
	 * 
	 * @return the total cust mw
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getTotalCustMw() throws SQLException{
		double mw=0;
		for(Cust cust : getCusts()) {
			mw+=cust.getKw()/1000;
		}
		return mw;
	}

	/**
	 * Gets the total cust mva.
	 * 
	 * @return the total cust mva
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getTotalCustMva() throws SQLException{
		return Math.hypot(getTotalCustMvar(),getTotalCustMw());
	}

	/**
	 * Gets the power factor.
	 * 
	 * @return the power factor
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getPowerFactor() throws SQLException{
		return Math.cos(Math.atan(getVarVa()));
	}

	/**
	 * Gets the icon.
	 * 
	 * @return the icon
	 */
	public Icon getIcon(){
		return IconsFactory.getImageIcon(IconsFactory.Tree.NODE);
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getDistricts(int)
	 */
	/**
	 * Gets the districts.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the districts
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<District> getDistricts(int simId) throws SQLException {
		return getBbank(simId).getDistricts(simId);
	}
	
	public TreeSet<SceProj> getSceProjs(int simId)throws SQLException{
		return getBbank(0).getSceProjs(simId);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLgProjs(int)
	 */
	public Collection<LgProj> getLgProjs(int simId) throws SQLException {
		return getBbank(simId).getLgProjs(simId);
	}

	/**
	 * Gets the peak eff.
	 * 
	 * @param year the year
	 * 
	 * @return the peak eff
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getPeakEff(int year)throws SQLException{
		return getBbank(0).getPeakEff(year);
	}

	/**
	 * Gets the last calc WS data.
	 * 
	 * @return the last calc WS data
	 */
	public Calendar getLastCalcWsData(int simId){
		return Calendar.getInstance();
	}

	/**
	 * Gets the last calc B load.
	 * 
	 * @param simId the sim id
	 * @param planFor the plan for
	 * 
	 * @return the last calc B load
	 */
	public Calendar getLastCalcBLoad(int simId, int planFor){
		return Calendar.getInstance();
	}

	public Calendar getLastCalcAVar(int simId, int planFor) throws SQLException {		
		return Calendar.getInstance();
	}

	public Calendar getLastCalcBVar(int simId, int planFor) throws SQLException {
		return Calendar.getInstance();
	}

	public Calendar getLastCalcCktLimit(int simId, int planFor){
		return Calendar.getInstance();
	}

	public Calendar getLastCalcCkt(int simId, int planFor){
		return Calendar.getInstance();
	}

	/**
	 * Gets the last calc B load.
	 * 
	 * @param simId the sim id
	 * @param planFor the plan for
	 * 
	 * @return the last calc B load
	 */
	public Calendar getLastCalcBPeak(int simId){
		return Calendar.getInstance();
	}

	public double getRecordedPeak(int simId) throws SQLException {
		if(getPeakDate(simId) != null)
			return getDailyPeak(getPeakDate(simId)).getRecordedPeak();
		return 0;
	}


	public double getPeakAdjustment(int simId) throws SQLException {
		if(getPeakDate(simId) != null)
			return getDailyPeak(getPeakDate(simId)).getPeakAdjustment();
		return 0;
	}
	
	public double getGenAdjustment(int simId) throws SQLException {
		if(getPeakDate(simId) != null)
			return getDailyPeak(getPeakDate(simId)).getGenAdjustment();
		return 0;
	}

	/**
	 * Gets the actual peak.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the actual peak
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getActualPeak(int simId) throws SQLException {
		if(getPeakDate(simId) != null)
			return getDailyPeak(getPeakDate(simId)).getActualPeak();
		return 0;
	}

	/**
	 * Gets the adjusted.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the adjusted
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getAdjustedPeak(int simId) throws SQLException {
		if(getPeakDate(simId) != null)
			return getDailyPeak(getPeakDate(simId)).getAdjPeak();
		return 0;
	}

	public District getDistrict() throws SQLException{
		return getBbank(0).getDistrict();
	}

	public Collection<? extends CoreObject> getChildren(int simId) throws SQLException {
		return new Vector<CoreObject>();
	}

	public Collection<? extends CoreObject> getChildren(int simId, SubFilter sf) {		
		return new Vector<CoreObject>();
	}

	public Ckt getPlanYearInstance(int planyear)throws SQLException{
		return getInstance(planyear,getCktId());
	}
	public double getABankGrowthRate(int simId) throws SQLException{
		double sp = getYear(simId, getGrowthRateStartYear(simId)).getABankProjLoad();	   
		double tg = 0;		   
		for(int y=1; y<=getGrowthRateRange(simId); y++)		
			tg += getYear(simId,getGrowthRateStartYear(simId)+y).getABankGrowth();
		if(sp!=0)
			return Math.pow((sp+tg)/sp,1.0/(getGrowthRateRange(simId)))-1;
		return 0;
	}

	public TreeSet<Proj> getProjects(int simId, Program prog) throws SQLException {
		return null;
	}

	public int getTotalProjCost(int simId, Collection<Program> prog, int statuses) throws SQLException {
		return 0;
	}

	public int getTotalProjCost(int simId, int year, Collection<Program> prog, int statuses) throws SQLException {
		return 0;
	}

	public int getTotalProjPriorCost(int simId, Collection<Program> prog, int statuses) throws SQLException {
		return 0;
	}

	public int getTotalProjApprovedCost(int simId, Collection<Program> prog, int statuses) throws SQLException {
		return 0;
	}

	public int getTotalProjApprovedCost(int simId, int year, Collection<Program> prog, int statuses) throws SQLException {
		return 0;
	}

	public int getTotalProjApprovedPriorCost(int simId, Collection<Program> prog, int statuses) throws SQLException {
		return 0;
	}
	public int getPaTotal(int simId){
		return 1;
	}
	public int getPaFin(int simId){
		return isPaFinalized()?1:0;
	}
	public int getPaApp(int simId){
		return isPaApproved()?1:0;
	}
	public int getLgTotal(int simId){
		return 1;
	}
	public int getLgFin(int simId){
		return isLgFinalized()?1:0;
	}
	public int getLgApp(int simId){
		return isLgApproved()?1:0;
	}
	public int getSsTotal(int simId){
		return 0;
	}
	public int getSsFin(int simId){
		return 0;
	}
	public int getSsApp(int simId){
		return 0;
	}
	public int getCsTotal(int simId){
		return 1;
	}
	public int getCsFin(int simId){
		return isCaFinalized()?1:0;
	}
	public int getCsApp(int simId){
		return isCaApproved()?1:0;
	}
	public int getN1Total(int simId){
		return 0;
	}
	public int getN1Fin(int simId){
		return 0;
	}
	public int getN1App(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarTotal(int)
	 */
	public int getVarTotal(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarFin(int)
	 */
	public int getVarFin(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarApp(int)
	 */
	public int getVarApp(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getExTotal(int)
	 */
	public int getExTotal(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getExFin(int)
	 */
	public int getExFin(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getExApp(int)
	 */
	public int getExApp(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getProjTotal(int)
	 */
	public int getProjCount(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getProjFin(int)
	 */
	public int getProjFin(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getProjApp(int)
	 */
	public int getProjApp(int simId){
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getContTotal(int)
	 */
	public int getContTotal(int simId) throws SQLException{
		return getCktConts().size();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getContFin(int)
	 */
	public int getContFin(int simId) throws SQLException{
		int total=0;
		for(CktCont cc:getCktConts())
			if(cc.isFinalized())
				total++;
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getContApp(int)
	 */
	public int getContApp(int simId) throws SQLException{
		int total=0;
		for(CktCont cc:getCktConts())
			if(cc.isApproved())
				total++;
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLastCalcFinApp(int)
	 */
	public Calendar getLastCalcFinApp(int simId){
		return Calendar.getInstance();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.LoadServingEntity#getLgNote(int)
	 */
	public String getLgNote(int simId) throws SQLException {
		return getGrowthNote();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.LoadServingEntity#getPeakDate(int)
	 */
	public Calendar getPeakDate(int simId){
		return getPeakDate();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.LoadServingEntity#isLgApproved(int)
	 */
	public boolean isLgApproved(int simId) throws SQLException {
		return isLgApproved();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.LoadServingEntity#isLgFinalized(int)
	 */
	public boolean isLgFinalized(int simId) throws SQLException {
		return isLgFinalized();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.LoadServingEntity#isPaApproved(int)
	 */
	public boolean isPaApproved(int simId) throws SQLException {
		return isPaApproved();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.LoadServingEntity#isPaFinalized(int)
	 */
	public boolean isPaFinalized(int simId) throws SQLException {
		return isPaFinalized();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.LoadServingEntity#setLgNote(int, java.lang.String)
	 */
	public void setLgNote(int simId, String lgNote) throws SQLException {
		setGrowthNote(lgNote);
	}

	/**
	 * Sets the peak date and sets user specified false if peak date was null
	 * Sets the peakDate
	 * @param The new peakDate
	 */
	public void setPeakDate(int simId, Calendar peakDate) throws SQLException {
		if(isSame(peakDate,getPeakDate())) return;
		boolean tricky = (getPeakDate()==null);		
		super.setPeakDate(peakDate);
		if(tricky)
			setUseAlt(false);		
	}

	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public Collection<CktTrans> getFromCktTrans() throws SQLException {
		return getCktTranss();
	}

	public Collection<CktTrans> getToCktTrans() throws SQLException {
		return getCktTranss2();
	}

	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public CktDaily getMDIDecideDate()throws SQLException{
		return (CktDaily)getBestPeakDays(1).firstElement();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getBestPeakDays(int)
	 */
	public Vector<DailyPeak> getBestPeakDays(int count)throws SQLException{
		return getBestPeakDays(this, count);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getHistoricalPeak(int, int)
	 */
	public CktMonthly getHistoricalPeak(int simId, int year) throws Exception {
		double yearPeak = 0.0;
		int peakMonth = 0;
		for(int month = Calendar.JANUARY; month <= Calendar.DECEMBER; month++) {
			if((getMonthlyPeak(simId, year, month) != null) && (getMonthlyPeak(simId, year, month).getPeakValue() > yearPeak)){
				yearPeak = getMonthlyPeak(simId, year, month).getPeakValue();
				peakMonth = month;
			}
		}
		return CktMonthly.getInstance(getPlanyear(), getCktId(), year, peakMonth);
	}

	/**
	 * 
	 * @param simId
	 * @return
	 * @throws SQLException
	 */
	public SimCkt getSimCkt(int simId) throws SQLException{
		return SimCkt.getInstance(getPlanyear(), simId, getCktId()); 
	}

	/**
	 * 
	 * @param simId
	 * @return
	 * @throws SQLException
	 */
	public Proj getInServiceProj(int simId)throws SQLException{
		return getSimCkt(simId).getInServiceProj();
	}

	public Calendar getInServiceDate(int simId)throws SQLException{
		ScopeItem si = getInServiceScopeItem(simId);
		if(si != null)
			return si.getModelDate();
		return null;
	}
	
	public SceProj getInServiceSceProj(int simId) throws SQLException{
		ScopeItem si = getInServiceScopeItem(simId);
		if(si != null)
			return si.getSceProjElemCost().getSceProjRev().getSceProj();
		return null;
	}
	public ScopeItem getInServiceScopeItem(int simId) throws SQLException{
		for(ScopeItem si:getScopeItems())
			if(si.isActiveBl(getPlanyear(),simId) && si.getQuantity() == 1)
				return si;
		return null;
	}

	public Calendar getOutServiceDate(int simId)throws SQLException{
		ScopeItem si = getOutServiceScopeItem(simId);
		if(si != null)
			return si.getModelDate();
		return null;
	}
	
	public SceProj getOutServiceSceProj(int simId) throws SQLException{
		ScopeItem si = getOutServiceScopeItem(simId);
		if(si != null)
			return si.getSceProjElemCost().getSceProjRev().getSceProj();
		return null;
	}
	public ScopeItem getOutServiceScopeItem(int simId) throws SQLException{
		for(ScopeItem si:getScopeItems())
			if(si.isActiveBl(getPlanyear(),simId) && si.getQuantity() == -1)
				return si;
		return null;
	}

	/**
	 * 
	 * @param simId
	 * @return
	 * @throws SQLException
	 */
	public Proj getOutServiceProj(int simId) throws SQLException {
		return getSimCkt(simId).getOutServiceProj();
	}

	/**
	 * 
	 * @param simId
	 * @param proj
	 * @throws SQLException
	 */
	public void setInServiceProj(int simId, Proj proj) throws SQLException {
		getSimCkt(simId).setProj(proj);
	}

	/**
	 * 
	 * @param simId
	 * @param proj
	 * @throws SQLException
	 */
	public void setOutServiceProj(int simId, Proj proj) throws SQLException {
		getSimCkt(simId).setProj2(proj);
	}

	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public boolean isUseSubCrit() throws SQLException{
		return isUseSubCrit(0);
	}

	/**
	 * 
	 * @param simId
	 * @return
	 * @throws SQLException
	 */
	public boolean isUseSubCrit(int simId) throws SQLException{
		return getYear(simId,getPlanyear()-1).isUseSubCrit() && getBbank(simId) != null;
	}

	/**
	 * 
	 * @param useSubCrit
	 * @throws SQLException
	 */
	public void setUseSubCrit(boolean useSubCrit) throws SQLException{
		setUseSubCrit(0,useSubCrit);
	}

	/**
	 * 
	 * @param simId
	 * @param useSubCrit
	 * @throws SQLException
	 */
	public void setUseSubCrit(int simId, boolean useSubCrit) throws SQLException{
		getYear(simId,getPlanyear()-1).setUseSubCrit(useSubCrit);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getHottestDays(int, int)
	 */
	public TreeSet<AgTemperature> getHottestDays(int count, int year)throws SQLException {
		return getHottestDays(this, count, year);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getHottestDays(int, java.util.Calendar, java.util.Calendar)
	 */
	public TreeSet<AgTemperature> getHottestDays(int count, Calendar startDate, Calendar endDate) throws SQLException {
		return getHottestDays(this, count, startDate, endDate);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLastCalcProj(int, int)
	 */
	public Calendar getLastCalcProj(int simId, int planFor) throws SQLException {
		return Calendar.getInstance();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLastCalcProjCost(int, int)
	 */
	public Calendar getLastCalcProjCost(int simId, int planFor)throws SQLException {
		return Calendar.getInstance();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getLastCalcMonthly(int, int)
	 */
	public Calendar getLastCalcMonthly(int simId, int planFor)	throws SQLException {
		return Calendar.getInstance();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.LoadServingEntity#getPeakDailyPeak(int)
	 */
	public CktDaily getPeakDailyPeak(int simId) throws SQLException{
		return getDailyPeak(getPeakDate(simId), true);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getZones(int)
	 */
	public Collection<Zone> getZones(int simId) throws SQLException{
		return getBbank(simId).getZones(simId);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getRegions(int)
	 */
	public Collection<Region> getRegions(int simId) throws SQLException{
		if(getBbank(simId)!=null)
			return getBbank(simId).getRegions(simId);//FIXME 2.3
		return null;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarARequired(int, int)
	 */
	public double getVarARequired(int simId, int year) throws SQLException {
		Bbank bb = (Bbank) getYear(simId, year).getParent();
		return bb.getYear(simId, year).getAbank().getVarARequired(simId, year);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarASupply(int, int)
	 */
	public double getVarASupply(int simId, int year) throws SQLException {
		Bbank bb = (Bbank) getYear(simId, year).getParent();
		return bb.getYear(simId, year).getAbank().getVarASupply(simId, year);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarBRequired(int, int)
	 */
	public double getVarBRequired(int simId, int year) throws SQLException {
		return getYear(simId, year).getTotalKvarReq();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarBSupply(int, int)
	 */
	public double getVarBSupply(int simId, int year) throws SQLException {
		return getYear(simId, year).getTotalKvarExist();
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarAReserved(int, int)
	 */
	public double getVarAReserved(int simId, int year) throws SQLException {
		return getVarASupply(simId, year) - getVarARequired(simId, year);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarBReserved(int, int)
	 */
	public double getVarBReserved(int simId, int year) throws SQLException {
		return getVarBSupply(simId, year) - getVarBRequired(simId, year);
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getAbankCapAddTotal()
	 */
	public double getAbankCapAddTotal() throws SQLException {
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getAppCostTotal(int, com.sce.mdi.object.Prog, com.sce.mdi.object.Elem)
	 */
	public double getAppCostTotal(int simId, Collection<Program> p, Elem e) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getAppCostTotal(p, e);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getCapAddTotal(int, com.sce.mdi.object.Prog)
	 */
	public double getCapAddTotal(int simId, Collection<Program> p) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getCapAdd(p);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getCktAddTotal(int, com.sce.mdi.object.Prog)
	 */
	public int getCktAddTotal(int simId, Collection<Program> p) throws SQLException {
		int total = 0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getCktDelta(p);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getNameplateTotal()
	 */
	public double getNameplateTotal() throws SQLException {
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getNetCostChangeTotal(int, com.sce.mdi.object.Prog, com.sce.mdi.object.Elem)
	 */
	public double getNetCostChangeTotal(int simId, Collection<Program> p, Elem e) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getNetCostChange(p, e);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getProjCountTotal(int, com.sce.mdi.object.Prog)
	 */
	public int getProjCountTotal(int simId, Collection<Program> p) throws SQLException {
		int total = 0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getProjCount(p);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getPropCostTotal(int, com.sce.mdi.object.Prog, com.sce.mdi.object.Elem)
	 */
	public double getPropCostTotal(int simId, Collection<Program> p, Elem e) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getPropCostTotal(p, e);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getVarAddTotal(int, com.sce.mdi.object.Prog)
	 */
	public double getVarAddTotal(int simId, Collection<Program> p) throws SQLException {
		double total = 0.0;
		for(int year = getPlanyear(); year < getPlanyear()+Department.getInstance(getPlanyear()).getPlanFor(); year++)
			total += getYear(simId, year).getVarAdd(p);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getPriorPropCostTotal(int, com.sce.mdi.object.Prog, com.sce.mdi.object.Elem)
	 */
	public double getPriorPropCostTotal(int simId, Collection<Program> p, Elem e) throws SQLException {
		int total = 0;
		for(int year = getPlanyear()-10; year < getPlanyear(); year++)
			total += getYear(simId, year).getPropCostTotal(p, e);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getPriorAppCostTotal(int, com.sce.mdi.object.Prog, com.sce.mdi.object.Elem)
	 */
	public double getPriorAppCostTotal(int simId, Collection<Program> p, Elem e) throws SQLException {
		int total = 0;
		for(int year = getPlanyear()-10; year < getPlanyear(); year++)
			total += getYear(simId, year).getAppCostTotal(p, e);
		return total;
	}

	/*
	 * (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getPriorNetCostChangeTotal(int, com.sce.mdi.object.Prog, com.sce.mdi.object.Elem)
	 */
	public double getPriorNetCostChangeTotal(int simId, Collection<Program> p, Elem e) throws SQLException {
		int total = 0;
		for(int year = getPlanyear()-10; year < getPlanyear(); year++)
			total += getYear(simId, year).getNetCostChange(p, e);
		return total;
	}

	/**
	 * Finds the summer peak for the circuit.
	 * 
	 * @return a <code>CktDaily</code> object.
	 */
	public CktDaily getHighestPeak()  throws SQLException {
		Calendar startDate = Calendar.getInstance();
		startDate.set(Calendar.YEAR, getPlanyear()-1);
		startDate.set(Calendar.DAY_OF_YEAR, 1);
		Calendar endDate = Calendar.getInstance();
		endDate.set(Calendar.YEAR, getPlanyear());
		endDate.set(Calendar.DAY_OF_YEAR, 1);

		if(endDate.getTimeInMillis() > Calendar.getInstance().getTimeInMillis())
			endDate = Calendar.getInstance();

		CktDaily[] dailys = getDailyPeaks(startDate, endDate);
		CktDaily peakDay = null;
		for(CktDaily day: dailys)
			if(peakDay==null || day.getActualPeak() > peakDay.getActualPeak())
				peakDay = day;
		return peakDay;
	}

	public AutomatedEquipment getCoinParent() throws SQLException {
		return getBbank(0);
	}

	/**
	 * @deprecated
	 */
	public String getHpDp(){
		return "";
	}

	/**
	 * @deprecated
	 */
	public void setHpDp(String hpDp)throws SQLException{
	}

	public CoType getCoType() throws SQLException{
		return CoType.getInstance(CoType.CIRCUIT);
	}
	
	public synchronized TreeSet<SceProjElemCost> getSceProjElemCosts()throws SQLException{
		return new TreeSet<SceProjElemCost>(SceProjElemCost.getNamedCollection("findByFacility", getCoTypeId(), getId()));
	}
	
	public synchronized Collection<ScopeItem> getScopeItems()throws SQLException{
		return ScopeItem.getNamedCollection("findByModelingItem", getCoTypeId(),getId());
	}
	
	public FacilityObject getFacilityInstalledAt(int simId)throws SQLException{//XXX cached
		FacilityObject total = (FacilityObject)getCachedValue("getFacilityInstalledAt",simId);
		if(total==null){
			for(ScopeItem si:getScopeItems())
				if(si.isActiveBl(getPlanyear(),simId) && si.getQuantity() == 1){
					total= si.getFacilityObject(getPlanyear());
					break;
				}
			setCachedValue(total,"getFacilityInstalledAt",simId);
		}
		return total;
	}
	public double getPLL(Calendar asOf, int simId) throws SQLException{
		if(asOf == null)
			getYear(simId, getPlanyear()-1).getPLLBizLogic();
		return getYear(simId, asOf.get(Calendar.YEAR)).getPLLBizLogic();
	}
	public double getPLLInService(Calendar asOf, int simId) throws SQLException{
		return getPLL(asOf,simId);
	}

	public void resortSceProjElemCosts() throws SQLException {
		
	}

	public double getAppCostTotal(int simId, Collection<Program> p, SceElem e)throws SQLException {
		return 0;
	}

	public double getCapAddTotal(int simId, TreeSet<Program> p) throws SQLException {
		return 0;
	}

	public int getCktAddTotal(int simId, TreeSet<Program> p)throws SQLException {
		return 0;
	}

	public double getNetCostChangeTotal(int simId, Collection<Program> p,SceElem e) throws SQLException {
		return 0;
	}

	public double getPriorAppCostTotal(int simId, Collection<Program> p,SceElem e) throws SQLException {
		return 0;
	}

	public double getPriorNetCostChangeTotal(int simId, Collection<Program> p,SceElem e) throws SQLException {
		return 0;
	}

	public double getPriorPropCostTotal(int simId, Collection<Program> p,SceElem e) throws SQLException {
		return 0;
	}

	public int getProjCountTotal(int simId, TreeSet<Program> p)throws SQLException {
		return 0;
	}

	public double getPropCostTotal(int simId, Collection<Program> p, SceElem e)throws SQLException {
		return 0;
	}

	public double getVarAddTotal(int simId, TreeSet<Program> p)throws SQLException {
		return 0;
	}

	public double getAppCostTotal(int simId, Collection<Program> p, SceElem e,int projStatuses) {
		// TODO Auto-generated method stub
		return 0;
	}

	public double getPriorAppCostTotal(int simId, Collection<Program> p,SceElem e, int projStatuses) {
		// TODO Auto-generated method stub
		return 0;
	}

	public double getPriorPropCostTotal(int simId, Collection<Program> p,SceElem e, int projStatuses) throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	public double getPropCostTotal(int simId, Collection<Program> p, SceElem e,int projStatuses) throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	public TreeSet<SceProjRev> getSceProjRevs(int simId,Collection<Program> progs, int projStatuses) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}
	
	public void insert() throws SQLException{
		if(getInstance(getPlanyear(),getCktId()) != null) return;
		super.insert();
		if(getPlanyear()<Department.getActivePlanYear()){
			if(getInstance(getPlanyear()+1,getCktId()) == null){
				Ckt cp = copy();
				cp.setPlanyear(getPlanyear()+1);
				cp.insert();
			}
		}
	}
	//TODO Remove after migration
	public void copyChildrenTo(Ckt cp)throws SQLException{
	}
	
	public double getPrimaryKv() throws SQLException {
		return getPrimaryKv();
	}

	public static Ckt getInstanceByName(int planyear, String name) throws SQLException {
		return Ckt.getCollection(new String[]{"PLANYEAR","CKT_NAME"},planyear,name).iterator().next();
	}


	public double getPLL(Calendar asOf, int simId, TreeSet<SceProjElemCost> without) throws SQLException {
		SceProjElemCost last = getMostRecentSceProjElemCost(asOf,simId);
		if(last != null)
			return last.getPLLPost(getPlanyear(),simId,without);
		return 0;
	}

	private SceProjElemCost getMostRecentSceProjElemCost(Calendar asOf, int simId) throws SQLException {
		SceProjElemCost last = null;
		for(SceProjElemCost pec:getSceProjElemCosts()){
			if(pec.getCostStage().getCostType()==CostStage.Type.Proposed.ordinal()){
				if(!pec.wouldBeInService(asOf))
					return last;
				if(pec.isActiveBl(getPlanyear(),simId))
					last = pec;
			}
		}
		return last;
	}


	public boolean isUseAlt(int simId) {
		return isUseAlt();
	}
	
	public double getAltAdjPeak(int simId){
		return getAltAdjPeak();
	}
	
	public TreeSet<CktGrowth> getCktGrowths(int simId) throws SQLException{
		TreeSet<CktGrowth> cgs = null; //(TreeSet<CktGrowth>)getCachedValue("getCktGrowths",simId);
		if(cgs==null){
			cgs = new TreeSet<CktGrowth>();
			for(CktGrowth cg:getCktGrowths()){
				if(cg.getSimId() == simId)
					cgs.add(cg);
				else if(Simulation.getInstance(getPlanyear(), simId)!=null && Simulation.getInstance(getPlanyear(), simId).isInLineage(cg.getSimId()))
					cgs.add(CktGrowth.getInstance(getPlanyear(), simId, getCktId(), cg.getGrowthTypeId(), cg.getYear()));
			}
			setCachedValue(cgs,"getCktGrowths",simId);
		}
		for(int y=getPlanyear(); y<getPlanyear()+User.getActiveUser().getPlanFor(getPlanyear(), simId); y++)
			cgs.add(CktGrowth.getInstance(getPlanyear(), simId, getCktId(), GrowthType.BG, y));
		return cgs;
	}
	@Override
	public Ckt getPrevInstance() throws SQLException {
		return getInstance(getPlanyear()-1, getCktId());
	}
}
