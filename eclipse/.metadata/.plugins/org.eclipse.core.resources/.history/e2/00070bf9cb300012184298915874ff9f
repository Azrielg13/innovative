/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2002-2007, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.swing.Icon;

import com.sce.esp.object.dao.ZoneDAO;
import com.sce.esp.util.IconsFactory;
@Entity
@Table(schema="MDI",name="MDI030_ZONE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Zone o WHERE o.PLANYEAR=?1 AND o.ZONE_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Zone o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Zone o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByDepartment", query="SELECT o FROM Zone o WHERE o.PLANYEAR=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI030_ZONE o WHERE o.PLANYEAR=? AND o.ZONE_ID=?"),//AUTO-GENERATED
})
public class Zone extends ZoneDAO implements Serializable{
	private static final long serialVersionUID = 6638758757797673659L;
	public static final int EASTERN = 1;
	public static final int NORTHERN = 2;
	public static final int OTHER = 3;
	public static final int SOUTHERN = 4;
	public static final int WESTERN = 5;

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 */
	public Zone(){
	}
	public Zone(int planyear) {
		super(planyear,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 * @param zoneId the zoneId
	 */
	public Zone(int planyear, int zoneId){
		super(planyear,zoneId);
	}
	
	public Zone(Zone zone) {
		super(zone);
	}

	public int getId(){
		return getZoneId();
	}
	
	public int getCoTypeId(){
		return CoType.ZONE;
	}
	/**
	 * Returns the zoneId.
	 * 
	 * @return The zoneId
	 */
	public String getName(){
		return getZoneName();
	}
	
	
	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		return getZoneName()+" Zone";
	}

	/**
	 * Gets the level.
	 * 
	 * @return the level
	 */
	public int getLevel() {
		return ZONE;
	}

	/**
	 * Gets the icon.
	 * 
	 * @return the icon
	 */
	public Icon getIcon(){
		return IconsFactory.ICON_ZONE;
	}
	
	/**
	 * Gets the syss.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the syss
	 * 
	 * @throws SQLException the SQL exception
	 */
	public TreeSet<Sys> getSyss(int simId)throws SQLException{
		TreeSet<Sys> syss = new TreeSet<Sys>();
		for(Region reg:getRegions())
			syss.addAll(reg.getSyss(simId));
		return syss;
	}
	
	public TreeSet<Sys> getSyssSCE(int simId)throws SQLException{
		TreeSet<Sys> syss = new TreeSet<Sys>();
		for(Region reg:getRegions())
			syss.addAll(reg.getSyssSCE(simId));
		return syss;
	}
	
	/**
	 * Gets the districts.
	 * 
	 * @return the districts
	 * 
	 * @throws SQLException the SQL exception
	 */
	public Collection<District> getDistricts() throws SQLException {
		TreeSet<District> districts = new TreeSet<District>();
		for(Region r:getRegions())
			districts.addAll(r.getDistricts());
		return districts;
	}

	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getChildren(int)
	 */
	public Collection<Region> getChildren(int simId) throws SQLException {
		return getRegions();
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.CoreObject#getPYInstance(int)
	 */
	public Zone getPlanYearInstance(int planyear)throws SQLException{
		return getInstance(planyear,getZoneId());
	}
	
	/* (non-Javadoc)
	 * @see com.sce.mdi.object.AgObject#getParent()
	 */
	public Department getParent()throws SQLException{
		return getDepartment();
	}

	public TreeSet<Zone> getZones() throws SQLException {
		TreeSet<Zone> zones = new TreeSet<Zone>();
		zones.add(this);
		return zones;
	}

	public CoType getCoType() throws SQLException{
		return CoType.getInstance(CoType.ZONE);
	}

	public double getPrimaryKv() throws SQLException {
		return getPrimaryKv();
	}
	@Override
	public Zone getPrevInstance() throws SQLException {
		return getInstance(getPlanyear()-1,getZoneId());
	}
}
