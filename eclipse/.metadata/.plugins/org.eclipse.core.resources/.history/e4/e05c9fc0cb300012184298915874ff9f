/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;

public class JPanelEnhanced extends JPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1096267340294394917L;
	public JPanelEnhanced() {
		setOpaque(true);
		setBackground(new JPanel().getBackground());
	}

	private boolean needsInitialization = true;
	protected void initialize() {
		if (needsInitialization) {
			needsInitialization = false;
			internalInitialize();
		}
	}

	protected void internalInitialize() {
	}

	private boolean needsRefresh = false;

	protected void beginWait() {
	}
	protected void finishWait() {
	}
	public final void lazyRefreshView() {
		needsRefresh = true;
	}

	public boolean needsRefresh() {
		return needsRefresh;
	}

	private int refreshViewCount = 0;
	public final void refreshView() {
		if (needsInitialization)
			initialize();
		if (refreshViewCount == 0) {
			try {
				refreshViewCount++;
				beginWait();

				needsRefresh = false;
				internalRefreshView();
			} finally {
				finishWait();
				refreshViewCount--;
			}
		}
		layoutView();
		updateView();
	}

	public final void layoutView() {
		if (needsInitialization)
			initialize();
		if (refreshViewCount == 0) {
			try {
				beginWait();
				internalLayoutView();
			} finally {
				finishWait();
			}
		}
	}

	public final void updateView() {
		if (needsInitialization)
			initialize();
		if (refreshViewCount == 0) {
			try {
				beginWait();
				internalUpdateView();
			} finally {
				finishWait();
			}
		}
	}

	protected void internalRefreshView() {
	}

	protected void internalUpdateView() {
	}

	protected void internalLayoutView() {
	}

	public void paint(Graphics g) {
		if (needsInitialization) {
			SafeGUI.start(new Runnable() {
				public void run() {
					initialize();
					repaint();
				}
			});
		} else if (needsRefresh) {
			SafeGUI.start(new Runnable() {
				public void run() {
					refreshView();
					repaint();
				}
			});
		} else {
			super.paint(g);
		}
	}

	public void addActionListener(ActionListener listener) {
		listenerList.add(ActionListener.class, listener);
	}

	public void removeActionListener(ActionListener listener) {
		listenerList.remove(ActionListener.class, listener);
	}

	protected void fireActionPerformed(ActionEvent event) {
		Object[] listeners = listenerList.getListenerList();
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ActionListener.class) {
				((ActionListener) listeners[i + 1]).actionPerformed(event);
			}
		}
	}
}