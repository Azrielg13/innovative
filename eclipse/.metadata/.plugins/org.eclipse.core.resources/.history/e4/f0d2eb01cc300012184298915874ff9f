package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.UnitCostDetail;
import com.sce.esp.object.model.UnitCostDetailYear;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class UnitCostDetailYearDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{UNIT_COST_DETAIL_ID,OFFSET_YEAR};
	public static enum PROPERTY{UNIT_COST_DETAIL_ID,OFFSET_YEAR,COST_FACTOR};
	public final static int UNITCOSTDETAILID_LIMIT = 9;
	public final static int OFFSETYEAR_LIMIT = 4;
	public final static int COSTFACTOR_LIMIT = 24;
	private int unitCostDetailId;
	private int offsetYear;
	private double costFactor;
	private UnitCostDetail unitCostDetail;
	public static UnitCostDetailYear getInstance(int unitCostDetailId, int offsetYear)throws java.sql.SQLException{
		return getInstance(unitCostDetailId, offsetYear, true);
	}
	public static UnitCostDetailYear getInstance(int unitCostDetailId, int offsetYear, boolean fetch)throws java.sql.SQLException{
		if(isNull(unitCostDetailId, offsetYear))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(unitCostDetailId, offsetYear);
		Cache cache = em.getEntityManagerFactory().getCache();
		UnitCostDetailYear o = null;
		if(cache != null && cache.contains(UnitCostDetailYear.class, pk))
			o = em.find(UnitCostDetailYear.class, pk);
		if(o==null && getAICache().contains(UnitCostDetailYear.class, pk))
			o = getAICache().find(UnitCostDetailYear.class, pk);
		if(o==null && fetch)
			o = em.find(UnitCostDetailYear.class, pk);
		if(o==null && fetch && UnitCostDetailYear.class.getAnnotation(AutoInsertable.class) != null){
			o = new UnitCostDetailYear(unitCostDetailId, offsetYear);
			getAICache().cache(UnitCostDetailYear.class, o);
		}
		return o;
	}
	public static Collection<UnitCostDetailYear> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<UnitCostDetailYear> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<UnitCostDetailYear> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM UnitCostDetailYear o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<UnitCostDetailYear> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<UnitCostDetailYear> tq = em.createQuery(jpql,UnitCostDetailYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<UnitCostDetailYear> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<UnitCostDetailYear> tq = em.createNamedQuery(name,UnitCostDetailYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public UnitCostDetailYearDAO(){}
	public UnitCostDetailYearDAO(int unitCostDetailId, int offsetYear){
		this.unitCostDetailId=unitCostDetailId;
		this.offsetYear=offsetYear;
	}
	public UnitCostDetailYearDAO(UnitCostDetailYearDAO orig){
		super(orig);
		this.unitCostDetailId=orig.getUnitCostDetailId();
		this.offsetYear=orig.getOffsetYear();
		copyFrom(orig);
	}
	public void copyFrom(UnitCostDetailYearDAO orig){
		this.costFactor=orig.getCostFactor();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{unitCostDetailId, offsetYear};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="UNIT_COST_DETAIL_ID",nullable=false,length=9)
	public int getUnitCostDetailId(){
		return unitCostDetailId;
	}
	public void setUnitCostDetailId(int unitCostDetailId) throws java.sql.SQLException{
		if(isSame(unitCostDetailId, getUnitCostDetailId()))return;
		int oldValue = getUnitCostDetailId();
		this.unitCostDetailId=unitCostDetailId;
		setProperty("UNIT_COST_DETAIL_ID", unitCostDetailId, oldValue);
		unitCostDetail=null;
	}
	@Id
	@Column(name="OFFSET_YEAR",nullable=false,length=4)
	public int getOffsetYear(){
		return offsetYear;
	}
	public void setOffsetYear(int offsetYear) throws java.sql.SQLException{
		if(isSame(offsetYear, getOffsetYear()))return;
		int oldValue = getOffsetYear();
		this.offsetYear=offsetYear;
		setProperty("OFFSET_YEAR", offsetYear, oldValue);
	}
	@Column(name="COST_FACTOR",nullable=true,length=24)
	public double getCostFactor(){
		return costFactor;
	}
	public void setCostFactor(double costFactor) throws java.sql.SQLException{
		if(isSame(costFactor, getCostFactor()))return;
		double oldValue = getCostFactor();
		this.costFactor=costFactor;
		setProperty("COST_FACTOR", costFactor, oldValue);
	}
	public UnitCostDetail getUnitCostDetail()throws java.sql.SQLException{
		if(unitCostDetail==null)
			unitCostDetail=UnitCostDetail.getInstance(getUnitCostDetailId());
		return unitCostDetail;
	}
	public void setUnitCostDetail(UnitCostDetail unitCostDetail)throws java.sql.SQLException{
		setUnitCostDetailId(unitCostDetail==null?0:unitCostDetail.getId());
		this.unitCostDetail=unitCostDetail;
	}
	public UnitCostDetailYear copy()throws java.sql.SQLException{
		UnitCostDetailYear cp = new UnitCostDetailYear((UnitCostDetailYear)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(UnitCostDetailYearDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(UnitCostDetailYearDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getUnitCostDetailId(),o.getUnitCostDetailId())) diffs.add("UNIT_COST_DETAIL_ID");
		if(!isSame(getOffsetYear(),o.getOffsetYear())) diffs.add("OFFSET_YEAR");
		if(!isSame(getCostFactor(),o.getCostFactor())) diffs.add("COST_FACTOR");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
