package com.sce.esp.dialog;

import java.awt.BorderLayout; 
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;

import com.jidesoft.grid.SortableTableModel;
import com.jidesoft.swing.JideButton;
import com.sce.esp.component.ESPExpandableRow;
import com.sce.esp.component.ESPFilterTablePanel;
import com.sce.esp.component.ESPTreeTableModel;
import com.sce.esp.log.EspLogger;
import com.sce.esp.util.IconsFactory;
import com.sce.esp.util.db.PDBConnection;
import com.sce.esp.util.db.StatsConnection;
import com.sce.esp.util.db.StatsSQLImp;

public class SuperStatTracker extends JFrame implements ActionListener{
	private static final long serialVersionUID = 1L;
	private JPanel panel;
	private JideButton refreshButton;
	private ESPFilterTablePanel statPanel;
	private String[] colNames;
	private ArrayList<StatRow> list;
	private boolean visible=true;

	public SuperStatTracker() throws SQLException
	{
		createFrame();
		initalize();
		refresh();
		setVisible(true);
		
		new Thread(){
			public void run(){
				while(visible){
					repaint();
					try {
						sleep(250);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		}.start();
	}
	
	public void dispose(){
		EspLogger.message(this, "disposed");
		visible=false;
		super.dispose();
	}
	
	private void createFrame() throws SQLException {
		setIconImage(IconsFactory.getScaledImageIcon("icons/System-Task-Manager.png",16).getImage());
		setTitle("Super Stat Tracker Tool");
		setSize(650, 500);
//		setLocationRelativeTo(null);
		setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	}

	private void initalize() {
		panel = new JPanel(new BorderLayout());
		refreshButton = new JideButton("Refresh", IconsFactory.getImageIcon("icons/refresh_16.png"));
		statPanel = new ESPFilterTablePanel("", "Super Stat Tracker") {
		};
		statPanel.getTopLeftPanel().add(refreshButton); 
		refreshButton.addActionListener(this);
		panel.add(statPanel,BorderLayout.CENTER);
		getContentPane().add(panel);
	}

	public void actionPerformed(ActionEvent e) {
		if(e.getSource()== refreshButton)
			refresh();
	}
	
	

	private void refresh() {
		list = new ArrayList<StatRow>();
		Connection con=null;
		try {
			con = PDBConnection.getInstance().getConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		if(con instanceof StatsConnection)
			for(StatsSQLImp sql:((StatsConnection)con).getTimedSQLStatements())
				list.add(new StatRow(sql));
		colNames = new String[]{"SQLStatement", "Total Time", "Count", "Avg Time", "Max Time", "Min Time"};
		
		statPanel.setModel(new ESPTreeTableModel(list,colNames){
			private static final long serialVersionUID = 1L;
			public int getColumnType(int col) {
				return REGULAR_COLUMN;
			}
			public Class<? extends Object> getColumnClass(int col){
				if(col==0)
					return String.class;
				return Double.class;
			}
		});
		statPanel.getTableScrollPane().getMainTable().getColumnModel().getColumn(0).setMinWidth(280);
		((SortableTableModel)statPanel.getSortableTableModel()).sortColumn(1,true,false);
	}

	private class StatRow extends ESPExpandableRow {
		private StatsSQLImp psc;

		public StatRow(StatsSQLImp sql) {
			this.psc = sql;
		}

		public Object getValueAt(int col) {
			switch(col){
				case 0: return psc.getSQL();
				case 1: return psc.getTotalTime();
				case 2: return psc.getCount();
				case 3: return psc.getAvgTime();
				case 4: return psc.getMaxTime();
				case 5: return psc.getMinTime();
			}
			return null;
		}
	}
}
