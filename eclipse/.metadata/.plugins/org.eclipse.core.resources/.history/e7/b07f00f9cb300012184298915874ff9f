package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.dao.TaskTypeDAO;
@Entity
@Table(schema="MDI",name="MDIT00_TASK_TYPE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM TaskType o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM TaskType o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM TaskType o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByParent", query="SELECT o FROM TaskType o WHERE o.PARENT_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIT00_TASK_TYPE o WHERE o.ID=?"),//AUTO-GENERATED
})
public class TaskType extends TaskTypeDAO{
	@Override
	public String toString() {
		return getName();
	}
	public TaskType(){
	}
	public TaskType(int id){
		super(id);
	}
	public TaskType(TaskType orig){
		super(orig);
	}
	
	public double getShift(DurationType dt) throws SQLException{
		switch(dt){
			case Hours: return getShift()*24;
			case WorkHours: return getShift(DurationType.WorkDays)*8;
			case Days: return getShift();
			case WorkDays: int d=(int)getShift(); return d/7*5+d%7;
			case Weeks: return getShift()/7;
			case Months: return getShift()/365.25*12;
			case Years: return getShift()/365.25;
		}
		return -1;
	}
	public void setShift(double d, DurationType dt) throws java.sql.SQLException{
		switch(dt) {
			case Hours: setShift(d/24); break;
			case WorkHours:setShift(d/8,DurationType.WorkDays); break;
			case Days: setShift(d); break;
			case WorkDays: int d2=(int)d; setShift(d2/5*7+d2%5); break;
			case Weeks: setShift(d*7); break;
			case Months: setShift(d*365.25/12); break;
			case Years: setShift(d*365.25); break;
		}
	}
	public double getEstEffort(DurationType dt) throws SQLException {
		switch(dt){
			case Hours: return getEstEffort()*24;
			case WorkHours: return getEstEffort(DurationType.WorkDays)*8;
			case Days: return getEstEffort();
			case WorkDays: int d=(int)getEstEffort(); return d/7*5+d%7;
			case Weeks: return getEstEffort()/7;
			case Months: return getEstEffort()/365.25*12;
			case Years: return getEstEffort()/365.25;
		}
		return -1;
	}
	
	public void setEstEffort(double d, DurationType dt) throws SQLException {
		EspLogger.message(this, d + " - Value passed into setEstEffort -- " + dt);
		switch(dt) {
			case Hours: setEstEffort(d/24); break;
			case WorkHours:setEstEffort(d/8,DurationType.WorkDays); break;
			case Days: setEstEffort(d); break;
			case WorkDays: int d2=(int)d; setEstEffort(d2/5*7+d2%5); break;
			case Weeks: setEstEffort(d*7); break;
			case Months: setEstEffort(d*365.25/12); break;
			case Years: setEstEffort(d*365.25); break;
		}
	}
	
	public double getEstDuration(DurationType dt){
		switch(dt){
			case Hours: return getEstDuration()*24;
			case WorkHours: return getEstDuration(DurationType.WorkDays)*8;
			case Days: return getEstDuration();
			case WorkDays: int d=(int)getEstDuration(); return d/7*5+d%7;
			case Weeks: return getEstDuration()/7;
			case Months: return getEstDuration()/365.25*12;
			case Years: return getEstDuration()/365.25;
		}
		return -1;
	}
	public void setEstDuration(double d, DurationType dt) throws java.sql.SQLException{
		switch(dt) {
			case Hours: setEstDuration(d/24); break;
			case WorkHours:setEstDuration(d/8,DurationType.WorkDays); break;
			case Days: setEstDuration(d); break;
			case WorkDays: int d2=(int)d; setEstDuration(d2/5*7+d2%5); break;
			case Weeks: setEstDuration(d*7); break;
			case Months: setEstDuration(d*365.25/12); break;
			case Years: setEstDuration(d*365.25); break;
		}
	}
	
	@Override
	public double getPercentComp() {
		return 0;
	}
	@Override
	public Collection<TaskType> getChildTasks()throws SQLException {
		return super.getTaskTypes();
	}
	@Override
	public Collection<? extends AbstractTask<?>> getPredTasks()throws SQLException {
		return new TreeSet<AbstractTask<?>>();
	}
	@Override
	public Collection<? extends AbstractRelation> getPreds()throws SQLException {
		return new TreeSet<AbstractRelation>();
	}
	@Override
	public Collection<? extends AbstractRelation> getSuccs()throws SQLException {
		return new TreeSet<AbstractRelation>();
	}
	@Override
	public AbstractRelation addPred(AbstractTask<?> task, int relation)throws SQLException {
		return null;
	}
	@Override
	public TaskType getTaskType() throws SQLException {
		return this;
	}
	@Override
	public void setTaskType(TaskType tt) throws SQLException {
	}
	@Override
	public Schedulable getSchedulable() throws SQLException {
		return null;
	}
	@Override
	public void setSchedulable(Schedulable s) throws SQLException {
	}
	@Override
	public TtResource getNewResource() {
		return new TtResource();
	}
	@Override
	public void setParent(AbstractTask<TtResource> at) throws SQLException {
		// TODO Auto-generated method stub
	}
}
