/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.prefs;

import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;

/**
 * wrapper for java.util.prefs
 * 
 * @author Distribution Staff Engineering
 */
public class ESPPreferences extends AbstractPreferencesOption {
    
    /** The instance. */
    private static ESPPreferences instance;       // The single instance
    
    /** The Constant PREFERENCES_NODE. */
    public static final String PREFERENCES_NODE = PreferencesOption.ROOT_NODE ;
    
    /** TOTD. */
    public static final String TOTD_KEY = "totd";
    
    /** PROXY. */
    public static final String PROXY_KEY = "use_proxy_fix_by_kate";    
    public static final String PROXY_LOC_KEY = "proxy_loc";
    public static final String PROXY_PORT_KEY = "proxy_port";
    
    /** IWP Frame. */
    public static final String IWP_FRAME_KEY = "iwp_frame"; 
    public static final int GADGET_FRAME = 0;
    public static final int TABBED_FRAME = 1;
    
    /**Peak Gatherer*/
    public static final String eDNA_AUTO_GATHERER = "eDNA_auto_peak_gatherer";
    
	/**Keys for HST frame's preferences*/
	public static final String WINDOW_X_KEY = "HST_TEST_WINDOW_X";
	public static final String WINDOW_Y_KEY = "HST_TEST_WINDOW_Y";
	public static final String WINDOW_WIDTH_KEY = "HST_TEST_WINDOW_WIDTH";
	public static final String WINDOW_HEIGHT_KEY = "HST_TEST_WINDOW_HEIGHT";  
	
	//Default values for HST frame's preferences
	public static final int DEFAULT_WINDOW_X = 50;
	public static final int DEFAULT_WINDOW_Y = 50;
	public static final int DEFAULT_WINDOW_WIDTH = 1024;
	public static final int DEFAULT_WINDOW_HEIGHT = 768;
    
    /** The value map. */
    private Map<String,Object> valueMap;
    
    /**
     * Returns the single instance, creating one if it's the
     * first time this method is called.
     * 
     * @return Preferences The single instance.
     */
    static synchronized public ESPPreferences getInstance() {
        if (instance == null) {
            instance = new ESPPreferences();
        }
        return instance;
    }
    
    /**
     * Creates a new instance of Preferences.
     */
    private ESPPreferences() {
        valueMap = new HashMap<String,Object>();
        load();
    }
    
    /**
     * {@inheritDoc}.
     */
    public void load() {
        Preferences prefs = Preferences.userRoot().node(PREFERENCES_NODE);       
        valueMap.put(TOTD_KEY,new Boolean(prefs.getBoolean(TOTD_KEY, true)));
        valueMap.put(PROXY_KEY,new Boolean(prefs.getBoolean(PROXY_KEY, false)));
        valueMap.put(PROXY_LOC_KEY,new String(prefs.get(PROXY_LOC_KEY,"proxy4.sce.com")));
        valueMap.put(PROXY_PORT_KEY,new String(prefs.get(PROXY_PORT_KEY,"80")));
        
        valueMap.put(IWP_FRAME_KEY,new Integer(prefs.getInt(IWP_FRAME_KEY,TABBED_FRAME)));
        
        
        valueMap.put(eDNA_AUTO_GATHERER,new Boolean(prefs.getBoolean(eDNA_AUTO_GATHERER, true)));
        
        //HST Frame
        valueMap.put(WINDOW_X_KEY, new Integer(prefs.getInt(WINDOW_X_KEY, DEFAULT_WINDOW_X)));
        valueMap.put(WINDOW_Y_KEY, new Integer(prefs.getInt(WINDOW_Y_KEY, DEFAULT_WINDOW_Y)));
        valueMap.put(WINDOW_WIDTH_KEY, new Integer(prefs.getInt(WINDOW_WIDTH_KEY, DEFAULT_WINDOW_WIDTH)));
        valueMap.put(WINDOW_HEIGHT_KEY, new Integer(prefs.getInt(WINDOW_HEIGHT_KEY, DEFAULT_WINDOW_HEIGHT)));        
    }
    
    /**
     * {@inheritDoc}.
     */
    public void save() {
        java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userRoot().node(PREFERENCES_NODE);
        prefs.putBoolean(TOTD_KEY, ((Boolean)valueMap.get(TOTD_KEY)).booleanValue());
        prefs.putBoolean(PROXY_KEY, ((Boolean)valueMap.get(PROXY_KEY)).booleanValue());
        prefs.put(PROXY_LOC_KEY, getString(PROXY_LOC_KEY));
        prefs.put(PROXY_PORT_KEY, getString(PROXY_PORT_KEY));
        prefs.putInt(IWP_FRAME_KEY, getInt(IWP_FRAME_KEY));
        prefs.putBoolean(eDNA_AUTO_GATHERER, ((Boolean)valueMap.get(eDNA_AUTO_GATHERER)).booleanValue());
        prefs.putInt(WINDOW_X_KEY, getInt(WINDOW_X_KEY));
        prefs.putInt(WINDOW_Y_KEY, getInt(WINDOW_Y_KEY));
        prefs.putInt(WINDOW_WIDTH_KEY, getInt(WINDOW_WIDTH_KEY));
        prefs.putInt(WINDOW_HEIGHT_KEY, getInt(WINDOW_HEIGHT_KEY));
    }
    
    /**
     * Put string.
     * 
     * @param key the key
     * @param value the value
     */
    public void putString(String key, String value) {
        valueMap.put(key,value);
    }
    
    /**
     * Put boolean.
     * 
     * @param key the key
     * @param value the value
     */
    public void putBoolean(String key, boolean value) {
        valueMap.put(key,new Boolean(value));
    }
    
    /**
     * Put double.
     * 
     * @param key the key
     * @param value the value
     */
    public void putDouble(String key, double value) {
        valueMap.put(key,new Double(value));
    }
    
    /**
     * Gets the string.
     * 
     * @param key the key
     * 
     * @return the string
     */
    public String getString(String key) {
        return (String)valueMap.get(key);
    }
    
    /**
     * Gets the boolean.
     * 
     * @param key the key
     * 
     * @return the boolean
     */
    public boolean getBoolean(String key) {
        return ((Boolean)valueMap.get(key)).booleanValue();
    }
    
    /**
     * Gets the double.
     * 
     * @param key the key
     * 
     * @return the double
     */
    public double getDouble(String key) {
        return ((Double)valueMap.get(key)).doubleValue();
    }
    
    /**
     * 
     * @param key
     * @return
     */
    public int getInt(String key){
    	return ((Integer)valueMap.get(key)).intValue();
    }
    
    public void putInt(String key, int value){
    	valueMap.put(key, value);
    }
    
    /**
     * Put byte array.
     * 
     * @param key the key
     * @param byteArray the byte array
     */
    public void putByteArray(String key, byte[] byteArray) {
        valueMap.put(key, byteArray);
    }
    
    /**
     * Gets the byte array.
     * 
     * @param key the key
     * 
     * @return the byte array
     */
    public byte[] getByteArray(String key) {
        return (byte[])valueMap.get(key);
    }
}
