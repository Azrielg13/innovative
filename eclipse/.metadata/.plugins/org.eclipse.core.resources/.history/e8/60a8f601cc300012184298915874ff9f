package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Elem;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.Proj;
import com.sce.esp.object.model.ProjElem;
import com.sce.esp.object.model.ProjElemCost;
import com.sce.esp.object.model.Simulation;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ProjElemDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SIM_ID,PROJ_ID,ELEM_ID};
	public static enum PROPERTY{PLANYEAR,SIM_ID,PROJ_ID,ELEM_ID,ACTIVE_STAGE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SIMID_LIMIT = 9;
	public final static int PROJID_LIMIT = 9;
	public final static int ELEMID_LIMIT = 9;
	public final static int ACTIVESTAGE_LIMIT = 2;
	private ProjElem ptr;
	private int planyear;
	private int simId;
	private int projId;
	private int elemId;
	private int activeStage = 4;
	private Collection<ProjElemCost> projElemCosts;
	private Elem elem;
	private Proj proj;
	public static ProjElem getInstance(int planyear, int simId, int projId, int elemId)throws java.sql.SQLException{
		return getInstance(planyear, simId, projId, elemId, true);
	}
	public static ProjElem getInstance(int planyear, int simId, int projId, int elemId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, projId, elemId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, simId, projId, elemId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ProjElem o = null;
		if(cache != null && cache.contains(ProjElem.class, pk))
			o = em.find(ProjElem.class, pk);
		if(o==null && getAICache().contains(ProjElem.class, pk))
			o = getAICache().find(ProjElem.class, pk);
		if(o==null && fetch)
			o = em.find(ProjElem.class, pk);
		if(o==null && fetch && ProjElem.class.getAnnotation(AutoInsertable.class) != null){
			o = new ProjElem(planyear, simId, projId, elemId);
			getAICache().cache(ProjElem.class, o);
			o.setPtr();
		}
		return o;
	}
	public static Collection<ProjElem> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ProjElem> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ProjElem> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ProjElem o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ProjElem> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjElem> tq = em.createQuery(jpql,ProjElem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ProjElem> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ProjElem> tq = em.createNamedQuery(name,ProjElem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ProjElemDAO(){}
	public ProjElemDAO(int planyear, int simId, int projId, int elemId){
		this.planyear=planyear;
		this.simId=simId;
		this.projId=projId;
		this.elemId=elemId;
	}
	public ProjElemDAO(ProjElemDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		this.simId=orig.getSimId();
		this.projId=orig.getProjId();
		this.elemId=orig.getElemId();
		copyFrom(orig);
	}
	public void copyFrom(ProjElemDAO orig){
		this.activeStage=orig.getActiveStage();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, simId, projId, elemId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	public ProjElem getPtr(){
		return ptr;
	}
	public void setPtr(ProjElem ptr){
		if(this.ptr!=null)this.ptr.removeWatcher(this);
		this.ptr=ptr;
		if(ptr!=null)ptr.addWatcher(this);
	}
	public void setPtr()throws java.sql.SQLException{
		if(getSimId()==0)return;
		int bs=0;
		Simulation sim = Simulation.getInstance(getPlanyear(),getSimId());
		if(sim != null)
			bs = sim.getBaseSimId();
		setPtr(getInstance(getPlanyear(), bs, getProjId(), getElemId()));
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@Column(name="SIM_ID",nullable=false,length=9)
	public int getSimId(){
		return simId;
	}
	public void setSimId(int simId) throws java.sql.SQLException{
		if(isSame(simId, getSimId()))return;
		int oldValue = getSimId();
		this.simId=simId;
		setProperty("SIM_ID", simId, oldValue);
	}
	@Id
	@Column(name="PROJ_ID",nullable=false,length=9)
	public int getProjId(){
		return projId;
	}
	public void setProjId(int projId) throws java.sql.SQLException{
		if(isSame(projId, getProjId()))return;
		int oldValue = getProjId();
		this.projId=projId;
		setProperty("PROJ_ID", projId, oldValue);
		proj=null;
	}
	@Id
	@Column(name="ELEM_ID",nullable=false,length=9)
	public int getElemId(){
		return elemId;
	}
	public void setElemId(int elemId) throws java.sql.SQLException{
		if(isSame(elemId, getElemId()))return;
		int oldValue = getElemId();
		this.elemId=elemId;
		setProperty("ELEM_ID", elemId, oldValue);
		elem=null;
	}
	@Column(name="ACTIVE_STAGE",nullable=true,length=2)
	public int getActiveStage(){
		if(getPtr()!=null)
			return getPtr().getActiveStage();
		return activeStage;
	}
	public void setActiveStage(int activeStage) throws java.sql.SQLException{
		if(isSame(activeStage, getActiveStage()))return;
		if(getPtr()!=null){
			copyFrom(getPtr());
			setPtr(null);
		}
		int oldValue = getActiveStage();
		this.activeStage=activeStage;
		setProperty("ACTIVE_STAGE", activeStage, oldValue);
	}
	public Elem getElem()throws java.sql.SQLException{
		if(elem==null)
			elem=Elem.getInstance(getPlanyear(), getElemId());
		return elem;
	}
	public void setElem(Elem elem)throws java.sql.SQLException{
		setElemId(elem==null?0:elem.getElemId());
		this.elem=elem;
	}
	public Proj getProj()throws java.sql.SQLException{
		if(proj==null)
			proj=Proj.getInstance(getPlanyear(), getSimId(), getProjId());
		return proj;
	}
	public void setProj(Proj proj)throws java.sql.SQLException{
		setProjId(proj==null?0:proj.getProjId());
		this.proj=proj;
	}
	public Collection<ProjElemCost> getProjElemCosts()throws java.sql.SQLException{
		if(isNewInstance() || projElemCosts != null){
			if(projElemCosts == null)
				projElemCosts = new TreeSet<ProjElemCost>();
			return projElemCosts;
		}
		return ProjElemCost.getNamedCollection("findByProjElem",getPlanyear(), getSimId(), getProjId(), getElemId());
	}
	public void addProjElemCost(ProjElemCost projElemCost)throws java.sql.SQLException{
		projElemCost.setProjElem((ProjElem)this);
		if(isNewInstance() || projElemCosts != null)
			getProjElemCosts().add(projElemCost);
		else
			projElemCost.insert();
	}
	public void removeProjElemCost(ProjElemCost projElemCost)throws java.sql.SQLException{
		if(isNewInstance() || projElemCosts != null)
			getProjElemCosts().remove(projElemCost);
		else
			projElemCost.delete();
	}
	public ProjElem copy()throws java.sql.SQLException{
		ProjElem cp = new ProjElem((ProjElem)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ProjElemDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(ProjElemCost child:getProjElemCosts())
			cp.addProjElemCost(child.copy());
	}
	public Vector<String> getDifference(ProjElemDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getSimId(),o.getSimId())) diffs.add("SIM_ID");
		if(!isSame(getProjId(),o.getProjId())) diffs.add("PROJ_ID");
		if(!isSame(getElemId(),o.getElemId())) diffs.add("ELEM_ID");
		if(!isSame(getActiveStage(),o.getActiveStage())) diffs.add("ACTIVE_STAGE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(projElemCosts != null){
			for(ProjElemCost projElemCost:getProjElemCosts()){
				if(projElemCost.isNewInstance())
					projElemCost.setProjElem((ProjElem)this);
				projElemCost.insert();
			}
			projElemCosts = null;
		}
	}
}
