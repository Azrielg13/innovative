package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AbstractTask;
import com.sce.esp.object.model.Schedule;
import com.sce.esp.object.model.ScheduleTask;
import com.sce.esp.object.model.StRelation;
import com.sce.esp.object.model.StResource;
import com.sce.esp.object.model.TaskType;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ScheduleTaskDAO extends AbstractTask<StResource>{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,SCHEDULE_ID,TASK_ID,NAME,DESCRIPTION,PARENT_ID,EST_EFFORT,SHIFT,EST_DURATION,DELIVERABLE,PERF_CRIT,DATA};
	public final static int ID_LIMIT = 9;
	public final static int SCHEDULEID_LIMIT = 9;
	public final static int TASKID_LIMIT = 9;
	public final static int NAME_LIMIT = 64;
	public final static int DESCRIPTION_LIMIT = 512;
	public final static int PARENTID_LIMIT = 9;
	public final static int ESTEFFORT_LIMIT = 24;
	public final static int SHIFT_LIMIT = 24;
	public final static int ESTDURATION_LIMIT = 24;
	public final static int DELIVERABLE_LIMIT = 256;
	public final static int PERFCRIT_LIMIT = 256;
	public final static int DATA_LIMIT = 2048;
	private int id;
	private int scheduleId;
	private int taskId;
	private String name;
	private String description;
	private int parentId;
	private double estEffort;
	private double shift;
	private double estDuration;
	private String deliverable;
	private String perfCrit;
	private String data;
	private Collection<ScheduleTask> childTasks;
	private Collection<StRelation> preds;
	private Collection<StRelation> succs;
	private Collection<StResource> resources;
	private Schedule schedule;
	private TaskType taskType;
	private ScheduleTask parent;
	public static ScheduleTask getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static ScheduleTask getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		ScheduleTask o = null;
		if(cache != null && cache.contains(ScheduleTask.class, pk))
			o = em.find(ScheduleTask.class, pk);
		if(o==null && getAICache().contains(ScheduleTask.class, pk))
			o = getAICache().find(ScheduleTask.class, pk);
		if(o==null && fetch)
			o = em.find(ScheduleTask.class, pk);
		if(o==null && fetch && ScheduleTask.class.getAnnotation(AutoInsertable.class) != null){
			o = new ScheduleTask(id);
			getAICache().cache(ScheduleTask.class, o);
		}
		return o;
	}
	public static Collection<ScheduleTask> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ScheduleTask> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ScheduleTask> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ScheduleTask o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ScheduleTask> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScheduleTask> tq = em.createQuery(jpql,ScheduleTask.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ScheduleTask> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScheduleTask> tq = em.createNamedQuery(name,ScheduleTask.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ScheduleTaskDAO(){}
	public ScheduleTaskDAO(int id){
		this.id=id;
	}
	public ScheduleTaskDAO(ScheduleTaskDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ScheduleTaskDAO orig){
		this.scheduleId=orig.getScheduleId();
		this.taskId=orig.getTaskId();
		this.name=orig.getName();
		this.description=orig.getDescription();
		this.parentId=orig.getParentId();
		this.estEffort=orig.getEstEffort();
		this.shift=orig.getShift();
		this.estDuration=orig.getEstDuration();
		this.deliverable=orig.getDeliverable();
		this.perfCrit=orig.getPerfCrit();
		this.data=orig.getData();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT22_SEQ",sequenceName="MDIT22_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="SCHEDULE_ID",nullable=false,length=9)
	public int getScheduleId(){
		return scheduleId;
	}
	public void setScheduleId(int scheduleId) throws java.sql.SQLException{
		if(isSame(scheduleId, getScheduleId()))return;
		int oldValue = getScheduleId();
		this.scheduleId=scheduleId;
		setProperty("SCHEDULE_ID", scheduleId, oldValue);
		schedule=null;
	}
	@Column(name="TASK_ID",nullable=false,length=9)
	public int getTaskId(){
		return taskId;
	}
	public void setTaskId(int taskId) throws java.sql.SQLException{
		if(isSame(taskId, getTaskId()))return;
		int oldValue = getTaskId();
		this.taskId=taskId;
		setProperty("TASK_ID", taskId, oldValue);
		taskType=null;
	}
	@Column(name="NAME",nullable=false,length=64)
	public String getName(){
		return name;
	}
	public void setName(String name) throws java.sql.SQLException{
		if(isSame(name, getName()))return;
		String oldValue = getName();
		this.name=name;
		setProperty("NAME", name, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=512)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="PARENT_ID",nullable=true,length=9)
	public int getParentId(){
		return parentId;
	}
	public void setParentId(int parentId) throws java.sql.SQLException{
		if(isSame(parentId, getParentId()))return;
		int oldValue = getParentId();
		this.parentId=parentId;
		setProperty("PARENT_ID", parentId, oldValue);
		parent=null;
	}
	@Column(name="EST_EFFORT",nullable=true,length=24)
	public double getEstEffort(){
		return estEffort;
	}
	public void setEstEffort(double estEffort) throws java.sql.SQLException{
		if(isSame(estEffort, getEstEffort()))return;
		double oldValue = getEstEffort();
		this.estEffort=estEffort;
		setProperty("EST_EFFORT", estEffort, oldValue);
	}
	@Column(name="SHIFT",nullable=true,length=24)
	public double getShift(){
		return shift;
	}
	public void setShift(double shift) throws java.sql.SQLException{
		if(isSame(shift, getShift()))return;
		double oldValue = getShift();
		this.shift=shift;
		setProperty("SHIFT", shift, oldValue);
	}
	@Column(name="EST_DURATION",nullable=true,length=24)
	public double getEstDuration(){
		return estDuration;
	}
	public void setEstDuration(double estDuration) throws java.sql.SQLException{
		if(isSame(estDuration, getEstDuration()))return;
		double oldValue = getEstDuration();
		this.estDuration=estDuration;
		setProperty("EST_DURATION", estDuration, oldValue);
	}
	@Column(name="DELIVERABLE",nullable=true,length=256)
	public String getDeliverable(){
		return deliverable;
	}
	public void setDeliverable(String deliverable) throws java.sql.SQLException{
		if(isSame(deliverable, getDeliverable()))return;
		String oldValue = getDeliverable();
		this.deliverable=deliverable;
		setProperty("DELIVERABLE", deliverable, oldValue);
	}
	@Column(name="PERF_CRIT",nullable=true,length=256)
	public String getPerfCrit(){
		return perfCrit;
	}
	public void setPerfCrit(String perfCrit) throws java.sql.SQLException{
		if(isSame(perfCrit, getPerfCrit()))return;
		String oldValue = getPerfCrit();
		this.perfCrit=perfCrit;
		setProperty("PERF_CRIT", perfCrit, oldValue);
	}
	@Column(name="DATA",nullable=true,length=2048)
	public String getData(){
		return data;
	}
	public void setData(String data) throws java.sql.SQLException{
		if(isSame(data, getData()))return;
		String oldValue = getData();
		this.data=data;
		setProperty("DATA", data, oldValue);
	}
	public Schedule getSchedule()throws java.sql.SQLException{
		if(schedule==null)
			schedule=Schedule.getInstance(getScheduleId());
		return schedule;
	}
	public void setSchedule(Schedule schedule)throws java.sql.SQLException{
		setScheduleId(schedule==null?0:schedule.getScheduleId());
		this.schedule=schedule;
	}
	public TaskType getTaskType()throws java.sql.SQLException{
		if(taskType==null)
			taskType=TaskType.getInstance(getTaskId());
		return taskType;
	}
	public void setTaskType(TaskType taskType)throws java.sql.SQLException{
		setTaskId(taskType==null?0:taskType.getId());
		this.taskType=taskType;
	}
	public ScheduleTask getParent()throws java.sql.SQLException{
		if(parent==null)
			parent=ScheduleTask.getInstance(getParentId());
		return parent;
	}
	public void setParent(ScheduleTask parent)throws java.sql.SQLException{
		setParentId(parent==null?0:parent.getId());
		this.parent=parent;
	}
	public Collection<ScheduleTask> getChildTasks()throws java.sql.SQLException{
		if(isNewInstance() || childTasks != null){
			if(childTasks == null)
				childTasks = new TreeSet<ScheduleTask>();
			return childTasks;
		}
		return ScheduleTask.getNamedCollection("findByParent",getId());
	}
	public void addChildTask(ScheduleTask childTask)throws java.sql.SQLException{
		childTask.setParent((ScheduleTask)this);
		if(isNewInstance() || childTasks != null)
			getChildTasks().add(childTask);
		else
			childTask.insert();
	}
	public void removeChildTask(ScheduleTask childTask)throws java.sql.SQLException{
		if(isNewInstance() || childTasks != null)
			getChildTasks().remove(childTask);
		else
			childTask.delete();
	}
	public Collection<StRelation> getPreds()throws java.sql.SQLException{
		if(isNewInstance() || preds != null){
			if(preds == null)
				preds = new TreeSet<StRelation>();
			return preds;
		}
		return StRelation.getNamedCollection("findBySuccTask",getId());
	}
	public void addPred(StRelation pred)throws java.sql.SQLException{
		pred.setSuccTask((ScheduleTask)this);
		if(isNewInstance() || preds != null)
			getPreds().add(pred);
		else
			pred.insert();
	}
	public void removePred(StRelation pred)throws java.sql.SQLException{
		if(isNewInstance() || preds != null)
			getPreds().remove(pred);
		else
			pred.delete();
	}
	public Collection<StRelation> getSuccs()throws java.sql.SQLException{
		if(isNewInstance() || succs != null){
			if(succs == null)
				succs = new TreeSet<StRelation>();
			return succs;
		}
		return StRelation.getNamedCollection("findByPredTask",getId());
	}
	public void addSucc(StRelation succ)throws java.sql.SQLException{
		succ.setPredTask((ScheduleTask)this);
		if(isNewInstance() || succs != null)
			getSuccs().add(succ);
		else
			succ.insert();
	}
	public void removeSucc(StRelation succ)throws java.sql.SQLException{
		if(isNewInstance() || succs != null)
			getSuccs().remove(succ);
		else
			succ.delete();
	}
	public Collection<StResource> getResources()throws java.sql.SQLException{
		if(isNewInstance() || resources != null){
			if(resources == null)
				resources = new TreeSet<StResource>();
			return resources;
		}
		return StResource.getNamedCollection("findByScheduleTask",getId());
	}
	public void addResource(StResource resource)throws java.sql.SQLException{
		resource.setScheduleTask((ScheduleTask)this);
		if(isNewInstance() || resources != null)
			getResources().add(resource);
		else
			resource.insert();
	}
	public void removeResource(StResource resource)throws java.sql.SQLException{
		if(isNewInstance() || resources != null)
			getResources().remove(resource);
		else
			resource.delete();
	}
	public ScheduleTask copy()throws java.sql.SQLException{
		ScheduleTask cp = new ScheduleTask((ScheduleTask)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ScheduleTaskDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(ScheduleTask child:getChildTasks())
			cp.addChildTask(child.copy());
		for(StRelation child:getPreds())
			cp.addPred(child.copy());
		for(StRelation child:getSuccs())
			cp.addSucc(child.copy());
		for(StResource child:getResources())
			cp.addResource(child.copy());
	}
	public Vector<String> getDifference(ScheduleTaskDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getScheduleId(),o.getScheduleId())) diffs.add("SCHEDULE_ID");
		if(!isSame(getTaskId(),o.getTaskId())) diffs.add("TASK_ID");
		if(!isSame(getName(),o.getName())) diffs.add("NAME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getParentId(),o.getParentId())) diffs.add("PARENT_ID");
		if(!isSame(getEstEffort(),o.getEstEffort())) diffs.add("EST_EFFORT");
		if(!isSame(getShift(),o.getShift())) diffs.add("SHIFT");
		if(!isSame(getEstDuration(),o.getEstDuration())) diffs.add("EST_DURATION");
		if(!isSame(getDeliverable(),o.getDeliverable())) diffs.add("DELIVERABLE");
		if(!isSame(getPerfCrit(),o.getPerfCrit())) diffs.add("PERF_CRIT");
		if(!isSame(getData(),o.getData())) diffs.add("DATA");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(schedule != null && schedule.isNewInstance())
				schedule.insert();
		if(taskType != null && taskType.isNewInstance())
				taskType.insert();
		if(parent != null && parent.isNewInstance())
				parent.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(childTasks != null){
			for(ScheduleTask childTask:getChildTasks())
				childTask.setParent((ScheduleTask)this);
		}
		if(preds != null){
			for(StRelation pred:getPreds())
				pred.setSuccTask((ScheduleTask)this);
		}
		if(succs != null){
			for(StRelation succ:getSuccs())
				succ.setPredTask((ScheduleTask)this);
		}
		if(resources != null){
			for(StResource resource:getResources())
				resource.setScheduleTask((ScheduleTask)this);
		}
		if(childTasks != null){
			for(ScheduleTask childTask:getChildTasks())
				if(childTask.isNewInstance())
					childTask.insert();
			childTasks = null;
		}
		if(preds != null){
			for(StRelation pred:getPreds())
				if(pred.isNewInstance())
					pred.insert();
			preds = null;
		}
		if(succs != null){
			for(StRelation succ:getSuccs())
				if(succ.isNewInstance())
					succ.insert();
			succs = null;
		}
		if(resources != null){
			for(StResource resource:getResources())
				if(resource.isNewInstance())
					resource.insert();
			resources = null;
		}
	}
}
