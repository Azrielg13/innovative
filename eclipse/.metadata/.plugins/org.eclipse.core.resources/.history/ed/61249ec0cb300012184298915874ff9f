/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.component;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.colorchooser.AbstractColorChooserPanel;
import javax.swing.table.TableCellEditor;

/**
 * The Class ColorEditor.
 * 
 * @author Distribution Staff Engineering
 */
public class ColorEditor extends AbstractCellEditor
		implements
			TableCellEditor,
			ActionListener {

	/**
	 * 
	 */
	private static final long serialVersionUID = 8644157740530252304L;

	/** The current color. */
	protected Color currentColor;

	/** The button. */
	protected JButton button;

	/** The color chooser. */
	protected JColorChooser colorChooser;

	/** The dialog. */
	protected JDialog dialog;

	/** The Constant EDIT. */
	protected static final String EDIT = "edit";

	/**
	 * The Constructor.
	 */
	public ColorEditor() {
		// Set up the editor (from the table's point of view),
		// which is a button.
		// This button brings up the color chooser dialog,
		// which is the editor from the user's point of view.
		button = new JButton();
		button.setActionCommand(EDIT);
		button.addActionListener(this);
		button.setBorderPainted(false);

		// Set up the dialog that the button brings up.
		colorChooser = new JColorChooser();
		// allow selection only through color swatches
		AbstractColorChooserPanel[] accp = colorChooser.getChooserPanels();
		AbstractColorChooserPanel[] swatch = new AbstractColorChooserPanel[1];
		for (int i = 0; i < accp.length; i++) {
			if (accp[i]
					.getClass()
					.getName()
					.equals("javax.swing.colorchooser.DefaultSwatchChooserPanel")) {
				swatch[0] = accp[i];
				break;
			}
		}
		colorChooser.setChooserPanels(swatch);
		dialog = JColorChooser.createDialog(button, "Pick a Color", true,
				colorChooser, this, null);
	}

	/**
	 * Handles events from the editor button and from the dialog's OK button.
	 * 
	 * @param e
	 *            the e
	 */
	public void actionPerformed(ActionEvent e) {
		if (EDIT.equals(e.getActionCommand())) {
			// The user has clicked the cell, so
			// bring up the dialog.
			button.setBackground(currentColor);
			colorChooser.setColor(currentColor);
			dialog.setVisible(true);

			// Make the renderer reappear.
			fireEditingStopped();

		} else { // User pressed dialog's "OK" button.
			currentColor = colorChooser.getColor();
		}
	}

	// Implement the one CellEditor method that AbstractCellEditor doesn't.
	/**
	 * Gets the cell editor value.
	 * 
	 * @return the cell editor value
	 */
	public Object getCellEditorValue() {
		return currentColor;
	}

	// Implement the one method defined by TableCellEditor.
	/**
	 * Gets the table cell editor component.
	 * 
	 * @param isSelected
	 *            the is selected
	 * @param value
	 *            the value
	 * @param column
	 *            the column
	 * @param table
	 *            the table
	 * @param row
	 *            the row
	 * 
	 * @return the table cell editor component
	 */
	public Component getTableCellEditorComponent(JTable table, Object value,
			boolean isSelected, int row, int column) {
		currentColor = (Color) value;
		return button;
	}
}