package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.AgObject;
import com.sce.esp.object.model.District;
import com.sce.esp.object.model.PifWo;
import com.sce.esp.object.model.PqTroubleLog;
import com.sce.esp.object.model.Region;
import com.sce.esp.object.model.Sub;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class DistrictDAO extends AgObject{
	public static enum KEY_PROPERTY{PLANYEAR,DISTRICT_ID};
	public static enum PROPERTY{PLANYEAR,DISTRICT_ID,REGION_ID,DISTRICT_NUM,DISTRICT_NAME,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int DISTRICTID_LIMIT = 9;
	public final static int REGIONID_LIMIT = 9;
	public final static int DISTRICTNUM_LIMIT = 3;
	public final static int DISTRICTNAME_LIMIT = 20;
	private int planyear;
	private int districtId;
	private int regionId;
	private int districtNum;
	private String districtName;
	private Collection<PifWo> pifWos;
	private Collection<PqTroubleLog> pqTroubleLogs;
	private Collection<Sub> subs;
	private Region region;
	public static District getInstance(int planyear, int districtId)throws java.sql.SQLException{
		return getInstance(planyear, districtId, true);
	}
	public static District getInstance(int planyear, int districtId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, districtId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, districtId);
		Cache cache = em.getEntityManagerFactory().getCache();
		District o = null;
		if(cache != null && cache.contains(District.class, pk))
			o = em.find(District.class, pk);
		if(o==null && getAICache().contains(District.class, pk))
			o = getAICache().find(District.class, pk);
		if(o==null && fetch)
			o = em.find(District.class, pk);
		if(o==null && fetch && District.class.getAnnotation(AutoInsertable.class) != null){
			o = new District(planyear, districtId);
			getAICache().cache(District.class, o);
		}
		return o;
	}
	public static Collection<District> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<District> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<District> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM District o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<District> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<District> tq = em.createQuery(jpql,District.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<District> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<District> tq = em.createNamedQuery(name,District.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public DistrictDAO(){}
	public DistrictDAO(int planyear, int districtId){
		this.planyear=planyear;
		this.districtId=districtId;
	}
	public DistrictDAO(DistrictDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(DistrictDAO orig){
		this.regionId=orig.getRegionId();
		this.districtNum=orig.getDistrictNum();
		this.districtName=orig.getDistrictName();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, districtId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI050_SEQ",sequenceName="MDI050_SEQ")
	@Column(name="DISTRICT_ID",nullable=false,length=9)
	public int getDistrictId(){
		return districtId;
	}
	public void setDistrictId(int districtId) throws java.sql.SQLException{
		if(isSame(districtId, getDistrictId()))return;
		int oldValue = getDistrictId();
		this.districtId=districtId;
		setProperty("DISTRICT_ID", districtId, oldValue);
	}
	@Column(name="REGION_ID",nullable=false,length=9)
	public int getRegionId(){
		return regionId;
	}
	public void setRegionId(int regionId) throws java.sql.SQLException{
		if(isSame(regionId, getRegionId()))return;
		int oldValue = getRegionId();
		this.regionId=regionId;
		setProperty("REGION_ID", regionId, oldValue);
		region=null;
	}
	@Column(name="DISTRICT_NUM",nullable=true,length=3)
	public int getDistrictNum(){
		return districtNum;
	}
	public void setDistrictNum(int districtNum) throws java.sql.SQLException{
		if(isSame(districtNum, getDistrictNum()))return;
		int oldValue = getDistrictNum();
		this.districtNum=districtNum;
		setProperty("DISTRICT_NUM", districtNum, oldValue);
	}
	@Column(name="DISTRICT_NAME",nullable=false,length=20)
	public String getDistrictName(){
		return districtName;
	}
	public void setDistrictName(String districtName) throws java.sql.SQLException{
		if(isSame(districtName, getDistrictName()))return;
		String oldValue = getDistrictName();
		this.districtName=districtName;
		setProperty("DISTRICT_NAME", districtName, oldValue);
	}
	public Region getRegion()throws java.sql.SQLException{
		if(region==null)
			region=Region.getInstance(getPlanyear(), getRegionId());
		return region;
	}
	public void setRegion(Region region)throws java.sql.SQLException{
		setRegionId(region==null?0:region.getRegionId());
		this.region=region;
	}
	public Collection<PifWo> getPifWos()throws java.sql.SQLException{
		if(isNewInstance() || pifWos != null){
			if(pifWos == null)
				pifWos = new TreeSet<PifWo>();
			return pifWos;
		}
		return PifWo.getNamedCollection("findByDistrict",getPlanyear(), getDistrictId());
	}
	public void addPifWo(PifWo pifWo)throws java.sql.SQLException{
		pifWo.setDistrict((District)this);
		if(isNewInstance() || pifWos != null)
			getPifWos().add(pifWo);
		else
			pifWo.insert();
	}
	public void removePifWo(PifWo pifWo)throws java.sql.SQLException{
		if(isNewInstance() || pifWos != null)
			getPifWos().remove(pifWo);
		else
			pifWo.delete();
	}
	public Collection<PqTroubleLog> getPqTroubleLogs()throws java.sql.SQLException{
		if(isNewInstance() || pqTroubleLogs != null){
			if(pqTroubleLogs == null)
				pqTroubleLogs = new TreeSet<PqTroubleLog>();
			return pqTroubleLogs;
		}
		return PqTroubleLog.getNamedCollection("findByDistrict",getPlanyear(), getDistrictId());
	}
	public void addPqTroubleLog(PqTroubleLog pqTroubleLog)throws java.sql.SQLException{
		pqTroubleLog.setDistrict((District)this);
		if(isNewInstance() || pqTroubleLogs != null)
			getPqTroubleLogs().add(pqTroubleLog);
		else
			pqTroubleLog.insert();
	}
	public void removePqTroubleLog(PqTroubleLog pqTroubleLog)throws java.sql.SQLException{
		if(isNewInstance() || pqTroubleLogs != null)
			getPqTroubleLogs().remove(pqTroubleLog);
		else
			pqTroubleLog.delete();
	}
	public Collection<? extends Sub> getSubs()throws java.sql.SQLException{
		if(isNewInstance() || subs != null){
			if(subs == null)
				subs = new TreeSet<Sub>();
			return subs;
		}
		return Sub.getNamedCollection("findByDistrict",getPlanyear(), getDistrictId());
	}
	public void addSub(Sub sub)throws java.sql.SQLException{
		sub.setDistrict((District)this);
		if(isNewInstance() || subs != null)
			//getSubs().add(sub)
			;
		else
			sub.insert();
	}
	public void removeSub(Sub sub)throws java.sql.SQLException{
		if(isNewInstance() || subs != null)
			getSubs().remove(sub);
		else
			sub.delete();
	}
	public District copy()throws java.sql.SQLException{
		District cp = new District((District)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(DistrictDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(PifWo child:getPifWos())
			cp.addPifWo(child.copy());
		for(PqTroubleLog child:getPqTroubleLogs())
			cp.addPqTroubleLog(child.copy());
		for(Sub child:getSubs())
			cp.addSub(child.copy());
	}
	public Vector<String> getDifference(DistrictDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getDistrictId(),o.getDistrictId())) diffs.add("DISTRICT_ID");
		if(!isSame(getRegionId(),o.getRegionId())) diffs.add("REGION_ID");
		if(!isSame(getDistrictNum(),o.getDistrictNum())) diffs.add("DISTRICT_NUM");
		if(!isSame(getDistrictName(),o.getDistrictName())) diffs.add("DISTRICT_NAME");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
		if(pifWos != null){
			for(PifWo pifWo:getPifWos()){
				if(pifWo.isNewInstance())
					pifWo.setDistrict((District)this);
				pifWo.insert();
			}
			pifWos = null;
		}
		if(pqTroubleLogs != null){
			for(PqTroubleLog pqTroubleLog:getPqTroubleLogs()){
				if(pqTroubleLog.isNewInstance())
					pqTroubleLog.setDistrict((District)this);
				pqTroubleLog.insert();
			}
			pqTroubleLogs = null;
		}
		if(subs != null){
			for(Sub sub:getSubs()){
				if(sub.isNewInstance())
					sub.setDistrict((District)this);
				sub.insert();
			}
			subs = null;
		}
	}
}
