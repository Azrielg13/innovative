/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Calendar;


/**
 * This object imposes guidelines for any object that wants the design pattern of an electrical 
 * transformer.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public interface TransformerEquipment extends ModelingObject{

	/**
	 * Gets the base kv.
	 * 
	 * @return the base kv
	 */
	public double getBaseKv();
	
	/**
	 * Gets the base mva.
	 * 
	 * @return the base mva
	 */
	public double getBaseMva();
	
	/**
	 * Gets the impedance.
	 * 
	 * @return the impedance
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getImpedance() throws SQLException;
	
	/**
	 * Gets the nameplate.
	 * 
	 * @return the nameplate
	 * @deprecated Should no longer exist in new model, only set via project
	 */
	public double getNameplate();
	
	/**
	 * Gets the pll percent.
	 * 
	 * @return the pll percent
	 * @deprecated Should no longer exist in new model, only set via project
	 */
	public double getPllPercent();
	
	/**
	 * Gets the ell percent.
	 * 
	 * @return the ell percent
	 * @deprecated Should no longer exist in new model, only set via project
	 */
	public double getEllPercent();
	
	/**
	 * Sets the base kv.
	 * 
	 * @param baseKv the base kv
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setBaseKv(double baseKv) throws SQLException;
	
	/**
	 * Sets the base mva.
	 * 
	 * @param baseMva the base mva
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setBaseMva(double baseMva) throws SQLException;
	
	/**
	 * Sets the impedance.
	 * 
	 * @param impedance the impedance
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setImpedance(double impedance) throws SQLException;
	
	/**
	 * Sets the nameplate.
	 * 
	 * @param nameplate the nameplate
	 * 
	 * @throws SQLException the SQL exception
	 * @deprecated Should no longer exist in new model, only set Xfmr nameplate
	 */
	public void setNameplate(double nameplate) throws SQLException;
	
	/**
	 * Sets the pll percent.
	 * 
	 * @param pllPercent the pll percent
	 * 
	 * @throws SQLException the SQL exception
	 * @deprecated Should no longer exist in new model, only set via project
	 */
	public void setPllPercent(double pllPercent) throws SQLException;
	
	/**
	 * Sets the ell percent.
	 * 
	 * @param ellPercent the ell percent
	 * 
	 * @throws SQLException the SQL exception
	 * @deprecated Should no longer exist in new model, only set via project
	 */
	public void setEllPercent(double ellPercent) throws SQLException;
	
	public double getMVAFactor() throws SQLException;
	
	public String getName() throws SQLException;
	
	public void setName(String s) throws SQLException;
	
	public Calendar getInServiceDate() throws SQLException;
	
	public Proj getInServiceProj() throws SQLException;
	
	public SceProj getInServiceSceProj() throws SQLException;
	
	public Calendar getOutServiceDate() throws SQLException;
	
	public Proj getOutServiceProj() throws SQLException;
	
	public SceProj getOutServiceSceProj() throws SQLException;

	/**
	 * 
	 * @param value
	 * @throws SQLException
	 * @deprecated Should no longer exist in new model, only set via project
	 */
	public void setInServiceProj(Proj value) throws SQLException;
	
	/**
	 * 
	 * @param value
	 * @throws SQLException
	 * @deprecated Should no longer exist in new model, only set via project
	 */
	public void setOutServiceProj(Proj value) throws SQLException;

	public void insert() throws SQLException;

	public void setParentId(int coId) throws SQLException;

	public double getNameplate(Calendar date) throws SQLException;

	public double getPLLInService(Calendar date)throws SQLException;
	public double getPLLFactorInService(Calendar date)throws SQLException;
	

	public double getPLL(Calendar date)throws SQLException;
	public double getPLLFactor(Calendar date)throws SQLException;

	
	public double getELL(Calendar date)throws SQLException;
	public double getELLFactor(Calendar date)throws SQLException;
	
	public double getELLInService(Calendar date)throws SQLException;
	public double getELLFactorInService(Calendar date)throws SQLException;	
}
