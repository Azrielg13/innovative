package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.ScopeUnitCost;
import com.sce.esp.object.model.ScopeUnitCostYear;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class ScopeUnitCostYearDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCOPE_UNIT_COST_ID,YEAR_OFFSET};
	public static enum PROPERTY{SCOPE_UNIT_COST_ID,YEAR_OFFSET,COST_FACTOR,ALT_DOUBLE1,ALT_VARCHAR2,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SCOPEUNITCOSTID_LIMIT = 9;
	public final static int YEAROFFSET_LIMIT = 4;
	public final static int COSTFACTOR_LIMIT = 24;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR2_LIMIT = 512;
	public final static int ALTDATE1_LIMIT = 7;
	private int scopeUnitCostId;
	private int yearOffset;
	private double costFactor;
	private double altDouble1;
	private String altVarchar2;
	private Calendar altDate1;
	private ScopeUnitCost scopeUnitCost;
	public static ScopeUnitCostYear getInstance(int scopeUnitCostId, int yearOffset)throws java.sql.SQLException{
		return getInstance(scopeUnitCostId, yearOffset, true);
	}
	public static ScopeUnitCostYear getInstance(int scopeUnitCostId, int yearOffset, boolean fetch)throws java.sql.SQLException{
		if(isNull(scopeUnitCostId, yearOffset))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scopeUnitCostId, yearOffset);
		Cache cache = em.getEntityManagerFactory().getCache();
		ScopeUnitCostYear o = null;
		if(cache != null && cache.contains(ScopeUnitCostYear.class, pk))
			o = em.find(ScopeUnitCostYear.class, pk);
		if(o==null && getAICache().contains(ScopeUnitCostYear.class, pk))
			o = getAICache().find(ScopeUnitCostYear.class, pk);
		if(o==null && fetch)
			o = em.find(ScopeUnitCostYear.class, pk);
		if(o==null && fetch && ScopeUnitCostYear.class.getAnnotation(AutoInsertable.class) != null){
			o = new ScopeUnitCostYear(scopeUnitCostId, yearOffset);
			getAICache().cache(ScopeUnitCostYear.class, o);
		}
		return o;
	}
	public static Collection<ScopeUnitCostYear> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ScopeUnitCostYear> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ScopeUnitCostYear> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ScopeUnitCostYear o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ScopeUnitCostYear> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeUnitCostYear> tq = em.createQuery(jpql,ScopeUnitCostYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ScopeUnitCostYear> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeUnitCostYear> tq = em.createNamedQuery(name,ScopeUnitCostYear.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ScopeUnitCostYearDAO(){}
	public ScopeUnitCostYearDAO(int scopeUnitCostId, int yearOffset){
		this.scopeUnitCostId=scopeUnitCostId;
		this.yearOffset=yearOffset;
	}
	public ScopeUnitCostYearDAO(ScopeUnitCostYearDAO orig){
		super(orig);
		this.scopeUnitCostId=orig.getScopeUnitCostId();
		this.yearOffset=orig.getYearOffset();
		copyFrom(orig);
	}
	public void copyFrom(ScopeUnitCostYearDAO orig){
		this.costFactor=orig.getCostFactor();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scopeUnitCostId, yearOffset};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="SCOPE_UNIT_COST_ID",nullable=false,length=9)
	public int getScopeUnitCostId(){
		return scopeUnitCostId;
	}
	public void setScopeUnitCostId(int scopeUnitCostId) throws java.sql.SQLException{
		if(isSame(scopeUnitCostId, getScopeUnitCostId()))return;
		int oldValue = getScopeUnitCostId();
		this.scopeUnitCostId=scopeUnitCostId;
		setProperty("SCOPE_UNIT_COST_ID", scopeUnitCostId, oldValue);
		scopeUnitCost=null;
	}
	@Id
	@Column(name="YEAR_OFFSET",nullable=false,length=4)
	public int getYearOffset(){
		return yearOffset;
	}
	public void setYearOffset(int yearOffset) throws java.sql.SQLException{
		if(isSame(yearOffset, getYearOffset()))return;
		int oldValue = getYearOffset();
		this.yearOffset=yearOffset;
		setProperty("YEAR_OFFSET", yearOffset, oldValue);
	}
	@Column(name="COST_FACTOR",nullable=false,length=24)
	public double getCostFactor(){
		return costFactor;
	}
	public void setCostFactor(double costFactor) throws java.sql.SQLException{
		if(isSame(costFactor, getCostFactor()))return;
		double oldValue = getCostFactor();
		this.costFactor=costFactor;
		setProperty("COST_FACTOR", costFactor, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=512)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public ScopeUnitCost getScopeUnitCost()throws java.sql.SQLException{
		if(scopeUnitCost==null)
			scopeUnitCost=ScopeUnitCost.getInstance(getScopeUnitCostId());
		return scopeUnitCost;
	}
	public void setScopeUnitCost(ScopeUnitCost scopeUnitCost)throws java.sql.SQLException{
		setScopeUnitCostId(scopeUnitCost==null?0:scopeUnitCost.getScopeUnitCostId());
		this.scopeUnitCost=scopeUnitCost;
	}
	public ScopeUnitCostYear copy()throws java.sql.SQLException{
		ScopeUnitCostYear cp = new ScopeUnitCostYear((ScopeUnitCostYear)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ScopeUnitCostYearDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(ScopeUnitCostYearDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScopeUnitCostId(),o.getScopeUnitCostId())) diffs.add("SCOPE_UNIT_COST_ID");
		if(!isSame(getYearOffset(),o.getYearOffset())) diffs.add("YEAR_OFFSET");
		if(!isSame(getCostFactor(),o.getCostFactor())) diffs.add("COST_FACTOR");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
