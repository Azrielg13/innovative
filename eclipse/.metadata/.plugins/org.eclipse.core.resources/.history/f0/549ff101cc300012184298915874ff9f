package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CktCont;
import com.sce.esp.object.model.CktContShed;
import com.sce.esp.object.model.CktSwt;
import com.sce.esp.object.model.Cont;
import com.sce.esp.object.model.MDIObject;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CktContShedDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,SHED_ID};
	public static enum PROPERTY{PLANYEAR,SHED_ID,CKT_ID,CONT_ID,STEP,OSWT_TYPE_ID,OSWT_NUM,OSWT_POS,AMOUNT,NOTE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int SHEDID_LIMIT = 9;
	public final static int CKTID_LIMIT = 9;
	public final static int CONTID_LIMIT = 9;
	public final static int STEP_LIMIT = 2;
	public final static int OSWTTYPEID_LIMIT = 9;
	public final static int OSWTNUM_LIMIT = 10;
	public final static int OSWTPOS_LIMIT = 10;
	public final static int AMOUNT_LIMIT = 24;
	public final static int NOTE_LIMIT = 512;
	private int planyear;
	private int shedId;
	private int cktId;
	private int contId;
	private int step;
	private int oswtTypeId;
	private String oswtNum;
	private String oswtPos;
	private double amount;
	private String note;
	private CktCont cktCont;
	private CktSwt cktSwt;
	private Cont cont;
	public static CktContShed getInstance(int planyear, int shedId)throws java.sql.SQLException{
		return getInstance(planyear, shedId, true);
	}
	public static CktContShed getInstance(int planyear, int shedId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, shedId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, shedId);
		Cache cache = em.getEntityManagerFactory().getCache();
		CktContShed o = null;
		if(cache != null && cache.contains(CktContShed.class, pk))
			o = em.find(CktContShed.class, pk);
		if(o==null && getAICache().contains(CktContShed.class, pk))
			o = getAICache().find(CktContShed.class, pk);
		if(o==null && fetch)
			o = em.find(CktContShed.class, pk);
		if(o==null && fetch && CktContShed.class.getAnnotation(AutoInsertable.class) != null){
			o = new CktContShed(planyear, shedId);
			getAICache().cache(CktContShed.class, o);
		}
		return o;
	}
	public static Collection<CktContShed> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<CktContShed> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<CktContShed> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM CktContShed o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<CktContShed> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktContShed> tq = em.createQuery(jpql,CktContShed.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<CktContShed> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<CktContShed> tq = em.createNamedQuery(name,CktContShed.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CktContShedDAO(){}
	public CktContShedDAO(int planyear, int shedId){
		this.planyear=planyear;
		this.shedId=shedId;
	}
	public CktContShedDAO(CktContShedDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(CktContShedDAO orig){
		this.cktId=orig.getCktId();
		this.contId=orig.getContId();
		this.step=orig.getStep();
		this.oswtTypeId=orig.getOswtTypeId();
		this.oswtNum=orig.getOswtNum();
		this.oswtPos=orig.getOswtPos();
		this.amount=orig.getAmount();
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, shedId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
	}
	@Id
	@SequenceGenerator(name="MDI280_SEQ",sequenceName="MDI280_SEQ")
	@Column(name="SHED_ID",nullable=false,length=9)
	public int getShedId(){
		return shedId;
	}
	public void setShedId(int shedId) throws java.sql.SQLException{
		if(isSame(shedId, getShedId()))return;
		int oldValue = getShedId();
		this.shedId=shedId;
		setProperty("SHED_ID", shedId, oldValue);
	}
	@Column(name="CKT_ID",nullable=false,length=9)
	public int getCktId(){
		return cktId;
	}
	public void setCktId(int cktId) throws java.sql.SQLException{
		if(isSame(cktId, getCktId()))return;
		int oldValue = getCktId();
		this.cktId=cktId;
		setProperty("CKT_ID", cktId, oldValue);
		cktCont=null;
	}
	@Column(name="CONT_ID",nullable=false,length=9)
	public int getContId(){
		return contId;
	}
	public void setContId(int contId) throws java.sql.SQLException{
		if(isSame(contId, getContId()))return;
		int oldValue = getContId();
		this.contId=contId;
		setProperty("CONT_ID", contId, oldValue);
		cont=null;
	}
	@Column(name="STEP",nullable=true,length=2)
	public int getStep(){
		return step;
	}
	public void setStep(int step) throws java.sql.SQLException{
		if(isSame(step, getStep()))return;
		int oldValue = getStep();
		this.step=step;
		setProperty("STEP", step, oldValue);
	}
	@Column(name="OSWT_TYPE_ID",nullable=true,length=9)
	public int getOswtTypeId(){
		return oswtTypeId;
	}
	public void setOswtTypeId(int oswtTypeId) throws java.sql.SQLException{
		if(isSame(oswtTypeId, getOswtTypeId()))return;
		int oldValue = getOswtTypeId();
		this.oswtTypeId=oswtTypeId;
		setProperty("OSWT_TYPE_ID", oswtTypeId, oldValue);
		cktSwt=null;
	}
	@Column(name="OSWT_NUM",nullable=true,length=10)
	public String getOswtNum(){
		return oswtNum;
	}
	public void setOswtNum(String oswtNum) throws java.sql.SQLException{
		if(isSame(oswtNum, getOswtNum()))return;
		String oldValue = getOswtNum();
		this.oswtNum=oswtNum;
		setProperty("OSWT_NUM", oswtNum, oldValue);
	}
	@Column(name="OSWT_POS",nullable=true,length=10)
	public String getOswtPos(){
		return oswtPos;
	}
	public void setOswtPos(String oswtPos) throws java.sql.SQLException{
		if(isSame(oswtPos, getOswtPos()))return;
		String oldValue = getOswtPos();
		this.oswtPos=oswtPos;
		setProperty("OSWT_POS", oswtPos, oldValue);
	}
	@Column(name="AMOUNT",nullable=true,length=24)
	public double getAmount(){
		return amount;
	}
	public void setAmount(double amount) throws java.sql.SQLException{
		if(isSame(amount, getAmount()))return;
		double oldValue = getAmount();
		this.amount=amount;
		setProperty("AMOUNT", amount, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public CktCont getCktCont()throws java.sql.SQLException{
		if(cktCont==null)
			cktCont=CktCont.getInstance(getPlanyear(), getCktId());
		return cktCont;
	}
	public void setCktCont(CktCont cktCont)throws java.sql.SQLException{
		setCktId(cktCont==null?0:cktCont.getCktId());
		this.cktCont=cktCont;
	}
	public CktSwt getCktSwt()throws java.sql.SQLException{
		if(cktSwt==null)
			cktSwt=CktSwt.getInstance(getPlanyear(), getOswtTypeId());
		return cktSwt;
	}
	public void setCktSwt(CktSwt cktSwt)throws java.sql.SQLException{
		setOswtTypeId(cktSwt==null?0:cktSwt.getSwtTypeId());
		this.cktSwt=cktSwt;
	}
	public Cont getCont()throws java.sql.SQLException{
		if(cont==null)
			cont=Cont.getInstance(getPlanyear(), getContId());
		return cont;
	}
	public void setCont(Cont cont)throws java.sql.SQLException{
		setContId(cont==null?0:cont.getContId());
		this.cont=cont;
	}
	public CktContShed copy()throws java.sql.SQLException{
		CktContShed cp = new CktContShed((CktContShed)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CktContShedDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CktContShedDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getShedId(),o.getShedId())) diffs.add("SHED_ID");
		if(!isSame(getCktId(),o.getCktId())) diffs.add("CKT_ID");
		if(!isSame(getContId(),o.getContId())) diffs.add("CONT_ID");
		if(!isSame(getStep(),o.getStep())) diffs.add("STEP");
		if(!isSame(getOswtTypeId(),o.getOswtTypeId())) diffs.add("OSWT_TYPE_ID");
		if(!isSame(getOswtNum(),o.getOswtNum())) diffs.add("OSWT_NUM");
		if(!isSame(getOswtPos(),o.getOswtPos())) diffs.add("OSWT_POS");
		if(!isSame(getAmount(),o.getAmount())) diffs.add("AMOUNT");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
