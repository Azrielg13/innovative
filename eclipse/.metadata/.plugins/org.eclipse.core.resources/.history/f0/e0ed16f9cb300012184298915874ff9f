/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2002-2007, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

/**
 * The CoreObject interface imposes guidelines for all core objects that are part of the SCE hierarchy. Each class that 
 * implements this class would typically by utilized for obtaining data that is available per year.
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public interface CoreObjectYear extends PlanableObject{
    
    public int getSimId();
    
    public int getYear();
    
	/**
	 * Gets the B banks.
	 * 
	 * @return the B banks
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public Collection<Bbank> getBbanks()throws SQLException;
    
    /**
     * Gets ONLY the direct 9connected) chidren substations from the co.
     * @param sf
     * @return
     * @throws SQLException
     */
    public Collection<Bbank> getBbanks(SubFilter sf)throws SQLException;
    
    /**
	 * Gets the A banks.
	 * 
	 * @return the a banks
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public Collection<Abank> getAbanks()throws SQLException;
    
    /**
	 * Gets ALL the substations downstream from the co.
	 * 
	 * @return the down stream subs
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public TreeSet<? extends Sub> getDownStreamSubs()throws SQLException;
    
    /**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getGrowth() throws SQLException;
    
    /**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getGrowthHC() throws SQLException;
    
    /**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getGrowthLC() throws SQLException;
    
    /**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getGrowth(GrowthType gt) throws SQLException;
    
    /**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getGrowthHC(GrowthType gt) throws SQLException;
    
    /**
	 * Gets the growth.
	 * 
	 * @return the growth
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getGrowthLC(GrowthType gt) throws SQLException;
 
	/**
	 * Gets the sens, if UseOpDRF then return 0.
	 * 
	 * @return the temp sens
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getSens()throws SQLException;    
   
    /**
	 * Gets the Projected Load in MVA.
	 * 
	 * @return the Projected Load in MVA.
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getProjLoad() throws SQLException;
    
    /**
	 * Gets the Projected Load in MVA.
	 * 
	 * @return the Projected Load in MVA.
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getProjLoadHC() throws SQLException;
    
    
    /**
	 * Gets the Projected Load in MVA.
	 * 
	 * @return the Projected Load in MVA.
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getProjLoadLC() throws SQLException;
    
    /**
	 * Gets the Criteria Projected Load in MVA.
	 * 
	 * @return the Criteria Projected Load in MVA
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    
    
    public double getCriteriaProjLoad() throws SQLException;
    
    /**
	 * Gets the Projected Load in MVA.
	 * 
	 * @return the Projected Load in MVA.
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getABankProjLoad() throws SQLException;
    
    /**
	 * Gets the Criteria Projected Load in MVA.
	 * 
	 * @return the Criteria Projected Load in MVA
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getABankCriteriaProjLoad() throws SQLException;
    
    /**
	 * Gets the PLL.
	 * 
	 * @return the PLL
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getPLLBizLogic() throws SQLException;
    
    /**
	 * Gets the reserve (PLL - Criteria Projected Load).
	 * 
	 * @return the criteria reserve
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public double getCriteriaReserve() throws SQLException;

    /**
	 * Gets the children.
	 * 
	 * @return the CO's immediate children
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
    public Collection<? extends CoreObject> getChildren()throws SQLException;
    
	/**
	 * 
	 * @param simId
	 * @param sf
	 * @return
	 * @throws SQLException 
	 */
	public Collection<? extends CoreObject> getChildren(SubFilter sf) throws SQLException;
    
	/**
	 * Gets the total var req.
	 * 
	 * @return the total required var (or demand).
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */  
	public double getTotalVarReq()throws SQLException;

	/**
	 * Gets the total var reserve.
	 * 
	 * @return the total var reserve (caps - demand).
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getTotalVarReserve()throws SQLException;

	/**
	 * Gets the total var add.
	 * 
	 * @return the total var additions (in MVAR)
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getTotalVarAdd()throws SQLException;

	/**
	 * Gets the total var supply.
	 * 
	 * @return the total var supply
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getTotalVarSupply()throws SQLException;  
	
	/**
	 * Gets the total delta dep gen.
	 * 
	 * @return the aggregate dep. generation from the a-banks
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getTotalDeltaDepGen() throws SQLException;
	
	/**
	 * Gets the total delta bypass gen.
	 * 
	 * @return the aggregate bypass generation from the a-banks
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getTotalDeltaBypassGen() throws SQLException;
	
	/**
	 * Gets the a bank growth.
	 * 
	 * @return the a bank growth
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getABankGrowth()throws SQLException;
	
	
	/**
	 * Gets the ABank growth total.
	 * 
	 * @return the growth total
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getABankGrowthTotal()throws SQLException;
	
	/**
	 * 
	 * @param p
	 * @return
	 * @throws SQLException
	 */
	public double getCapAdd(Collection<Program> p)throws SQLException;
	
	public double getCapAdd(Collection<Program> p, SceProjRev.YearType yearType)throws SQLException;
	/**
	 * 
	 * @param Program p
	 * @param isPeakYear: PeakYear or CalYear
	 * @return double Capacacity Addition
	 * @throws SQLException
	 */
	
	/**
	 * Gets the capacity additions for Abank programs.
	 * 
	 * @return the cap add
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getAbankCapAdd()throws SQLException;
	
	/**
	 * 
	 * @param Program p
	 * @return int Circuit Additions
	 * @throws SQLException
	 */
	public int getCktAdd(Collection<Program> p)throws SQLException;
	
	/**
	 * 
	 * @param Program p
	 * @param isPeakYear: Peak Year or Cal Year
	 * @return int Circuit Additions
	 * @throws SQLException
	 */
	public int getCktAdd(Collection<Program> p, SceProjRev.YearType yearType)throws SQLException;
	
	
	/**
	 * Gets the nameplate.
	 * 
	 * @return the nameplate
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getNameplate()throws SQLException;
	
	
	public int getProjCount(Collection<Program> p)throws SQLException;
	
//	public int getProjCount(TreeSet<Program> p, boolean isPeakYear)throws SQLException;
	
	/**
	 * 
	 * @param Program p
	 * @return MVAR
	 * @throws SQLException
	 */
	public double getVarAdd(Collection<Program> p)throws SQLException;
	
	/**
	 * 
	 * @param Program p
	 * @param isPeakYear: PeakYear or CalYear
	 * @return double VAR Addition in MVAR
	 * @throws SQLException
	 */
	public double getVarAdd(Collection<Program> p, SceProjRev.YearType yearType)throws SQLException;
	
	
	public double getCostTotal(Collection<Program> p, SceElem e, CostStage stage)throws SQLException;
	
	
	
	public double getPropCostTotal(Collection<Program> p, SceElem e)throws SQLException;
	
	public double getPropCostTotal(Collection<Program> p, SceElem e, int projStatuses)throws SQLException;

	public double getAppCostTotal(Collection<Program> p, SceElem e)throws SQLException;
	
	public double getAppCostTotal(Collection<Program> progs, SceElem e, int projStatuses) throws SQLException;
	
	public double getNetCostChange(Collection<Program> p, SceElem e)throws SQLException;
	
	
	/**
	 * Gets the circuit count.
	 * 
	 * @return the circuit count
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public int getCircuitCount()throws SQLException;
	
	/**
	 * Gets circuits.
	 * 
	 * @return the circuit count
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public Collection<Ckt> getCkts()throws SQLException;

	/**
	 * Checks if is down stream of.
	 * 
	 * @param co
	 *            the co
	 * 
	 * @return true, if is down stream of
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public boolean isDownStreamOf(CoreObject co)throws SQLException;

	/**
	 * Gets the Bbank (DSP) growth total.
	 * 
	 * @return the growth total
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getGrowthTotal()throws SQLException;
	
	/**
	 * Gets the Bbank (DSP) growth total.
	 * 
	 * @return the growth total
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getGrowthTotalHC()throws SQLException;
	
	/**
	 * Gets the Bbank (DSP) growth total.
	 * 
	 * @return the growth total
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public double getGrowthTotalLC()throws SQLException;
	
	/**
	 * Gets the new ckt vars.
	 * 
	 * @return the new ckt vars
	 * 
	 * @throws SQLException
	 *             the SQL exception
	 */
	public TreeSet<CktVar> getNewCktVars() throws SQLException;

	/**
	 * The difference between the projected loads
	 * @return the % difference from last plan year and this
	 * @throws SQLException
	 */
	public double getProjLoadDiffFromPrev()throws SQLException;
	
	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public double getGrowthDiffFromPrev()throws SQLException;

	/**
	 * The parent in the given year
	 * @return the CoreObject Parent
	 * @throws SQLException
	 */
	public CoreObject getParent() throws SQLException;
	
	/**
	 * The total sum of circuits over load for given limit
	 * @return the sum of over load circuits for criteria 1 = 500
	 * @throws SQLException
	 */
	
	public int getCktsOver500()throws SQLException;
	
	/**
	 * The total sum of circuits over load for given limit
	 * @return the sum of over load circuits for criteria 2 = 600
	 * @throws SQLException
	 */
	
	public int getCktsOver600()throws SQLException;
	
	/**
	 * The total sum of circuits over load for given PLL
	 * @return the sum of circuit over PLL for criteria 3 = PLL
	 * @throws SQLException
	 */
	
	public int getCktsOverPLL()throws SQLException;
	

	/**
	 * The avg of circuit loads
	 * @return the avg load of all circuits for a given system
	 * @throws SQLException
	 */
	
	public double getACL()throws SQLException;
	
	
	/**
	 * The avg of circuit util
	 * @return the avg util of all circuits for a given system
	 * @throws SQLException
	 */
	
	public double getCktUtil()throws SQLException;	
	
	
	/**
	 * The avg of sub util
	 * @return the avg util of all subs for a given system
	 * @throws SQLException
	 */	
	public double getSubUtil()throws SQLException;	
	
	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public double getUtilization()throws SQLException;
	
	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public double getShedReq() throws SQLException;
	
	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public double getRollReq() throws SQLException;
	
	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public double getShedReserve() throws SQLException;
	
	
	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public double getRollReserve() throws SQLException;

	/**
	 * @return
	 */
	public Collection<Weatherstation> getWeatherStations() throws SQLException;
	
	public int getTotalProjPriorCostByCostYear(Collection<Program> progs, int statuses)throws SQLException;
	public int getTotalProjCostByCostYear(Collection<Program> progs, int statuses)throws SQLException;
	public int getTotalProjCostByCostYear(int year, Collection<Program> progs, int statuses)throws SQLException;
	
	public double getAllCktFxKvarReq(int simdId);
	public double getAllCktSwtKvarReq(int simId);
	public double getAllCktFxKvarExist(int simId);
	public double getAllCktSwtKvarExist(int simId);
	public double getAllCktFxKvarProp(int simId);
	public double getAllCktSwtKvarProp(int simId);

	public Collection<SceProjRev> getSceProjRevs(Collection<Program> progs, int projStatuses)throws SQLException;

	public Collection<SceProjElemCost> getSceProjElemCosts(Collection<Program> progs, int projStatuses) throws SQLException;

	public TreeSet<SceProjRev> getProjectsWithPCosts(Collection<Program> progs, int projStatuses)throws SQLException;

//	public int getCktAdd(Collection<Program> p, SceProjRev.YearType yearType)throws SQLException;
}