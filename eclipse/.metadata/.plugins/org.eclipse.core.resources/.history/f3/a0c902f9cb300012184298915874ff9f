/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.DuctDAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI720_DUCT")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Duct o WHERE o.PLANYEAR=?1 AND o.DB_ID=?2 AND o.DB_ROW=?3 AND o.DB_COL=?4"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Duct o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Duct o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByCkt", query="SELECT o FROM Duct o WHERE o.PLANYEAR=?1 AND o.CKT_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByDuctBank", query="SELECT o FROM Duct o WHERE o.PLANYEAR=?1 AND o.DB_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI720_DUCT o WHERE o.PLANYEAR=? AND o.DB_ID=? AND o.DB_ROW=? AND o.DB_COL=?"),//AUTO-GENERATED
})
public class Duct extends DuctDAO implements Serializable{
	private static final long serialVersionUID = -4380387143458415888L;

	/*Shared constants for db temperature calculations*/
	/** The Constant DIAM. */
	public final static Double DIAM = 5.0;
	
	/** The Constant THICKNESS. */
	public static final Double THICKNESS = 0.25;
	
	/*Duct Model Simulation variables*/
	/** The sim ckt name. */
	private String simCktName;
	
	/** The sim load. */
	private int simLoad;
	
	/** The sim cable. */
	private Cable simCable;
	
	/** The load factor. */
	private double loadFactor=.61;
	
	/**
	 * The Constructor.
	 * 
	 * @param dbCol the db col
	 * @param dbId the db id
	 * @param subId 	 * @param dbRow the db row
	 * @param dbRow the db row
	 * @param planyear the planyear
	 */
	public Duct(){
	}
	public Duct(int planyear, int dbId, int dbRow, int dbCol){
		super(planyear,dbId,dbRow,dbCol);
	}

	public Duct(Duct duct) {
		super(duct);
	}

	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		try {
			if(getCkt()!=null)
				return getDbRow()+"-"+getDbCol()+"-"+getCkt().toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getDbRow()+"-"+getDbCol();
	}
	
	/**
	 * Sets the sim ckt name.
	 * 
	 * @param value the display value
	 */
	public void setSimCktName(String value){
		simCktName=value;
	}
	
	/**
	 * Gets the sim ckt name.
	 * 
	 * @return the user/ckt name that is specified
	 */
	public String getSimCktName(){
		return simCktName;
	}
	
	/**
	 * Returns a real time eDNA reading.
	 * 
	 * @return RT load in amps
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getRtLoadDs() throws SQLException{
		if(getCkt() !=  null)
			return (int)Math.round(getCkt().getRealTimeCkt().getRtValue(false) * getPercentDs());
		return 0;
	}
	
	/**
	 * Gets the C proj load amps.
	 * 
	 * @param year the year
	 * @param simId the sim id
	 * 
	 * @return the C proj load amps
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getCProjLoadDsAmps(int simId, int year) throws SQLException{
		if(getCkt()!=null)
			return (int)Math.round(getCkt().getYear(simId,year).getCriteriaProjLoad()*getPercentDs()*getCkt().getMVAFactor());
		return 0;
	}
	
	/**
	 * Gets the C proj load amps (High Case).
	 * 
	 * @param year the year
	 * @param simId the sim id
	 * 
	 * @return the C proj load amps
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getCProjLoadDsAmpsHC(int simId, int year) throws SQLException{
		if(getCkt()!=null)
			return (int)Math.round(getCkt().getYear(simId,year).getCriteriaProjLoadHC()*getPercentDs()*getCkt().getMVAFactor());
		return 0;
	}
	
	/**
	 * Gets the C proj load amps no trans.
	 * 
	 * @param cktYear the ckt year
	 * 
	 * @return the C proj load amps no trans
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getCProjLoadDsAmpsNoTrans(CktYear cktYear) throws SQLException{
		if(getCkt()!=null && cktYear!=null)
			return (int)Math.round(getCkt().getYear(cktYear.getSimId(),cktYear.getYear()).getCProjLoadNoTrans(cktYear.getCkt())*getPercentDs()*getCkt().getMVAFactor());
		return 0;
	}
	
	/**
	 * Sets the simulation load om amps
	 * 
	 * @param value the value
	 */
	public void setSimLoad(int value){
		simLoad=value;
	}
	
	/**
	 * Gets the sim load.
	 * 
	 * @return the sim load
	 */
	public int getSimLoad(){
		return simLoad;
	}
	
	public int getSimLoadDs(){
		return (int)Math.round(getSimLoad()*getPercentDs());
	}
	
	
	/**
	 * Gets the rt temp.
	 * 
	 * @return the rt temp
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getRtTemp() throws SQLException{
		return getDuctBank().getDuctTempRT(getDbRow(),getDbCol());
	}
	
	/**
	 * Gets the sim temp.
	 * 
	 * @return the sim temp
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getSimTemp() throws SQLException{
		return getDuctBank().getDuctTempSim(getDbRow(),getDbCol());
	}
	
	/**
	 * Gets the sim temp.
	 * 
	 * @return the sim temp
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getDailyActualPeakTemp(Calendar c) throws SQLException{
		return getDuctBank().getDuctTempDailyPeak(getDbRow(),getDbCol(), c);
	}
	
	/**
	 * Gets the C proj load temp.
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the C proj load temp
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getCProjLoadTemp(int simId, int year) throws SQLException{
		return getDuctBank().getDuctTempCProj(simId, year, getDbRow(),getDbCol());
	}
	/**
	 * Gets the C proj load temp (High Case).
	 * 
	 * @param simId the sim id
	 * @param year the year
	 * 
	 * @return the C proj load temp
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getCProjLoadTempHC(int simId, int year) throws SQLException{
		return getDuctBank().getDuctTempCProjHC(simId, year, getDbRow(),getDbCol());
	}
	/**
	 * Gets the C proj load no trans temp.
	 * 
	 * @param cktYear the ckt year
	 * 
	 * @return the C proj load no trans temp
	 * 
	 * @throws SQLException the SQL exception
	 */
	public double getCProjLoadNoTransTemp(CktYear cktYear) throws SQLException{
		return getDuctBank().getDuctTempCProjNoTrans(cktYear,getDbRow(),getDbCol());
	}
	
	/**
	 * Sets the sim cable.
	 * 
	 * @param value the value
	 */
	public void setSimCable(Cable value){
		simCable=value;
	}
	
	/**
	 * Gets the sim cable.
	 * 
	 * @return the sim cable
	 */
	public Cable getSimCable(){
		return simCable;
	}
	
	/**
	 * Sets the load factor.
	 * 
	 * @param value the value
	 */
	public void setLoadFactor(double value){
		loadFactor=value;
	}
	
	/**
	 * Gets the load factor.
	 * 
	 * @return the load factor
	 */
	public double getLoadFactor(){
		return loadFactor;
	}
	
	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public double[] getCableParameters() throws SQLException{
		Cable c = getCable();
		if(c != null)
			return c.getParameters();
		return new double[32];
	}
	
	/**
	 * 
	 * @return
	 * @throws SQLException
	 */
	public double[] getSimCableParameters() throws SQLException{
		Cable c = getSimCable();
		if(c != null)
			return c.getParameters();
		return new double[32];
	}

	public int getDailyActualPeakDs(Calendar c) throws SQLException {
		if(getCkt()==null)
			return 0;
		return (int)Math.round(getCkt().getDailyPeak(c).getActualPeak()*getCkt().getMVAFactor()*getPercentDs());
		
	}

	public void refreshRTLoad() throws SQLException {
		if(getCkt()!=null)
			getCkt().getRealTimeCkt().refreshRt();
	}
}
