/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.awt.Color;
import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.SimulationDAO;
import com.sce.esp.object.jpa.EntityManagerHelper;
@Entity
@Table(schema="MDI",name="MDI020_SIMULATION")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Simulation o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Simulation o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Simulation o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByDepartment", query="SELECT o FROM Simulation o WHERE o.PLANYEAR=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByUser", query="SELECT o FROM Simulation o WHERE o.CREATOR_USERNAME_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI020_SIMULATION o WHERE o.PLANYEAR=? AND o.SIM_ID=?"),//AUTO-GENERATED
})
public class Simulation extends SimulationDAO implements Serializable{

	private static final long serialVersionUID = 506752939691192205L;

	/** The color. */
	public static Color DEFAULT_COLOR = new Color(6929132);

	private Color COLOR = new Color(getColorRgb());


	/**
	 * Public constructor for creating an empty simulation
	 * object for record insertion.  This method should only
	 * be called from a wizard.
	 * 
	 * @param planyear the desired planning year
	 */
	public Simulation(){
	}
	public Simulation(int planyear){
		super(planyear,0);
	}

	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 * @param simId the sim id
	 */
	public Simulation(int planyear, int simId){
		super(planyear, simId);
	}

	public Simulation(Simulation simulation) {
		super(simulation);
	}

	public boolean isNewInstance(){
		return (getSimId()==0) || !EntityManagerHelper.getEntityManager().contains(this) ;
	}

	/**
	 * Sets the colorRgb.
	 * 
	 * @param The new colorRgb
	 * @param rgb the rgb
	 * @param colorRgb the colorRgb
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setColorRgb(int colorRgb)throws SQLException{
		super.setColorRgb(colorRgb);
		this.COLOR = new Color(colorRgb);
	}

	public Color getColor(){
		return COLOR;
	}

	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString() {
		return getSimId()+"-"+getSimName();
	}

	public Simulation getBaseSimulation() throws SQLException{
		return Simulation.getInstance(getPlanyear(), getBaseSimId());
	}

	public boolean isInLineage(int simId) throws SQLException {
		if(getBaseSimId() == simId)
			return true;
		if(getBaseSimulation() != null)
			return getBaseSimulation().isInLineage(simId);
		return false;
	}
}
