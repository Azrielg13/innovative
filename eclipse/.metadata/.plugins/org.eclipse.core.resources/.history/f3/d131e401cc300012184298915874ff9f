package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.GiApp;
import com.sce.esp.object.model.GiComment;
import com.sce.esp.object.model.LookUp;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class GiCommentDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{ID};
	public static enum PROPERTY{ID,APP_ID,COMM_TYPE_ID,COMM};
	public final static int ID_LIMIT = 9;
	public final static int APPID_LIMIT = 9;
	public final static int COMMTYPEID_LIMIT = 9;
	public final static int COMM_LIMIT = 4000;
	private int id;
	private int appId;
	private int commTypeId;
	private String comm;
	private GiApp giApp;
	private LookUp commentType;
	public static GiComment getInstance(int id)throws java.sql.SQLException{
		return getInstance(id, true);
	}
	public static GiComment getInstance(int id, boolean fetch)throws java.sql.SQLException{
		if(isNull(id))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(id);
		Cache cache = em.getEntityManagerFactory().getCache();
		GiComment o = null;
		if(cache != null && cache.contains(GiComment.class, pk))
			o = em.find(GiComment.class, pk);
		if(o==null && getAICache().contains(GiComment.class, pk))
			o = getAICache().find(GiComment.class, pk);
		if(o==null && fetch)
			o = em.find(GiComment.class, pk);
		if(o==null && fetch && GiComment.class.getAnnotation(AutoInsertable.class) != null){
			o = new GiComment(id);
			getAICache().cache(GiComment.class, o);
		}
		return o;
	}
	public static Collection<GiComment> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<GiComment> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<GiComment> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM GiComment o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<GiComment> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<GiComment> tq = em.createQuery(jpql,GiComment.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<GiComment> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<GiComment> tq = em.createNamedQuery(name,GiComment.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public GiCommentDAO(){}
	public GiCommentDAO(int id){
		this.id=id;
	}
	public GiCommentDAO(GiCommentDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(GiCommentDAO orig){
		this.appId=orig.getAppId();
		this.commTypeId=orig.getCommTypeId();
		this.comm=orig.getComm();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{id};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIZ21_SEQ",sequenceName="MDIZ21_SEQ")
	@Column(name="ID",nullable=false,length=9)
	public int getId(){
		return id;
	}
	public void setId(int id) throws java.sql.SQLException{
		if(isSame(id, getId()))return;
		int oldValue = getId();
		this.id=id;
		setProperty("ID", id, oldValue);
	}
	@Column(name="APP_ID",nullable=false,length=9)
	public int getAppId(){
		return appId;
	}
	public void setAppId(int appId) throws java.sql.SQLException{
		if(isSame(appId, getAppId()))return;
		int oldValue = getAppId();
		this.appId=appId;
		setProperty("APP_ID", appId, oldValue);
		giApp=null;
	}
	@Column(name="COMM_TYPE_ID",nullable=false,length=9)
	public int getCommTypeId(){
		return commTypeId;
	}
	public void setCommTypeId(int commTypeId) throws java.sql.SQLException{
		if(isSame(commTypeId, getCommTypeId()))return;
		int oldValue = getCommTypeId();
		this.commTypeId=commTypeId;
		setProperty("COMM_TYPE_ID", commTypeId, oldValue);
		commentType=null;
	}
	@Column(name="COMM",nullable=true,length=4000)
	public String getComm(){
		return comm;
	}
	public void setComm(String comm) throws java.sql.SQLException{
		if(isSame(comm, getComm()))return;
		String oldValue = getComm();
		this.comm=comm;
		setProperty("COMM", comm, oldValue);
	}
	public GiApp getGiApp()throws java.sql.SQLException{
		if(giApp==null)
			giApp=GiApp.getInstance(getAppId());
		return giApp;
	}
	public void setGiApp(GiApp giApp)throws java.sql.SQLException{
		setAppId(giApp==null?0:giApp.getId());
		this.giApp=giApp;
	}
	public LookUp getCommentType()throws java.sql.SQLException{
		if(commentType==null)
			commentType=LookUp.getInstance(getCommTypeId());
		return commentType;
	}
	public void setCommentType(LookUp commentType)throws java.sql.SQLException{
		setCommTypeId(commentType==null?0:commentType.getId());
		this.commentType=commentType;
	}
	public GiComment copy()throws java.sql.SQLException{
		GiComment cp = new GiComment((GiComment)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(GiCommentDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(GiCommentDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getId(),o.getId())) diffs.add("ID");
		if(!isSame(getAppId(),o.getAppId())) diffs.add("APP_ID");
		if(!isSame(getCommTypeId(),o.getCommTypeId())) diffs.add("COMM_TYPE_ID");
		if(!isSame(getComm(),o.getComm())) diffs.add("COMM");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
