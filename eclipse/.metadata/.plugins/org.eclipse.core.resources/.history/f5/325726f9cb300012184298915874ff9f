package com.sce.esp.object.model; 

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Collection;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.dao.ScopeItemDAO;
import com.sce.esp.util.Calculate;
@Entity
@Table(schema="MDI",name="MDISX3_SCOPE_ITEM")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ScopeItem o WHERE o.SCOPE_ITEM_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ScopeItem o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ScopeItem o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByScopeType", query="SELECT o FROM ScopeItem o WHERE o.SCOPE_TYPE_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySceProjElemCost", query="SELECT o FROM ScopeItem o WHERE o.COST_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByParent", query="SELECT o FROM ScopeItem o WHERE o.PARENT_SI_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByModelingItem", query="SELECT o FROM ScopeItem o WHERE o.CO_TYPE_ID=?1 AND o.MODELING_ITEM_ID=?2"),
	@NamedQuery(name = "findByFacility", query="SELECT o FROM ScopeItem o WHERE o.CO_TYPE_ID=?1 AND o.FACILITY_ID=?2"),
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDISX3_SCOPE_ITEM o WHERE o.SCOPE_ITEM_ID=?"),//AUTO-GENERATED
})
public class ScopeItem extends ScopeItemDAO implements CostObject, Serializable, Descriptivable{

	private static final long serialVersionUID = -5093461765871203758L;
	private ModelingObject modelingObject;
	private FacilityObject facilityObject;

	private static int tempId = 0;

	public synchronized static int getTempId(){
		return --tempId;
	}

	public final static String INFO_FIELDS = "TITLE,PO_TYPE,LEAD_TIME,DESCRIPTION";
	public final static String BSS_FIELDS = "COST_ID,MODELING_ITEM_ID,QUANTITY,DELETE_TS";

	public ScopeItem() throws SQLException {
		super((int)Math.round(Math.random()*Integer.MAX_VALUE));
		setTitle("Auto Generated");
		setUseDefaultScope(true);
	}
	public ScopeItem(int scopeItemId) throws SQLException {
		super(scopeItemId);
		setTitle("Auto Generated");
		setUseDefaultScope(true);
	}

	// Copied pattern to solve SceProjElemCost copy issue - HiK	
	public ScopeItem(ScopeItem scopeItem){
		super(scopeItem);
		try {
			setScopeItemId(getTempId());
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	public ModelingObject getModelingObject(int planyear) throws SQLException {
		if(modelingObject != null && modelingObject.isNewInstance())
			return modelingObject;
		if(getScopeType()!=null && getScopeType().getModelingCoTypeId() != 0 && getScopeType().getModelingCoTypeId() < 13)
			return CoType.getInstance(getScopeType().getModelingCoTypeId()).getModelingObject(planyear,getSimId(),getModelingItemId());
		return null;
	}
	public Calendar getModelDate() throws SQLException {
		if(getSceProjElemCost()==null)
			return null;
		return getSceProjElemCost().getModelDate();
	}

	public String getScope() throws SQLException{
		String desc = getDescription();
		if(desc==null || desc.length()==0)
			desc = getScopeType().getDescription();
		return desc;
	}
	public CostStage getCostStage() throws SQLException {
		return getSceProjElemCost().getCostStage();
	}
	public void setCostStage(CostStage stage) throws SQLException {
	}

	/**
	 * Always returns false, no more unit costs for Scope Items
	 * @return boolean FALSE (always)
	 * @throws SQLException
	 */
	public boolean isUseUnitCost() throws SQLException {
		return isUseCalc();
	}
	public double getFercFunding() throws SQLException {
		return 0;
	}
	public void setCost(int year, int cost) throws SQLException {
		getScopeItemCostYear(year).setCost(cost);
	}
	public void setFercFunding(double ferc) throws SQLException {

	}
	public void setScope(String description) throws SQLException {
		setDescription(description);
	}
	public ScopeItemCostYear getScopeItemCostYear(int year) throws SQLException {
		return ScopeItemCostYear.getInstance(getScopeItemId(), year);
	}
	public double getVoltageKv() throws SQLException{
		FacilityObject fo = getFacilityObject(Department.getActivePlanYear());
		if(fo != null)
			return isHighSide()?fo.getPrimaryKv():fo.getSecondaryKv();
			return 0;
	}
	public Calendar getUnitCostBasisDate() throws SQLException{
		SceProjElemCost spec = getSceProjElemCost();
		if(spec != null){
			SceProjRev rev = spec.getSceProjRev();
			if(rev != null)
				return rev.getRevTs();
			return spec.getInsertTs();
		}
		return getInsertTs();
	}
	public int getCost(int year)throws SQLException{
		if(isUseUnitCost())
			return getScopeType().getCost(getVoltageKv(), getUnitCostBasisDate(), getSceProjElemCost().getSceProjRev().getProgram(),  getSceProjElemCost().getSceElem(), getCalendarYear(), getQuantity(), year);
		for(ScopeItemCostYear sicy:getScopeItemCostYears())
			if(sicy.getYear() == year)
				return sicy.getCost();
		return 0;
	}
	public int getPriorCost()throws SQLException{
		int prior=0;
		int curYear = Calendar.getInstance().get(Calendar.YEAR);
		if(isUseUnitCost()){
			prior += getScopeType().getPriorCost(getVoltageKv(), getUnitCostBasisDate(), getSceProjElemCost().getSceProjRev().getProgram(), getSceProjElemCost().getSceElem(), getCalendarYear(), getQuantity());
		}else
			for(ScopeItemCostYear pecy:getScopeItemCostYears())
				if(pecy.getYear() < curYear)
					prior += pecy.getCost();
		return prior;
	}

	public int getSubTotalCost()throws SQLException{
		int total=0;
		if(!isEnabledBl())
			return getPriorCost();
		if(isUseUnitCost())
			total += getScopeType().getTotalCost(getVoltageKv(), getUnitCostBasisDate(), getSceProjElemCost().getSceProjRev().getProgram(), getSceProjElemCost().getSceElem(), getCalendarYear(), getQuantity());
		else
			for(ScopeItemCostYear pecy:getScopeItemCostYears())
				total += pecy.getCost();
		return total;
	}

	public int getCalendarYear() throws SQLException{
		return getSceProjElemCost().getCalendarYear();
	}

	public int getPeakYear(int planyear) throws SQLException{
		return getSceProjElemCost().getPeakYear(planyear);
	}

	public int getFiscalYear() throws SQLException{
		return getSceProjElemCost().getFiscalYear();
	}

	/**
	 * Determines if this scope item is Active and the PEC is ActiveBl
	 * @return boolean
	 * @throws SQLException 
	 */
	public boolean isEnabledBl() throws SQLException{
		return isEnabled() && getSceProjElemCost() != null && getSceProjElemCost().isEnabledBl();
	}

	/**
	 * Returns the quantity, handles getModelingObjects
	 * @return The quantity
	 * @throws SQLException 
	 */
	public double getQuantityBl(int planyear) throws SQLException{
		if(getScopeType()!=null){
			if(getModelingObject(planyear)!=null && getScopeType().getModelingCoTypeId() == CoType.SUB_VAR)
				return ((SubVar)getModelingObject(planyear)).getKvar()/1000.0;					
			else if(getModelingObject(planyear)!=null && getScopeType().getModelingCoTypeId() == CoType.TRANSFORMER)
				return ((Xfmr)getModelingObject(planyear)).getNameplate();
			//			else if(getScopeType().getModelingCoTypeId() == CoType.CIRCUIT)
			//			return 0;

			else if(getScopeType().getModelingCoTypeId() == CoType.PLL_BANK
					|| getScopeType().getModelingCoTypeId() == CoType.ELL_BANK
					|| getScopeType().getModelingCoTypeId() == CoType.PLL_SUB
					|| getScopeType().getModelingCoTypeId() == CoType.ELL_SUB
					|| getScopeType().getModelingCoTypeId() == CoType.N1_BBANK){
				return Calculate.round(getQuantity(), 2);
			}
		}
		return getQuantity();
	}
	public void setScopeTypeId(int scopeTypeId) throws SQLException{
		super.setScopeTypeId(scopeTypeId);
		ScopeType st = ScopeType.getInstance(scopeTypeId);
		if(st != null){
			if(st.getDefaultQuantity() != 0)
				setQuantity(st.getDefaultQuantity());
			setHighSide(st.getInstallationOption()==ScopeType.HIGH_SIDE_ONLY);
		}
	}
	public String toString(){
		return getTitle();
	}
	public FacilityObject getFacilityObject(int planyear) throws SQLException{
		if(facilityObject != null && facilityObject.isNewInstance())
			return facilityObject;
		if(getCoTypeId() != 0)
			return CoType.getInstance(getCoTypeId()).getFacilityObject(planyear,getSimId(),getFacilityId());
		if(getSceProjElemCost() == null)
			return null;
		return getSceProjElemCost().getFacilityObject(planyear);
	}

	public void setFacilityObject(FacilityObject fo) throws SQLException {
		if(fo==null){
			setCoTypeId(0);
			setFacilityId(0);
		}else{
			setCoTypeId(fo.getCoTypeId());
			setFacilityId(fo.getId());
			if(fo.isNewInstance())
				facilityObject = fo;
		}
	}
	public boolean isInService() throws SQLException {
		return getSceProjElemCost().isInService() && isEnabledBl();
	}
	public SortedSet<ScopeItem> getHeadSet(int planyear) throws SQLException{
		return new TreeSet<ScopeItem>(((Bank)getFacilityObject(planyear)).getScopeItems2()).headSet(this);
	}
	public ScopeItem getPriorScopeItem(int planyear, int simId) throws SQLException{
		if(getFacilityObject(planyear) instanceof Bank){
			SortedSet<ScopeItem> headSet = getHeadSet(planyear);
			if(headSet.size() > 0){
				if(headSet.last().isActiveBl(planyear,simId))
					return headSet.last();
				return headSet.last().getPriorScopeItem(planyear,simId);
			}
		}
		return null;
	}

	public double getSubPLLFactorPre(int planyear, int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getSubPLLFactorPost(planyear,simId);
		return 0;
	}
	public double getSubPLLFactorPost(int planyear,int simId) throws SQLException {
		double pll = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.PLL_SUB)
			pll = getQuantity()/100.0;
		if(pll != -1)
			return pll;
		return getSubPLLFactorPre(planyear,simId);
	}

	public double getSubELLFactorPre(int planyear,int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getSubELLFactorPost(planyear,simId);
		return 0;
	}
	public double getSubELLFactorPost(int planyear,int simId) throws SQLException {
		double ell = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.ELL_SUB)
			ell = getQuantity()/100.0;
		if(ell != -1)
			return ell;
		return getSubELLFactorPre(planyear,simId);
	}

	public double getBBankN1FactorPre(int planyear,int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getBBankN1FactorPost(planyear,simId);
		return 0;
	}
	public double getBBankN1FactorPost(int planyear,int simId) throws SQLException {
		double ell = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.N1_BBANK)
			ell = getQuantity()/100.0;
		if(ell != -1)
			return ell;
		return getBBankN1FactorPre(planyear,simId);
	}

	public double getBankPLLFactorPre(int planyear,int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getBankPLLFactorPost(planyear,simId);
		return 0;
	}
	public double getBankPLLFactorPost(int planyear,int simId) throws SQLException {
		double pll = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.PLL_BANK)
			pll = getQuantity()/100.0;
		if(pll != -1)
			return pll;
		return getBankPLLFactorPre(planyear,simId);
	}


	public double getBankELLFactorPre(int planyear,int simId) throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getBankELLFactorPost(planyear,simId);
		return 0;
	}
	public double getBankELLFactorPost(int planyear,int simId) throws SQLException {
		double ell = -1;
		if(getScopeType().getModelingCoTypeId() == CoType.ELL_BANK)
			ell = getQuantity()/100.0;
		if(ell != -1)
			return ell;
		return getBankELLFactorPre(planyear,simId);
	}

	//=======================================================
	// Transformer Functions
	//=======================================================

	/*
	 * 
	 */
	public TreeSet<Xfmr> getXfmrsPre(int planyear,int simId)throws SQLException{
		return getXfmrsPre(planyear,simId,null);
	}
	public TreeSet<Xfmr> getXfmrsPre(int planyear,int simId,Collection<SceProjElemCost> without)throws SQLException{
		ScopeItem si = getPriorScopeItem(planyear,simId);
		if(si != null)
			return si.getXfmrsPost(planyear,simId,without);
		return new TreeSet<Xfmr>();
	}
	public TreeSet<Xfmr> getXfmrsAdd(int planyear)throws SQLException{
		TreeSet<Xfmr> xfmrs = new TreeSet<Xfmr>();
		if(getQuantity() > 0 && getModelingObject(planyear) instanceof Xfmr)
			xfmrs.add((Xfmr)getModelingObject(planyear));
		return xfmrs;
	}
	public TreeSet<Xfmr> getXfmrsRem(int planyear)throws SQLException{
		TreeSet<Xfmr> xmfrs = new TreeSet<Xfmr>();
		if(getQuantity() < 0 && getModelingObject(planyear) instanceof Xfmr)
			xmfrs.add((Xfmr)getModelingObject(planyear));
		return xmfrs;
	}
	public TreeSet<Xfmr> getXfmrsPost(int planyear,int simId) throws SQLException{
		return getXfmrsPost(planyear,simId,null);
	}
	public TreeSet<Xfmr> getXfmrsPost(int planyear,int simId,Collection<SceProjElemCost> without)throws SQLException{
		TreeSet<Xfmr> xfmrs = getXfmrsPre(planyear,simId,without);
		if(without == null || !without.contains(getSceProjElemCost())){
			xfmrs.addAll(getXfmrsAdd(planyear));
			xfmrs.removeAll(getXfmrsRem(planyear));
		}
		return xfmrs;
	}

	public double getNameplatePre(int planyear, int simId)throws SQLException{
		double capAdd = 0;
		for(Xfmr xfmr:getXfmrsPre(planyear,simId))
			capAdd += xfmr.getNameplate();
		return capAdd;
	}
	public double getNameplateAdd(int planyear) throws SQLException{
		double capAdd = 0;
		for(Xfmr xfmr:getXfmrsAdd(planyear))
			capAdd += xfmr.getNameplate();
		return capAdd;
	}
	public double getNameplateRem(int planyear) throws SQLException{
		double capAdd = 0;
		for(Xfmr xfmr:getXfmrsRem(planyear))
			capAdd += xfmr.getNameplate();
		return capAdd;
	}
	public double getNameplatePost(int planyear, int simId)throws SQLException{
		double capAdd = 0;
		for(Xfmr xfmr:getXfmrsPost(planyear,simId))
			capAdd += xfmr.getNameplate();
		return capAdd;
	}


	public double getBankNameplatePre(int planyear,int simId)throws SQLException{
		return getNameplatePre(planyear,simId);
	}
	public double getBankNameplateAdd(int planyear) throws SQLException{
		return getNameplateAdd(planyear);
	}
	public double getBankNameplateRem(int planyear) throws SQLException{
		return getNameplateRem(planyear);
	}
	public double getBankNameplatePost(int planyear, int simId)throws SQLException{
		return getNameplatePost(planyear,simId);
	}
	public double getBankNameplateDelta(int planyear)throws SQLException{
		return getBankNameplateAdd(planyear) - getBankNameplateRem(planyear);
	}
	public double getNameplateDelta(int planyear)throws SQLException{
		return getNameplateAdd(planyear) - getNameplateRem(planyear);
	}

	public boolean isInService(Calendar asOf) throws SQLException {
		if(getModelDate() == null)
			return false;
		return getModelDate().getTimeInMillis() < asOf.getTimeInMillis()+Calculate.ONE_DAY;
	}

	/**
	 * Whats this mean?
	 * @param planyear
	 * @param simId
	 * @return
	 * @throws SQLException
	 */
	public boolean isActiveBl(int planyear, int simId) throws SQLException{
		return isEnabledBl() && getSceProjElemCost() != null && getSceProjElemCost().isActiveBl(planyear,simId);
	}
	public void setModelingObject(ModelingObject mo) throws SQLException {
		if(mo == null)
			setModelingItemId(0);
		else{
			setModelingItemId(mo.getId());
			if(getQuantity() == -1)
				setFacilityObject(mo.getFacilityInstalledAt(getSimId()));
			if(mo.isNewInstance())
				modelingObject = mo;
		}
	}
	public int compareTo(Object o){
		if(o instanceof ScopeItem){
			ScopeItem si = (ScopeItem)o;
			try{
				if(getModelDate() != null && si.getModelDate() != null){
					if(getModelDate().getTimeInMillis() < si.getModelDate().getTimeInMillis())
						return -1;
					if(getModelDate().getTimeInMillis() > si.getModelDate().getTimeInMillis())
						return 1;
				}
			}
			catch(Exception e){
				e.printStackTrace();
			}
		}
		return super.compareTo(o);
	}
	public int getSimId()throws SQLException{
		if(getSceProjElemCost() != null)
			return getSceProjElemCost().getSimId();
		return 0;
	}
	public void insert() throws SQLException{
		if(getSceProjElemCost().getCostStage().getCostType()!=CostStage.Type.Proposed.ordinal())
			throw new SQLException("Scope Items can only be added to proposed costs");
		if(facilityObject != null){
			if(facilityObject.isNewInstance())
				facilityObject.insert();
			setFacilityId(facilityObject.getId());
			facilityObject = null;
		}
		if(modelingObject != null){
			if(modelingObject.isNewInstance()){
				if(modelingObject instanceof Xfmr)
					((Xfmr)modelingObject).setBankId(getFacilityId());
				modelingObject.insert();
			}
			setModelingItemId(modelingObject.getId());
			modelingObject = null;
		}
		setScopeItemId(0); //Get rid of our temp ScopeItemId
		super.insert();
	}
	public String getStageTitle() throws SQLException {
		return getTitle();
	}

	private String siSummaryKey;

	/**
	 * Used for distinguishing summary type scope items
	 * 
	 * @param string hash entry derived from: temp.getScopeType().getHashKey()+pec.getCoType().getHashKey()+pec.getFacilityId()
	 */
	public void setScopeSummaryIdentifier(String siSummaryKey) {
		this.siSummaryKey=siSummaryKey;
	}
	/**
	 * Returns a key derived from the following methods:
	 * temp.getScopeType().getHashKey()+pec.getCoType().getHashKey()+pec.getFacilityId()
	 * @return scope item summary key
	 */
	public String  getScopeSummaryIdentifier() {
		return siSummaryKey;
	}

	public boolean isHighSide(){
		try {
			return super.isHighSide() || getScopeType()!=null && getScopeType().getInstallationOption()==ScopeType.HIGH_SIDE_ONLY;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return super.isHighSide();
	}

	public boolean isEditable(int simId, String field) throws SQLException{
		if(isNewInstance())return true;
		if(getSceProjElemCost()!=null && getSceProjElemCost().getSceProjRev() != null){
			if(INFO_FIELDS.contains(field))return getSceProjElemCost().getSceProjRev().isInfoEditable(simId);
			if(BSS_FIELDS.contains(field))return getSceProjElemCost().getSceProjRev().isBSSEditable(simId);
		}
		else
			return true;
		throw new SQLException("Unknown Field: "+field);
	}
	public String getScopeDesc() throws SQLException{
		if(isUseDefaultScope() || getDescription()==null || getDescription().length()==0)
			return getScopeType().getDescription();
		return getDescription();
	}
	public TreeSet<Integer> getYearsWithCost() throws SQLException {
		TreeSet<Integer> years = new TreeSet<Integer>();
		int year = getSceProjElemCost().getCalendarYear();
		if(isUseUnitCost()){
			ScopeUnitCost suc = getScopeType().getScopeUnitCost(((Sub)getSceProjElemCost().getFacilityObject(getSceProjElemCost().getSceProjRev().getPlanYear())).getSecondaryKv(), getSceProjElemCost().getSceProjRev().getRevTs());
			if(suc != null)
				for(ScopeUnitCostYear sucy : suc.getScopeUnitCostYears())
					years.add(year+sucy.getYearOffset());
		}
		else
			for(ScopeItemCostYear sicy : getScopeItemCostYears())
				years.add(sicy.getYear());
		return years;
	}
	public int getModelingCoTypeId() throws SQLException{
		return getScopeType().getModelingCoTypeId();
	}
	public void setModelingCoTypeId(int mco) throws SQLException{
	}
	public void setProperty(String prop, Object newValue, Object oldValue) throws SQLException{
		super.setProperty(prop, newValue, oldValue);
		SceProjElemCost spec = SceProjElemCost.getInstance(getCostId(), false);
		if(spec!=null)
			spec.setProperty(null, null, null);
	}
	public double getContFactor() throws SQLException{
		SceProjElemCost spec = getSceProjElemCost();
		if(spec!=null)
			return spec.getContFactor();
		return 0;
	}
	public int getContAmount() throws SQLException{
		return (int)Math.round((getSubTotalCost()-getPriorCost())*getContFactor());
	}
	public int getTotalCost() throws SQLException{
		return getSubTotalCost()+getContAmount();
	}
	public double getKV() throws SQLException{
		SceProjElemCost spec = getSceProjElemCost();
		if(spec!=null){
			FacilityObject fo = getFacilityObject(spec.getPlanyear());
			if(fo!=null)
				return (isHighSide())?fo.getPrimaryKv():fo.getSecondaryKv();
		}
		return 0;
	}

	public void addDefaultDLUs()throws java.sql.SQLException{
		for(DefaultPart dp:DefaultPart.getCollection(new String[]{"PARENT_ST_ID","ACTION_ID","DELETED_TS"},getScopeTypeId(),getActionId(),null)){
			ScopeType st = dp.getScopeType();
			ScopeItem si = new ScopeItem();
			si.setScopeType(st);
			si.setTitle(st.getTitle());
			si.setActionId(getActionId());
			si.setQuantity(getQuantity()*dp.getPerUnitQty());
			addScopeItem(si);
			si.setDefaultWo();
			si.addDefaultDLUs();
		}
	}

	@Override
	public SceElem getSceElem() throws SQLException {
		return getSceProjElemCost().getSceElem();
	}
	public void setDefaultWo() throws SQLException{
		ScopeItem parent = getParent();
		//We just set the parent and this item is not assigned to a WorkOrder
		if(getCostId()==0 && parent != null){
			//If this item does not have a preference for SceElem or it preference is the same as it's parent, assign to parent's
			if(getScopeType().getSceElemId()==0 || getScopeType().getSceElemId()==parent.getSceProjElemCost().getSceElemId())
				setCostId(parent.getCostId());
			//Else check Grandparent for the right spot
			else if(parent.getParent()!=null && getScopeType().getSceElemId()==parent.getParent().getSceProjElemCost().getSceElemId())
				setCostId(parent.getParent().getCostId());
			else{
				SceProjElemCost bestMatch=null;
				for(SceProjElemCost spec:parent.getSceProjElemCost().getSceProjRev().getSceProjElemCosts(CostStage.Type.Proposed))
					if(spec.getSceElemId()==getScopeType().getSceElemId() && (bestMatch==null || Math.abs(parent.getSceProjElemCost().getModelDate().getTimeInMillis()-spec.getModelDate().getTimeInMillis())<Math.abs(parent.getSceProjElemCost().getModelDate().getTimeInMillis()-bestMatch.getModelDate().getTimeInMillis())))
						bestMatch = spec;
				if(bestMatch!=null)
					setSceProjElemCost(bestMatch);
				//				else{
				//					SceProjElemCost aSpec = parent.getSceProjElemCost();
				//					SceProjElemCost spec = new SceProjElemCost();
				//					spec.setTitle(aSpec.getTitle()+" 2");
				//					spec.setSceElemId(getScopeType().getSceElemId());
				//					spec.setNeedDate(aSpec.getNeedDate());
				//					spec.setOpDate(aSpec.getOpDate());
				//					spec.setCostStageId(aSpec.getCostStageId());
				//					spec.setCoTypeId(aSpec.getCoTypeId());
				//					spec.setFacilityId(aSpec.getFacilityId());
				//					setSceProjElemCost(spec);
				//				}
			}
		}
	}
	@Override
	public SceProjRev getSceProjRev() throws SQLException {
		SceProjElemCost spec = getSceProjElemCost();
		if(spec!=null)
			return spec.getSceProjRev();
		return null;
	}
	public double getRateSce(CostType ct) throws SQLException{
		return getSceProjElemCost().getRateSce(ct);
	}
	public double getRateCont(CostType ct)throws SQLException{
		return getSceProjElemCost().getRateCont(ct);
	}
	public double getQty(CostType ct, int year) throws SQLException{
		double factor = 0;
		ScopeItemLabor sil = getScopeItemLabor(ct,year);
		if(sil!=null)
			factor = sil.getQtyFactor();
		else
			factor = getScopeType().getCostFactor(ct,getAction(),getSceProjRev().getRevTs(),year-getCalendarYear());
		return factor*getQuantity();
	}
	public ScopeItemLabor getScopeItemLabor(CostType ct, int year) throws SQLException{
		for(ScopeItemLabor sil:getScopeItemLabors())
			if(sil.getCostTypeId()==ct.getId() && sil.getYear()==year)
				return sil;
		return null;
	}
	public double getHoursSce(CostType ct, int year) throws SQLException{
		double factor = 0;
		ScopeItemLabor sil = getScopeItemLabor(ct,year);
		if(sil!=null)
			factor = sil.getPerUnitSce();
		else{
			factor = getScopeType().getPerUnitSce(ct,getAction(),getSceProjRev().getRevTs(),year-getCalendarYear());
		}
		return factor*getQuantity();
	}
	public double getHoursCont(CostType ct, int year) throws SQLException{
		double factor = 0;
		ScopeItemLabor sil = getScopeItemLabor(ct,year);
		if(sil!=null)
			factor = sil.getPerUnitCont();
		else
			factor = getScopeType().getPerUnitCont(ct,getAction(),getSceProjRev().getRevTs(),year-getCalendarYear());
		return factor*getQuantity();
	}
	@Column(name="TITLE",nullable=false,length=32)
	public String getTitle(){
		try {
			if(super.getTitle()==null && getScopeType()!=null)
				return getScopeType().getTitle();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return super.getTitle();
	}
	//	public double getMatUnitCost() throws SQLException{
	//		return getPerUnitCost(CostType.getInstance(CostType.MATERIAL));
	//	}
	//	public void setMatUnitCost(double matUnitCost) throws SQLException{
	//		setPerUnitCost(CostType.getInstance(CostType.MATERIAL),matUnitCost);
	//	}
	//	public double getSubContUnitCost() throws SQLException{
	//		return getPerUnitCost(CostType.getInstance(CostType.SUB_CONT));
	//	}
	//	public void setSubContUnitCost(double subContUnitCost) throws SQLException{
	//		setPerUnitCost(CostType.getInstance(CostType.SUB_CONT),subContUnitCost);
	//	}
	public double getPerUnitCost(CostType ct) throws SQLException{
		for(ScopeItemPerUnit sipu:getScopeItemPerUnits())
			if(sipu.getCostTypeId()==ct.getId())
				return sipu.getPerUnitCost();
		return getScopeType().getPerUnitCost(ct,getAction(),getSceProjRev().getRevTs());
	}

	public double getPerUnitCost(int costGroupId) throws SQLException{
		double sum=0;
		for(CostType ct : CostType.getCostTypes(costGroupId))
			sum+=getPerUnitCost(ct);
		return sum;
	}

	public double getPerUnitCost() throws SQLException{
		return getPerUnitCost(CostType.CRAFT_GROUP)+getPerUnitCost(CostType.NON_CRAFT_GROUP);
	}


	public void setPerUnitCost(CostType ct, double perUnitCost) throws SQLException{
		for(ScopeItemPerUnit sipu:getScopeItemPerUnits()){
			if(sipu.getCostTypeId()==ct.getId()){
				sipu.setPerUnitCost(perUnitCost);
				return;
			}
		}
		ScopeItemPerUnit sipu = new ScopeItemPerUnit();
		sipu.setCostType(ct);
		sipu.setPerUnitCost(perUnitCost);
		addScopeItemPerUnit(sipu);
	}
	//	public double getMatTotCost() throws SQLException{
	//		return getUnitCost(CostType.getInstance(CostType.MATERIAL));
	//	}
	//	public double getSubContTotCost() throws SQLException{
	//		return getUnitCost(CostType.getInstance(CostType.SUB_CONT));
	//	}
	public double getUnitCost(CostType ct) throws SQLException{
		return getPerUnitCost(ct)*getQuantity();
	}

	public double getTotUnitCost(int costGroupId) throws SQLException{
		double sum = 0;
		for(CostType ct : CostType.getCostTypes(costGroupId))
			sum+= getUnitCost(ct);
		return sum;
	}
	public double getTotUnitCost() throws SQLException{
		return getTotUnitCost(CostType.CRAFT_GROUP)+getTotUnitCost(CostType.NON_CRAFT_GROUP);
	}

	public void setUnitCost(CostType ct, double totUnitCost) throws SQLException{
		setPerUnitCost(ct,totUnitCost/getQuantity());
	}
	public double getCostPer(CostType ct) throws SQLException{
		return getPerUnitCost(ct)*getDifficultyFactor(ct)*((1.0-getContFactor(ct))*getRateSce(ct)+getContFactor(ct)*getRateCont(ct));
	}
	public double getDifficultyFactor(CostType ct) throws SQLException {
		for(ScopeItemPerUnit sipu:getScopeItemPerUnits())
			if(sipu.getCostTypeId()==ct.getId())
				return sipu.getDifficultyFactor();
		return 1;
	}
	public void setDifficultyFactor(CostType ct, double diffFactor) throws SQLException{
		for(ScopeItemPerUnit sipu:getScopeItemPerUnits()){
			if(sipu.getCostTypeId()==ct.getId()){
				sipu.setDifficultyFactor(diffFactor);
				return;
			}
		}
		ScopeItemPerUnit sipu = new ScopeItemPerUnit();
		sipu.setCostType(ct);
		sipu.setDifficultyFactor(diffFactor);
		addScopeItemPerUnit(sipu);
	}
	public double getCost(CostType ct) throws SQLException{
		return getCostPer(ct)*getQuantity();
	}

	public void setCost(CostType ct, double cost) throws SQLException {
		setUnitCost(ct, cost/(getDifficultyFactor(ct)*(getRateSce(ct)*(1-getContFactor())+getRateCont(ct)*getContFactor())));
	}

	public double getContFactor(CostType ct) throws SQLException{
		for(ScopeItemPerUnit sipu:getScopeItemPerUnits())
			if(sipu.getCostTypeId()==ct.getId())
				return sipu.getContFactor();
		return getScopeType().getContFactor(ct,getAction(),getSceProjRev().getRevTs());
	}
	public void setContFactor(CostType ct, double contFactor) throws SQLException{
		for(ScopeItemPerUnit sipu:getScopeItemPerUnits()){
			if(sipu.getCostTypeId()==ct.getId()){
				sipu.setContFactor(contFactor);
				return;
			}
		}
		ScopeItemPerUnit sipu = new ScopeItemPerUnit();
		sipu.setCostType(ct);
		sipu.setContFactor(contFactor);
		addScopeItemPerUnit(sipu);
	}
//	public String getCPR() throws SQLException{
//		String cpr = super.getCpr();
//		if(cpr == null)
//			cpr = getScopeType().getCpr();
//		if(cpr == null && getParent()!=null)
//			return getParent().getCPR();
//		return cpr;
//	}
	public double getTotSceCraftCostPer(int costGroupId) throws SQLException{
		double total;
		total=0;
		for(CostType ct : CostType.getCostTypes(costGroupId))
			total += getRateSce(ct)*getPerUnitCost(ct)*getDifficultyFactor(ct)*(1-getContFactor(ct))*getDifficultyFactor(ct);//sce total cost
		return total;
	}

	public double getTotSceCost(int costGroupId) throws SQLException{
		double total=0;
		for(CostType ct : CostType.getCostTypes(costGroupId))
			total += getRateSce(ct)*getUnitCost(ct)*getDifficultyFactor(ct)*(1-getContFactor(ct));//sce total cost
		return total;
	}
	
	public double getTotHrs(int costGroupId) throws SQLException{
		double total=0;
		for(CostType ct : CostType.getCostTypes(costGroupId))
			total += getUnitCost(ct);
		return total;
	}

	public double getTotSceHrs(int costGroupId) throws SQLException{
		double total=0;
		for(CostType ct : CostType.getCostTypes(costGroupId))
			total += getUnitCost(ct)*getDifficultyFactor(ct)*(1-getContFactor(ct));//sce total cost
		return total;
	}
	
	
		public double getTotHrs() throws SQLException{
		return getTotHrs(CostType.CRAFT_GROUP)+getTotHrs(CostType.NON_CRAFT_GROUP);
	}
	
	public double getTotSceHrs() throws SQLException{
		return getTotSceHrs(CostType.CRAFT_GROUP)+getTotSceHrs(CostType.NON_CRAFT_GROUP);
	}

	public double getTotContHrs(int costGroupId) throws SQLException{
		double total;
		total=0;
		for(CostType ct : CostType.getCostTypes(costGroupId))
			total += getUnitCost(ct)*getDifficultyFactor(ct)*(getContFactor(ct));//cont total cost
		return total;
	}

	public double getTotContHrs() throws SQLException{
		return getTotContHrs(CostType.CRAFT_GROUP)+getTotContHrs(CostType.NON_CRAFT_GROUP);
	}

	public double getCostSce(CostType ct) throws SQLException{
		return getRateSce(ct)*getUnitCost(ct)*getDifficultyFactor(ct)*(1-getContFactor(ct));//sce total cost	
	}

	public double getTotSceCost() throws SQLException{
		return getTotSceCost(CostType.CRAFT_GROUP)+getTotSceCost(CostType.NON_CRAFT_GROUP);//sce total cost	
	}

	public double getSceHrs(CostType ct) throws SQLException{
		return getPerUnitCost(ct)*getDifficultyFactor(ct)*(1-getContFactor(ct))*getQuantity();
	};

	public double getContHrs(CostType ct) throws SQLException{
		return getPerUnitCost(ct)*getDifficultyFactor(ct)*getContFactor(ct)*getQuantity();
	};

	public double getTotConCraftCostPer(int costGroupId) throws SQLException{
		double total;
		total=0;
		for(CostType ct : CostType.getCostTypes(costGroupId))
			total += getRateCont(ct)*getPerUnitCost(ct)*getDifficultyFactor(ct)*getContFactor(ct)*getDifficultyFactor(ct);//sce total cost
		return total;
	}

	public double getTotConCraftHrs() throws SQLException{
		double total;
		total=0;
		for(CostType ct : CostType.getCraftCostTypes())
			total += getUnitCost(ct)*getDifficultyFactor(ct)*getContFactor(ct);//sce total cost
		return total;
	}

	public double getTotConCost(int costGroupId) throws SQLException{

		double total=0;
<<<<<<< .mine
		for(CostType ct : CostType.getCostTypes(costGroupId))
			total += getRateCont(ct)*getUnitCost(ct)*getDifficultyFactor(ct)*getContFactor(ct);//sce total cost
=======

		for(CostType ct : CostType.getCostTypes(costGroupId)){
//			EspLogger.message(this, "Rate-"+getRateCont(ct));
//			EspLogger.message(this, "Unit Cost-"+getUnitCost(ct));
//			EspLogger.message(this, "Cont Factor-"+getContFactor(ct));
			total += getRateCont(ct)*getUnitCost(ct)*getContFactor(ct);//sce total cost}
		}
//		EspLogger.message(this, costGroupId+"-"+total);
		
>>>>>>> .r19895
		return total;
	}

	public double getCostCon(CostType ct) throws SQLException{
		return getRateCont(ct)*getUnitCost(ct)*getDifficultyFactor(ct)*getContFactor(ct);//sce total cost
	}

	public double getTotConCost() throws SQLException{
		return getTotConCost(CostType.CRAFT_GROUP)+getTotConCost(CostType.NON_CRAFT_GROUP);
	}

	public double getTotLaborCost() throws SQLException{
		return getTotCost(CostType.CRAFT_GROUP)+getTotCost(CostType.NON_CRAFT_GROUP);
	}

	public double getTotCost(int costGroupId) throws SQLException{
		return getTotConCost(costGroupId)+getTotSceCost(costGroupId);
	}

	public double getTotCostPer(int costGroupId) throws SQLException{
		double qty = getQuantity();
		if(qty==0)
			return 0;
		return getTotCost(costGroupId)/qty;
	}

	public double getTotCostPer() throws SQLException{
		return getTotCostPer(CostType.CRAFT_GROUP)+getTotCostPer(CostType.NON_CRAFT_GROUP);
	}

	public double getOtherCost(){
		return 0;
	}

	public double getRelatedExpenseSceLabor(){
		return 0;
	}

	public double getRelatedExpenseConLabor(){
		return 0;
	}

	public double getEquipCost(){
		return 0;
	}

	public boolean isRelatedExpense(){
		try {
			return (getScopeType().getPartType()!=null && getScopeType().getPartType().toString().contains("Related"));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;	
	}

	public void delete() throws SQLException{
		TreeSet<ScopeItem> items = new TreeSet<ScopeItem>(getScopeItems());
		for(ScopeItem si:items)
			si.delete();
		super.delete();
	}

	public BidItem getBidItem(CostType ct) throws SQLException{
		for(BidItem bi : getBidItems())
			if(bi.getCostType()== ct)
				return bi;
		return null;
	}

	public TreeSet<BidItem> getBidItems(BidPackage bp) throws SQLException{
		TreeSet<BidItem> items = new TreeSet<BidItem>();
		for(BidItem bi : bp.getBidItems())
			if(bi.getScopeItemId() == getScopeItemId())
				items.add(bi);
		return items;
	}

	public BidPackage getBidPackage(CostType ct) throws SQLException{
		//		for(BidItem bi : getBidItems())
		//			if(bi.getCostType()== ct)
		//				return bi;
		return null;
	}

	public TreeSet<BidItem> getNonCraftBidItems() throws SQLException{
		TreeSet<BidItem> tree = new TreeSet<BidItem>();
		for(BidItem bi : getBidItems() )
			if(bi.getCostType().getCostGroupId()==CostType.NON_CRAFT_GROUP)
				tree.add(bi);
		return tree;
	}

	public TreeSet<BidItem> getCraftBidItems() throws SQLException{
		TreeSet<BidItem> tree = new TreeSet<BidItem>();
		for(BidItem bi : getBidItems() )
			if(bi.getCostType().getCostGroupId()==CostType.CRAFT_GROUP)
				tree.add(bi);

		return tree;
	}
	public TreeSet<BidItem> getMaterialBidItems() throws SQLException{
		TreeSet<BidItem> tree = new TreeSet<BidItem>();
		for(BidItem bi : getBidItems() )
			if(bi.getCostType().getCostGroupId()==CostType.MATERIAL_GROUP)
				tree.add(bi);

		return tree;
	}
	public TreeSet<BidItem> getSubContBidItems() throws SQLException{
		TreeSet<BidItem> tree = new TreeSet<BidItem>();
		for(BidItem bi : getBidItems() )
			if(bi.getCostType().getCostGroupId()==CostType.SUB_CONT_GROUP)
				tree.add(bi);

		return tree;
	}
	public double getCost(CostType ct, int year) throws SQLException {
		ScopeItemForecast sif = ScopeItemForecast.getInstance(getScopeItemId(), ct.getId(), year);
		if(sif!=null)
			return getCost(ct)*sif.getPercent();
		return 0;
	}
	public double getPMCostSce() throws SQLException {
		double tot=0;
		for(CostType ct:CostType.getAllActive())
			if(ct.getName().contains("Project"))
				tot+=this.getCostSce(ct);
		return tot;
	}
	public double getPMCostCon() throws SQLException {
		double tot=0;
		for(CostType ct:CostType.getAllActive())
			if(ct.getName().contains("Project"))
				tot+=this.getCostSce(ct);
		return tot;
	}
	public double getEngCostSce() throws SQLException {
		double tot=0;
		for(CostType ct:CostType.getAllActive())
			if(ct.getName().contains("Engineering"))
				tot+=this.getCostSce(ct);
		return tot;
	}
	public double getEngCostCon() throws SQLException {
		double tot=0;
		for(CostType ct:CostType.getAllActive())
			if(ct.getName().contains("Engineering"))
				tot+=this.getCostSce(ct);
		return tot;
	}
	public double getPowerPlantHrs(int costTypeId) throws SQLException {
		switch(costTypeId){
			case CostType.MATERIAL_GROUP: return 0.0;//count
			case PowerPlantGroup.LABOR: return getTotHrs();//hrs
//			case PowerPlantGroup.SCE: return getTotSceHrs(CostType.CRAFT_GROUP)+getTotSceHrs(CostType.NON_CRAFT_GROUP);//hrs
		}
		return 0.0;
	}
	public double getPowerPlantCount(int costTypeId) throws SQLException {
		switch(costTypeId){
			case CostType.MATERIAL_GROUP: return getCPRCount();//count
		}
		return 0.0;
	}
	public CprPlant getCprPlant() throws SQLException{
		if(getFundingTypeId()==LookUp.ISO || getFundingTypeId()==LookUp.NONISO)
			return CprPlant.getInstance(CprPlant.TRANSMISSION);
		return CprPlant.getInstance(CprPlant.DISTRIBUTION);
		//return getFacilityObject(Department.getActivePlanYear()).getCprPlant();
	}
	public CprPrime getCprPrime() throws SQLException{
		CprPrime cprP = super.getCprPrime();
		if(cprP==null && getScopeType()!=null){
			CprPrimeAcct cpa = getScopeType().getCprPrimeAcct();
			if(cpa!=null){
				for(CprPrime ca:cpa.getCprPrimes()){
					if(ca.getCprPlant()==getCprPlant()){
						cprP = ca;
						break;
					}
				}
			}
		}
		return cprP;
	}
	public CprPrimeAcct getCprPrimeAcct() throws SQLException{
		CprPrime cp = super.getCprPrime();
		if(cp!=null)
			return getScopeType().getCprPrimeAcct();
		return null;
	}
	public CprSub getCprSub() throws SQLException{
		CprSub cprS = super.getCprSub();
		if(cprS==null && getScopeType()!=null){
			CprSubAcct cps = getScopeType().getCprSubAcct();
			if(cps!=null){
				for(CprSub cs:cps.getCprSubs()){
					if(cs.getCprPlant()==getCprPlant()){
						if(cs.getFundingType()==null)
							cprS = cs;
						else if(cs.getFundingType()==getFundingType()){
							cprS = cs;
							break;
						}
					}
				}
			}
		}
		return cprS;
	}
	public CprSubAcct getCprSubAcct() throws SQLException{
		CprSub cs = super.getCprSub();
		if(cs!=null)
			return getScopeType().getCprSubAcct();
		return null;
	}
	public double getPowerPlantAmount(int costTypeId) throws SQLException {
		switch(costTypeId){ 	
			case CostType.MATERIAL_GROUP: return getTotUnitCost(costTypeId);//$$$
			case PowerPlantGroup.LABOR: return getTotLaborCost()+getSubTotalCost();
//			getTotSceCost(CostType.CRAFT_GROUP) + getTotSceCost(CostType.NON_CRAFT_GROUP);//$$$
//			case PowerPlantGroup.CONTRACT: return getTotConCost(CostType.CRAFT_GROUP) +getTotConCost(CostType.NON_CRAFT_GROUP)+getUnitCost(CostType.getInstance(CostType.SUB_CONT));//$$$
			
		}
		return 0.0;
	}
	public double getCPRCount() throws SQLException {
		if(isSame(getCprPrimeAcct(),getScopeType().getCprPrimeAcct()) && isSame(getCprSubAcct(),getScopeType().getCprSubAcct()))
			return getQuantity();
		return 0.0;
	}
	public Collection<DescriptiveType> getDescriptiveTypes() throws SQLException {
		return getScopeType().getDescriptiveTypes();
	}
	public ScopeItemDescriptive getScopeItemDescriptive(DescriptiveType dt) throws SQLException{
		for(ScopeItemDescriptive sid:getScopeItemDescriptives())
			if(dt==sid.getDescriptiveType())
				return sid;
		return null;
	}
	@Override
	public Object getDescriptiveValue(DescriptiveType dt) throws SQLException {
		ScopeItemDescriptive sid = getScopeItemDescriptive(dt);
		if(sid!=null)
			return sid.getUserValue();
		return getScopeType().getDescriptiveValue(dt);
	}
	@Override
	public boolean isDescriptiveValue(DescriptiveType dt) throws SQLException {
		Object value = getDescriptiveValue(dt);
		return value!=null && value.toString().length() > 0 && !value.equals("0") && !value.toString().equalsIgnoreCase("false");
	}
	@Override
	public void setDescriptiveValue(DescriptiveType dt, Object value)throws SQLException {
		ScopeItemDescriptive sid = getScopeItemDescriptive(dt);
		if(sid==null){
			sid = new ScopeItemDescriptive();
			sid.setDescriptiveType(dt);
			sid.setUserValue(""+value);
			addScopeItemDescriptive(sid);
		}
		else
			sid.setUserValue(""+value);
	}
	@Override
	public String getDescriptiveNote(DescriptiveType dt) throws SQLException {
		ScopeItemDescriptive sid = getScopeItemDescriptive(dt);
		if(sid!=null)
			return sid.getNote();
		return getScopeType().getDescriptiveNote(dt);
	}
	@Override
	public void setDescriptiveNote(DescriptiveType dt, String note)throws SQLException {
		ScopeItemDescriptive sid = getScopeItemDescriptive(dt);
		if(sid==null){
			sid = new ScopeItemDescriptive();
			sid.setDescriptiveType(dt);
			sid.setUserValue(""+getDescriptiveValue(dt));
			sid.setNote(note);
			addScopeItemDescriptive(sid);
		}
		else
			sid.setNote(note);
	}
	public double getInventoryCost() throws SQLException{
		return getCost(CostType.getInstance(CostType.MATERIAL))*getScopeType().getInventoryFactor(getAction(),getUnitCostBasisDate());
	}
	public double ProcurementCost() throws SQLException{
		return getCost(CostType.getInstance(CostType.MATERIAL))*(1-getScopeType().getInventoryFactor(getAction(),getUnitCostBasisDate()));
	}
}






