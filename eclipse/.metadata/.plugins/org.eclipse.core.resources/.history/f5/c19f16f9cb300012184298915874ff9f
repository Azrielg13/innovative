/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.CktVarDAO;
@Entity
@Table(schema="MDI",name="MDI470_CKT_VAR")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM CktVar o WHERE o.PLANYEAR=?1 AND o.CAP_ID=?2"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM CktVar o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM CktVar o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByCkt", query="SELECT o FROM CktVar o WHERE o.PLANYEAR=?1 AND o.CKT_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI470_CKT_VAR o WHERE o.PLANYEAR=? AND o.CAP_ID=?"),//AUTO-GENERATED
})
public class CktVar extends CktVarDAO implements Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -6805965380881018996L;

	/** The Constant EXISTING. */
	public final static String EXISTING = "Existing";
	
	/** The Constant PROPOSED. */
	public final static String PROPOSED = "Proposed";
	
	/** The Constant FUTURE. */
	public final static String FUTURE = "Future";
	
	/** The Constant OUT_OF_SERVICE. */
	public final static String OUT_OF_SERVICE = "Out of Service";
	
	/** The Constant UNKNOWN. */
	public final static int UNKNOWN = 0;
	
	/** The Constant FIX. */
	public final static int FIX = 1;
	
	/** The Constant SWT. */
	public final static int SWT = 2;
	
	/** The Constant SWTFX. */
	public final static String[] SWTFX = {"Unknown","Fixed","Switched"};
	
	/** The Constant PM. */
	public final static int PM = 1;
	
	/** The Constant OH. */
	public final static int OH = 2;
	
	/** The Constant OHPM. */
	public final static String[] OHPM = {"Unknown","PM","OH"};
	
	/** The Constant PRIORITY. */
	public final static String[] PRIORITY = {" ","1","2","3","4"};
	
	/** The Constant NEED. */
	public final static String[] NEED = {"VAR","Voltage"};
	
	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 */
	public CktVar(){
	}
	public CktVar(int planyear) {
		super(planyear,0);
	}
	
	/**
	 * The Constructor.
	 * 
	 * @param planyear the planyear
	 * @param capId the cap id
	 */
	public CktVar(int planyear, int capId){
		super(planyear,capId);
	}
	
	
    public CktVar(CktVar cktVar) {
		super(cktVar);
	}

	/**
     * Checks if is automated.
     * 
     * @return true, if is automated
     */
    public boolean isAutomated(){
    	return (getCapDp() != null && getCapDp().length() > 0) || (getKvDp() != null && getKvDp().length() > 0);
    }
    
	public String toString(){
		return getCapNum();
	}
	
	/**
	 * Gets the status.
	 * 
	 * @param year the year
	 * 
	 * @return the status
	 */
	public String getStatus(int year){
		if(getInServiceDate() != null && getInServiceDate().get(Calendar.YEAR) > year)
			return CktVar.FUTURE;
		if(getInServiceDate() != null && getInServiceDate().get(Calendar.YEAR) == year)
			return CktVar.PROPOSED;
		if(getOutServiceDate() != null && getOutServiceDate().get(Calendar.YEAR) <= year)
			return CktVar.OUT_OF_SERVICE;
		return CktVar.EXISTING;
   }
	
	public int getOpYear() throws SQLException{
		int y = 0;		
		if(getInServiceDate()!=null) {
			y=getInServiceDate().get(Calendar.YEAR);	
			Calendar normDate = (Calendar)Department.getInstance(getPlanyear()).getNormalizationDate().clone();
			if(getInServiceDate().get(Calendar.DAY_OF_YEAR) > normDate.get(Calendar.DAY_OF_YEAR))
				y++;
		}
		return y;
	}
	

	public boolean isApproved(){					
		try {
			if(getCkt().getBbank(0).isVarApproved())
				return true;									
			for(Sys sys:getCkt().getBbank(0).getSyss(0))
				if(sys.isStvApproved())
					return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public void setApproved(){
		//empty on purpose BJS
	}
	
	public Bbank getBbank() throws SQLException{
		return getCkt().getBbank(0);
	}
	
	/*public int compareTo(Object o){
		try {
			CktVar cv=null;
			if(o instanceof CktVar) {
				cv = (CktVar)o;
				if(getBbank().compareTo(cv.getBbank())>0)
					return 1;
				if(getBbank().compareTo(cv.getBbank())<0)
					return -1;
				if(getCkt().compareTo(cv.getCkt())>0)
					return 1;
				if(getCkt().compareTo(cv.getCkt())<0)
					return -1;			
				if(getInServiceDate()!=null && cv.getInServiceDate()!=null){
					if(getInServiceDate().compareTo(cv.getInServiceDate())>0)					
						return 1;
					if(getInServiceDate().compareTo(cv.getInServiceDate())<0)
						return -1;
				}
				if(this.getCapNum().compareTo(cv.getCapNum())>0)
					return 1;
				if(this.getCapNum().compareTo(cv.getCapNum())<0)
					return -1;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return 0;
    }*/
	
	public void delete() throws SQLException {
		deleteDB();
	}
}
