package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.SysYearSceProjDAO;
import com.sce.esp.object.jpa.AutoInsertable;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI212_SYS_YEAR_SCE_PROJ")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM SysYearSceProj o WHERE o.PLANYEAR=?1 AND o.SIM_ID=?2 AND o.SYS_ID=?3 AND o.YEAR=?4 AND o.PROGRAM_ID=?5"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM SysYearSceProj o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM SysYearSceProj o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI212_SYS_YEAR_SCE_PROJ o WHERE o.PLANYEAR=? AND o.SIM_ID=? AND o.SYS_ID=? AND o.YEAR=? AND o.PROGRAM_ID=?"),//AUTO-GENERATED
})
public class SysYearSceProj extends SysYearSceProjDAO implements Serializable{


	private TreeSet<SysGrowth> sysGrowths;
	public final static int LEN=128;


	public SysYearSceProj(){
	}
	public SysYearSceProj(int planyear, int simId, int sysId, int year, int programId) {
		super(planyear, simId, sysId, year, programId);
	}
	public SysYearSceProj(SysYearSceProj sysYearSceProj) {
		super(sysYearSceProj);
	}

//	public TreeSet<SysGrowth> getSysGrowths(){
//		if(sysGrowths == null)
//			refreshSysGrowths();
//		return sysGrowths;
//	}
//	public void refreshSysGrowths(){
//		try{
//			byte[] firstSet = getBytes(getAltVarchar1());
//			byte[] secondSet = getBytes(getAltVarchar2());
//			byte[] thirdSet = getBytes(getAltVarchar3());
//			int byteTotal=0;
//			if(firstSet != null)
//				byteTotal += firstSet.length;
//			if(secondSet != null)
//				byteTotal += secondSet.length;
//			if(thirdSet != null)
//				byteTotal += thirdSet.length;
//			byte[] data = new byte[byteTotal];
//			copyBytes(data,0,firstSet);
//			copyBytes(data,LEN,secondSet);
//			copyBytes(data,LEN*2,thirdSet);
//			if(data.length > 0){
//				try{
//					ByteArrayInputStream bis = new ByteArrayInputStream(data);
//					ObjectInputStream in = new ObjectInputStream(bis);
//					sysGrowths = (TreeSet<SysGrowth>)in.readObject();
//				}
//				catch(Exception e){
//					e.printStackTrace();
//				}
//			}
//			else
//				sysGrowths = new TreeSet<SysGrowth>();
//		}catch(Exception e){
//			e.printStackTrace();
//		}
//	}
//
//	public byte[] getBytes(String bytes){
//		if(bytes == null) return null;
//		byte[] ret = new byte[bytes.length()/2];
//		for(int x=0; x<ret.length; x++)
//			ret[x] = (byte)Integer.parseInt(bytes.substring(x*2, (x+1)*2),16);
//		return ret;
//	}
//
//	public double getGrowthHC(GrowthType gt) {
//		SysGrowth sg = getSysGrowth(gt,false);
//		if(sg != null)
//			return sg.getGrowthHC();
//		return 0;
//	}
//	public double getGrowthBC(GrowthType gt) {
//		SysGrowth sg = getSysGrowth(gt,false);
//		if(sg != null)
//			return sg.getGrowthBC();
//		return 0;
//	}
//	public double getGrowthLC(GrowthType gt) {
//		SysGrowth sg = getSysGrowth(gt,false);
//		if(sg != null)
//			return sg.getGrowthLC();
//		return 0;
//	}
//
//	public void setGrowthHC(GrowthType gt, double value) throws SQLException{
//		SysGrowth sysG=getSysGrowth(gt,true);
//		sysG.setGrowthHC((float)value);
//	}
//	public void setGrowthBC(GrowthType gt, double value) throws SQLException{
//		SysGrowth sysG=getSysGrowth(gt,true);
//		sysG.setGrowthBC((float)value);
//	}
//	public void setGrowthLC(GrowthType gt, double value) throws SQLException{
//		SysGrowth sysG=getSysGrowth(gt,true);
//		sysG.setGrowthLC((float)value);
//	}
//
//	public void saveGrowth() throws Exception{
//		ByteArrayOutputStream bos = new ByteArrayOutputStream();
//		ObjectOutputStream out = new ObjectOutputStream(bos);
//		out.writeObject(getSysGrowths());
//		out.close();
//		byte[] data = bos.toByteArray();
//		setProperty("ALT_VARCHAR1", getBytes(data,0,LEN), getAltVarchar1());
//		setProperty("ALT_VARCHAR2", getBytes(data,LEN,LEN), getAltVarchar2());
//		setProperty("ALT_VARCHAR3", getBytes(data,LEN*2,LEN), getAltVarchar3());
//	}
//	public static byte[] getBytes(byte[] data, int start, int count){
//		if(start >= data.length)
//			return null;
//		if(data.length-start < count)
//			count = data.length-start;
//		byte[] ret = new byte[count];
//		for(int x=0; x<count; x++)
//			ret[x] = data[start+x];
//		return ret;
//	}
//
//	public static void copyBytes(byte[] dest, int start, byte[] src){
//		if(src == null) 
//			return;		
//		
//		for(int x=0; x<src.length; x++)
//			dest[start+x] = src[x];
//	}
//
//	public SysGrowth getSysGrowth(GrowthType gt, boolean autoCreate){
//		for(SysGrowth sg:getSysGrowths())
//			if(sg.getGrowthTypeId()==gt.getGrowthTypeId())
//				return sg;
//		if(autoCreate){
//			SysGrowth sg = new SysGrowth((byte)gt.getGrowthTypeId());
//			getSysGrowths().add(sg);
//			return sg;
//		}
//		return null;
//	}

	//	TODO Future field in database
	//	public void setProjCountByCalYear(int projCount) throws SQLException {
	//		this.setAltDouble1(projCount);
	//	}

	public void setCktAddByCalYear(int cktAdd) throws SQLException {
		this.setAltDouble1(cktAdd);
	}

	public void setCapAddByCalYear(double capAdd) throws SQLException {
		this.setAltDouble2(capAdd);
	}

	public void setVarAddByCalYear(double varAdd) throws SQLException {
		this.setAltDouble3(varAdd);		
	}

	//	TODO Future field in database
	//	public int getProjCountByCalYear() throws SQLException {
	//		return this.getAltDouble1();
	//	}

	public int getCktAddByCalYear() throws SQLException {
		return (int) getAltDouble1();
	}

	public double getCapAddByCalYear() throws SQLException {
		return this.getAltDouble2();
	}

	public double getVarAddByCalYear() throws SQLException {
		return this.getAltDouble3();		
	}

}
