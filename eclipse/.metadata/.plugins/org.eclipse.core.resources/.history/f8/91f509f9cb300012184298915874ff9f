package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Collection;
import java.util.TreeSet;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.ScheduleTaskDAO;
@Entity
@Table(schema="MDI",name="MDIT22_SCHEDULE_TASK")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM ScheduleTask o WHERE o.ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM ScheduleTask o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM ScheduleTask o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findBySchedule", query="SELECT o FROM ScheduleTask o WHERE o.SCHEDULE_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByTaskType", query="SELECT o FROM ScheduleTask o WHERE o.TASK_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByParent", query="SELECT o FROM ScheduleTask o WHERE o.PARENT_ID=?1 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIT22_SCHEDULE_TASK o WHERE o.ID=?"),//AUTO-GENERATED
})
public class ScheduleTask extends ScheduleTaskDAO{
	public ScheduleTask(){
	}
	public ScheduleTask(int id){
		super(id);
	}
	public ScheduleTask(ScheduleTask orig){
		super(orig);
	}
	@Override
	public Collection<ScheduleTask> getPredTasks() throws SQLException {
		TreeSet<ScheduleTask> pts = new TreeSet<ScheduleTask>();
		for(StRelation tr:getPreds())
			pts.add(tr.getPredTask());
		return pts;
	}
	@Override
	public String toString() {
		return getName();
	}
	@Override
	public double getPercentComp() {
		return 0;
	}
	
	@Override
	public String getName() {
		if(super.getName()!=null)
			return super.getName();
		try {
			return getTaskType().getName();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	@Override
	public AbstractRelation addPred(AbstractTask predTask, int relation)throws SQLException {
		StRelation tr = new StRelation(getId(),predTask.getId(),relation);
		addPred(tr);
		return tr;
	}
	@Override
	public Schedulable getSchedulable() throws SQLException {
		return getSchedule();
	}
	@Override
	public void setParent(AbstractTask at) throws SQLException {
		setParent((ScheduleTask) at);
	}
	@Override
	public void setSchedulable(Schedulable s) throws SQLException {
		if(s instanceof Schedule) this.setSchedule((Schedule) s);
	}
	@Override
	public StResource getNewResource() {
		return new StResource();
	}
}

