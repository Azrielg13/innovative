/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.log.EspLogger;
import com.sce.esp.object.dao.AbankTransDAO;
@Entity
@Table(schema="MDI",name="MDI380_ABANK_TRANS")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM AbankTrans o WHERE o.PLANYEAR=?1 AND o.TIE_ID=?2 AND o.YEAR=?3 AND o.TRANS_SUB_ID=?4"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM AbankTrans o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM AbankTrans o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
	@NamedQuery(name = "findByAbankN1Tie", query="SELECT o FROM AbankTrans o WHERE o.PLANYEAR=?1 AND o.TIE_ID=?2 AND o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI380_ABANK_TRANS o WHERE o.PLANYEAR=? AND o.TIE_ID=? AND o.YEAR=? AND o.TRANS_SUB_ID=?"),//AUTO-GENERATED
})
public class AbankTrans extends AbankTransDAO implements Serializable{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 6826528252532487820L;

	/**
	 * The Constructor.
	 * 
	 * @param transSubId the trans sub id
	 * @param year the year
	 * @param planyear the planyear
	 * @param tieId the tie id
	 */
	public AbankTrans(){
	}
	public AbankTrans(int planyear, int tieId, int year, int transSubId){
		super(planyear,tieId,year,transSubId);
	}


	public AbankTrans(AbankTrans abankTrans) {
		super(abankTrans);
	}


	/**
	 * Gets the trans sub.
	 * 
	 * @return the trans sub
	 * 
	 * @throws SQLException the SQL exception
	 */
    public Bbank getTransSub()throws SQLException{
		return getBbank();
	}
    
    /**
     * Gets the n1 roll flag.
     * 
     * @param simId the sim id
     * 
     * @return the n1 roll flag
     * 
     * @throws SQLException the SQL exception
     */
	public int getN1BadRollFlag(int simId)throws SQLException{
		if(!isDisabled()){
			Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_BAD_XFER_FLAG);		
			if(flag!=null && !flag.isDisabled() && flag.isShowFlag()){
				Sys sys = getAbankN1Tie().getSys();
				Abank ab = getToABank();
				if(ab != null){
					if(ab.getYear(simId, getYear()).getELLReserve(sys) < ab.getYear(simId, getYear()).getELL()*flag.getValue())
						return flag.getFlagId();
				}
			}
		}
		return 0;
	}
	
	/**
	 * Gets the n1 roll flag.
	 * 
	 * @param simId the sim id
	 * 
	 * @return the n1 roll flag
	 * 
	 * @throws SQLException the SQL exception
	 */
	public int getN1RollFlag(int simId)throws SQLException{
		if(!isDisabled()){
			Flag flag = Flag.getInstance(getPlanyear(), Flag.N1_ROLL_FLAG);		
			if(flag!=null && !flag.isDisabled() && flag.isShowFlag()){
				Sys sys = getAbankN1Tie().getSys();
				if(sys != null){
					if((sys.getYear(simId,getYear()).getLongTermReserve() - BbankYear.getInstance(getPlanyear(),simId,getTransSubId(),getYear()).getABankProjLoad()) > sys.getYear(simId,getYear()).getLtn1()*flag.getValue())
						return flag.getFlagId();
				}
			}
		}
		return 0;
	}
    
    /**
     * returns an instance of From ABank.
     * 
     * @return the to A bank
     * 
     * @throws SQLException the SQL exception
     */ 
    public Abank getToABank()throws SQLException{
    	AbankN1Tie tie = getAbankN1Tie();
        if(tie != null)
        	return tie.getAbank();
        return null;
    }
    
    /**
     * To string.
     * 
     * @return the string
     */
    public String toString(){
    	try {
			return getTransSub().toString();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return "Roll Scheme";
    }
}
