package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.MDIObject;
import com.sce.esp.object.model.TimeCrisis;
import com.sce.esp.object.model.User;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class TimeCrisisDAO extends MDIObject{
	public static enum KEY_PROPERTY{TRANS_ID};
	public static enum PROPERTY{TRANS_ID,USERNAME_ID,HOST,CORE_OBJECT,TASK,START_TIME,END_TIME,NOTE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int TRANSID_LIMIT = 9;
	public final static int USERNAMEID_LIMIT = 9;
	public final static int HOST_LIMIT = 30;
	public final static int COREOBJECT_LIMIT = 50;
	public final static int TASK_LIMIT = 30;
	public final static int STARTTIME_LIMIT = 22;
	public final static int ENDTIME_LIMIT = 22;
	public final static int NOTE_LIMIT = 256;
	private int transId;
	private int usernameId;
	private String host;
	private String coreObject;
	private String task;
	private long startTime;
	private long endTime;
	private String note;
	private User user;
	public static TimeCrisis getInstance(int transId)throws java.sql.SQLException{
		return getInstance(transId, true);
	}
	public static TimeCrisis getInstance(int transId, boolean fetch)throws java.sql.SQLException{
		if(isNull(transId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(transId);
		Cache cache = em.getEntityManagerFactory().getCache();
		TimeCrisis o = null;
		if(cache != null && cache.contains(TimeCrisis.class, pk))
			o = em.find(TimeCrisis.class, pk);
		if(o==null && getAICache().contains(TimeCrisis.class, pk))
			o = getAICache().find(TimeCrisis.class, pk);
		if(o==null && fetch)
			o = em.find(TimeCrisis.class, pk);
		if(o==null && fetch && TimeCrisis.class.getAnnotation(AutoInsertable.class) != null){
			o = new TimeCrisis(transId);
			getAICache().cache(TimeCrisis.class, o);
		}
		return o;
	}
	public static Collection<TimeCrisis> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<TimeCrisis> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<TimeCrisis> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM TimeCrisis o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<TimeCrisis> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TimeCrisis> tq = em.createQuery(jpql,TimeCrisis.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<TimeCrisis> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<TimeCrisis> tq = em.createNamedQuery(name,TimeCrisis.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public TimeCrisisDAO(){}
	public TimeCrisisDAO(int transId){
		this.transId=transId;
	}
	public TimeCrisisDAO(TimeCrisisDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(TimeCrisisDAO orig){
		this.usernameId=orig.getUsernameId();
		this.host=orig.getHost();
		this.coreObject=orig.getCoreObject();
		this.task=orig.getTask();
		this.startTime=orig.getStartTime();
		this.endTime=orig.getEndTime();
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{transId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDI018_SEQ",sequenceName="MDI018_SEQ")
	@Column(name="TRANS_ID",nullable=false,length=9)
	public int getTransId(){
		return transId;
	}
	public void setTransId(int transId) throws java.sql.SQLException{
		if(isSame(transId, getTransId()))return;
		int oldValue = getTransId();
		this.transId=transId;
		setProperty("TRANS_ID", transId, oldValue);
	}
	@Column(name="USERNAME_ID",nullable=false,length=9)
	public int getUsernameId(){
		return usernameId;
	}
	public void setUsernameId(int usernameId) throws java.sql.SQLException{
		if(isSame(usernameId, getUsernameId()))return;
		int oldValue = getUsernameId();
		this.usernameId=usernameId;
		setProperty("USERNAME_ID", usernameId, oldValue);
		user=null;
	}
	@Column(name="HOST",nullable=false,length=30)
	public String getHost(){
		return host;
	}
	public void setHost(String host) throws java.sql.SQLException{
		if(isSame(host, getHost()))return;
		String oldValue = getHost();
		this.host=host;
		setProperty("HOST", host, oldValue);
	}
	@Column(name="CORE_OBJECT",nullable=false,length=50)
	public String getCoreObject(){
		return coreObject;
	}
	public void setCoreObject(String coreObject) throws java.sql.SQLException{
		if(isSame(coreObject, getCoreObject()))return;
		String oldValue = getCoreObject();
		this.coreObject=coreObject;
		setProperty("CORE_OBJECT", coreObject, oldValue);
	}
	@Column(name="TASK",nullable=false,length=30)
	public String getTask(){
		return task;
	}
	public void setTask(String task) throws java.sql.SQLException{
		if(isSame(task, getTask()))return;
		String oldValue = getTask();
		this.task=task;
		setProperty("TASK", task, oldValue);
	}
	@Column(name="START_TIME",nullable=false,length=22)
	public long getStartTime(){
		return startTime;
	}
	public void setStartTime(long startTime) throws java.sql.SQLException{
		if(isSame(startTime, getStartTime()))return;
		long oldValue = getStartTime();
		this.startTime=startTime;
		setProperty("START_TIME", startTime, oldValue);
	}
	@Column(name="END_TIME",nullable=false,length=22)
	public long getEndTime(){
		return endTime;
	}
	public void setEndTime(long endTime) throws java.sql.SQLException{
		if(isSame(endTime, getEndTime()))return;
		long oldValue = getEndTime();
		this.endTime=endTime;
		setProperty("END_TIME", endTime, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public User getUser()throws java.sql.SQLException{
		if(user==null)
			user=User.getInstance(getUsernameId());
		return user;
	}
	public void setUser(User user)throws java.sql.SQLException{
		setUsernameId(user==null?0:user.getUsernameId());
		this.user=user;
	}
	public TimeCrisis copy()throws java.sql.SQLException{
		TimeCrisis cp = new TimeCrisis((TimeCrisis)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(TimeCrisisDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(TimeCrisisDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getTransId(),o.getTransId())) diffs.add("TRANS_ID");
		if(!isSame(getUsernameId(),o.getUsernameId())) diffs.add("USERNAME_ID");
		if(!isSame(getHost(),o.getHost())) diffs.add("HOST");
		if(!isSame(getCoreObject(),o.getCoreObject())) diffs.add("CORE_OBJECT");
		if(!isSame(getTask(),o.getTask())) diffs.add("TASK");
		if(!isSame(getStartTime(),o.getStartTime())) diffs.add("START_TIME");
		if(!isSame(getEndTime(),o.getEndTime())) diffs.add("END_TIME");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
