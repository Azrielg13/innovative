package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Assumption;
import com.sce.esp.object.model.Loc;
import com.sce.esp.object.model.SceProjAssumption;
import com.sce.esp.object.model.SceProjRev;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class SceProjAssumptionDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCE_PROJ_ASSUMPTION_ID};
	public static enum PROPERTY{SCE_PROJ_ASSUMPTION_ID,SCE_PROJ_REV_ID,ASSUMPTION_ID,ASSUMPTION_DESCRIPTION,LOC_ID,LOC_DESCRIPTION,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int SCEPROJASSUMPTIONID_LIMIT = 9;
	public final static int SCEPROJREVID_LIMIT = 9;
	public final static int ASSUMPTIONID_LIMIT = 9;
	public final static int ASSUMPTIONDESCRIPTION_LIMIT = 1024;
	public final static int LOCID_LIMIT = 9;
	public final static int LOCDESCRIPTION_LIMIT = 1024;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 1024;
	public final static int ALTDATE1_LIMIT = 7;
	private int sceProjAssumptionId;
	private int sceProjRevId;
	private int assumptionId;
	private String assumptionDescription;
	private int locId;
	private String locDescription;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private Assumption assumption;
	private Loc loc;
	private SceProjRev sceProjRev;
	public static SceProjAssumption getInstance(int sceProjAssumptionId)throws java.sql.SQLException{
		return getInstance(sceProjAssumptionId, true);
	}
	public static SceProjAssumption getInstance(int sceProjAssumptionId, boolean fetch)throws java.sql.SQLException{
		if(isNull(sceProjAssumptionId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(sceProjAssumptionId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjAssumption o = null;
		if(cache != null && cache.contains(SceProjAssumption.class, pk))
			o = em.find(SceProjAssumption.class, pk);
		if(o==null && getAICache().contains(SceProjAssumption.class, pk))
			o = getAICache().find(SceProjAssumption.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjAssumption.class, pk);
		if(o==null && fetch && SceProjAssumption.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjAssumption(sceProjAssumptionId);
			getAICache().cache(SceProjAssumption.class, o);
		}
		return o;
	}
	public static Collection<SceProjAssumption> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjAssumption> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjAssumption> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjAssumption o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjAssumption> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjAssumption> tq = em.createQuery(jpql,SceProjAssumption.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjAssumption> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjAssumption> tq = em.createNamedQuery(name,SceProjAssumption.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjAssumptionDAO(){}
	public SceProjAssumptionDAO(int sceProjAssumptionId){
		this.sceProjAssumptionId=sceProjAssumptionId;
	}
	public SceProjAssumptionDAO(SceProjAssumptionDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(SceProjAssumptionDAO orig){
		this.sceProjRevId=orig.getSceProjRevId();
		this.assumptionId=orig.getAssumptionId();
		this.assumptionDescription=orig.getAssumptionDescription();
		this.locId=orig.getLocId();
		this.locDescription=orig.getLocDescription();
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{sceProjAssumptionId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDIT80_SEQ",sequenceName="MDIT80_SEQ")
	@Column(name="SCE_PROJ_ASSUMPTION_ID",nullable=false,length=9)
	public int getSceProjAssumptionId(){
		return sceProjAssumptionId;
	}
	public void setSceProjAssumptionId(int sceProjAssumptionId) throws java.sql.SQLException{
		if(isSame(sceProjAssumptionId, getSceProjAssumptionId()))return;
		int oldValue = getSceProjAssumptionId();
		this.sceProjAssumptionId=sceProjAssumptionId;
		setProperty("SCE_PROJ_ASSUMPTION_ID", sceProjAssumptionId, oldValue);
	}
	@Column(name="SCE_PROJ_REV_ID",nullable=false,length=9)
	public int getSceProjRevId(){
		return sceProjRevId;
	}
	public void setSceProjRevId(int sceProjRevId) throws java.sql.SQLException{
		if(isSame(sceProjRevId, getSceProjRevId()))return;
		int oldValue = getSceProjRevId();
		this.sceProjRevId=sceProjRevId;
		setProperty("SCE_PROJ_REV_ID", sceProjRevId, oldValue);
		sceProjRev=null;
	}
	@Column(name="ASSUMPTION_ID",nullable=false,length=9)
	public int getAssumptionId(){
		return assumptionId;
	}
	public void setAssumptionId(int assumptionId) throws java.sql.SQLException{
		if(isSame(assumptionId, getAssumptionId()))return;
		int oldValue = getAssumptionId();
		this.assumptionId=assumptionId;
		setProperty("ASSUMPTION_ID", assumptionId, oldValue);
		assumption=null;
	}
	@Column(name="ASSUMPTION_DESCRIPTION",nullable=true,length=1024)
	public String getAssumptionDescription(){
		return assumptionDescription;
	}
	public void setAssumptionDescription(String assumptionDescription) throws java.sql.SQLException{
		if(isSame(assumptionDescription, getAssumptionDescription()))return;
		String oldValue = getAssumptionDescription();
		this.assumptionDescription=assumptionDescription;
		setProperty("ASSUMPTION_DESCRIPTION", assumptionDescription, oldValue);
	}
	@Column(name="LOC_ID",nullable=true,length=9)
	public int getLocId(){
		return locId;
	}
	public void setLocId(int locId) throws java.sql.SQLException{
		if(isSame(locId, getLocId()))return;
		int oldValue = getLocId();
		this.locId=locId;
		setProperty("LOC_ID", locId, oldValue);
		loc=null;
	}
	@Column(name="LOC_DESCRIPTION",nullable=true,length=1024)
	public String getLocDescription(){
		return locDescription;
	}
	public void setLocDescription(String locDescription) throws java.sql.SQLException{
		if(isSame(locDescription, getLocDescription()))return;
		String oldValue = getLocDescription();
		this.locDescription=locDescription;
		setProperty("LOC_DESCRIPTION", locDescription, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=1024)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public Assumption getAssumption()throws java.sql.SQLException{
		if(assumption==null)
			assumption=Assumption.getInstance(getAssumptionId());
		return assumption;
	}
	public void setAssumption(Assumption assumption)throws java.sql.SQLException{
		setAssumptionId(assumption==null?0:assumption.getAssumptionId());
		this.assumption=assumption;
	}
	public Loc getLoc()throws java.sql.SQLException{
		if(loc==null)
			loc=Loc.getInstance(getLocId());
		return loc;
	}
	public void setLoc(Loc loc)throws java.sql.SQLException{
		setLocId(loc==null?0:loc.getLocId());
		this.loc=loc;
	}
	public SceProjRev getSceProjRev()throws java.sql.SQLException{
		if(sceProjRev==null)
			sceProjRev=SceProjRev.getInstance(getSceProjRevId());
		return sceProjRev;
	}
	public void setSceProjRev(SceProjRev sceProjRev)throws java.sql.SQLException{
		setSceProjRevId(sceProjRev==null?0:sceProjRev.getSceProjRevId());
		this.sceProjRev=sceProjRev;
	}
	public SceProjAssumption copy()throws java.sql.SQLException{
		SceProjAssumption cp = new SceProjAssumption((SceProjAssumption)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjAssumptionDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SceProjAssumptionDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getSceProjAssumptionId(),o.getSceProjAssumptionId())) diffs.add("SCE_PROJ_ASSUMPTION_ID");
		if(!isSame(getSceProjRevId(),o.getSceProjRevId())) diffs.add("SCE_PROJ_REV_ID");
		if(!isSame(getAssumptionId(),o.getAssumptionId())) diffs.add("ASSUMPTION_ID");
		if(!isSame(getAssumptionDescription(),o.getAssumptionDescription())) diffs.add("ASSUMPTION_DESCRIPTION");
		if(!isSame(getLocId(),o.getLocId())) diffs.add("LOC_ID");
		if(!isSame(getLocDescription(),o.getLocDescription())) diffs.add("LOC_DESCRIPTION");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
