package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.BidItem;
import com.sce.esp.object.model.CoType;
import com.sce.esp.object.model.CprPrime;
import com.sce.esp.object.model.CprSub;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.Org;
import com.sce.esp.object.model.SceProjElemCost;
import com.sce.esp.object.model.ScopeItem;
import com.sce.esp.object.model.ScopeItemCostYear;
import com.sce.esp.object.model.ScopeItemDescriptive;
import com.sce.esp.object.model.ScopeItemForecast;
import com.sce.esp.object.model.ScopeItemLabor;
import com.sce.esp.object.model.ScopeItemPerUnit;
import com.sce.esp.object.model.ScopeType;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ScopeItemDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCOPE_ITEM_ID};
	public static enum PROPERTY{SCOPE_ITEM_ID,SCOPE_TYPE_ID,COST_ID,PARENT_SI_ID,TITLE,MODELING_ITEM_ID,QUANTITY,PO_TYPE,LEAD_TIME,DESCRIPTION,ALT_DOUBLE1,HIGH_SIDE,ACTION_ID,FUNDING_TYPE_ID,FUNDER_ID,CPR_PRIME_ID,CPR_SUB_ID,NOTE,OWNER_ORG_ID,ALT_DOUBLE2,USE_DEFAULT_SCOPE,ALT_DOUBLE3,ALT_VARCHAR1,ALT_VARCHAR2,ALT_VARCHAR3,ALT_DATE1,ALT_DATE2,ALT_DATE3,USE_CALC,ENABLED,CO_TYPE_ID,FACILITY_ID,USER_COST_ADJ,COST_NOTE,OM};
	public final static int SCOPEITEMID_LIMIT = 9;
	public final static int SCOPETYPEID_LIMIT = 9;
	public final static int COSTID_LIMIT = 9;
	public final static int PARENTSIID_LIMIT = 9;
	public final static int TITLE_LIMIT = 64;
	public final static int MODELINGITEMID_LIMIT = 9;
	public final static int QUANTITY_LIMIT = 126;
	public final static int POTYPE_LIMIT = 2;
	public final static int LEADTIME_LIMIT = 6;
	public final static int DESCRIPTION_LIMIT = 2048;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int HIGHSIDE_LIMIT = 1;
	public final static int ACTIONID_LIMIT = 9;
	public final static int FUNDINGTYPEID_LIMIT = 9;
	public final static int FUNDERID_LIMIT = 9;
	public final static int CPRPRIMEID_LIMIT = 9;
	public final static int CPRSUBID_LIMIT = 9;
	public final static int NOTE_LIMIT = 512;
	public final static int OWNERORGID_LIMIT = 9;
	public final static int ALTDOUBLE2_LIMIT = 24;
	public final static int USEDEFAULTSCOPE_LIMIT = 1;
	public final static int ALTDOUBLE3_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTVARCHAR2_LIMIT = 256;
	public final static int ALTVARCHAR3_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	public final static int ALTDATE2_LIMIT = 7;
	public final static int ALTDATE3_LIMIT = 7;
	public final static int USECALC_LIMIT = 1;
	public final static int ENABLED_LIMIT = 1;
	public final static int COTYPEID_LIMIT = 9;
	public final static int FACILITYID_LIMIT = 9;
	public final static int USERCOSTADJ_LIMIT = 24;
	public final static int COSTNOTE_LIMIT = 1024;
	public final static int OM_LIMIT = 1;
	private int scopeItemId;
	private int scopeTypeId;
	private int costId;
	private int parentSiId;
	private String title;
	private int modelingItemId;
	private double quantity;
	private int poType;
	private int leadTime;
	private String description;
	private double altDouble1;
	private boolean highSide;
	private int actionId;
	private int fundingTypeId;
	private int funderId;
	private int cprPrimeId;
	private int cprSubId;
	private String note;
	private int ownerOrgId;
	private double altDouble2;
	private boolean useDefaultScope;
	private double altDouble3;
	private String altVarchar1;
	private String altVarchar2;
	private String altVarchar3;
	private Calendar altDate1;
	private Calendar altDate2;
	private Calendar altDate3;
	private boolean useCalc = true;
	private boolean enabled = true;
	private int coTypeId;
	private int facilityId;
	private double userCostAdj;
	private String costNote;
	private boolean om;
	private Collection<ScopeItem> scopeItems;
	private Collection<ScopeItemCostYear> scopeItemCostYears;
	private Collection<ScopeItemForecast> scopeItemForecasts;
	private Collection<ScopeItemLabor> scopeItemLabors;
	private Collection<ScopeItemPerUnit> scopeItemPerUnits;
	private Collection<ScopeItemDescriptive> scopeItemDescriptives;
	private Collection<BidItem> bidItems;
	private ScopeType scopeType;
	private SceProjElemCost sceProjElemCost;
	private CoType coType;
	private ScopeItem parent;
	private LookUp action;
	private CprPrime cprPrime;
	private CprSub cprSub;
	private LookUp fundingType;
	private LookUp funder;
	private Org ownerOrg;
	public static ScopeItem getInstance(int scopeItemId)throws java.sql.SQLException{
		return getInstance(scopeItemId, true);
	}
	public static ScopeItem getInstance(int scopeItemId, boolean fetch)throws java.sql.SQLException{
		if(isNull(scopeItemId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scopeItemId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ScopeItem o = null;
		if(cache != null && cache.contains(ScopeItem.class, pk))
			o = em.find(ScopeItem.class, pk);
		if(o==null && getAICache().contains(ScopeItem.class, pk))
			o = getAICache().find(ScopeItem.class, pk);
		if(o==null && fetch)
			o = em.find(ScopeItem.class, pk);
		if(o==null && fetch && ScopeItem.class.getAnnotation(AutoInsertable.class) != null){
			o = new ScopeItem(scopeItemId);
			getAICache().cache(ScopeItem.class, o);
		}
		return o;
	}
	public static Collection<ScopeItem> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ScopeItem> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ScopeItem> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ScopeItem o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ScopeItem> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeItem> tq = em.createQuery(jpql,ScopeItem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ScopeItem> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeItem> tq = em.createNamedQuery(name,ScopeItem.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ScopeItemDAO(){}
	public ScopeItemDAO(int scopeItemId){
		this.scopeItemId=scopeItemId;
	}
	public ScopeItemDAO(ScopeItemDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ScopeItemDAO orig){
		this.scopeTypeId=orig.getScopeTypeId();
		this.costId=orig.getCostId();
		this.parentSiId=orig.getParentSiId();
		this.title=orig.getTitle();
		this.modelingItemId=orig.getModelingItemId();
		this.quantity=orig.getQuantity();
		this.poType=orig.getPoType();
		this.leadTime=orig.getLeadTime();
		this.description=orig.getDescription();
		this.altDouble1=orig.getAltDouble1();
		this.highSide=orig.isHighSide();
		this.actionId=orig.getActionId();
		this.fundingTypeId=orig.getFundingTypeId();
		this.funderId=orig.getFunderId();
		this.cprPrimeId=orig.getCprPrimeId();
		this.cprSubId=orig.getCprSubId();
		this.note=orig.getNote();
		this.ownerOrgId=orig.getOwnerOrgId();
		this.altDouble2=orig.getAltDouble2();
		this.useDefaultScope=orig.isUseDefaultScope();
		this.altDouble3=orig.getAltDouble3();
		this.altVarchar1=orig.getAltVarchar1();
		this.altVarchar2=orig.getAltVarchar2();
		this.altVarchar3=orig.getAltVarchar3();
		this.altDate1=orig.getAltDate1();
		this.altDate2=orig.getAltDate2();
		this.altDate3=orig.getAltDate3();
		this.useCalc=orig.isUseCalc();
		this.enabled=orig.isEnabled();
		this.coTypeId=orig.getCoTypeId();
		this.facilityId=orig.getFacilityId();
		this.userCostAdj=orig.getUserCostAdj();
		this.costNote=orig.getCostNote();
		this.om=orig.isOm();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scopeItemId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDISX3_SEQ",sequenceName="MDISX3_SEQ")
	@Column(name="SCOPE_ITEM_ID",nullable=false,length=9)
	public int getScopeItemId(){
		return scopeItemId;
	}
	public void setScopeItemId(int scopeItemId) throws java.sql.SQLException{
		if(isSame(scopeItemId, getScopeItemId()))return;
		int oldValue = getScopeItemId();
		this.scopeItemId=scopeItemId;
		setProperty("SCOPE_ITEM_ID", scopeItemId, oldValue);
	}
	@Column(name="SCOPE_TYPE_ID",nullable=false,length=9)
	public int getScopeTypeId(){
		return scopeTypeId;
	}
	public void setScopeTypeId(int scopeTypeId) throws java.sql.SQLException{
		if(isSame(scopeTypeId, getScopeTypeId()))return;
		int oldValue = getScopeTypeId();
		this.scopeTypeId=scopeTypeId;
		setProperty("SCOPE_TYPE_ID", scopeTypeId, oldValue);
		scopeType=null;
	}
	@Column(name="COST_ID",nullable=false,length=9)
	public int getCostId(){
		return costId;
	}
	public void setCostId(int costId) throws java.sql.SQLException{
		if(isSame(costId, getCostId()))return;
		int oldValue = getCostId();
		this.costId=costId;
		setProperty("COST_ID", costId, oldValue);
		sceProjElemCost=null;
	}
	@Column(name="PARENT_SI_ID",nullable=true,length=9)
	public int getParentSiId(){
		return parentSiId;
	}
	public void setParentSiId(int parentSiId) throws java.sql.SQLException{
		if(isSame(parentSiId, getParentSiId()))return;
		int oldValue = getParentSiId();
		this.parentSiId=parentSiId;
		setProperty("PARENT_SI_ID", parentSiId, oldValue);
		parent=null;
	}
	@Column(name="TITLE",nullable=false,length=64)
	public String getTitle(){
		return title;
	}
	public void setTitle(String title) throws java.sql.SQLException{
		if(isSame(title, getTitle()))return;
		String oldValue = getTitle();
		this.title=title;
		setProperty("TITLE", title, oldValue);
	}
	@Column(name="MODELING_ITEM_ID",nullable=true,length=9)
	public int getModelingItemId(){
		return modelingItemId;
	}
	public void setModelingItemId(int modelingItemId) throws java.sql.SQLException{
		if(isSame(modelingItemId, getModelingItemId()))return;
		int oldValue = getModelingItemId();
		this.modelingItemId=modelingItemId;
		setProperty("MODELING_ITEM_ID", modelingItemId, oldValue);
	}
	@Column(name="QUANTITY",nullable=true,length=126)
	public double getQuantity(){
		return quantity;
	}
	public void setQuantity(double quantity) throws java.sql.SQLException{
		if(isSame(quantity, getQuantity()))return;
		double oldValue = getQuantity();
		this.quantity=quantity;
		setProperty("QUANTITY", quantity, oldValue);
	}
	@Column(name="PO_TYPE",nullable=true,length=2)
	public int getPoType(){
		return poType;
	}
	public void setPoType(int poType) throws java.sql.SQLException{
		if(isSame(poType, getPoType()))return;
		int oldValue = getPoType();
		this.poType=poType;
		setProperty("PO_TYPE", poType, oldValue);
	}
	@Column(name="LEAD_TIME",nullable=true,length=6)
	public int getLeadTime(){
		return leadTime;
	}
	public void setLeadTime(int leadTime) throws java.sql.SQLException{
		if(isSame(leadTime, getLeadTime()))return;
		int oldValue = getLeadTime();
		this.leadTime=leadTime;
		setProperty("LEAD_TIME", leadTime, oldValue);
	}
	@Column(name="DESCRIPTION",nullable=true,length=2048)
	public String getDescription(){
		return description;
	}
	public void setDescription(String description) throws java.sql.SQLException{
		if(isSame(description, getDescription()))return;
		String oldValue = getDescription();
		this.description=description;
		setProperty("DESCRIPTION", description, oldValue);
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="HIGH_SIDE",nullable=true,length=1)
	public boolean isHighSide(){
		return highSide;
	}
	public void setHighSide(boolean highSide) throws java.sql.SQLException{
		if(isSame(highSide, isHighSide()))return;
		boolean oldValue = isHighSide();
		this.highSide=highSide;
		setProperty("HIGH_SIDE", highSide, oldValue);
	}
	@Column(name="ACTION_ID",nullable=true,length=9)
	public int getActionId(){
		return actionId;
	}
	public void setActionId(int actionId) throws java.sql.SQLException{
		if(isSame(actionId, getActionId()))return;
		int oldValue = getActionId();
		this.actionId=actionId;
		setProperty("ACTION_ID", actionId, oldValue);
		action=null;
	}
	@Column(name="FUNDING_TYPE_ID",nullable=true,length=9)
	public int getFundingTypeId(){
		return fundingTypeId;
	}
	public void setFundingTypeId(int fundingTypeId) throws java.sql.SQLException{
		if(isSame(fundingTypeId, getFundingTypeId()))return;
		int oldValue = getFundingTypeId();
		this.fundingTypeId=fundingTypeId;
		setProperty("FUNDING_TYPE_ID", fundingTypeId, oldValue);
		fundingType=null;
	}
	@Column(name="FUNDER_ID",nullable=true,length=9)
	public int getFunderId(){
		return funderId;
	}
	public void setFunderId(int funderId) throws java.sql.SQLException{
		if(isSame(funderId, getFunderId()))return;
		int oldValue = getFunderId();
		this.funderId=funderId;
		setProperty("FUNDER_ID", funderId, oldValue);
		funder=null;
	}
	@Column(name="CPR_PRIME_ID",nullable=true,length=9)
	public int getCprPrimeId(){
		return cprPrimeId;
	}
	public void setCprPrimeId(int cprPrimeId) throws java.sql.SQLException{
		if(isSame(cprPrimeId, getCprPrimeId()))return;
		int oldValue = getCprPrimeId();
		this.cprPrimeId=cprPrimeId;
		setProperty("CPR_PRIME_ID", cprPrimeId, oldValue);
		cprPrime=null;
	}
	@Column(name="CPR_SUB_ID",nullable=true,length=9)
	public int getCprSubId(){
		return cprSubId;
	}
	public void setCprSubId(int cprSubId) throws java.sql.SQLException{
		if(isSame(cprSubId, getCprSubId()))return;
		int oldValue = getCprSubId();
		this.cprSubId=cprSubId;
		setProperty("CPR_SUB_ID", cprSubId, oldValue);
		cprSub=null;
	}
	@Column(name="NOTE",nullable=true,length=512)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	@Column(name="OWNER_ORG_ID",nullable=true,length=9)
	public int getOwnerOrgId(){
		return ownerOrgId;
	}
	public void setOwnerOrgId(int ownerOrgId) throws java.sql.SQLException{
		if(isSame(ownerOrgId, getOwnerOrgId()))return;
		int oldValue = getOwnerOrgId();
		this.ownerOrgId=ownerOrgId;
		setProperty("OWNER_ORG_ID", ownerOrgId, oldValue);
		ownerOrg=null;
	}
	@Column(name="ALT_DOUBLE2",nullable=true,length=24)
	public double getAltDouble2(){
		return altDouble2;
	}
	public void setAltDouble2(double altDouble2) throws java.sql.SQLException{
		if(isSame(altDouble2, getAltDouble2()))return;
		double oldValue = getAltDouble2();
		this.altDouble2=altDouble2;
		setProperty("ALT_DOUBLE2", altDouble2, oldValue);
	}
	@Column(name="USE_DEFAULT_SCOPE",nullable=true,length=1)
	public boolean isUseDefaultScope(){
		return useDefaultScope;
	}
	public void setUseDefaultScope(boolean useDefaultScope) throws java.sql.SQLException{
		if(isSame(useDefaultScope, isUseDefaultScope()))return;
		boolean oldValue = isUseDefaultScope();
		this.useDefaultScope=useDefaultScope;
		setProperty("USE_DEFAULT_SCOPE", useDefaultScope, oldValue);
	}
	@Column(name="ALT_DOUBLE3",nullable=true,length=24)
	public double getAltDouble3(){
		return altDouble3;
	}
	public void setAltDouble3(double altDouble3) throws java.sql.SQLException{
		if(isSame(altDouble3, getAltDouble3()))return;
		double oldValue = getAltDouble3();
		this.altDouble3=altDouble3;
		setProperty("ALT_DOUBLE3", altDouble3, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_VARCHAR2",nullable=true,length=256)
	public String getAltVarchar2(){
		return altVarchar2;
	}
	public void setAltVarchar2(String altVarchar2) throws java.sql.SQLException{
		if(isSame(altVarchar2, getAltVarchar2()))return;
		String oldValue = getAltVarchar2();
		this.altVarchar2=altVarchar2;
		setProperty("ALT_VARCHAR2", altVarchar2, oldValue);
	}
	@Column(name="ALT_VARCHAR3",nullable=true,length=256)
	public String getAltVarchar3(){
		return altVarchar3;
	}
	public void setAltVarchar3(String altVarchar3) throws java.sql.SQLException{
		if(isSame(altVarchar3, getAltVarchar3()))return;
		String oldValue = getAltVarchar3();
		this.altVarchar3=altVarchar3;
		setProperty("ALT_VARCHAR3", altVarchar3, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	@Column(name="ALT_DATE2",nullable=true,length=7)
	public Calendar getAltDate2(){
		return altDate2;
	}
	public void setAltDate2(Calendar altDate2) throws java.sql.SQLException{
		if(isSame(altDate2, getAltDate2()))return;
		Calendar oldValue = getAltDate2();
		this.altDate2=altDate2;
		setProperty("ALT_DATE2", altDate2, oldValue);
	}
	@Column(name="ALT_DATE3",nullable=true,length=7)
	public Calendar getAltDate3(){
		return altDate3;
	}
	public void setAltDate3(Calendar altDate3) throws java.sql.SQLException{
		if(isSame(altDate3, getAltDate3()))return;
		Calendar oldValue = getAltDate3();
		this.altDate3=altDate3;
		setProperty("ALT_DATE3", altDate3, oldValue);
	}
	@Column(name="USE_CALC",nullable=true,length=1)
	public boolean isUseCalc(){
		return useCalc;
	}
	public void setUseCalc(boolean useCalc) throws java.sql.SQLException{
		if(isSame(useCalc, isUseCalc()))return;
		boolean oldValue = isUseCalc();
		this.useCalc=useCalc;
		setProperty("USE_CALC", useCalc, oldValue);
	}
	@Column(name="ENABLED",nullable=true,length=1)
	public boolean isEnabled(){
		return enabled;
	}
	public void setEnabled(boolean enabled) throws java.sql.SQLException{
		if(isSame(enabled, isEnabled()))return;
		boolean oldValue = isEnabled();
		this.enabled=enabled;
		setProperty("ENABLED", enabled, oldValue);
	}
	@Column(name="CO_TYPE_ID",nullable=true,length=9)
	public int getCoTypeId(){
		return coTypeId;
	}
	public void setCoTypeId(int coTypeId) throws java.sql.SQLException{
		if(isSame(coTypeId, getCoTypeId()))return;
		int oldValue = getCoTypeId();
		this.coTypeId=coTypeId;
		setProperty("CO_TYPE_ID", coTypeId, oldValue);
		coType=null;
	}
	@Column(name="FACILITY_ID",nullable=true,length=9)
	public int getFacilityId(){
		return facilityId;
	}
	public void setFacilityId(int facilityId) throws java.sql.SQLException{
		if(isSame(facilityId, getFacilityId()))return;
		int oldValue = getFacilityId();
		this.facilityId=facilityId;
		setProperty("FACILITY_ID", facilityId, oldValue);
	}
	@Column(name="USER_COST_ADJ",nullable=true,length=24)
	public double getUserCostAdj(){
		return userCostAdj;
	}
	public void setUserCostAdj(double userCostAdj) throws java.sql.SQLException{
		if(isSame(userCostAdj, getUserCostAdj()))return;
		double oldValue = getUserCostAdj();
		this.userCostAdj=userCostAdj;
		setProperty("USER_COST_ADJ", userCostAdj, oldValue);
	}
	@Column(name="COST_NOTE",nullable=true,length=1024)
	public String getCostNote(){
		return costNote;
	}
	public void setCostNote(String costNote) throws java.sql.SQLException{
		if(isSame(costNote, getCostNote()))return;
		String oldValue = getCostNote();
		this.costNote=costNote;
		setProperty("COST_NOTE", costNote, oldValue);
	}
	@Column(name="OM",nullable=true,length=1)
	public boolean isOm(){
		return om;
	}
	public void setOm(boolean om) throws java.sql.SQLException{
		if(isSame(om, isOm()))return;
		boolean oldValue = isOm();
		this.om=om;
		setProperty("OM", om, oldValue);
	}
	public ScopeType getScopeType()throws java.sql.SQLException{
		if(scopeType==null)
			scopeType=ScopeType.getInstance(getScopeTypeId());
		return scopeType;
	}
	public void setScopeType(ScopeType scopeType)throws java.sql.SQLException{
		setScopeTypeId(scopeType==null?0:scopeType.getScopeTypeId());
		this.scopeType=scopeType;
	}
	public SceProjElemCost getSceProjElemCost()throws java.sql.SQLException{
		if(sceProjElemCost==null)
			sceProjElemCost=SceProjElemCost.getInstance(getCostId());
		return sceProjElemCost;
	}
	public void setSceProjElemCost(SceProjElemCost sceProjElemCost)throws java.sql.SQLException{
		setCostId(sceProjElemCost==null?0:sceProjElemCost.getCostId());
		this.sceProjElemCost=sceProjElemCost;
	}
	public CoType getCoType()throws java.sql.SQLException{
		if(coType==null)
			coType=CoType.getInstance(getCoTypeId());
		return coType;
	}
	public void setCoType(CoType coType)throws java.sql.SQLException{
		setCoTypeId(coType==null?0:coType.getCoTypeId());
		this.coType=coType;
	}
	public ScopeItem getParent()throws java.sql.SQLException{
		if(parent==null)
			parent=ScopeItem.getInstance(getParentSiId());
		return parent;
	}
	public void setParent(ScopeItem parent)throws java.sql.SQLException{
		setParentSiId(parent==null?0:parent.getScopeItemId());
		this.parent=parent;
	}
	public LookUp getAction()throws java.sql.SQLException{
		if(action==null)
			action=LookUp.getInstance(getActionId());
		return action;
	}
	public void setAction(LookUp action)throws java.sql.SQLException{
		setActionId(action==null?0:action.getId());
		this.action=action;
	}
	public CprPrime getCprPrime()throws java.sql.SQLException{
		if(cprPrime==null)
			cprPrime=CprPrime.getInstance(getCprPrimeId());
		return cprPrime;
	}
	public void setCprPrime(CprPrime cprPrime)throws java.sql.SQLException{
		setCprPrimeId(cprPrime==null?0:cprPrime.getId());
		this.cprPrime=cprPrime;
	}
	public CprSub getCprSub()throws java.sql.SQLException{
		if(cprSub==null)
			cprSub=CprSub.getInstance(getCprSubId());
		return cprSub;
	}
	public void setCprSub(CprSub cprSub)throws java.sql.SQLException{
		setCprSubId(cprSub==null?0:cprSub.getId());
		this.cprSub=cprSub;
	}
	public LookUp getFundingType()throws java.sql.SQLException{
		if(fundingType==null)
			fundingType=LookUp.getInstance(getFundingTypeId());
		return fundingType;
	}
	public void setFundingType(LookUp fundingType)throws java.sql.SQLException{
		setFundingTypeId(fundingType==null?0:fundingType.getId());
		this.fundingType=fundingType;
	}
	public LookUp getFunder()throws java.sql.SQLException{
		if(funder==null)
			funder=LookUp.getInstance(getFunderId());
		return funder;
	}
	public void setFunder(LookUp funder)throws java.sql.SQLException{
		setFunderId(funder==null?0:funder.getId());
		this.funder=funder;
	}
	public Org getOwnerOrg()throws java.sql.SQLException{
		if(ownerOrg==null)
			ownerOrg=Org.getInstance(getOwnerOrgId());
		return ownerOrg;
	}
	public void setOwnerOrg(Org ownerOrg)throws java.sql.SQLException{
		setOwnerOrgId(ownerOrg==null?0:ownerOrg.getOrgId());
		this.ownerOrg=ownerOrg;
	}
	public Collection<ScopeItem> getScopeItems()throws java.sql.SQLException{
		if(isNewInstance() || scopeItems != null){
			if(scopeItems == null)
				scopeItems = new TreeSet<ScopeItem>();
			return scopeItems;
		}
		return ScopeItem.getNamedCollection("findByParent",getScopeItemId());
	}
	public void addScopeItem(ScopeItem scopeItem)throws java.sql.SQLException{
		scopeItem.setParent((ScopeItem)this);
		if(isNewInstance() || scopeItems != null)
			getScopeItems().add(scopeItem);
		else
			scopeItem.insert();
	}
	public void removeScopeItem(ScopeItem scopeItem)throws java.sql.SQLException{
		if(isNewInstance() || scopeItems != null)
			getScopeItems().remove(scopeItem);
		else
			scopeItem.delete();
	}
	public Collection<ScopeItemCostYear> getScopeItemCostYears()throws java.sql.SQLException{
		if(isNewInstance() || scopeItemCostYears != null){
			if(scopeItemCostYears == null)
				scopeItemCostYears = new TreeSet<ScopeItemCostYear>();
			return scopeItemCostYears;
		}
		return ScopeItemCostYear.getNamedCollection("findByScopeItem",getScopeItemId());
	}
	public void addScopeItemCostYear(ScopeItemCostYear scopeItemCostYear)throws java.sql.SQLException{
		scopeItemCostYear.setScopeItem((ScopeItem)this);
		if(isNewInstance() || scopeItemCostYears != null)
			getScopeItemCostYears().add(scopeItemCostYear);
		else
			scopeItemCostYear.insert();
	}
	public void removeScopeItemCostYear(ScopeItemCostYear scopeItemCostYear)throws java.sql.SQLException{
		if(isNewInstance() || scopeItemCostYears != null)
			getScopeItemCostYears().remove(scopeItemCostYear);
		else
			scopeItemCostYear.delete();
	}
	public Collection<ScopeItemForecast> getScopeItemForecasts()throws java.sql.SQLException{
		if(isNewInstance() || scopeItemForecasts != null){
			if(scopeItemForecasts == null)
				scopeItemForecasts = new TreeSet<ScopeItemForecast>();
			return scopeItemForecasts;
		}
		return ScopeItemForecast.getNamedCollection("findByScopeItem",getScopeItemId());
	}
	public void addScopeItemForecast(ScopeItemForecast scopeItemForecast)throws java.sql.SQLException{
		scopeItemForecast.setScopeItem((ScopeItem)this);
		if(isNewInstance() || scopeItemForecasts != null)
			getScopeItemForecasts().add(scopeItemForecast);
		else
			scopeItemForecast.insert();
	}
	public void removeScopeItemForecast(ScopeItemForecast scopeItemForecast)throws java.sql.SQLException{
		if(isNewInstance() || scopeItemForecasts != null)
			getScopeItemForecasts().remove(scopeItemForecast);
		else
			scopeItemForecast.delete();
	}
	public Collection<ScopeItemLabor> getScopeItemLabors()throws java.sql.SQLException{
		if(isNewInstance() || scopeItemLabors != null){
			if(scopeItemLabors == null)
				scopeItemLabors = new TreeSet<ScopeItemLabor>();
			return scopeItemLabors;
		}
		return ScopeItemLabor.getNamedCollection("findByScopeItem",getScopeItemId());
	}
	public void addScopeItemLabor(ScopeItemLabor scopeItemLabor)throws java.sql.SQLException{
		scopeItemLabor.setScopeItem((ScopeItem)this);
		if(isNewInstance() || scopeItemLabors != null)
			getScopeItemLabors().add(scopeItemLabor);
		else
			scopeItemLabor.insert();
	}
	public void removeScopeItemLabor(ScopeItemLabor scopeItemLabor)throws java.sql.SQLException{
		if(isNewInstance() || scopeItemLabors != null)
			getScopeItemLabors().remove(scopeItemLabor);
		else
			scopeItemLabor.delete();
	}
	public Collection<ScopeItemPerUnit> getScopeItemPerUnits()throws java.sql.SQLException{
		if(isNewInstance() || scopeItemPerUnits != null){
			if(scopeItemPerUnits == null)
				scopeItemPerUnits = new TreeSet<ScopeItemPerUnit>();
			return scopeItemPerUnits;
		}
		return ScopeItemPerUnit.getNamedCollection("findByScopeItem",getScopeItemId());
	}
	public void addScopeItemPerUnit(ScopeItemPerUnit scopeItemPerUnit)throws java.sql.SQLException{
		scopeItemPerUnit.setScopeItem((ScopeItem)this);
		if(isNewInstance() || scopeItemPerUnits != null)
			getScopeItemPerUnits().add(scopeItemPerUnit);
		else
			scopeItemPerUnit.insert();
	}
	public void removeScopeItemPerUnit(ScopeItemPerUnit scopeItemPerUnit)throws java.sql.SQLException{
		if(isNewInstance() || scopeItemPerUnits != null)
			getScopeItemPerUnits().remove(scopeItemPerUnit);
		else
			scopeItemPerUnit.delete();
	}
	public Collection<ScopeItemDescriptive> getScopeItemDescriptives()throws java.sql.SQLException{
		if(isNewInstance() || scopeItemDescriptives != null){
			if(scopeItemDescriptives == null)
				scopeItemDescriptives = new TreeSet<ScopeItemDescriptive>();
			return scopeItemDescriptives;
		}
		return ScopeItemDescriptive.getNamedCollection("findByScopeItem",getScopeItemId());
	}
	public void addScopeItemDescriptive(ScopeItemDescriptive scopeItemDescriptive)throws java.sql.SQLException{
		scopeItemDescriptive.setScopeItem((ScopeItem)this);
		if(isNewInstance() || scopeItemDescriptives != null)
			getScopeItemDescriptives().add(scopeItemDescriptive);
		else
			scopeItemDescriptive.insert();
	}
	public void removeScopeItemDescriptive(ScopeItemDescriptive scopeItemDescriptive)throws java.sql.SQLException{
		if(isNewInstance() || scopeItemDescriptives != null)
			getScopeItemDescriptives().remove(scopeItemDescriptive);
		else
			scopeItemDescriptive.delete();
	}
	public Collection<BidItem> getBidItems()throws java.sql.SQLException{
		if(isNewInstance() || bidItems != null){
			if(bidItems == null)
				bidItems = new TreeSet<BidItem>();
			return bidItems;
		}
		return BidItem.getNamedCollection("findByScopeItem",getScopeItemId());
	}
	public void addBidItem(BidItem bidItem)throws java.sql.SQLException{
		bidItem.setScopeItem((ScopeItem)this);
		if(isNewInstance() || bidItems != null)
			getBidItems().add(bidItem);
		else
			bidItem.insert();
	}
	public void removeBidItem(BidItem bidItem)throws java.sql.SQLException{
		if(isNewInstance() || bidItems != null)
			getBidItems().remove(bidItem);
		else
			bidItem.delete();
	}
	public ScopeItem copy()throws java.sql.SQLException{
		ScopeItem cp = new ScopeItem((ScopeItem)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ScopeItemDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(ScopeItem child:getScopeItems())
			cp.addScopeItem(child.copy());
		for(ScopeItemCostYear child:getScopeItemCostYears())
			cp.addScopeItemCostYear(child.copy());
		for(ScopeItemForecast child:getScopeItemForecasts())
			cp.addScopeItemForecast(child.copy());
		for(ScopeItemLabor child:getScopeItemLabors())
			cp.addScopeItemLabor(child.copy());
		for(ScopeItemPerUnit child:getScopeItemPerUnits())
			cp.addScopeItemPerUnit(child.copy());
		for(ScopeItemDescriptive child:getScopeItemDescriptives())
			cp.addScopeItemDescriptive(child.copy());
		for(BidItem child:getBidItems())
			cp.addBidItem(child.copy());
	}
	public Vector<String> getDifference(ScopeItemDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScopeItemId(),o.getScopeItemId())) diffs.add("SCOPE_ITEM_ID");
		if(!isSame(getScopeTypeId(),o.getScopeTypeId())) diffs.add("SCOPE_TYPE_ID");
		if(!isSame(getCostId(),o.getCostId())) diffs.add("COST_ID");
		if(!isSame(getParentSiId(),o.getParentSiId())) diffs.add("PARENT_SI_ID");
		if(!isSame(getTitle(),o.getTitle())) diffs.add("TITLE");
		if(!isSame(getModelingItemId(),o.getModelingItemId())) diffs.add("MODELING_ITEM_ID");
		if(!isSame(getQuantity(),o.getQuantity())) diffs.add("QUANTITY");
		if(!isSame(getPoType(),o.getPoType())) diffs.add("PO_TYPE");
		if(!isSame(getLeadTime(),o.getLeadTime())) diffs.add("LEAD_TIME");
		if(!isSame(getDescription(),o.getDescription())) diffs.add("DESCRIPTION");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(isHighSide(),o.isHighSide())) diffs.add("HIGH_SIDE");
		if(!isSame(getActionId(),o.getActionId())) diffs.add("ACTION_ID");
		if(!isSame(getFundingTypeId(),o.getFundingTypeId())) diffs.add("FUNDING_TYPE_ID");
		if(!isSame(getFunderId(),o.getFunderId())) diffs.add("FUNDER_ID");
		if(!isSame(getCprPrimeId(),o.getCprPrimeId())) diffs.add("CPR_PRIME_ID");
		if(!isSame(getCprSubId(),o.getCprSubId())) diffs.add("CPR_SUB_ID");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		if(!isSame(getOwnerOrgId(),o.getOwnerOrgId())) diffs.add("OWNER_ORG_ID");
		if(!isSame(getAltDouble2(),o.getAltDouble2())) diffs.add("ALT_DOUBLE2");
		if(!isSame(isUseDefaultScope(),o.isUseDefaultScope())) diffs.add("USE_DEFAULT_SCOPE");
		if(!isSame(getAltDouble3(),o.getAltDouble3())) diffs.add("ALT_DOUBLE3");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltVarchar2(),o.getAltVarchar2())) diffs.add("ALT_VARCHAR2");
		if(!isSame(getAltVarchar3(),o.getAltVarchar3())) diffs.add("ALT_VARCHAR3");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		if(!isSame(getAltDate2(),o.getAltDate2())) diffs.add("ALT_DATE2");
		if(!isSame(getAltDate3(),o.getAltDate3())) diffs.add("ALT_DATE3");
		if(!isSame(isUseCalc(),o.isUseCalc())) diffs.add("USE_CALC");
		if(!isSame(isEnabled(),o.isEnabled())) diffs.add("ENABLED");
		if(!isSame(getCoTypeId(),o.getCoTypeId())) diffs.add("CO_TYPE_ID");
		if(!isSame(getFacilityId(),o.getFacilityId())) diffs.add("FACILITY_ID");
		if(!isSame(getUserCostAdj(),o.getUserCostAdj())) diffs.add("USER_COST_ADJ");
		if(!isSame(getCostNote(),o.getCostNote())) diffs.add("COST_NOTE");
		if(!isSame(isOm(),o.isOm())) diffs.add("OM");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(scopeType != null && scopeType.isNewInstance())
				scopeType.insert();
		if(sceProjElemCost != null && sceProjElemCost.isNewInstance())
				sceProjElemCost.insert();
		if(parent != null && parent.isNewInstance())
				parent.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(scopeItems != null){
			for(ScopeItem scopeItem:getScopeItems())
				scopeItem.setParent((ScopeItem)this);
		}
		if(scopeItemCostYears != null){
			for(ScopeItemCostYear scopeItemCostYear:getScopeItemCostYears())
				scopeItemCostYear.setScopeItem((ScopeItem)this);
		}
		if(scopeItemForecasts != null){
			for(ScopeItemForecast scopeItemForecast:getScopeItemForecasts())
				scopeItemForecast.setScopeItem((ScopeItem)this);
		}
		if(scopeItemLabors != null){
			for(ScopeItemLabor scopeItemLabor:getScopeItemLabors())
				scopeItemLabor.setScopeItem((ScopeItem)this);
		}
		if(scopeItemPerUnits != null){
			for(ScopeItemPerUnit scopeItemPerUnit:getScopeItemPerUnits())
				scopeItemPerUnit.setScopeItem((ScopeItem)this);
		}
		if(scopeItemDescriptives != null){
			for(ScopeItemDescriptive scopeItemDescriptive:getScopeItemDescriptives())
				scopeItemDescriptive.setScopeItem((ScopeItem)this);
		}
		if(bidItems != null){
			for(BidItem bidItem:getBidItems())
				bidItem.setScopeItem((ScopeItem)this);
		}
		if(scopeItems != null){
			for(ScopeItem scopeItem:getScopeItems())
				if(scopeItem.isNewInstance())
					scopeItem.insert();
			scopeItems = null;
		}
		if(scopeItemCostYears != null){
			for(ScopeItemCostYear scopeItemCostYear:getScopeItemCostYears())
				if(scopeItemCostYear.isNewInstance())
					scopeItemCostYear.insert();
			scopeItemCostYears = null;
		}
		if(scopeItemForecasts != null){
			for(ScopeItemForecast scopeItemForecast:getScopeItemForecasts())
				if(scopeItemForecast.isNewInstance())
					scopeItemForecast.insert();
			scopeItemForecasts = null;
		}
		if(scopeItemLabors != null){
			for(ScopeItemLabor scopeItemLabor:getScopeItemLabors())
				if(scopeItemLabor.isNewInstance())
					scopeItemLabor.insert();
			scopeItemLabors = null;
		}
		if(scopeItemPerUnits != null){
			for(ScopeItemPerUnit scopeItemPerUnit:getScopeItemPerUnits())
				if(scopeItemPerUnit.isNewInstance())
					scopeItemPerUnit.insert();
			scopeItemPerUnits = null;
		}
		if(scopeItemDescriptives != null){
			for(ScopeItemDescriptive scopeItemDescriptive:getScopeItemDescriptives())
				if(scopeItemDescriptive.isNewInstance())
					scopeItemDescriptive.insert();
			scopeItemDescriptives = null;
		}
		if(bidItems != null){
			for(BidItem bidItem:getBidItems())
				if(bidItem.isNewInstance())
					bidItem.insert();
			bidItems = null;
		}
	}
}
