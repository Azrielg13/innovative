package com.sce.esp.object.model;
import java.sql.SQLException;
import java.util.Collection;


import com.sce.esp.object.dao.ScheduleDAO;
import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
@Entity
@Table(schema="MDI",name="MDIT16_SCHEDULE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Schedule o WHERE o.SCHEDULE_ID=?1"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Schedule o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Schedule o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDIT16_SCHEDULE o WHERE o.SCHEDULE_ID=?"),//AUTO-GENERATED
})
public class Schedule extends ScheduleDAO implements Schedulable {
	public Schedule(){
	}
	public Schedule(int scheduleId){
		super(scheduleId);
	}
	public Schedule(Schedule orig){
		super(orig);
	}
	public String toString(){
		return getName();
	}
	public static Collection<Schedule> getByName(String taskName)throws java.sql.SQLException{
		return getCollection(new String[]{"NAME"},taskName);
	}
	public static int getScheduleId(String taskName) throws SQLException {
		return getByName(taskName).iterator().next().getScheduleId();
	}
	@Override
	public Collection<? extends AbstractTask> getTasks() throws SQLException {
		return getScheduleTasks();
	}
	@Override
	public void addTask(AbstractTask task) throws SQLException {
		if(task instanceof ScheduleTask)
			addScheduleTask((ScheduleTask) task);
	}
	
	public double getCostSpread(int offsetYear, CostType ct) throws SQLException{
		for(CostSpread cs : CostSpread.getCollection(new String[]{"SCHEDULE_ID"},getScheduleId()))
			if(cs.getOffsetYear()==offsetYear && cs.getCostType()==ct )
				return cs.getCostFactor();
		return 0;
	}
	public void setCostSpread(int offsetYear, CostType ct, double factor) throws SQLException{
		CostSpread costSpread = null;
		for(CostSpread cs : CostSpread.getCollection(new String[]{"SCHEDULE_ID"},getScheduleId()))
			if(cs.getOffsetYear()==offsetYear && cs.getCostType()==ct ){
				costSpread =  cs;
				costSpread.setCostFactor(factor);
			}
		if(costSpread==null){
			costSpread = new CostSpread();
			costSpread.setSchedule(this);
			costSpread.setCostType(ct);
			costSpread.setCostFactor(factor);
			costSpread.insert();
		}
	}

}
