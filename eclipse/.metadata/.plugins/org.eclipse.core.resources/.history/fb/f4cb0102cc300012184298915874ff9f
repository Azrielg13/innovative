package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.SceProjTracking;
import com.sce.esp.object.model.SceProjTrackingDep;
import java.util.Calendar;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.TypedQuery;
public abstract class SceProjTrackingDepDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{PROJ_T_ID,DEP_T_ID};
	public static enum PROPERTY{PROJ_T_ID,DEP_T_ID,ALT_DOUBLE1,ALT_VARCHAR1,ALT_DATE1,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PROJTID_LIMIT = 9;
	public final static int DEPTID_LIMIT = 9;
	public final static int ALTDOUBLE1_LIMIT = 24;
	public final static int ALTVARCHAR1_LIMIT = 256;
	public final static int ALTDATE1_LIMIT = 7;
	private int projTId;
	private int depTId;
	private double altDouble1;
	private String altVarchar1;
	private Calendar altDate1;
	private SceProjTracking sceProjTracking;
	private SceProjTracking sceProjTracking2;
	public static SceProjTrackingDep getInstance(int projTId, int depTId)throws java.sql.SQLException{
		return getInstance(projTId, depTId, true);
	}
	public static SceProjTrackingDep getInstance(int projTId, int depTId, boolean fetch)throws java.sql.SQLException{
		if(isNull(projTId, depTId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(projTId, depTId);
		Cache cache = em.getEntityManagerFactory().getCache();
		SceProjTrackingDep o = null;
		if(cache != null && cache.contains(SceProjTrackingDep.class, pk))
			o = em.find(SceProjTrackingDep.class, pk);
		if(o==null && getAICache().contains(SceProjTrackingDep.class, pk))
			o = getAICache().find(SceProjTrackingDep.class, pk);
		if(o==null && fetch)
			o = em.find(SceProjTrackingDep.class, pk);
		if(o==null && fetch && SceProjTrackingDep.class.getAnnotation(AutoInsertable.class) != null){
			o = new SceProjTrackingDep(projTId, depTId);
			getAICache().cache(SceProjTrackingDep.class, o);
		}
		return o;
	}
	public static Collection<SceProjTrackingDep> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<SceProjTrackingDep> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<SceProjTrackingDep> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM SceProjTrackingDep o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<SceProjTrackingDep> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjTrackingDep> tq = em.createQuery(jpql,SceProjTrackingDep.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<SceProjTrackingDep> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<SceProjTrackingDep> tq = em.createNamedQuery(name,SceProjTrackingDep.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public SceProjTrackingDepDAO(){}
	public SceProjTrackingDepDAO(int projTId, int depTId){
		this.projTId=projTId;
		this.depTId=depTId;
	}
	public SceProjTrackingDepDAO(SceProjTrackingDepDAO orig){
		super(orig);
		this.projTId=orig.getProjTId();
		this.depTId=orig.getDepTId();
		copyFrom(orig);
	}
	public void copyFrom(SceProjTrackingDepDAO orig){
		this.altDouble1=orig.getAltDouble1();
		this.altVarchar1=orig.getAltVarchar1();
		this.altDate1=orig.getAltDate1();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{projTId, depTId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PROJ_T_ID",nullable=false,length=9)
	public int getProjTId(){
		return projTId;
	}
	public void setProjTId(int projTId) throws java.sql.SQLException{
		if(isSame(projTId, getProjTId()))return;
		int oldValue = getProjTId();
		this.projTId=projTId;
		setProperty("PROJ_T_ID", projTId, oldValue);
		sceProjTracking=null;
	}
	@Id
	@Column(name="DEP_T_ID",nullable=false,length=9)
	public int getDepTId(){
		return depTId;
	}
	public void setDepTId(int depTId) throws java.sql.SQLException{
		if(isSame(depTId, getDepTId()))return;
		int oldValue = getDepTId();
		this.depTId=depTId;
		setProperty("DEP_T_ID", depTId, oldValue);
		sceProjTracking2=null;
	}
	@Column(name="ALT_DOUBLE1",nullable=true,length=24)
	public double getAltDouble1(){
		return altDouble1;
	}
	public void setAltDouble1(double altDouble1) throws java.sql.SQLException{
		if(isSame(altDouble1, getAltDouble1()))return;
		double oldValue = getAltDouble1();
		this.altDouble1=altDouble1;
		setProperty("ALT_DOUBLE1", altDouble1, oldValue);
	}
	@Column(name="ALT_VARCHAR1",nullable=true,length=256)
	public String getAltVarchar1(){
		return altVarchar1;
	}
	public void setAltVarchar1(String altVarchar1) throws java.sql.SQLException{
		if(isSame(altVarchar1, getAltVarchar1()))return;
		String oldValue = getAltVarchar1();
		this.altVarchar1=altVarchar1;
		setProperty("ALT_VARCHAR1", altVarchar1, oldValue);
	}
	@Column(name="ALT_DATE1",nullable=true,length=7)
	public Calendar getAltDate1(){
		return altDate1;
	}
	public void setAltDate1(Calendar altDate1) throws java.sql.SQLException{
		if(isSame(altDate1, getAltDate1()))return;
		Calendar oldValue = getAltDate1();
		this.altDate1=altDate1;
		setProperty("ALT_DATE1", altDate1, oldValue);
	}
	public SceProjTracking getSceProjTracking()throws java.sql.SQLException{
		if(sceProjTracking==null)
			sceProjTracking=SceProjTracking.getInstance(getProjTId());
		return sceProjTracking;
	}
	public void setSceProjTracking(SceProjTracking sceProjTracking)throws java.sql.SQLException{
		setProjTId(sceProjTracking==null?0:sceProjTracking.getProjTId());
		this.sceProjTracking=sceProjTracking;
	}
	public SceProjTracking getSceProjTracking2()throws java.sql.SQLException{
		if(sceProjTracking2==null)
			sceProjTracking2=SceProjTracking.getInstance(getDepTId());
		return sceProjTracking2;
	}
	public void setSceProjTracking2(SceProjTracking sceProjTracking2)throws java.sql.SQLException{
		setDepTId(sceProjTracking2==null?0:sceProjTracking2.getProjTId());
		this.sceProjTracking2=sceProjTracking2;
	}
	public SceProjTrackingDep copy()throws java.sql.SQLException{
		SceProjTrackingDep cp = new SceProjTrackingDep((SceProjTrackingDep)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(SceProjTrackingDepDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(SceProjTrackingDepDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getProjTId(),o.getProjTId())) diffs.add("PROJ_T_ID");
		if(!isSame(getDepTId(),o.getDepTId())) diffs.add("DEP_T_ID");
		if(!isSame(getAltDouble1(),o.getAltDouble1())) diffs.add("ALT_DOUBLE1");
		if(!isSame(getAltVarchar1(),o.getAltVarchar1())) diffs.add("ALT_VARCHAR1");
		if(!isSame(getAltDate1(),o.getAltDate1())) diffs.add("ALT_DATE1");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
