/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.awt.Desktop;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Method;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.Table;

import oracle.sql.BLOB;

import com.sce.esp.object.dao.DataAccessObject;
import com.sce.esp.util.StringUtils;
import com.sce.esp.util.db.PDBConnection;


/**
 * BME ESP Display file created on date BJS
 * 
 * The Class BlobFile.
 */
public abstract class BlobFile extends DataAccessObject {

	/** The MAX File Size (8MB). */
	public final static int MAX_SIZE = 8*1024*1024;
	
	/** The bytes. */
	private byte[] bytes;

	public BlobFile(){
	}
	
	public BlobFile(BlobFile orig) {
		super(orig);
	}

	/**
	 * Returns the blobFile.
	 * 
	 * @return The blobFile
	 * 
	 * @throws SQLException the SQL exception
	 */
	public BLOB getBlob()throws Exception{
		PreparedStatement ps = PDBConnection.getInstance().getConnection().prepareStatement("SELECT BLOB_FILE FROM "+getClass().getAnnotation(Table.class).name()+" "+getWhereClause());
		setPSKeys(ps, 1);
		ResultSet rs = ps.executeQuery();
		BLOB blob=null;
		if(rs.next())
			blob = (BLOB)rs.getBlob("BLOB_FILE");
		rs.close();
		ps.close();
		return blob;
	}
	
	public String getWhereClause(){
		String wc="";
		for(Method m:getClass().getMethods()){
			if(m.getAnnotation(Id.class) != null){
				if(wc.length()>0)
					wc+=" AND ";
				wc+=m.getAnnotation(Column.class).name()+"=?";
			}
		}
		return "WHERE "+wc;
	}
	
	public void setPSKeys(PreparedStatement ps, int i) throws Exception{
		for(Method m:getClass().getMethods())
			if(m.getAnnotation(Id.class) != null)
				ps.setObject(i++, m.invoke(this));
	}

	/**
	 * Sets the blobFile.
	 * 
	 * @param The new blobFile
	 * @param blobFile the blob file
	 * 
	 * @throws SQLException the SQL exception
	 */
	public void setBlobFile(BLOB blobFile)throws SQLException{
		setProperty("BLOB_FILE",blobFile,null);
		setFileSize((int)blobFile.getLength());
	}
	
	public abstract String getFileName();
	
	
	public abstract int getFileSize();
	
	public abstract void setFileSize(int fileSize)throws SQLException;

	/**
	 * To string.
	 * 
	 * @return the string
	 */
	public String toString(){
		return getFileName();
	}

	/**
	 * Sets the input bytes.
	 * 
	 * @param bytes the bytes
	 * @throws SQLException 
	 */
	public void setInputBytes(byte[] bytes) throws SQLException{
		byte[] oldBytes = bytes;
		this.bytes=bytes;
		setProperty("BLOB_FILE", bytes, oldBytes);
		setFileSize(bytes.length);
	}
	
	@Column(name="BLOB_FILE",nullable=false,length=MAX_SIZE)
	public byte[] getInputBytes(){
		return bytes;
	}

	/**
	 * Method used to write the contents (data) from an Oracle BLOB column to
	 * an O/S file. This method uses one of two ways to get data from the BLOB
	 * column - namely the getBinaryStream() method. The other way to read data from an
	 * Oracle BLOB column is to use getBytes().
	 * 
	 * @throws IOException the IO exception
	 * @throws java.sql.SQLException 	 * @throws SQLException the SQL exception
	 * @throws SQLException the SQL exception
	 * @throws java.io.IOException 	 */
	public void writeBLOBToFile() throws Exception {
		if(getBLOBFile()!=null){
			if(Desktop.isDesktopSupported())
				Desktop.getDesktop().open(getBLOBFile());
			else
				Runtime.getRuntime().exec(new String[]{ "rundll32", "url.dll,FileProtocolHandler", getBLOBFile().toString() });
		}
	}
	
	public File getBLOBFile() throws Exception {
		File file = null;
		BLOB blob = getBlob();
		if(blob!=null){
			BufferedInputStream bis = new BufferedInputStream(blob.getBinaryStream());
			file = File.createTempFile(BlobFile.stripExtension(StringUtils.trim(getFileName())),"."+BlobFile.getExtension(getFileName()), null);

			FileOutputStream bo = new FileOutputStream(file);   		
			byte[] buf = new byte[4096];
			int n = 0;

			while ((n = bis.read(buf, 0, 4096)) != -1) {
				bo.write(buf, 0, n);
			}
			bo.flush();
			bo.close();
			bis.close();

		}
		return file;
	}
	
	public static String stripExtension (String str) {
        if (str == null)
            return null;
        int pos = str.lastIndexOf(".");
        if (pos == -1)
            return str;
        return str.substring(0,pos);
    }

	public static String getExtension(String str){
		int pos = str.lastIndexOf('.');
		return str.substring(pos+1);
	}

	/**
	 * Gets the file icon type.
	 * 
	 * @return the file icon type
	 */	
	public String getFileIconType(){
		String type="icons/file_onenote.png";
		if(getFileExt().equalsIgnoreCase(".gif") || getFileExt().equalsIgnoreCase(".jpg") || getFileExt().equalsIgnoreCase(".bmp"))
			return "icons/file_stockphotos.png";
		if(getFileExt().equalsIgnoreCase(".vsd"))
			return "icons/file_visio.png";
		if(getFileExt().equalsIgnoreCase(".doc") || getFileExt().equalsIgnoreCase(".docx"))
			return "icons/file_word.png";
		if(getFileExt().equalsIgnoreCase(".ppt") || getFileExt().equalsIgnoreCase(".pptx"))
			return "icons/file_powerpoint.png";
		if(getFileExt().equalsIgnoreCase(".xls") || getFileExt().equalsIgnoreCase(".xlsx"))
			return "icons/file_excel.png";
		if(getFileExt().equalsIgnoreCase(".zip"))
			return "icons/file_winrar.png";
		if(getFileExt().equalsIgnoreCase(".mdb"))
			return "icons/file_access.png";
		if(getFileExt().equalsIgnoreCase(".pdf"))
			return "icons/file_acrobatpro.png";
		return type;
	}

	/**
	 * Gets the file ext.
	 * 
	 * @return the file ext
	 */
	public String getFileExt(){
		if(getFileName()!=null)
			return "."+BlobFile.getExtension(getFileName());
		return "";
	}

	public abstract boolean isEditable();
}
