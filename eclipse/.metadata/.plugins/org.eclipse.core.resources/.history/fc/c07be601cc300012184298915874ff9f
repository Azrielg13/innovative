package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.Criteria;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.MDIObject;
import java.util.Collection;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class CriteriaDAO extends MDIObject{
	public static enum KEY_PROPERTY{PLANYEAR,CRITERIA_ID};
	public static enum PROPERTY{PLANYEAR,CRITERIA_ID,CRITERIA_NAME,TEMP_RANGE,NOTE,INSERT_TS,INSERT_USER_ID,MODIFIED_TS,MODIFIED_USER_ID,DELETED_TS,DELETED_USER_ID};
	public final static int PLANYEAR_LIMIT = 4;
	public final static int CRITERIAID_LIMIT = 9;
	public final static int CRITERIANAME_LIMIT = 40;
	public final static int TEMPRANGE_LIMIT = 24;
	public final static int NOTE_LIMIT = 256;
	private int planyear;
	private int criteriaId;
	private String criteriaName;
	private double tempRange;
	private String note;
	private Department department;
	public static Criteria getInstance(int planyear, int criteriaId)throws java.sql.SQLException{
		return getInstance(planyear, criteriaId, true);
	}
	public static Criteria getInstance(int planyear, int criteriaId, boolean fetch)throws java.sql.SQLException{
		if(isNull(planyear, criteriaId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(planyear, criteriaId);
		Cache cache = em.getEntityManagerFactory().getCache();
		Criteria o = null;
		if(cache != null && cache.contains(Criteria.class, pk))
			o = em.find(Criteria.class, pk);
		if(o==null && getAICache().contains(Criteria.class, pk))
			o = getAICache().find(Criteria.class, pk);
		if(o==null && fetch)
			o = em.find(Criteria.class, pk);
		if(o==null && fetch && Criteria.class.getAnnotation(AutoInsertable.class) != null){
			o = new Criteria(planyear, criteriaId);
			getAICache().cache(Criteria.class, o);
		}
		return o;
	}
	public static Collection<Criteria> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<Criteria> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<Criteria> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM Criteria o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<Criteria> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Criteria> tq = em.createQuery(jpql,Criteria.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<Criteria> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<Criteria> tq = em.createNamedQuery(name,Criteria.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public CriteriaDAO(){}
	public CriteriaDAO(int planyear, int criteriaId){
		this.planyear=planyear;
		this.criteriaId=criteriaId;
	}
	public CriteriaDAO(CriteriaDAO orig){
		super(orig);
		this.planyear=orig.getPlanyear();
		copyFrom(orig);
	}
	public void copyFrom(CriteriaDAO orig){
		this.criteriaName=orig.getCriteriaName();
		this.tempRange=orig.getTempRange();
		this.note=orig.getNote();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{planyear, criteriaId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@Column(name="PLANYEAR",nullable=false,length=4)
	public int getPlanyear(){
		return planyear;
	}
	public void setPlanyear(int planyear) throws java.sql.SQLException{
		if(isSame(planyear, getPlanyear()))return;
		int oldValue = getPlanyear();
		this.planyear=planyear;
		setProperty("PLANYEAR", planyear, oldValue);
		department=null;
	}
	@Id
	@SequenceGenerator(name="MDI025_SEQ",sequenceName="MDI025_SEQ")
	@Column(name="CRITERIA_ID",nullable=false,length=9)
	public int getCriteriaId(){
		return criteriaId;
	}
	public void setCriteriaId(int criteriaId) throws java.sql.SQLException{
		if(isSame(criteriaId, getCriteriaId()))return;
		int oldValue = getCriteriaId();
		this.criteriaId=criteriaId;
		setProperty("CRITERIA_ID", criteriaId, oldValue);
	}
	@Column(name="CRITERIA_NAME",nullable=false,length=40)
	public String getCriteriaName(){
		return criteriaName;
	}
	public void setCriteriaName(String criteriaName) throws java.sql.SQLException{
		if(isSame(criteriaName, getCriteriaName()))return;
		String oldValue = getCriteriaName();
		this.criteriaName=criteriaName;
		setProperty("CRITERIA_NAME", criteriaName, oldValue);
	}
	@Column(name="TEMP_RANGE",nullable=false,length=24)
	public double getTempRange(){
		return tempRange;
	}
	public void setTempRange(double tempRange) throws java.sql.SQLException{
		if(isSame(tempRange, getTempRange()))return;
		double oldValue = getTempRange();
		this.tempRange=tempRange;
		setProperty("TEMP_RANGE", tempRange, oldValue);
	}
	@Column(name="NOTE",nullable=true,length=256)
	public String getNote(){
		return note;
	}
	public void setNote(String note) throws java.sql.SQLException{
		if(isSame(note, getNote()))return;
		String oldValue = getNote();
		this.note=note;
		setProperty("NOTE", note, oldValue);
	}
	public Department getDepartment()throws java.sql.SQLException{
		if(department==null)
			department=Department.getInstance(getPlanyear());
		return department;
	}
	public void setDepartment(Department department)throws java.sql.SQLException{
		setPlanyear(department==null?0:department.getPlanyear());
		this.department=department;
	}
	public Criteria copy()throws java.sql.SQLException{
		Criteria cp = new Criteria((Criteria)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(CriteriaDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
	}
	public Vector<String> getDifference(CriteriaDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getPlanyear(),o.getPlanyear())) diffs.add("PLANYEAR");
		if(!isSame(getCriteriaId(),o.getCriteriaId())) diffs.add("CRITERIA_ID");
		if(!isSame(getCriteriaName(),o.getCriteriaName())) diffs.add("CRITERIA_NAME");
		if(!isSame(getTempRange(),o.getTempRange())) diffs.add("TEMP_RANGE");
		if(!isSame(getNote(),o.getNote())) diffs.add("NOTE");
		return diffs;
	}
	public void insertChildren()throws java.sql.SQLException{
	}
}
