/**
 *           | Master Data Interface Version 2.0 |                       
 * 
 * Copyright (c) 2006, Southern California Edison, Inc.
 * 					   Distribution Staff Engineering Team. 					  
 * 	                   All rights reserved.
 * 
 * This software has been developed exclusively for internal usage.
 * Unauthorized use is prohibited.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package com.sce.esp.object.model;

import java.io.Serializable;
import java.sql.SQLException;
import java.util.Calendar;

import javax.persistence.Entity;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import com.sce.esp.object.dao.TemperatureDAO;
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.util.Calculate;
@Entity
@AutoInsertable
@Table(schema="MDI",name="MDI600_TEMPERATURE")
@NamedQueries({
	@NamedQuery(name = "findByID", query="SELECT o FROM Temperature o WHERE o.PLANYEAR=?1 AND o.STATION_ID=?2 AND o.RCD_DATE=?3"),//AUTO-GENERATED
	@NamedQuery(name = "findAll", query="SELECT o FROM Temperature o"),//AUTO-GENERATED
	@NamedQuery(name = "findAllActive", query="SELECT o FROM Temperature o WHERE o.DELETED_TS IS NULL"),//AUTO-GENERATED
})
@NamedNativeQueries({
	@NamedNativeQuery(name = "refresh", query="SELECT o.* FROM MDI600_TEMPERATURE o WHERE o.PLANYEAR=? AND o.STATION_ID=? AND o.RCD_DATE=?"),//AUTO-GENERATED
	@NamedNativeQuery(name = "findByID_FETCH", query="SELECT o.* FROM MDI600_TEMPERATURE o WHERE o.PLANYEAR=? AND o.STATION_ID=? AND TO_CHAR(o.RCD_DATE,'YYYY-MM-DD')=?"),
})
public class Temperature extends TemperatureDAO implements AbstractTemperature, Serializable{
	
	private static final long serialVersionUID = -2258568930011633631L;

	/** The yester. */
	private Temperature yester;
	
	/** The two days ago. */
	private Temperature twoDaysAgo;
	
	/**
	 * The Constructor.
	 * 
	 * @param stationId the station id
	 * @param planyear the planyear
	 * @param rcdDate the rcd date
	 */
	public Temperature(){
	}
	public Temperature(int planyear, int stationId, Calendar rcdDate){
		super(planyear,stationId,rcdDate);
	}
	
	public Temperature(Temperature temperature) {
		super(temperature);
	}
	public void setMaxTemp(double maxTemp) throws SQLException{
		super.setMaxTemp(maxTemp);
		syncPeakEff(2);
	}
	
	public void setMinTemp(double minTemp) throws SQLException{
		super.setMinTemp(minTemp);
		syncPeakEff(1);
	}
	
	/*
	 *  (non-Javadoc)
	 * @see com.sce.mdi.object.AbstractTemperature#getEffTemp()
	 */
	public double getEffTemp()throws SQLException {
		if(yester == null){
			Calendar cal = (Calendar)getRcdDate().clone();
			cal.add(Calendar.DATE,-1);
			yester = getInstance(getPlanyear(),getStationId(),cal);
		}
		if(twoDaysAgo == null){
			Calendar cal = (Calendar)getRcdDate().clone();
			cal.add(Calendar.DATE,-2);
			twoDaysAgo = getInstance(getPlanyear(),getStationId(),cal);
		}
		
		if(yester==null)
			System.out.println("yester is null");
		
		double twoMax = 0;
		if(twoDaysAgo==null){
			System.out.println("twoDaysAgo is null");
			twoMax = 0;
		}else{
			twoMax = twoDaysAgo.getMaxTemp();
		}
				
		return Calculate.calcEffectiveTemp(getMaxTemp(),getMinTemp(),yester.getMaxTemp(),yester.getMinTemp(),twoMax);
	}
	
	/*
	 *  (non-Javadoc)
	 * @see com.sce.mdi.object.AbstractTemperature#getTenYearAvg()
	 */
	public double getTenYearAvg()throws SQLException{
		return getWeatherstation().getTenYearAvg();
	}
	
	/**
	 * Sync peak eff.
	 * 
	 * @param lookAhead the look ahead
	 * 
	 * @throws SQLException the SQL exception
	 */
    public void syncPeakEff(int lookAhead)throws SQLException{
        int year = getRcdDate().get(Calendar.YEAR);
        TempYear ty = TempYear.getInstance(getPlanyear(),getStationId(),year,false);
        if(ty != null)
            ty.refresh();
        //Check to see if change may effect effective temperature for the next year
        if(getRcdDate().get(Calendar.MONTH) == Calendar.DECEMBER && getRcdDate().get(Calendar.DAY_OF_MONTH)+lookAhead > 31){
            ty = TempYear.getInstance(getPlanyear(),getStationId(),year,false);
            if(ty != null)
                ty.refresh();
        }
    }
	
	public String toString(){
		return getMaxTemp()+"/"+getMinTemp();
	}
}
