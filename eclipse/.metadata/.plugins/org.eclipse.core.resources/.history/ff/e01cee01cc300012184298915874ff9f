package com.sce.esp.object.dao;
/**Copy Right Frank todo */
/**Description of class, (we need to get this from somewhere, database? xml?)*/
import com.sce.esp.object.jpa.AutoInsertable;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.jpa.PrimaryKey;
import com.sce.esp.object.model.CostType;
import com.sce.esp.object.model.LookUp;
import com.sce.esp.object.model.SceElem;
import com.sce.esp.object.model.ScopeType;
import com.sce.esp.object.model.ScopeUnitCost;
import com.sce.esp.object.model.ScopeUnitCostYear;
import java.util.Calendar;
import java.util.Collection;
import java.util.TreeSet;
import java.util.Vector;
import javax.persistence.Cache;
import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.TypedQuery;
public abstract class ScopeUnitCostDAO extends DataAccessObject{
	public static enum KEY_PROPERTY{SCOPE_UNIT_COST_ID};
	public static enum PROPERTY{SCOPE_UNIT_COST_ID,SCOPE_TYPE_ID,ACTION_ID,SCE_ELEM_ID,COST_TYPE_ID,EFF_DATE,EST_YEAR,ESCALATION_RATE,PER_UNIT_COST,PER_UNIT_COST2,CONT_FACTOR,BASE_COST,VOLTAGE_KV};
	public final static int SCOPEUNITCOSTID_LIMIT = 9;
	public final static int SCOPETYPEID_LIMIT = 9;
	public final static int ACTIONID_LIMIT = 9;
	public final static int SCEELEMID_LIMIT = 9;
	public final static int COSTTYPEID_LIMIT = 9;
	public final static int EFFDATE_LIMIT = 7;
	public final static int ESTYEAR_LIMIT = 4;
	public final static int ESCALATIONRATE_LIMIT = 24;
	public final static int PERUNITCOST_LIMIT = 9;
	public final static int PERUNITCOST2_LIMIT = 24;
	public final static int CONTFACTOR_LIMIT = 24;
	public final static int BASECOST_LIMIT = 24;
	public final static int VOLTAGEKV_LIMIT = 24;
	private int scopeUnitCostId;
	private int scopeTypeId;
	private int actionId;
	private int sceElemId;
	private int costTypeId;
	private Calendar effDate;
	private int estYear;
	private double escalationRate;
	private int perUnitCost;
	private double perUnitCost2;
	private double contFactor = -1;
	private double baseCost;
	private double voltageKv;
	private Collection<ScopeUnitCostYear> scopeUnitCostYears;
	private CostType costType;
	private LookUp action;
	private SceElem sceElem;
	private ScopeType scopeType;
	public static ScopeUnitCost getInstance(int scopeUnitCostId)throws java.sql.SQLException{
		return getInstance(scopeUnitCostId, true);
	}
	public static ScopeUnitCost getInstance(int scopeUnitCostId, boolean fetch)throws java.sql.SQLException{
		if(isNull(scopeUnitCostId))return null;
		EntityManager em = EntityManagerHelper.getEntityManager();
		PrimaryKey pk = new PrimaryKey(scopeUnitCostId);
		Cache cache = em.getEntityManagerFactory().getCache();
		ScopeUnitCost o = null;
		if(cache != null && cache.contains(ScopeUnitCost.class, pk))
			o = em.find(ScopeUnitCost.class, pk);
		if(o==null && getAICache().contains(ScopeUnitCost.class, pk))
			o = getAICache().find(ScopeUnitCost.class, pk);
		if(o==null && fetch)
			o = em.find(ScopeUnitCost.class, pk);
		if(o==null && fetch && ScopeUnitCost.class.getAnnotation(AutoInsertable.class) != null){
			o = new ScopeUnitCost(scopeUnitCostId);
			getAICache().cache(ScopeUnitCost.class, o);
		}
		return o;
	}
	public static Collection<ScopeUnitCost> getAll()throws java.sql.SQLException{
		return getNamedCollection("findAll");
	}
	public static Collection<ScopeUnitCost> getAllActive()throws java.sql.SQLException{
		return getNamedCollection("findAllActive");
	}
	public static Collection<ScopeUnitCost> getCollection(String[] props, Object... values)throws java.sql.SQLException{
		String qlString = "SELECT o FROM ScopeUnitCost o";
		if(props != null && props.length > 0){
			qlString += " WHERE";
			int p=0;
			for(String prop:props){
				if(p > 0)
					qlString +=" AND";
				if(values[p]==null)
					qlString += " o."+prop+" IS NULL";
				else
					qlString += " o."+prop+" = ?"+(p+1);
				p++;
			}
		}
		return getCollection(qlString,values);
	}
	public synchronized static Collection<ScopeUnitCost> getCollection(String jpql, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeUnitCost> tq = em.createQuery(jpql,ScopeUnitCost.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public synchronized static Collection<ScopeUnitCost> getNamedCollection(String name, Object... values)throws java.sql.SQLException{
		EntityManager em = EntityManagerHelper.getEntityManager();
		TypedQuery<ScopeUnitCost> tq = em.createNamedQuery(name,ScopeUnitCost.class);
		if(values != null && values.length > 0){
			int p=1;
			for(Object value:values)
				if(value != null)
					tq = tq.setParameter(p++, value);
		}
		return tq.getResultList();
	}
	public ScopeUnitCostDAO(){}
	public ScopeUnitCostDAO(int scopeUnitCostId){
		this.scopeUnitCostId=scopeUnitCostId;
	}
	public ScopeUnitCostDAO(ScopeUnitCostDAO orig){
		super(orig);
		copyFrom(orig);
	}
	public void copyFrom(ScopeUnitCostDAO orig){
		this.scopeTypeId=orig.getScopeTypeId();
		this.actionId=orig.getActionId();
		this.sceElemId=orig.getSceElemId();
		this.costTypeId=orig.getCostTypeId();
		this.effDate=orig.getEffDate();
		this.estYear=orig.getEstYear();
		this.escalationRate=orig.getEscalationRate();
		this.perUnitCost=orig.getPerUnitCost();
		this.perUnitCost2=orig.getPerUnitCost2();
		this.contFactor=orig.getContFactor();
		this.baseCost=orig.getBaseCost();
		this.voltageKv=orig.getVoltageKv();
	}
	public String getHashKey(){
		return getHashKey(getKeyValues());
	}
	public Object[] getKeyValues(){
		return new Object[]{scopeUnitCostId};
	}
	@Override
	public int hashCode(){
		return PrimaryKey.hashCode(getKeyValues());
	}
	@Id
	@SequenceGenerator(name="MDISX2_SEQ",sequenceName="MDISX2_SEQ")
	@Column(name="SCOPE_UNIT_COST_ID",nullable=false,length=9)
	public int getScopeUnitCostId(){
		return scopeUnitCostId;
	}
	public void setScopeUnitCostId(int scopeUnitCostId) throws java.sql.SQLException{
		if(isSame(scopeUnitCostId, getScopeUnitCostId()))return;
		int oldValue = getScopeUnitCostId();
		this.scopeUnitCostId=scopeUnitCostId;
		setProperty("SCOPE_UNIT_COST_ID", scopeUnitCostId, oldValue);
	}
	@Column(name="SCOPE_TYPE_ID",nullable=false,length=9)
	public int getScopeTypeId(){
		return scopeTypeId;
	}
	public void setScopeTypeId(int scopeTypeId) throws java.sql.SQLException{
		if(isSame(scopeTypeId, getScopeTypeId()))return;
		int oldValue = getScopeTypeId();
		this.scopeTypeId=scopeTypeId;
		setProperty("SCOPE_TYPE_ID", scopeTypeId, oldValue);
		scopeType=null;
	}
	@Column(name="ACTION_ID",nullable=true,length=9)
	public int getActionId(){
		return actionId;
	}
	public void setActionId(int actionId) throws java.sql.SQLException{
		if(isSame(actionId, getActionId()))return;
		int oldValue = getActionId();
		this.actionId=actionId;
		setProperty("ACTION_ID", actionId, oldValue);
		action=null;
	}
	@Column(name="SCE_ELEM_ID",nullable=true,length=9)
	public int getSceElemId(){
		return sceElemId;
	}
	public void setSceElemId(int sceElemId) throws java.sql.SQLException{
		if(isSame(sceElemId, getSceElemId()))return;
		int oldValue = getSceElemId();
		this.sceElemId=sceElemId;
		setProperty("SCE_ELEM_ID", sceElemId, oldValue);
		sceElem=null;
	}
	@Column(name="COST_TYPE_ID",nullable=true,length=9)
	public int getCostTypeId(){
		return costTypeId;
	}
	public void setCostTypeId(int costTypeId) throws java.sql.SQLException{
		if(isSame(costTypeId, getCostTypeId()))return;
		int oldValue = getCostTypeId();
		this.costTypeId=costTypeId;
		setProperty("COST_TYPE_ID", costTypeId, oldValue);
		costType=null;
	}
	@Column(name="EFF_DATE",nullable=false,length=7)
	public Calendar getEffDate(){
		return effDate;
	}
	public void setEffDate(Calendar effDate) throws java.sql.SQLException{
		if(isSame(effDate, getEffDate()))return;
		Calendar oldValue = getEffDate();
		this.effDate=effDate;
		setProperty("EFF_DATE", effDate, oldValue);
	}
	@Column(name="EST_YEAR",nullable=true,length=4)
	public int getEstYear(){
		return estYear;
	}
	public void setEstYear(int estYear) throws java.sql.SQLException{
		if(isSame(estYear, getEstYear()))return;
		int oldValue = getEstYear();
		this.estYear=estYear;
		setProperty("EST_YEAR", estYear, oldValue);
	}
	@Column(name="ESCALATION_RATE",nullable=true,length=24)
	public double getEscalationRate(){
		return escalationRate;
	}
	public void setEscalationRate(double escalationRate) throws java.sql.SQLException{
		if(isSame(escalationRate, getEscalationRate()))return;
		double oldValue = getEscalationRate();
		this.escalationRate=escalationRate;
		setProperty("ESCALATION_RATE", escalationRate, oldValue);
	}
	@Column(name="PER_UNIT_COST",nullable=true,length=9)
	public int getPerUnitCost(){
		return perUnitCost;
	}
	public void setPerUnitCost(int perUnitCost) throws java.sql.SQLException{
		if(isSame(perUnitCost, getPerUnitCost()))return;
		int oldValue = getPerUnitCost();
		this.perUnitCost=perUnitCost;
		setProperty("PER_UNIT_COST", perUnitCost, oldValue);
	}
	@Column(name="PER_UNIT_COST2",nullable=true,length=24)
	public double getPerUnitCost2(){
		return perUnitCost2;
	}
	public void setPerUnitCost2(double perUnitCost2) throws java.sql.SQLException{
		if(isSame(perUnitCost2, getPerUnitCost2()))return;
		double oldValue = getPerUnitCost2();
		this.perUnitCost2=perUnitCost2;
		setProperty("PER_UNIT_COST2", perUnitCost2, oldValue);
	}
	@Column(name="CONT_FACTOR",nullable=true,length=24)
	public double getContFactor(){
		return contFactor;
	}
	public void setContFactor(double contFactor) throws java.sql.SQLException{
		if(isSame(contFactor, getContFactor()))return;
		double oldValue = getContFactor();
		this.contFactor=contFactor;
		setProperty("CONT_FACTOR", contFactor, oldValue);
	}
	@Column(name="BASE_COST",nullable=true,length=24)
	public double getBaseCost(){
		return baseCost;
	}
	public void setBaseCost(double baseCost) throws java.sql.SQLException{
		if(isSame(baseCost, getBaseCost()))return;
		double oldValue = getBaseCost();
		this.baseCost=baseCost;
		setProperty("BASE_COST", baseCost, oldValue);
	}
	@Column(name="VOLTAGE_KV",nullable=true,length=24)
	public double getVoltageKv(){
		return voltageKv;
	}
	public void setVoltageKv(double voltageKv) throws java.sql.SQLException{
		if(isSame(voltageKv, getVoltageKv()))return;
		double oldValue = getVoltageKv();
		this.voltageKv=voltageKv;
		setProperty("VOLTAGE_KV", voltageKv, oldValue);
	}
	public CostType getCostType()throws java.sql.SQLException{
		if(costType==null)
			costType=CostType.getInstance(getCostTypeId());
		return costType;
	}
	public void setCostType(CostType costType)throws java.sql.SQLException{
		setCostTypeId(costType==null?0:costType.getId());
		this.costType=costType;
	}
	public LookUp getAction()throws java.sql.SQLException{
		if(action==null)
			action=LookUp.getInstance(getActionId());
		return action;
	}
	public void setAction(LookUp action)throws java.sql.SQLException{
		setActionId(action==null?0:action.getId());
		this.action=action;
	}
	public SceElem getSceElem()throws java.sql.SQLException{
		if(sceElem==null)
			sceElem=SceElem.getInstance(getSceElemId());
		return sceElem;
	}
	public void setSceElem(SceElem sceElem)throws java.sql.SQLException{
		setSceElemId(sceElem==null?0:sceElem.getSceElemId());
		this.sceElem=sceElem;
	}
	public ScopeType getScopeType()throws java.sql.SQLException{
		if(scopeType==null)
			scopeType=ScopeType.getInstance(getScopeTypeId());
		return scopeType;
	}
	public void setScopeType(ScopeType scopeType)throws java.sql.SQLException{
		setScopeTypeId(scopeType==null?0:scopeType.getScopeTypeId());
		this.scopeType=scopeType;
	}
	public Collection<ScopeUnitCostYear> getScopeUnitCostYears()throws java.sql.SQLException{
		if(isNewInstance() || scopeUnitCostYears != null){
			if(scopeUnitCostYears == null)
				scopeUnitCostYears = new TreeSet<ScopeUnitCostYear>();
			return scopeUnitCostYears;
		}
		return ScopeUnitCostYear.getNamedCollection("findByScopeUnitCost",getScopeUnitCostId());
	}
	public void addScopeUnitCostYear(ScopeUnitCostYear scopeUnitCostYear)throws java.sql.SQLException{
		scopeUnitCostYear.setScopeUnitCost((ScopeUnitCost)this);
		if(isNewInstance() || scopeUnitCostYears != null)
			getScopeUnitCostYears().add(scopeUnitCostYear);
		else
			scopeUnitCostYear.insert();
	}
	public void removeScopeUnitCostYear(ScopeUnitCostYear scopeUnitCostYear)throws java.sql.SQLException{
		if(isNewInstance() || scopeUnitCostYears != null)
			getScopeUnitCostYears().remove(scopeUnitCostYear);
		else
			scopeUnitCostYear.delete();
	}
	public ScopeUnitCost copy()throws java.sql.SQLException{
		ScopeUnitCost cp = new ScopeUnitCost((ScopeUnitCost)this);
		copyChildrenTo(cp);
		return cp;
	}
	public void copyChildrenTo(ScopeUnitCostDAO cp)throws java.sql.SQLException{
		super.copyChildrenTo(cp);
		for(ScopeUnitCostYear child:getScopeUnitCostYears())
			cp.addScopeUnitCostYear(child.copy());
	}
	public Vector<String> getDifference(ScopeUnitCostDAO o){
		Vector<String> diffs = super.getDifference(o);
		if(!isSame(getScopeUnitCostId(),o.getScopeUnitCostId())) diffs.add("SCOPE_UNIT_COST_ID");
		if(!isSame(getScopeTypeId(),o.getScopeTypeId())) diffs.add("SCOPE_TYPE_ID");
		if(!isSame(getActionId(),o.getActionId())) diffs.add("ACTION_ID");
		if(!isSame(getSceElemId(),o.getSceElemId())) diffs.add("SCE_ELEM_ID");
		if(!isSame(getCostTypeId(),o.getCostTypeId())) diffs.add("COST_TYPE_ID");
		if(!isSame(getEffDate(),o.getEffDate())) diffs.add("EFF_DATE");
		if(!isSame(getEstYear(),o.getEstYear())) diffs.add("EST_YEAR");
		if(!isSame(getEscalationRate(),o.getEscalationRate())) diffs.add("ESCALATION_RATE");
		if(!isSame(getPerUnitCost(),o.getPerUnitCost())) diffs.add("PER_UNIT_COST");
		if(!isSame(getPerUnitCost2(),o.getPerUnitCost2())) diffs.add("PER_UNIT_COST2");
		if(!isSame(getContFactor(),o.getContFactor())) diffs.add("CONT_FACTOR");
		if(!isSame(getBaseCost(),o.getBaseCost())) diffs.add("BASE_COST");
		if(!isSame(getVoltageKv(),o.getVoltageKv())) diffs.add("VOLTAGE_KV");
		return diffs;
	}
	public void insertParents()throws java.sql.SQLException{
		if(scopeType != null && scopeType.isNewInstance())
				scopeType.insert();
	}
	public void insertChildren()throws java.sql.SQLException{
		if(scopeUnitCostYears != null){
			for(ScopeUnitCostYear scopeUnitCostYear:getScopeUnitCostYears())
				scopeUnitCostYear.setScopeUnitCost((ScopeUnitCost)this);
		}
		if(scopeUnitCostYears != null){
			for(ScopeUnitCostYear scopeUnitCostYear:getScopeUnitCostYears())
				if(scopeUnitCostYear.isNewInstance())
					scopeUnitCostYear.insert();
			scopeUnitCostYears = null;
		}
	}
}
