package com.sce.esp;import java.sql.SQLException;import com.sce.esp.jmep.Environment;import com.sce.esp.jmep.Expression;import com.sce.esp.jmep.XExpression;import com.sce.esp.object.ESPTestCase;import com.sce.esp.object.model.Ckt;import com.sce.esp.object.model.CktGrowth;import com.sce.esp.object.model.Department;import com.sce.esp.object.model.GrowthType;import com.sce.esp.util.Calculate;public class TestJMEP extends ESPTestCase {	private Environment env;	//	//  @Before public void initializeEnvironment() {	//      env = new Environment();	//      /* add a unit called 'mm' to the environment */	//        env.addUnit( "mm",	//            new Unit() {	//            public Object apply(Object oValue) {	//              if (oValue instanceof Double)	//                return new Double(0.001*((Double)oValue).doubleValue());	//              if (oValue instanceof Long)	//                  return new Double(0.001*((Long)oValue).longValue());	//              return null;	//            }	//          }	//        );	//	//        /* add a function called 'sin' to the environment */	//        env.addFunction("sin",	//          new Function() {	//            public Object call(Object [] oPars) {	//              if (oPars == null) return null;	//              if (oPars.length != 1) return null;	//              if (oPars[0] instanceof Double || oPars[0] instanceof Integer)	//                return new Double(Math.sin(((Number)oPars[0]).doubleValue()));	//              return null;	//            }	//          }	//        );	//	//        env.addConstant("e",2.71);	//        env.addConstant("pi",3.14);	//        env.addConstant("name","ftt");	//        	//        env.addVariable("x", new Variable() {@Override public Object getValue() { return x; }});	//        env.addVariable("y", new Variable() {@Override public Object getValue() { return y; }});	//        env.addVariable("z", new Variable() {@Override public Object getValue() { return z; }});	//        env.addVariable("p", new Variable() {@Override public Object getValue() { return p; }});	//        env.addVariable("m", new Variable() {@Override public Object getValue() { return m; }});	//        env.addVariable("a", new Variable() {@Override public Object getValue() { return a; }});	//        env.addVariable("b", new Variable() {@Override public Object getValue() { return b; }});	//  }		public void testOneExpressions() throws XExpression { 		try {			Ckt c = Ckt.getInstance(2010, 2034);			System.out.println(c);			GrowthType gt1 = GrowthType.getInstance(2010, GrowthType.BG);			CktGrowth gt=  c.getYear(0, 2012).getCktGrowth(0, gt1);			if(gt!=null){				String ed = gt.getGrowthType().getEquation();				double newG = parseExpression(gt,ed);				System.out.println(Calculate.round(gt.getGrowthBC(),1)+", "+  Calculate.round(newG,1));				assertEquals(Calculate.round(gt.getGrowthBC(),1),  Calculate.round(newG,1));			}		} catch (SQLException e) {			e.printStackTrace();		}	}		public void testOld() throws XExpression { 		try {			Ckt c = Ckt.getInstance(2010, 2034);			GrowthType gt1 = GrowthType.getInstance(2010, GrowthType.BG);			CktGrowth gt=  c.getYear(0, 2012).getCktGrowth(0, gt1);			if(gt!=null){//				String ed = gt.getGrowthType().getEquation();				double oG =gt.getGrowthBC();//				System.out.println(Calculate.round(gt.getGrowthBC(),1)+", "+  Calculate.round(newG,1));//				assertEquals(Calculate.round(gt.getGrowthBC(),1),  Calculate.round(newG,1));			}		} catch (SQLException e) {			e.printStackTrace();		}	}		public void testNew() throws XExpression { 		try {			Ckt c = Ckt.getInstance(2010, 2034);			System.out.println(c);			GrowthType gt1 = GrowthType.getInstance(2010, GrowthType.BG);			CktGrowth gt=  c.getYear(0, 2012).getCktGrowth(0, gt1);			if(gt!=null){				double newG = parseExpression(gt,gt.getGrowthType().getEquation());//				System.out.println(Calculate.round(gt.getGrowthBC(),1)+", "+  Calculate.round(newG,1));//				assertEquals(Calculate.round(gt.getGrowthBC(),1),  Calculate.round(newG,1));			}		} catch (SQLException e) {			e.printStackTrace();		}	}		public void testTneExpressions() throws XExpression { 		try {			for(Ckt c: Department.getInstance(2010).getCkts()){			//System.out.println(c);			GrowthType gt1 = GrowthType.getInstance(2010, GrowthType.BG);			CktGrowth gt=  c.getYear(0, 2012).getCktGrowth(0, gt1);			if(gt!=null){				String ed = gt.getGrowthType().getEquation();				double newG = parseExpression(gt,ed);				System.out.println(Calculate.round(gt.getGrowthBC(),1)+", "+  Calculate.round(newG,1));				//assertEquals(Calculate.round(gt.getGrowthBC(),1),  Calculate.round(newG,1));			}}		} catch (SQLException e) {			e.printStackTrace();		}	}				private double parseExpression(CktGrowth gt, String expression) throws SQLException, XExpression {		if(expression==null)			return 0;		env = new Environment();		env.addConstant("e",Math.E);		env.addConstant("pi",Math.PI);		env.addConstant("name","neemsoft");		double d = 0;		for(int x=1; x<9; x++){			d = gt.getXVal(x);			if(gt.getGrowthType().getXUnit(x) != null && gt.getGrowthType().getXUnit(x).equalsIgnoreCase("KVA"))				d /= 1000;			env.addConstant("x"+x, d);			env.addConstant("x_"+x,d);			if(gt.getGrowthType().getXName(x) != null)				env.addConstant(gt.getGrowthType().getXName(x),d); 		}		Object oo = new Expression(expression,env).evaluate();		return (Double) oo;	}}