/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Hashtable;
import java.util.StringTokenizer;
import java.util.TreeSet;

import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.model.Bank;
import com.sce.esp.object.model.Department;
import com.sce.esp.object.model.Sub;
import com.sce.esp.object.model.User;
import com.sce.esp.object.model.Xfmr;
import com.sce.esp.util.db.PDBConnection;


public class THRSub extends THRObject{
	public static final String PATH_LOC="./data/THR Substation Data.dat";
	private static Hashtable<String,THRSub> subs;
	private String sysCode;
	private TreeSet<THRTrans> transs = new TreeSet<THRTrans>();
	
	public static THRSub getInstance(String subCode) throws IOException{
		if(subCode == null)
			return null;
		if(subs == null)
			refreshSubs();
		return subs.get(subCode);
	}

	private static void refreshSubs() throws IOException {
		if(subs == null)
			subs = new Hashtable<String,THRSub>();
		else
			subs.clear();
		BufferedReader br = new BufferedReader(new FileReader(PATH_LOC));
		br.readLine(); //Ignore Header row
		String line = br.readLine();
		while(line != null){
			THRSub thrSub = new THRSub(line);
			subs.put(thrSub.getSubCode(), thrSub);
			line = br.readLine();
		}
		br.close();
	}
	public THRSub(String data){
		refresh(data);
	}
	public void refresh(String data){
		//System.out.println(data.replace("\t", "|"));
		data = data.replaceAll("\t\t","\t0\t").replaceAll("\t\t","\t0\t");
		//System.out.println(data.replace("\t", "|"));
		StringTokenizer st = new StringTokenizer(data,"\t");
		sysCode = st.nextToken();
		subCode = st.nextToken();
		mvaFactor = Double.parseDouble(st.nextToken());
		highVoltage = Double.parseDouble(st.nextToken());
		lowVoltage = Double.parseDouble(st.nextToken());
		percent = Double.parseDouble(st.nextToken());
		normalMVA  = Double.parseDouble(st.nextToken());
		normalAmps  = Integer.parseInt(st.nextToken());
		mismatchMVA = Double.parseDouble(st.nextToken());
		mismatchAmps  = Integer.parseInt(st.nextToken());
		pllMVA = Double.parseDouble(st.nextToken());
		pllAmps = Integer.parseInt(st.nextToken());
		pllPct = Double.parseDouble(st.nextToken());
		ltEllMVA = Double.parseDouble(st.nextToken());
		ltEllAMPS = Integer.parseInt(st.nextToken());
		ltEllHrs = Double.parseDouble(st.nextToken());
		ltEllPct = Double.parseDouble(st.nextToken());
		stEllMVA = Double.parseDouble(st.nextToken());
		stEllAMPS = Integer.parseInt(st.nextToken());
		stEllHrs = Double.parseDouble(st.nextToken());
		stEllPct = Double.parseDouble(st.nextToken());
		limitingElemDesc = st.nextToken();
		tcaDate = st.nextToken();
		remarks = st.nextToken();
		userId = st.nextToken();
		configCode = st.nextToken();
		dwgDesc = st.nextToken();
		scaDesc = st.nextToken();
	}
	public String getSysCode(){
		return sysCode;
	}
	public String getCode(){
		return getSubCode();
	}
	public static void main(String[] args){
		try {
			int nd=0, m=0, mm=0, nm=0;
			String db = ESPProperties.getInstance().getDevDbUrl();
			String u = "mayfiee";
			String p = "edison";
			EntityManagerHelper.init(db,u,p);
			for(Sub sub:Department.getInstance(2009).getSubs()){
				THRSub thrSub = THRSub.getInstance(sub.getSubCode());
				if(thrSub == null)
					nd++;
					//System.out.println("No Heatrun data for: "+sub);
				else{
					double tNp=0;
					for(Bank bank:sub.getBanks()){
						if(bank.isLseBank())
							for(Xfmr xfmr:bank.getXfmrs())
								tNp += xfmr.getNP();
					}
					if(Sub.isSame(tNp,thrSub.getNormalMVA()))
						m++;
					else{
						System.out.println("Mismatch mva for: "+sub+" "+tNp+" != "+thrSub.getNormalMVA());
						/*if(sub.getNameplate(0) == thrSub.getMismatchMVA())
							mm++;
						else*/
							nm++;
					}
				}
			}
			System.out.println("Match: "+m+"\tMissmatch: "+mm+"\tNo Match:"+nm+"\tNo Data:"+nd);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void addTrans(THRTrans trans){
		transs.add(trans);
	}
	public TreeSet<THRTrans> getTHRTranss() throws IOException{
		if(!THRTrans.isDataRead())
			THRTrans.refreshTranss();
		return transs;
	}
}
