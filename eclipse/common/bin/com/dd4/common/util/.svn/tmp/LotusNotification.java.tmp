/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util;

import java.awt.Component;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

import lotus.domino.Database;
import lotus.domino.DbDirectory;
import lotus.domino.Document;
import lotus.domino.EmbeddedObject;
import lotus.domino.NotesException;
import lotus.domino.NotesFactory;
import lotus.domino.NotesThread;
import lotus.domino.RichTextItem;
import lotus.domino.RichTextStyle;
import lotus.domino.Session;
import lotus.domino.View;

import com.jidesoft.swing.FolderChooser;
import com.sce.esp.dialog.ESPDialog;
import com.sce.esp.dialog.ESPWizard;
import com.sce.esp.log.EspLogger;
import com.sce.esp.object.jpa.EntityManagerHelper;
import com.sce.esp.object.model.Org;
import com.sce.esp.object.model.SceProjRev;
import com.sce.esp.object.model.User;
import com.sce.esp.util.db.PDBConnection;
/**
 * You can call the Domino Objects from a Java program by importing 
 * the lotus.domino package. This class is coded as a service, 
 * a lotus notes email service to be exact. Local calls access run-time 
 * code on the local computer, which means you must have Lotus installed. 
 *
 * The users path location must be set.  Specifically the windows system
 * PATH variable must be updated to include C:\Program Files\Notes (v8.5 Notes).
 * 
 * Additionally, if the user specifies proxy settings in their web browser or
 * java control panel, the following must be added:
 * 
 * *.eix.com, *.sce.eix.com
 * 
 * @author Frank M. Gonzales, Kate Suwannahong
 */
public class LotusNotification extends NotesThread{

	private  static String DOMINO_URL = "iocntdomm07.sce.eix.com:63148";	//TIG's URL
	private static String temp1="TIGTeam", temp2="Edison6";		// new password
	private String epef = "EPEF Notification", retract = "EPEF Retraction";
	private String epef_retractTitle = "";
	private Session	s;
	private static DbDirectory dir;
	private Database db;
	private Document doc;
	
	private static final boolean TEST_LOTUS = true;
	private static final String SUBJECT_TEST = "Test Proxy Settings";
	private static final String SUBJECT_NEWUSER = "ESP NEW USER HAS BEEN INITIATED";
	private static final String SUBJECT_USER_PREF = "ESP USER HAS CHANGED HIS/HER INFORMATION";

//------------------- firstname.lastname@sce.com -----------------------//	
	protected static final String IWP_EW = "ed.a.wong@sce.com";
	protected static final String IWP_CA = "christopher.albia@sce.com";
	protected static final String IWP_JA = "jordan.vonalmen@sce.com";
	protected static final String IWP_OA = "omar.anaya@sce.com";
	protected static final String IWP_HK = "hiro.kuchida@sce.com";
	protected static final String IWP_LK = "lin.kaung@sce.com";
	
	protected static final String TIG_JM = "jerome.marr@sce.com";
	protected static final String TIG_KS = "nuananong.suwannahong@sce.com";
	protected static final String TIG_GM = "agustin.muniz@sce.com";
	protected static final String TIG_FG = "frank.m.gonzales@sce.com";
	protected static final String TIG_RY = "roger.yin@sce.com";
	protected static final String TIG_AM = "andrew.mcnaughton@sce.com";
	protected static final String TIG_EM = "eddie.mayfield@sce.com";
	protected static final String TIG_INBOX = "tigteam@sce.com";
//-------------------------------------------------------------//
	
	protected BugSubmittal bs = null;
	
	public LotusNotification(BugSubmittal bs, Component parent){
		this(bs, parent, null, null, false, false);
	}
	
	public LotusNotification(BugSubmittal bs) {
		this(bs, null, null, null, false, false);
	}
	
	public LotusNotification(SceProjRev sceProjRev, ESPWizard wiz, boolean submit) {
		this(null, null, sceProjRev, wiz, submit, false);
	}
	
	public LotusNotification(BugSubmittal bs, Component parent, SceProjRev sceProjRev, ESPWizard wiz, boolean submit, boolean test) {
		this.bs = bs;
//		this.parent = parent;
		this.epef_retractTitle = wiz==null?"":wiz.getTitle();
	
		if(test==TEST_LOTUS)
			runNotesTest();
		else if(bs!=null && parent!=null){
			runNotesIssueReport();
			if(parent instanceof JFrame)
				((JFrame)parent).dispose();
		}
		else if(bs!=null && parent==null)
			runNotesIssueReport();
		else if(epef_retractTitle.length()>0)
			runNotesEpefRetract(sceProjRev, wiz, submit);
	}
	
//-------------------------------- FOR TESTING ONLY -------------------------------//
	
	public LotusNotification(Component parent, boolean test){
		this(null, parent, null, null, false, test);
	}
	
	public void runNotesTest(){													//for testing only
		try{
			s = NotesFactory.createSession(DOMINO_URL, temp1, temp2);
			dir = s.getDbDirectory(DOMINO_URL);
			db = dir.openMailDatabase();			
			doc = db.createDocument();	
			doc.appendItemValue("Subject", LotusNotification.SUBJECT_TEST);		//set an email's subject
			doc.send(TIG_INBOX);												//set recipient(s)
			
			View view = db.getView("($Inbox)");									//fetch TEST email(s) in inbox then delete
			doc = view.getFirstDocument ();
			while(doc!= null) { 
				EspLogger.debug(this, doc.getItemValueString("Subject"));
				if(doc.getItemValueString("Subject").equals(LotusNotification.SUBJECT_TEST)){
					EspLogger.debug(this, "Remove");
					doc.remove (true);  
					view.refresh ();  
					doc = view.getFirstDocument ();
					continue;
				}
				doc = view.getNextDocument(doc);
			}
		}
		catch (NotesException e){
			e.printStackTrace();
		}	
	}
	
//---------------------------------------------------------------------------------//
	
	public void runNotesEpefRetract(SceProjRev sceProjRev, ESPWizard wiz, final boolean submit){
		try {
			epef_retractTitle = wiz.getTitle();
			String projType;
			if(sceProjRev.getPrevRev(SceProjRev.APPROVED)==null)	projType="Emergent Project";
			else projType = "Emergent Project for Previously Approved Version";
			epef = submit?epef:"FAILED "+epef;
			retract = submit?retract:"FAILED "+retract;
			
			s = NotesFactory.createSession(DOMINO_URL, temp1, temp2);
			dir = s.getDbDirectory(DOMINO_URL);
			db = dir.openMailDatabase();			
			doc = db.createDocument();	
			RichTextItem text = doc.createRichTextItem("Body");
			RichTextStyle header = s.createRichTextStyle();
			header.setBold(RichTextStyle.YES);
			header.setColor(RichTextStyle.COLOR_BLUE);
			header.setEffects(RichTextStyle.EFFECTS_SHADOW);
			doc.appendItemValue("Form", "Memo");
			doc.appendItemValue("Subject", epef_retractTitle.indexOf("Retraction")!=-1?(retract+" - " + sceProjRev.getProjNum()):(epef+" - " + sceProjRev.getProjNum()));
			text.appendText(epef_retractTitle.indexOf("Retraction")!=-1?retract:epef);
			text.appendText("\n\nPIN: " + sceProjRev.getProjNum() +
					"\nVersion No. " + sceProjRev.getRevNo() + 
					"\nProject Type: " + projType +
					"\nSponsor: " + sceProjRev.getSponsor() +
					"\nOrg: " + sceProjRev.getOrg() +
					"\nSubmitted: " + (sceProjRev.getEpefSubmitTs()==null?null:FormatText.USER_DATE.format(sceProjRev.getEpefSubmitTs().getTime())) +
					"\nNeed Date: " + (sceProjRev.getNeedDate()==null?null:FormatText.USER_DATE.format(sceProjRev.getNeedDate().getTime())) +
					"\nTitle: " + sceProjRev.getProjectTitle() +
					"\nEPEF Comments: " + sceProjRev.getEpefComment());
			text.appendStyle(header);
			text.appendText("\nSubmitted By: " + User.getActiveUser());

			if(!(User.getActiveUser().getOrgId()==Org.SPI) && checkDatabase()){
				sendEpef(doc);
//				showDialog("Message", ( submit?"Your request has been sent. ":"Your request is failed. ")+"An email will be generated and sent to Lotus Notes shortly.");
				SwingUtilities.invokeLater(new Runnable(){
					@Override
					public void run() {
						ESPDialog.showMessageDialog(null,( submit?"Your request has been sent. ":"Your request is failed. ")+"An email will be generated and sent to Lotus Notes shortly.");
					}
				});
			}
			EspLogger.debug(this, "-- submit: "+submit);
			if(!checkDatabase()){		// check database if before sending confirmation for EPEF notification{
//				showDialog("Message", (submit?"Your request has been sent.":"Your request is failed.")+"Lotus Notes won't send unless you're in PRODUCTION.");
				SwingUtilities.invokeLater(new Runnable(){
					@Override
					public void run() {
						ESPDialog.showMessageDialog(null,(submit?"Your request has been sent.":"Your request is failed.")+"Lotus Notes won't send unless you're in PRODUCTION.");
					}
				});
		}
		}
		catch (NotesException e){
			e.printStackTrace();
			int n = JOptionPane.showConfirmDialog(null, (submit?"Your request has been sent. ":"Your request is failed. ")+"This message cannot be generated to Lotus Notes at this time. Save this message? "
					,"Message", JOptionPane.YES_NO_OPTION);
			if(n==0)	saveFile();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void runNotesIssueReport(){	
		try{
			s = NotesFactory.createSession(DOMINO_URL, temp1, temp2);
			dir = s.getDbDirectory(DOMINO_URL);
			db = dir.openMailDatabase();			
			doc = db.createDocument();	
			RichTextItem text = doc.createRichTextItem("Body");
			doc.appendItemValue("Form", "Memo");
			doc.appendItemValue("Subject", bs.getSubject());
			for(int i=0; i<bs.getFileList().size();i++)
				text.embedObject(EmbeddedObject.EMBED_ATTACHMENT, null, bs.getFileList().get(i).getPath(), bs.getFileList().get(i).getName());
			text.appendText("\r\n\r\n");
			text.appendText("User:        "+bs.getUser()+"\r\n"); 			// instead of \r\n, use text.addNewLine(2);
			text.appendText("Issue Type:  "+bs.getType()+"\r\n");
			text.appendText("Title:       "+bs.getTitle()+"\r\n");
			text.appendText("User Description:  \r\n     "+bs.getDescription()+"\r\n");				
			if((bs.getOutput()!=null)&&((bs.getType().equals("Report a bug"))))	
				text.appendText("\r\nStacktrace: \r\n"+bs.getOutput());
			send(doc, bs.getTitle());
//------------------------------------- User's copy ----------------------------------			
			Document doc2 = db.createDocument();						
			RichTextItem text2 = doc2.createRichTextItem("Body");
			doc2.appendItemValue("Subject", "ESP Suite Notification received");
			text2.appendText("\r\n\r\nThank you for submitting your request to us.  We will review it and submit it into our tracking system within 48 hours." +
							"\r\nIf you want to see the status of this request, please send us an email at: TIGTeam@sce.com"+
							"\r\n\r\n Thank you."+
							"TIG Team"+
							"\r\n\r\n\r\nThe following information was received.");
			text2.appendText("\r\n\r\n");
			text2.appendText("User:        "+bs.getUser()+"\r\n"); 			// instead of \r\n, use text.addNewLine(2);
			text2.appendText("Issue Type:  "+bs.getType()+"\r\n");
			text2.appendText("Title:       "+bs.getTitle()+"\r\n");
			text2.appendText("User Description:  \r\n     "+bs.getDescription()+"\r\n");				
			if((bs.getOutput()!=null)&&((bs.getType().equals("Report a bug"))))	
				text2.appendText("\r\nStacktrace: \r\n"+bs.getOutput());					
//			doc2.send(User.getActiveUser().getUsername()+"@sce.com");
			doc2.send(User.getActiveUser().getUsername());
			
			SwingUtilities.invokeLater(new Runnable(){
				@Override
				public void run() {
					ESPDialog.showMessageDialog(null, "Thank you. Your log file has been sent.");
				}
			});
			
		}
		catch (NotesException e){
			e.printStackTrace();
			int n = JOptionPane.showConfirmDialog(new JFrame(), "Your message cannot be sent right now. Save this message? ","Message", JOptionPane.YES_NO_OPTION);
			if(n==0)	
				saveFile();
		}	
	}
	
	public boolean checkDatabase() throws SQLException{
//		return PDBConnection.getDbName()=="PRODUCTION";//||PDBConnection.getDbName()=="Development";
		return PDBConnection.getDbName()=="PRODUCTION" ||PDBConnection.getDbName()=="Development";
	}
	
	public void saveFile(){
		String saveText="";
		if(bs!=null)
			if(bs.getType().equals(BugSubmittal.TYPE_BUG))
				saveText = bs.getApp()+"\n"+bs.getType()+"\n"+bs.getDescription()+"\n"+EspLogger.getLogStream();
			else saveText = bs.getApp()+"\n"+bs.getType()+"\n"+bs.getDescription();
		else saveText = epef_retractTitle.indexOf("Retraction")!=-1?retract:epef;
		
		FolderChooser fc = new FolderChooser();								//Use FolderChooser to created save dialog
		int returnVal = fc.showSaveDialog(fc);
		if (returnVal == JFileChooser.APPROVE_OPTION) {
			File file = new File(fc.getSelectedFile().getPath()+"\\error.txt");
			try {
				FileOutputStream fop=new FileOutputStream(fc.getSelectedFile().getPath()+"\\error.txt");
				if(file.exists()){
					fop.write(saveText.getBytes());							//write each message to memory pool
					fop.flush();											//write messages to file
					fop.close();
					JOptionPane.showMessageDialog(new JFrame(), "Your file is saved.","Thank you",1);
				}
		   	} catch (FileNotFoundException e) {								//Check errors
		   		JOptionPane.showMessageDialog(new JFrame(), "Please select a valid folder.","Error",0);
		   	} catch (IOException e) {
		   		e.printStackTrace();
		   	}
		}
	}
	
	/**
	 * Sends lotus note to the listed people below.
	 * 
	 * @param doc document body sent via lotus notes
	 * @throws NotesException
	 */
	private static void send(Document doc, String subject)throws NotesException {
		doc.send(LotusNotification.TIG_AM);		doc.send(LotusNotification.TIG_EM);
		doc.send(LotusNotification.TIG_FG);		doc.send(LotusNotification.TIG_GM);
		doc.send(LotusNotification.TIG_JM);		doc.send(LotusNotification.TIG_RY);
		doc.send(LotusNotification.TIG_INBOX);
		doc.send(LotusNotification.TIG_KS);	
	}
	
	/**
	 * Sends epef submittal to the listed people below.
	 * 
	 * @param doc document body sent via lotus notes
	 * @throws NotesException
	 */
	private static void sendEpef(Document doc)throws NotesException {
		
		doc.send(LotusNotification.IWP_CA);		doc.send(LotusNotification.IWP_EW);
		doc.send(LotusNotification.IWP_HK);		doc.send(LotusNotification.IWP_JA);
		doc.send(LotusNotification.IWP_OA);		doc.send(LotusNotification.IWP_LK);
		
//		doc.send(LotusNotification.TIG_KS);		
//		doc.send(LotusNotification.TIG_AM);
		
	}
	
	/**
	 * Sends new user confirmation to the provided user.
	 * 
	 * @param user - the new user
	 * @throws NotesException
	 */
	public static void sendNewUserNotif(User user){
		try {
			Session s = NotesFactory.createSession(DOMINO_URL, temp1, temp2);
			dir = s.getDbDirectory(DOMINO_URL);
			Database db = dir.openMailDatabase();			
			Document doc = db.createDocument();	
			doc.appendItemValue("Subject", LotusNotification.SUBJECT_NEWUSER);
			RichTextItem text = doc.createRichTextItem("Body");
			text.appendText("New ESP user has been created with the following information.\n\n"); 
			text.appendText("User:\t\t"+user.getFirstName()+"\t"+user.getLastName()+"\n"); 
			text.appendText("Username:\t"+user.getUsername()+"\n");
			text.appendText("Email:\t\t"+user.getEmail()+"\n");
			text.appendText("Org:\t\t"+user.getOrg()+"\n");
			text.appendText("Database:\t"+PDBConnection.getDbName()+"\n");
			doc.send(LotusNotification.TIG_KS);		
			doc.send(LotusNotification.TIG_JM);
			doc.send(LotusNotification.TIG_AM);			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void sendUserPrefNotif(User user){
		try {
			Session s = NotesFactory.createSession(DOMINO_URL, temp1, temp2);
			dir = s.getDbDirectory(DOMINO_URL);
			Database db = dir.openMailDatabase();			
			Document doc = db.createDocument();	
			doc.appendItemValue("Subject", LotusNotification.SUBJECT_USER_PREF);
			RichTextItem text = doc.createRichTextItem("Body");
			text.appendText("An ESP user has modified his/her user details as following.\n\n"); 
			text.appendText("First:\t\t"+user.getFirstName()+"\t\t\tLast:\t\t"+user.getLastName()+"\n"); 
			text.appendText("Email:\t\t"+user.getEmail()+"\t\tRole:\t\t"+user.getUserRole()+"\n");
			text.appendText("Org:\t\t"+user.getOrg()+"\n");
			text.appendText("Database:\t"+PDBConnection.getDbName()+"\n");
			doc.send(LotusNotification.TIG_INBOX);
			doc.send(LotusNotification.TIG_KS);		
			doc.send(LotusNotification.TIG_JM);
			doc.send(LotusNotification.TIG_AM);			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] argu){
		try {
			EntityManagerHelper.init(ESPProperties.getInstance().getDevDbUrl(), "suwannn", "edison");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}