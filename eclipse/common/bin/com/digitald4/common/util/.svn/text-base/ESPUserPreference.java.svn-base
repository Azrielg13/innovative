/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util;

import java.util.HashMap;
import java.util.Map;
import java.util.prefs.Preferences;

import com.sce.esp.prefs.PreferencesOption;


/**
 * @author TIG
 *
 */
public class ESPUserPreference implements PreferencesOption {

	private static final String SAVE_LOC = "/";
	private static ESPUserPreference instance;

	public static final String AUTO_SPELL_CHECK = "AUTO_SPELL_CHECK"; //View misssspelled words	
	
	private static boolean spell_check_filter = true;
	
	private Map<String,Object> valueMap;

	/**
	 * 
	 * @return
	 */
	static synchronized public ESPUserPreference getInstance() {
		if (instance == null) {
			instance = new ESPUserPreference();
		}
		return instance;
	}

	/**
	 * 
	 */
	private ESPUserPreference() {
		valueMap = new HashMap<String,Object>();
		load();
	}

	/**
	 * 
	 */
	public void load() {
		Preferences prefs = Preferences.userRoot().node(SAVE_LOC); 
		valueMap.put(AUTO_SPELL_CHECK,new Boolean(prefs.getBoolean(AUTO_SPELL_CHECK, spell_check_filter)));
	}

	/**
	 * 
	 */
	public void save() {
		java.util.prefs.Preferences prefs = java.util.prefs.Preferences.userRoot().node(SAVE_LOC);
		prefs.putBoolean(AUTO_SPELL_CHECK, ((Boolean)valueMap.get(AUTO_SPELL_CHECK)).booleanValue());
	}

	/**
	 * 
	 * @param key
	 * @param value
	 */
	public void putInt(String key, int value){
		valueMap.put(key, value);
	}

	/**
	 * Gets the string.
	 * 
	 * @param key the key
	 * 
	 * @return the string
	 */
	public String getString(String key) {
		return (String)valueMap.get(key);
	}

	/**
	 * 
	 * @param key
	 * @param value
	 */
	public void putString(String key, String value){
		valueMap.put(key, value);
	}

	/**
	 * Gets the boolean.
	 * 
	 * @param key the key
	 * 
	 * @return the boolean
	 */
	public boolean getBoolean(String key) {
		return ((Boolean)valueMap.get(key)).booleanValue();
	}

	/**
	 * 
	 * @param key
	 * @param value
	 */
	public void putBoolean(String key, boolean value) {
		valueMap.put(key, value);
	}


	/**
	 * 
	 * @param key
	 * @return
	 */
	public int getInt(String key){
		return ((Integer)valueMap.get(key)).intValue();
	}

}