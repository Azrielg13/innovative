/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util;

public abstract class THRObject {
	protected String subCode;
	protected double mvaFactor;
	protected double highVoltage;
	protected double lowVoltage;
	protected double percent;
	protected double normalMVA;
	protected int normalAmps;
	protected double mismatchMVA;
	protected int mismatchAmps;
	protected double pllMVA;
	protected int pllAmps;
	protected double pllPct;
	protected double ltEllMVA;
	protected int ltEllAMPS;
	protected double ltEllHrs;
	protected double ltEllPct;
	protected double stEllMVA;
	protected int stEllAMPS;
	protected double stEllHrs;
	protected double stEllPct;
	protected String limitingElemDesc;
	protected String tcaDate;
	protected String remarks;
	protected String userId;
	protected String configCode;
	protected String dwgDesc;
	protected String scaDesc;
	public String getSubCode(){
		return subCode;
	}
	public double getNormalMVA(){
		return normalMVA;
	}
	public int getNormalAmps(){
		return normalAmps;
	}
	public double getMismatchMVA(){
		return mismatchMVA;
	}
	public double getPllMVA(){
		return pllMVA;
	}
	public int getPllAmps(){
		return pllAmps;
	}
	public double getPllPct(){
		return pllPct;
	}
	public abstract String getCode();
	public String toString(){
		return getCode()+"\t"+getNormalMVA()+"\t"+getPllAmps();
	}
}
