/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util.db.orm;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.Writer;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.Hashtable;
import java.util.TreeSet;

import javax.swing.JOptionPane;

import com.sce.esp.MainApp;
import com.sce.esp.log.EspLogger;
import com.sce.esp.util.ESPProperties;
import com.sce.esp.util.db.PDBConnection;

/**
 * 
 * @author Distribution Staff Engineering
 * @version 2.0
 */
public class AuditTriggerCreator {

	public final static String[] OP_NAMES = new String[]{"INSERTING","UPDATING","DELETING"};

	public static String createAuditTrigger(String table)throws SQLException{
		String trigger = "CREATE OR REPLACE TRIGGER "+table.substring(0,6)+"_T_DUI AFTER INSERT OR UPDATE OR DELETE ON "+table+"\n" 
		+"FOR EACH ROW\n"
		+"BEGIN\n"
		+"\tIF(sys_context('USERENV','CLIENT_IDENTIFIER') IS NULL OR sys_context('USERENV','CLIENT_IDENTIFIER') != 'NON LOGGER') THEN\n";
		DatabaseMetaData dbmd = PDBConnection.getInstance().getConnection().getMetaData();
		ResultSet rs = dbmd.getPrimaryKeys(null,PDBConnection.SCHEMA,table);
		TreeSet<Attribute> atts = new TreeSet<Attribute>();
		while(rs.next()){				
			ResultSet rs2 = dbmd.getColumns(null,PDBConnection.SCHEMA,table,rs.getString("COLUMN_NAME"));
			if(rs2.next())
				atts.add(new Attribute(rs.getInt("KEY_SEQ"),table,rs2.getString("COLUMN_NAME"),rs2.getInt("DATA_TYPE")));
		}
		rs.close();
		String keys="";
		boolean first=true;
		for(Attribute att:atts){
			if(!first)
				keys+="||'-'||";
			keys += att.getProcessCol();
			first = false;
		}
		Hashtable<String,DBKey> fKs = new Hashtable<String,DBKey>();
		rs = dbmd.getCrossReference(null,PDBConnection.SCHEMA,null,null,PDBConnection.SCHEMA,table);
		while(rs.next()){
			if(rs.getString("FK_NAME").endsWith("I")){
				DBKey fK = fKs.get(rs.getString("FK_NAME"));
				if(fK == null){
					fK = new DBKey(rs.getString("FK_NAME"),rs.getString("PKTABLE_NAME"),true);
					fKs.put(fK.getName(),fK);
				}
				fK.addColumn(new Attribute(rs.getInt("KEY_SEQ"),table,rs.getString("FKCOLUMN_NAME"),Types.DECIMAL));
			}
		}
		rs.close();
		if(table.endsWith("SCE_PROJ_ELEM_COST") || table.endsWith("SCOPE_ITEM")){
			DBKey fK = new DBKey("MDIZZZ_FK99I","MDIFAKE_TABLE",true);
			fKs.put(fK.getName(),fK);
			fK.addColumn(new Attribute(1,table,"CO_TYPE_ID",Types.DECIMAL));
			fK.addColumn(new Attribute(1,table,"FACILITY_ID",Types.DECIMAL));
		}
		String fKeys="";
		String fKCols="";
		int c=0;
		for(DBKey fK:new TreeSet<DBKey>(fKs.values())){
			fKeys += ",";
			fKCols += ",INDEX_KEY"+(++c);
			first=true;
			for(Attribute att:fK.getColumns()){
				if(!first)
					fKeys+="||'-'||";
				fKeys += att.getProcessCol();
				first = false;
			}
		}
		for(int op=0; op<OP_NAMES.length; op++){
			trigger += "\t\t";
			if(op > 0)
				trigger += "ELS";
			trigger += "IF "+OP_NAMES[op]+" THEN\n";
			trigger += "\t\t\tINSERT INTO MDI005_AUDIT(transaction_id,trans_timestamp,session_id,table_name,\n"
				+"\t\t\t\trow_key,\n"
				+"\t\t\t\ttrans_type,username,host"+((op==0)?fKCols:"")+")\n"
				+"\t\t\tVALUES(MDI005_SEQ.NEXTVAL,sysdate,TO_NUMBER(sys_context('userenv','sessionid')),'"+table+"',\n";
			trigger += "\t\t\t"+((op<2)?keys:keys.replaceAll(":NEW",":OLD"))+",\n"
			+"\t\t\t\t"+(op+1)+",user,sys_context('userenv','host')"+((op==0)?fKeys:"")+");\n";
		}
		trigger+="\t\tEND IF;\n"
			+"\tEND IF;\n"
			+"END;\n";
		return trigger;
	}
	public static void printFKs(String table)throws SQLException{
		DatabaseMetaData dbmd = PDBConnection.getInstance().getConnection().getMetaData();
		ResultSet rs = dbmd.getCrossReference(null,PDBConnection.SCHEMA,null,null,PDBConnection.SCHEMA,table);
		EspLogger.message(AuditTriggerCreator.class,table);
		while(rs.next())
			EspLogger.message(AuditTriggerCreator.class,"\t"+rs.getString("FK_NAME")+"\t"+rs.getString("PKTABLE_NAME")+"\t"+rs.getString("FKColumn_Name"));
		rs.close();
	}
	public static void printIndexies(String table)throws SQLException{
		DatabaseMetaData dbmd = PDBConnection.getInstance().getConnection().getMetaData();
		EspLogger.message(AuditTriggerCreator.class,table);
		ResultSet rs = dbmd.getIndexInfo(null,PDBConnection.SCHEMA,table,false,false);
		while(rs.next()){
			String indexName = rs.getString("INDEX_NAME");
			if(indexName != null && !indexName.endsWith("PK"))
				EspLogger.message(AuditTriggerCreator.class,"\t"+rs.getString("INDEX_NAME")+"\t"+rs.getString("COLUMN_NAME"));
		}
		rs.close();
	}
	public static void runTables(String pattern)throws SQLException{
		if(pattern == null)
			return;
		DatabaseMetaData dbmd = PDBConnection.getInstance().getConnection().getMetaData();
		ResultSet rs = dbmd.getTables(null,PDBConnection.SCHEMA,pattern,new String[]{"TABLE"});
		while(rs.next()){
			String table = rs.getString("TABLE_NAME");
			Statement st = PDBConnection.getInstance().getConnection().createStatement();
			if(table.charAt(6) == '_' && !table.startsWith("MDI005_")){
				String t = createAuditTrigger(table);
				EspLogger.message(AuditTriggerCreator.class,t+"/\n");
				st.execute(t);
				st.close();
			}
		}
		rs.close();
	}
	public static void main(String[] args){
		try{
			
			PDBConnection.getHiddentInstance(ESPProperties.getInstance().getGusDbUrl(), "MDI", "edison");		
			Writer stream=null;
			try{
				stream = new BufferedWriter(new FileWriter(MainApp.getHomeDirectory() + "obj.log"));
			}
			catch(Exception e){
				e.printStackTrace();
				stream = null;
			}
			EspLogger.setLogWriter(stream);
			EspLogger.init(true,EspLogger.LEVEL.DEBUG);
			
			runTables(JOptionPane.showInputDialog(null,"Enter pattern of tables to create trigger for").toUpperCase());
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
}
