/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.log;

//{{{ Imports
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.border.EmptyBorder;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;

public class LogViewer extends JPanel
{

	/**
	 * 
	 */
	private static final long serialVersionUID = -6687613778164601482L;
	//{{{ Private members
	private JList list;
	private JButton copy, save, send;
	private JCheckBox tail;
	private boolean tailIsOn;
	private JScrollPane pane;
	//}}}
	//{{{ LogViewer constructor
	public LogViewer()
	{
		super(new BorderLayout());


		JPanel caption = new JPanel();		
		caption.setLayout(new BoxLayout(caption,BoxLayout.X_AXIS));
		caption.setBorder(new EmptyBorder(6,6,6,6));
		JLabel label = new JLabel("ESP Suite Log");
		caption.add(label);
		caption.add(Box.createHorizontalGlue());

//		tailIsOn = false;
//		tail = new JCheckBox("Show Tail",tailIsOn);
//		tail.addActionListener(new ActionHandler());
//		caption.add(tail);
//
//		caption.add(Box.createHorizontalStrut(12));
//
//		copy = new JButton("Copy");
//		copy.addActionListener(new ActionHandler());
//		caption.add(copy);
		
		send = new JButton("Send");
		send.addActionListener(new ActionHandler());
		caption.add(send);		
		
		save = new JButton("Save");
		save.addActionListener(new ActionHandler());
		caption.add(save);		

		ListModel model = EspLogger.getLogListModel();
		model.addListDataListener(new ListHandler());
		list = new LogList(model);
		list.setVisibleRowCount(24);
//		list.setFont(jEdit.getFontProperty("view.font"));

		add(BorderLayout.NORTH,caption);
		JScrollPane scroller = new JScrollPane(list);
		Dimension dim = scroller.getPreferredSize();
		dim.width = Math.min(600,dim.width);
		scroller.setPreferredSize(dim);
		add(BorderLayout.CENTER,scroller);
	} //}}}
	public LogViewer(JScrollPane scrollpane)
	{

		ListModel model = EspLogger.getLogListModel();
		model.addListDataListener(new ListHandler());
		list = new LogList(model);
		list.setVisibleRowCount(24);

		
	}

	//{{{ addNotify() method
	public void addNotify()
	{
		super.addNotify();
		if(tailIsOn)
		{
			int index = list.getModel().getSize() - 1;
			list.ensureIndexIsVisible(index);
		}
	} //}}}

/////////////////////////////////////////////
	
	
	
	
/////////////////////////////////////////////	

	//{{{ ActionHandler class
	class ActionHandler implements ActionListener, ClipboardOwner
	{
		/**
		* Empty implementation of the ClipboardOwner interface.
		*/
		public void lostOwnership( Clipboard aClipboard, Transferable aContents) {
		//do nothing
		}
		public void actionPerformed(ActionEvent e)
		{
			Object src = e.getSource();
//			if(src == tail)
//			{
//				tailIsOn = !tailIsOn;
////				jEdit.setBooleanProperty("log-viewer.tail",tailIsOn);
//				if(tailIsOn)
//				{
//					int index = list.getModel().getSize();
//					if(index != 0)
//					{
//						list.ensureIndexIsVisible(index - 1);
//					}
//				}
//			}
//			else if(src == copy)
//			{
//				Object[] selected = list.getSelectedValues();
//				StringBuffer buf = new StringBuffer();
//				for(int i = 0; i < selected.length; i++)
//				{
//					buf.append(selected[i]);
//					buf.append('\n');
//				}
//				StringSelection stringSelection = new StringSelection( buf.toString() );	
//				Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
//				clipboard.setContents( stringSelection, this );				
//			}
//////////////////			
			if(src == save)				EspLogger.makeLogFile();					
			else if(src == send)
			{
				System.out.println("Sent to Lotus Note!!!!!!");
//				Log.makeSendLogFile();	
				Component frame = null;
				JOptionPane.showMessageDialog(frame , "Thank you. Your log file has been sent!");								
			}
//////////////////			
		}
	} //}}}

	//{{{ ListHandler class
	class ListHandler implements ListDataListener
	{
		public void intervalAdded(ListDataEvent e)
		{
			contentsChanged(e);
		}

		public void intervalRemoved(ListDataEvent e)
		{
			contentsChanged(e);
		}

		public void contentsChanged(ListDataEvent e)
		{
			if(tailIsOn)
			{
				SwingUtilities.invokeLater(new Runnable()
				{
					public void run()
					{
						int index = list.getModel().getSize() - 1;
						list.ensureIndexIsVisible(index);
					}
				});
			}
		}
	} //}}}

	//{{{ LogList class
	class LogList extends JList
	{
		/**
		 * 
		 */
		private static final long serialVersionUID = 3370980781909472336L;

		LogList(ListModel model)
		{
			super(model);
		}

		public void processMouseMotionEvent(MouseEvent evt)
		{
			if(evt.getID() == MouseEvent.MOUSE_DRAGGED)
			{
				int row = list.locationToIndex(evt.getPoint());
				if(row != -1)
				{
					list.addSelectionInterval(row,row);
					evt.consume();
				}
			}
			else
				super.processMouseMotionEvent(evt);
		}
	} //}}}
}
