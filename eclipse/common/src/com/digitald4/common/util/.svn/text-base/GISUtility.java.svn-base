/*
 * Copyright (c) 2002-2010 ESP Suite. All Rights Reserved.
 *
 *     
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR 
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 * 
 * Authors: Technology Integration Group, SCE
 * Developers: Eddie Mayfield, Frank Gonzales, Augustin Muniz,
 * Kate Suwan, Hiro Kushida, Andrew McNaughton, Brian Stonerock,
 * Russell Ragsdale, Patrick Ridge, Everett Aragon.
 * 
 */
package com.sce.esp.util;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Hashtable;
import java.util.StringTokenizer;

import com.sce.esp.object.model.GISCoordinate;
import com.sce.esp.util.db.PDBConnection;

public class GISUtility {

	private static Hashtable<String,GISCoordinate> hash = new Hashtable<String,GISCoordinate>();
	
	public static void main (String... args){
		try {
			System.out.println(getLatLongFromAddress("7390 Periwinkle Dr, Fontana, CA. 92336"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static GISCoordinate getLatLongFromAddress(String address) throws Exception{
		
		if(address==null)
			return null;
		if(address.equals(""))
			return null;
		if(hash!=null && !hash.containsKey(address)){
			GISCoordinate ll = null;
			PDBConnection.enableProxy();
			
			HttpURLConnection connection = (HttpURLConnection)(new URL("http://rpc.geocoder.us/service/csv?").openConnection());
			connection.setRequestMethod("POST");
			connection.setDoOutput(true);
			OutputStreamWriter outStream = new OutputStreamWriter(new BufferedOutputStream(connection.getOutputStream()));
			outStream.write("address="+address.replaceAll(" ", "+"));
			outStream.close();
	
			if(connection.getResponseCode() == HttpURLConnection.HTTP_OK){
				BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
				String line = reader.readLine();
				if(line != null && line.contains(",")){
					StringTokenizer st = new StringTokenizer(line,",");
					ll = new GISCoordinate(Double.parseDouble(st.nextToken()), Double.parseDouble(st.nextToken()));
				}
			}
			connection.disconnect();
			//Disable the proxy
			PDBConnection.disableProxy();
			//Catalina Lat / Long for mapping, move to map code!
			if(ll == null)
				return null;
			hash.put(address, ll);
		}
		return hash.get(address);
	}
}